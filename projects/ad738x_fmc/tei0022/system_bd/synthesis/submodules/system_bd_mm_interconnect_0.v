// system_bd_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_bd_mm_interconnect_0 (
		output wire [15:0] axi_hdmi_tx_0_s_axi_awaddr,                                            //                                             axi_hdmi_tx_0_s_axi.awaddr
		output wire [2:0]  axi_hdmi_tx_0_s_axi_awprot,                                            //                                                                .awprot
		output wire        axi_hdmi_tx_0_s_axi_awvalid,                                           //                                                                .awvalid
		input  wire        axi_hdmi_tx_0_s_axi_awready,                                           //                                                                .awready
		output wire [31:0] axi_hdmi_tx_0_s_axi_wdata,                                             //                                                                .wdata
		output wire [3:0]  axi_hdmi_tx_0_s_axi_wstrb,                                             //                                                                .wstrb
		output wire        axi_hdmi_tx_0_s_axi_wvalid,                                            //                                                                .wvalid
		input  wire        axi_hdmi_tx_0_s_axi_wready,                                            //                                                                .wready
		input  wire [1:0]  axi_hdmi_tx_0_s_axi_bresp,                                             //                                                                .bresp
		input  wire        axi_hdmi_tx_0_s_axi_bvalid,                                            //                                                                .bvalid
		output wire        axi_hdmi_tx_0_s_axi_bready,                                            //                                                                .bready
		output wire [15:0] axi_hdmi_tx_0_s_axi_araddr,                                            //                                                                .araddr
		output wire [2:0]  axi_hdmi_tx_0_s_axi_arprot,                                            //                                                                .arprot
		output wire        axi_hdmi_tx_0_s_axi_arvalid,                                           //                                                                .arvalid
		input  wire        axi_hdmi_tx_0_s_axi_arready,                                           //                                                                .arready
		input  wire [31:0] axi_hdmi_tx_0_s_axi_rdata,                                             //                                                                .rdata
		input  wire [1:0]  axi_hdmi_tx_0_s_axi_rresp,                                             //                                                                .rresp
		input  wire        axi_hdmi_tx_0_s_axi_rvalid,                                            //                                                                .rvalid
		output wire        axi_hdmi_tx_0_s_axi_rready,                                            //                                                                .rready
		output wire [15:0] axi_spi_engine_0_s_axi_awaddr,                                         //                                          axi_spi_engine_0_s_axi.awaddr
		output wire [2:0]  axi_spi_engine_0_s_axi_awprot,                                         //                                                                .awprot
		output wire        axi_spi_engine_0_s_axi_awvalid,                                        //                                                                .awvalid
		input  wire        axi_spi_engine_0_s_axi_awready,                                        //                                                                .awready
		output wire [31:0] axi_spi_engine_0_s_axi_wdata,                                          //                                                                .wdata
		output wire [3:0]  axi_spi_engine_0_s_axi_wstrb,                                          //                                                                .wstrb
		output wire        axi_spi_engine_0_s_axi_wvalid,                                         //                                                                .wvalid
		input  wire        axi_spi_engine_0_s_axi_wready,                                         //                                                                .wready
		input  wire [1:0]  axi_spi_engine_0_s_axi_bresp,                                          //                                                                .bresp
		input  wire        axi_spi_engine_0_s_axi_bvalid,                                         //                                                                .bvalid
		output wire        axi_spi_engine_0_s_axi_bready,                                         //                                                                .bready
		output wire [15:0] axi_spi_engine_0_s_axi_araddr,                                         //                                                                .araddr
		output wire [2:0]  axi_spi_engine_0_s_axi_arprot,                                         //                                                                .arprot
		output wire        axi_spi_engine_0_s_axi_arvalid,                                        //                                                                .arvalid
		input  wire        axi_spi_engine_0_s_axi_arready,                                        //                                                                .arready
		input  wire [31:0] axi_spi_engine_0_s_axi_rdata,                                          //                                                                .rdata
		input  wire [1:0]  axi_spi_engine_0_s_axi_rresp,                                          //                                                                .rresp
		input  wire        axi_spi_engine_0_s_axi_rvalid,                                         //                                                                .rvalid
		output wire        axi_spi_engine_0_s_axi_rready,                                         //                                                                .rready
		output wire [10:0] hdmi_dmac_0_s_axi_awaddr,                                              //                                               hdmi_dmac_0_s_axi.awaddr
		output wire [2:0]  hdmi_dmac_0_s_axi_awprot,                                              //                                                                .awprot
		output wire        hdmi_dmac_0_s_axi_awvalid,                                             //                                                                .awvalid
		input  wire        hdmi_dmac_0_s_axi_awready,                                             //                                                                .awready
		output wire [31:0] hdmi_dmac_0_s_axi_wdata,                                               //                                                                .wdata
		output wire [3:0]  hdmi_dmac_0_s_axi_wstrb,                                               //                                                                .wstrb
		output wire        hdmi_dmac_0_s_axi_wvalid,                                              //                                                                .wvalid
		input  wire        hdmi_dmac_0_s_axi_wready,                                              //                                                                .wready
		input  wire [1:0]  hdmi_dmac_0_s_axi_bresp,                                               //                                                                .bresp
		input  wire        hdmi_dmac_0_s_axi_bvalid,                                              //                                                                .bvalid
		output wire        hdmi_dmac_0_s_axi_bready,                                              //                                                                .bready
		output wire [10:0] hdmi_dmac_0_s_axi_araddr,                                              //                                                                .araddr
		output wire [2:0]  hdmi_dmac_0_s_axi_arprot,                                              //                                                                .arprot
		output wire        hdmi_dmac_0_s_axi_arvalid,                                             //                                                                .arvalid
		input  wire        hdmi_dmac_0_s_axi_arready,                                             //                                                                .arready
		input  wire [31:0] hdmi_dmac_0_s_axi_rdata,                                               //                                                                .rdata
		input  wire [1:0]  hdmi_dmac_0_s_axi_rresp,                                               //                                                                .rresp
		input  wire        hdmi_dmac_0_s_axi_rvalid,                                              //                                                                .rvalid
		output wire        hdmi_dmac_0_s_axi_rready,                                              //                                                                .rready
		output wire [10:0] spi_dmac_0_s_axi_awaddr,                                               //                                                spi_dmac_0_s_axi.awaddr
		output wire [2:0]  spi_dmac_0_s_axi_awprot,                                               //                                                                .awprot
		output wire        spi_dmac_0_s_axi_awvalid,                                              //                                                                .awvalid
		input  wire        spi_dmac_0_s_axi_awready,                                              //                                                                .awready
		output wire [31:0] spi_dmac_0_s_axi_wdata,                                                //                                                                .wdata
		output wire [3:0]  spi_dmac_0_s_axi_wstrb,                                                //                                                                .wstrb
		output wire        spi_dmac_0_s_axi_wvalid,                                               //                                                                .wvalid
		input  wire        spi_dmac_0_s_axi_wready,                                               //                                                                .wready
		input  wire [1:0]  spi_dmac_0_s_axi_bresp,                                                //                                                                .bresp
		input  wire        spi_dmac_0_s_axi_bvalid,                                               //                                                                .bvalid
		output wire        spi_dmac_0_s_axi_bready,                                               //                                                                .bready
		output wire [10:0] spi_dmac_0_s_axi_araddr,                                               //                                                                .araddr
		output wire [2:0]  spi_dmac_0_s_axi_arprot,                                               //                                                                .arprot
		output wire        spi_dmac_0_s_axi_arvalid,                                              //                                                                .arvalid
		input  wire        spi_dmac_0_s_axi_arready,                                              //                                                                .arready
		input  wire [31:0] spi_dmac_0_s_axi_rdata,                                                //                                                                .rdata
		input  wire [1:0]  spi_dmac_0_s_axi_rresp,                                                //                                                                .rresp
		input  wire        spi_dmac_0_s_axi_rvalid,                                               //                                                                .rvalid
		output wire        spi_dmac_0_s_axi_rready,                                               //                                                                .rready
		input  wire [11:0] sys_hps_h2f_lw_axi_master_awid,                                        //                                       sys_hps_h2f_lw_axi_master.awid
		input  wire [20:0] sys_hps_h2f_lw_axi_master_awaddr,                                      //                                                                .awaddr
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_awlen,                                       //                                                                .awlen
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_awsize,                                      //                                                                .awsize
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_awburst,                                     //                                                                .awburst
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_awlock,                                      //                                                                .awlock
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_awcache,                                     //                                                                .awcache
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_awprot,                                      //                                                                .awprot
		input  wire        sys_hps_h2f_lw_axi_master_awvalid,                                     //                                                                .awvalid
		output wire        sys_hps_h2f_lw_axi_master_awready,                                     //                                                                .awready
		input  wire [11:0] sys_hps_h2f_lw_axi_master_wid,                                         //                                                                .wid
		input  wire [31:0] sys_hps_h2f_lw_axi_master_wdata,                                       //                                                                .wdata
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_wstrb,                                       //                                                                .wstrb
		input  wire        sys_hps_h2f_lw_axi_master_wlast,                                       //                                                                .wlast
		input  wire        sys_hps_h2f_lw_axi_master_wvalid,                                      //                                                                .wvalid
		output wire        sys_hps_h2f_lw_axi_master_wready,                                      //                                                                .wready
		output wire [11:0] sys_hps_h2f_lw_axi_master_bid,                                         //                                                                .bid
		output wire [1:0]  sys_hps_h2f_lw_axi_master_bresp,                                       //                                                                .bresp
		output wire        sys_hps_h2f_lw_axi_master_bvalid,                                      //                                                                .bvalid
		input  wire        sys_hps_h2f_lw_axi_master_bready,                                      //                                                                .bready
		input  wire [11:0] sys_hps_h2f_lw_axi_master_arid,                                        //                                                                .arid
		input  wire [20:0] sys_hps_h2f_lw_axi_master_araddr,                                      //                                                                .araddr
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_arlen,                                       //                                                                .arlen
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_arsize,                                      //                                                                .arsize
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_arburst,                                     //                                                                .arburst
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_arlock,                                      //                                                                .arlock
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_arcache,                                     //                                                                .arcache
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_arprot,                                      //                                                                .arprot
		input  wire        sys_hps_h2f_lw_axi_master_arvalid,                                     //                                                                .arvalid
		output wire        sys_hps_h2f_lw_axi_master_arready,                                     //                                                                .arready
		output wire [11:0] sys_hps_h2f_lw_axi_master_rid,                                         //                                                                .rid
		output wire [31:0] sys_hps_h2f_lw_axi_master_rdata,                                       //                                                                .rdata
		output wire [1:0]  sys_hps_h2f_lw_axi_master_rresp,                                       //                                                                .rresp
		output wire        sys_hps_h2f_lw_axi_master_rlast,                                       //                                                                .rlast
		output wire        sys_hps_h2f_lw_axi_master_rvalid,                                      //                                                                .rvalid
		input  wire        sys_hps_h2f_lw_axi_master_rready,                                      //                                                                .rready
		input  wire        sys_hps_h2f_user1_clock_clk,                                           //                                         sys_hps_h2f_user1_clock.clk
		input  wire        sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        sys_id_reset_reset_bridge_in_reset_reset,                              //                              sys_id_reset_reset_bridge_in_reset.reset
		output wire [1:0]  sys_gpio_bd_s1_address,                                                //                                                  sys_gpio_bd_s1.address
		output wire        sys_gpio_bd_s1_write,                                                  //                                                                .write
		input  wire [31:0] sys_gpio_bd_s1_readdata,                                               //                                                                .readdata
		output wire [31:0] sys_gpio_bd_s1_writedata,                                              //                                                                .writedata
		output wire        sys_gpio_bd_s1_chipselect,                                             //                                                                .chipselect
		output wire [1:0]  sys_gpio_in_s1_address,                                                //                                                  sys_gpio_in_s1.address
		output wire        sys_gpio_in_s1_write,                                                  //                                                                .write
		input  wire [31:0] sys_gpio_in_s1_readdata,                                               //                                                                .readdata
		output wire [31:0] sys_gpio_in_s1_writedata,                                              //                                                                .writedata
		output wire        sys_gpio_in_s1_chipselect,                                             //                                                                .chipselect
		output wire [1:0]  sys_gpio_out_s1_address,                                               //                                                 sys_gpio_out_s1.address
		output wire        sys_gpio_out_s1_write,                                                 //                                                                .write
		input  wire [31:0] sys_gpio_out_s1_readdata,                                              //                                                                .readdata
		output wire [31:0] sys_gpio_out_s1_writedata,                                             //                                                                .writedata
		output wire        sys_gpio_out_s1_chipselect,                                            //                                                                .chipselect
		output wire [0:0]  sys_id_control_slave_address,                                          //                                            sys_id_control_slave.address
		input  wire [31:0] sys_id_control_slave_readdata                                          //                                                                .readdata
	);

	wire   [31:0] sys_id_control_slave_agent_m0_readdata;                        // sys_id_control_slave_translator:uav_readdata -> sys_id_control_slave_agent:m0_readdata
	wire          sys_id_control_slave_agent_m0_waitrequest;                     // sys_id_control_slave_translator:uav_waitrequest -> sys_id_control_slave_agent:m0_waitrequest
	wire          sys_id_control_slave_agent_m0_debugaccess;                     // sys_id_control_slave_agent:m0_debugaccess -> sys_id_control_slave_translator:uav_debugaccess
	wire   [20:0] sys_id_control_slave_agent_m0_address;                         // sys_id_control_slave_agent:m0_address -> sys_id_control_slave_translator:uav_address
	wire    [3:0] sys_id_control_slave_agent_m0_byteenable;                      // sys_id_control_slave_agent:m0_byteenable -> sys_id_control_slave_translator:uav_byteenable
	wire          sys_id_control_slave_agent_m0_read;                            // sys_id_control_slave_agent:m0_read -> sys_id_control_slave_translator:uav_read
	wire          sys_id_control_slave_agent_m0_readdatavalid;                   // sys_id_control_slave_translator:uav_readdatavalid -> sys_id_control_slave_agent:m0_readdatavalid
	wire          sys_id_control_slave_agent_m0_lock;                            // sys_id_control_slave_agent:m0_lock -> sys_id_control_slave_translator:uav_lock
	wire   [31:0] sys_id_control_slave_agent_m0_writedata;                       // sys_id_control_slave_agent:m0_writedata -> sys_id_control_slave_translator:uav_writedata
	wire          sys_id_control_slave_agent_m0_write;                           // sys_id_control_slave_agent:m0_write -> sys_id_control_slave_translator:uav_write
	wire    [2:0] sys_id_control_slave_agent_m0_burstcount;                      // sys_id_control_slave_agent:m0_burstcount -> sys_id_control_slave_translator:uav_burstcount
	wire          sys_id_control_slave_agent_rf_source_valid;                    // sys_id_control_slave_agent:rf_source_valid -> sys_id_control_slave_agent_rsp_fifo:in_valid
	wire  [116:0] sys_id_control_slave_agent_rf_source_data;                     // sys_id_control_slave_agent:rf_source_data -> sys_id_control_slave_agent_rsp_fifo:in_data
	wire          sys_id_control_slave_agent_rf_source_ready;                    // sys_id_control_slave_agent_rsp_fifo:in_ready -> sys_id_control_slave_agent:rf_source_ready
	wire          sys_id_control_slave_agent_rf_source_startofpacket;            // sys_id_control_slave_agent:rf_source_startofpacket -> sys_id_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sys_id_control_slave_agent_rf_source_endofpacket;              // sys_id_control_slave_agent:rf_source_endofpacket -> sys_id_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sys_id_control_slave_agent_rsp_fifo_out_valid;                 // sys_id_control_slave_agent_rsp_fifo:out_valid -> sys_id_control_slave_agent:rf_sink_valid
	wire  [116:0] sys_id_control_slave_agent_rsp_fifo_out_data;                  // sys_id_control_slave_agent_rsp_fifo:out_data -> sys_id_control_slave_agent:rf_sink_data
	wire          sys_id_control_slave_agent_rsp_fifo_out_ready;                 // sys_id_control_slave_agent:rf_sink_ready -> sys_id_control_slave_agent_rsp_fifo:out_ready
	wire          sys_id_control_slave_agent_rsp_fifo_out_startofpacket;         // sys_id_control_slave_agent_rsp_fifo:out_startofpacket -> sys_id_control_slave_agent:rf_sink_startofpacket
	wire          sys_id_control_slave_agent_rsp_fifo_out_endofpacket;           // sys_id_control_slave_agent_rsp_fifo:out_endofpacket -> sys_id_control_slave_agent:rf_sink_endofpacket
	wire          sys_id_control_slave_agent_rdata_fifo_src_valid;               // sys_id_control_slave_agent:rdata_fifo_src_valid -> sys_id_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sys_id_control_slave_agent_rdata_fifo_src_data;                // sys_id_control_slave_agent:rdata_fifo_src_data -> sys_id_control_slave_agent_rdata_fifo:in_data
	wire          sys_id_control_slave_agent_rdata_fifo_src_ready;               // sys_id_control_slave_agent_rdata_fifo:in_ready -> sys_id_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sys_gpio_bd_s1_agent_m0_readdata;                              // sys_gpio_bd_s1_translator:uav_readdata -> sys_gpio_bd_s1_agent:m0_readdata
	wire          sys_gpio_bd_s1_agent_m0_waitrequest;                           // sys_gpio_bd_s1_translator:uav_waitrequest -> sys_gpio_bd_s1_agent:m0_waitrequest
	wire          sys_gpio_bd_s1_agent_m0_debugaccess;                           // sys_gpio_bd_s1_agent:m0_debugaccess -> sys_gpio_bd_s1_translator:uav_debugaccess
	wire   [20:0] sys_gpio_bd_s1_agent_m0_address;                               // sys_gpio_bd_s1_agent:m0_address -> sys_gpio_bd_s1_translator:uav_address
	wire    [3:0] sys_gpio_bd_s1_agent_m0_byteenable;                            // sys_gpio_bd_s1_agent:m0_byteenable -> sys_gpio_bd_s1_translator:uav_byteenable
	wire          sys_gpio_bd_s1_agent_m0_read;                                  // sys_gpio_bd_s1_agent:m0_read -> sys_gpio_bd_s1_translator:uav_read
	wire          sys_gpio_bd_s1_agent_m0_readdatavalid;                         // sys_gpio_bd_s1_translator:uav_readdatavalid -> sys_gpio_bd_s1_agent:m0_readdatavalid
	wire          sys_gpio_bd_s1_agent_m0_lock;                                  // sys_gpio_bd_s1_agent:m0_lock -> sys_gpio_bd_s1_translator:uav_lock
	wire   [31:0] sys_gpio_bd_s1_agent_m0_writedata;                             // sys_gpio_bd_s1_agent:m0_writedata -> sys_gpio_bd_s1_translator:uav_writedata
	wire          sys_gpio_bd_s1_agent_m0_write;                                 // sys_gpio_bd_s1_agent:m0_write -> sys_gpio_bd_s1_translator:uav_write
	wire    [2:0] sys_gpio_bd_s1_agent_m0_burstcount;                            // sys_gpio_bd_s1_agent:m0_burstcount -> sys_gpio_bd_s1_translator:uav_burstcount
	wire          sys_gpio_bd_s1_agent_rf_source_valid;                          // sys_gpio_bd_s1_agent:rf_source_valid -> sys_gpio_bd_s1_agent_rsp_fifo:in_valid
	wire  [116:0] sys_gpio_bd_s1_agent_rf_source_data;                           // sys_gpio_bd_s1_agent:rf_source_data -> sys_gpio_bd_s1_agent_rsp_fifo:in_data
	wire          sys_gpio_bd_s1_agent_rf_source_ready;                          // sys_gpio_bd_s1_agent_rsp_fifo:in_ready -> sys_gpio_bd_s1_agent:rf_source_ready
	wire          sys_gpio_bd_s1_agent_rf_source_startofpacket;                  // sys_gpio_bd_s1_agent:rf_source_startofpacket -> sys_gpio_bd_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_gpio_bd_s1_agent_rf_source_endofpacket;                    // sys_gpio_bd_s1_agent:rf_source_endofpacket -> sys_gpio_bd_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_valid;                       // sys_gpio_bd_s1_agent_rsp_fifo:out_valid -> sys_gpio_bd_s1_agent:rf_sink_valid
	wire  [116:0] sys_gpio_bd_s1_agent_rsp_fifo_out_data;                        // sys_gpio_bd_s1_agent_rsp_fifo:out_data -> sys_gpio_bd_s1_agent:rf_sink_data
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_ready;                       // sys_gpio_bd_s1_agent:rf_sink_ready -> sys_gpio_bd_s1_agent_rsp_fifo:out_ready
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_startofpacket;               // sys_gpio_bd_s1_agent_rsp_fifo:out_startofpacket -> sys_gpio_bd_s1_agent:rf_sink_startofpacket
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_endofpacket;                 // sys_gpio_bd_s1_agent_rsp_fifo:out_endofpacket -> sys_gpio_bd_s1_agent:rf_sink_endofpacket
	wire          sys_gpio_bd_s1_agent_rdata_fifo_src_valid;                     // sys_gpio_bd_s1_agent:rdata_fifo_src_valid -> sys_gpio_bd_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sys_gpio_bd_s1_agent_rdata_fifo_src_data;                      // sys_gpio_bd_s1_agent:rdata_fifo_src_data -> sys_gpio_bd_s1_agent_rdata_fifo:in_data
	wire          sys_gpio_bd_s1_agent_rdata_fifo_src_ready;                     // sys_gpio_bd_s1_agent_rdata_fifo:in_ready -> sys_gpio_bd_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_gpio_in_s1_agent_m0_readdata;                              // sys_gpio_in_s1_translator:uav_readdata -> sys_gpio_in_s1_agent:m0_readdata
	wire          sys_gpio_in_s1_agent_m0_waitrequest;                           // sys_gpio_in_s1_translator:uav_waitrequest -> sys_gpio_in_s1_agent:m0_waitrequest
	wire          sys_gpio_in_s1_agent_m0_debugaccess;                           // sys_gpio_in_s1_agent:m0_debugaccess -> sys_gpio_in_s1_translator:uav_debugaccess
	wire   [20:0] sys_gpio_in_s1_agent_m0_address;                               // sys_gpio_in_s1_agent:m0_address -> sys_gpio_in_s1_translator:uav_address
	wire    [3:0] sys_gpio_in_s1_agent_m0_byteenable;                            // sys_gpio_in_s1_agent:m0_byteenable -> sys_gpio_in_s1_translator:uav_byteenable
	wire          sys_gpio_in_s1_agent_m0_read;                                  // sys_gpio_in_s1_agent:m0_read -> sys_gpio_in_s1_translator:uav_read
	wire          sys_gpio_in_s1_agent_m0_readdatavalid;                         // sys_gpio_in_s1_translator:uav_readdatavalid -> sys_gpio_in_s1_agent:m0_readdatavalid
	wire          sys_gpio_in_s1_agent_m0_lock;                                  // sys_gpio_in_s1_agent:m0_lock -> sys_gpio_in_s1_translator:uav_lock
	wire   [31:0] sys_gpio_in_s1_agent_m0_writedata;                             // sys_gpio_in_s1_agent:m0_writedata -> sys_gpio_in_s1_translator:uav_writedata
	wire          sys_gpio_in_s1_agent_m0_write;                                 // sys_gpio_in_s1_agent:m0_write -> sys_gpio_in_s1_translator:uav_write
	wire    [2:0] sys_gpio_in_s1_agent_m0_burstcount;                            // sys_gpio_in_s1_agent:m0_burstcount -> sys_gpio_in_s1_translator:uav_burstcount
	wire          sys_gpio_in_s1_agent_rf_source_valid;                          // sys_gpio_in_s1_agent:rf_source_valid -> sys_gpio_in_s1_agent_rsp_fifo:in_valid
	wire  [116:0] sys_gpio_in_s1_agent_rf_source_data;                           // sys_gpio_in_s1_agent:rf_source_data -> sys_gpio_in_s1_agent_rsp_fifo:in_data
	wire          sys_gpio_in_s1_agent_rf_source_ready;                          // sys_gpio_in_s1_agent_rsp_fifo:in_ready -> sys_gpio_in_s1_agent:rf_source_ready
	wire          sys_gpio_in_s1_agent_rf_source_startofpacket;                  // sys_gpio_in_s1_agent:rf_source_startofpacket -> sys_gpio_in_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_gpio_in_s1_agent_rf_source_endofpacket;                    // sys_gpio_in_s1_agent:rf_source_endofpacket -> sys_gpio_in_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_valid;                       // sys_gpio_in_s1_agent_rsp_fifo:out_valid -> sys_gpio_in_s1_agent:rf_sink_valid
	wire  [116:0] sys_gpio_in_s1_agent_rsp_fifo_out_data;                        // sys_gpio_in_s1_agent_rsp_fifo:out_data -> sys_gpio_in_s1_agent:rf_sink_data
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_ready;                       // sys_gpio_in_s1_agent:rf_sink_ready -> sys_gpio_in_s1_agent_rsp_fifo:out_ready
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_startofpacket;               // sys_gpio_in_s1_agent_rsp_fifo:out_startofpacket -> sys_gpio_in_s1_agent:rf_sink_startofpacket
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_endofpacket;                 // sys_gpio_in_s1_agent_rsp_fifo:out_endofpacket -> sys_gpio_in_s1_agent:rf_sink_endofpacket
	wire          sys_gpio_in_s1_agent_rdata_fifo_src_valid;                     // sys_gpio_in_s1_agent:rdata_fifo_src_valid -> sys_gpio_in_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sys_gpio_in_s1_agent_rdata_fifo_src_data;                      // sys_gpio_in_s1_agent:rdata_fifo_src_data -> sys_gpio_in_s1_agent_rdata_fifo:in_data
	wire          sys_gpio_in_s1_agent_rdata_fifo_src_ready;                     // sys_gpio_in_s1_agent_rdata_fifo:in_ready -> sys_gpio_in_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_gpio_out_s1_agent_m0_readdata;                             // sys_gpio_out_s1_translator:uav_readdata -> sys_gpio_out_s1_agent:m0_readdata
	wire          sys_gpio_out_s1_agent_m0_waitrequest;                          // sys_gpio_out_s1_translator:uav_waitrequest -> sys_gpio_out_s1_agent:m0_waitrequest
	wire          sys_gpio_out_s1_agent_m0_debugaccess;                          // sys_gpio_out_s1_agent:m0_debugaccess -> sys_gpio_out_s1_translator:uav_debugaccess
	wire   [20:0] sys_gpio_out_s1_agent_m0_address;                              // sys_gpio_out_s1_agent:m0_address -> sys_gpio_out_s1_translator:uav_address
	wire    [3:0] sys_gpio_out_s1_agent_m0_byteenable;                           // sys_gpio_out_s1_agent:m0_byteenable -> sys_gpio_out_s1_translator:uav_byteenable
	wire          sys_gpio_out_s1_agent_m0_read;                                 // sys_gpio_out_s1_agent:m0_read -> sys_gpio_out_s1_translator:uav_read
	wire          sys_gpio_out_s1_agent_m0_readdatavalid;                        // sys_gpio_out_s1_translator:uav_readdatavalid -> sys_gpio_out_s1_agent:m0_readdatavalid
	wire          sys_gpio_out_s1_agent_m0_lock;                                 // sys_gpio_out_s1_agent:m0_lock -> sys_gpio_out_s1_translator:uav_lock
	wire   [31:0] sys_gpio_out_s1_agent_m0_writedata;                            // sys_gpio_out_s1_agent:m0_writedata -> sys_gpio_out_s1_translator:uav_writedata
	wire          sys_gpio_out_s1_agent_m0_write;                                // sys_gpio_out_s1_agent:m0_write -> sys_gpio_out_s1_translator:uav_write
	wire    [2:0] sys_gpio_out_s1_agent_m0_burstcount;                           // sys_gpio_out_s1_agent:m0_burstcount -> sys_gpio_out_s1_translator:uav_burstcount
	wire          sys_gpio_out_s1_agent_rf_source_valid;                         // sys_gpio_out_s1_agent:rf_source_valid -> sys_gpio_out_s1_agent_rsp_fifo:in_valid
	wire  [116:0] sys_gpio_out_s1_agent_rf_source_data;                          // sys_gpio_out_s1_agent:rf_source_data -> sys_gpio_out_s1_agent_rsp_fifo:in_data
	wire          sys_gpio_out_s1_agent_rf_source_ready;                         // sys_gpio_out_s1_agent_rsp_fifo:in_ready -> sys_gpio_out_s1_agent:rf_source_ready
	wire          sys_gpio_out_s1_agent_rf_source_startofpacket;                 // sys_gpio_out_s1_agent:rf_source_startofpacket -> sys_gpio_out_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_gpio_out_s1_agent_rf_source_endofpacket;                   // sys_gpio_out_s1_agent:rf_source_endofpacket -> sys_gpio_out_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_valid;                      // sys_gpio_out_s1_agent_rsp_fifo:out_valid -> sys_gpio_out_s1_agent:rf_sink_valid
	wire  [116:0] sys_gpio_out_s1_agent_rsp_fifo_out_data;                       // sys_gpio_out_s1_agent_rsp_fifo:out_data -> sys_gpio_out_s1_agent:rf_sink_data
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_ready;                      // sys_gpio_out_s1_agent:rf_sink_ready -> sys_gpio_out_s1_agent_rsp_fifo:out_ready
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_startofpacket;              // sys_gpio_out_s1_agent_rsp_fifo:out_startofpacket -> sys_gpio_out_s1_agent:rf_sink_startofpacket
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_endofpacket;                // sys_gpio_out_s1_agent_rsp_fifo:out_endofpacket -> sys_gpio_out_s1_agent:rf_sink_endofpacket
	wire          sys_gpio_out_s1_agent_rdata_fifo_src_valid;                    // sys_gpio_out_s1_agent:rdata_fifo_src_valid -> sys_gpio_out_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sys_gpio_out_s1_agent_rdata_fifo_src_data;                     // sys_gpio_out_s1_agent:rdata_fifo_src_data -> sys_gpio_out_s1_agent_rdata_fifo:in_data
	wire          sys_gpio_out_s1_agent_rdata_fifo_src_ready;                    // sys_gpio_out_s1_agent_rdata_fifo:in_ready -> sys_gpio_out_s1_agent:rdata_fifo_src_ready
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_valid;                // sys_hps_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_agent_write_cp_data;                 // sys_hps_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_ready;                // router:sink_ready -> sys_hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;        // sys_hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;          // sys_hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_valid;                 // sys_hps_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_agent_read_cp_data;                  // sys_hps_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_ready;                 // router_001:sink_ready -> sys_hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;         // sys_hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;           // sys_hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_002_src_valid;                                          // router_002:src_valid -> rsp_demux:sink_valid
	wire  [115:0] router_002_src_data;                                           // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                          // rsp_demux:sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                        // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [115:0] router_003_src_data;                                           // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                          // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                        // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                          // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [115:0] router_004_src_data;                                           // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                          // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                        // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                  // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                    // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                          // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [115:0] router_005_src_data;                                           // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                          // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                        // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                  // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                    // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                          // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [115:0] router_006_src_data;                                           // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                          // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                        // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                  // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                    // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                          // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [115:0] router_007_src_data;                                           // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                          // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                        // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                  // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                    // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                          // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [115:0] router_008_src_data;                                           // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                          // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                        // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                  // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                    // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                          // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [115:0] router_009_src_data;                                           // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                          // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                        // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                  // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                    // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                          // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [115:0] router_010_src_data;                                           // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                          // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                        // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                  // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                    // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                          // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [115:0] router_011_src_data;                                           // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                          // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                        // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                  // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                    // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                          // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [115:0] router_012_src_data;                                           // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                          // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                        // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                  // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                    // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                          // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [115:0] router_013_src_data;                                           // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                          // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                        // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                  // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                    // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [115:0] router_src_data;                                               // router:src_data -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                              // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                            // router:src_channel -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;            // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> sys_hps_h2f_lw_axi_master_agent:write_rp_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;             // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_data -> sys_hps_h2f_lw_axi_master_agent:write_rp_data
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;            // sys_hps_h2f_lw_axi_master_agent:write_rp_ready -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [11:0] sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;          // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> sys_hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;    // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> sys_hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;      // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> sys_hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [115:0] router_001_src_data;                                           // router_001:src_data -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                          // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                        // router_001:src_channel -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;            // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> sys_hps_h2f_lw_axi_master_agent:read_rp_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;             // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_data -> sys_hps_h2f_lw_axi_master_agent:read_rp_data
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;            // sys_hps_h2f_lw_axi_master_agent:read_rp_ready -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [11:0] sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;          // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> sys_hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;    // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> sys_hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;      // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> sys_hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> hdmi_dmac_0_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> hdmi_dmac_0_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                             // hdmi_dmac_0_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> hdmi_dmac_0_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> hdmi_dmac_0_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> hdmi_dmac_0_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> hdmi_dmac_0_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> hdmi_dmac_0_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                         // hdmi_dmac_0_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> hdmi_dmac_0_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> hdmi_dmac_0_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> hdmi_dmac_0_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                         // cmd_mux_002:src_valid -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_002_src_data;                                          // cmd_mux_002:src_data -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                         // axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                       // cmd_mux_002:src_channel -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                 // cmd_mux_002:src_startofpacket -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                   // cmd_mux_002:src_endofpacket -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                         // cmd_mux_003:src_valid -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_003_src_data;                                          // cmd_mux_003:src_data -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                         // axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                       // cmd_mux_003:src_channel -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                 // cmd_mux_003:src_startofpacket -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                   // cmd_mux_003:src_endofpacket -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                         // cmd_mux_004:src_valid -> axi_spi_engine_0_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_004_src_data;                                          // cmd_mux_004:src_data -> axi_spi_engine_0_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                         // axi_spi_engine_0_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                       // cmd_mux_004:src_channel -> axi_spi_engine_0_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                 // cmd_mux_004:src_startofpacket -> axi_spi_engine_0_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                   // cmd_mux_004:src_endofpacket -> axi_spi_engine_0_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                         // cmd_mux_005:src_valid -> axi_spi_engine_0_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_005_src_data;                                          // cmd_mux_005:src_data -> axi_spi_engine_0_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                         // axi_spi_engine_0_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                       // cmd_mux_005:src_channel -> axi_spi_engine_0_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                 // cmd_mux_005:src_startofpacket -> axi_spi_engine_0_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                   // cmd_mux_005:src_endofpacket -> axi_spi_engine_0_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                         // cmd_mux_006:src_valid -> spi_dmac_0_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_006_src_data;                                          // cmd_mux_006:src_data -> spi_dmac_0_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                         // spi_dmac_0_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                       // cmd_mux_006:src_channel -> spi_dmac_0_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                 // cmd_mux_006:src_startofpacket -> spi_dmac_0_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                   // cmd_mux_006:src_endofpacket -> spi_dmac_0_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                         // cmd_mux_007:src_valid -> spi_dmac_0_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_007_src_data;                                          // cmd_mux_007:src_data -> spi_dmac_0_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                         // spi_dmac_0_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                       // cmd_mux_007:src_channel -> spi_dmac_0_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                 // cmd_mux_007:src_startofpacket -> spi_dmac_0_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                   // cmd_mux_007:src_endofpacket -> spi_dmac_0_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                         // cmd_mux_008:src_valid -> sys_id_control_slave_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_008_src_data;                                          // cmd_mux_008:src_data -> sys_id_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                         // sys_id_control_slave_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                       // cmd_mux_008:src_channel -> sys_id_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                 // cmd_mux_008:src_startofpacket -> sys_id_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                   // cmd_mux_008:src_endofpacket -> sys_id_control_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                         // cmd_mux_009:src_valid -> sys_gpio_bd_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_009_src_data;                                          // cmd_mux_009:src_data -> sys_gpio_bd_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                         // sys_gpio_bd_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                       // cmd_mux_009:src_channel -> sys_gpio_bd_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                 // cmd_mux_009:src_startofpacket -> sys_gpio_bd_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                   // cmd_mux_009:src_endofpacket -> sys_gpio_bd_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                         // cmd_mux_010:src_valid -> sys_gpio_in_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_010_src_data;                                          // cmd_mux_010:src_data -> sys_gpio_in_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                         // sys_gpio_in_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                       // cmd_mux_010:src_channel -> sys_gpio_in_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                 // cmd_mux_010:src_startofpacket -> sys_gpio_in_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                   // cmd_mux_010:src_endofpacket -> sys_gpio_in_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                         // cmd_mux_011:src_valid -> sys_gpio_out_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_011_src_data;                                          // cmd_mux_011:src_data -> sys_gpio_out_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                         // sys_gpio_out_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                       // cmd_mux_011:src_channel -> sys_gpio_out_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                 // cmd_mux_011:src_startofpacket -> sys_gpio_out_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                   // cmd_mux_011:src_endofpacket -> sys_gpio_out_s1_burst_adapter:sink0_endofpacket
	wire    [0:0] sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid;            // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;             // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;            // limiter_pipeline:in_ready -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [11:0] sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;          // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;    // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;      // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [115:0] limiter_pipeline_source0_data;                                 // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire   [11:0] limiter_pipeline_source0_channel;                              // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                        // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                          // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [115:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                             // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                            // limiter_pipeline_001:out_valid -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [115:0] limiter_pipeline_001_source0_data;                             // limiter_pipeline_001:out_data -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                            // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [11:0] limiter_pipeline_001_source0_channel;                          // limiter_pipeline_001:out_channel -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                    // limiter_pipeline_001:out_startofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                      // limiter_pipeline_001:out_endofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid;            // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;             // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;            // limiter_pipeline_002:in_ready -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [11:0] sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;          // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;    // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;      // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                            // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [115:0] limiter_pipeline_002_source0_data;                             // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                            // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire   [11:0] limiter_pipeline_002_source0_channel;                          // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                    // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                      // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                         // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [115:0] rsp_mux_001_src_data;                                          // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                         // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                       // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                 // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                   // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                            // limiter_pipeline_003:out_valid -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [115:0] limiter_pipeline_003_source0_data;                             // limiter_pipeline_003:out_data -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                            // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire   [11:0] limiter_pipeline_003_source0_channel;                          // limiter_pipeline_003:out_channel -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                    // limiter_pipeline_003:out_startofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                      // limiter_pipeline_003:out_endofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hdmi_dmac_0_s_axi_wr_burst_adapter_source0_valid;              // hdmi_dmac_0_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [115:0] hdmi_dmac_0_s_axi_wr_burst_adapter_source0_data;               // hdmi_dmac_0_s_axi_wr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          hdmi_dmac_0_s_axi_wr_burst_adapter_source0_ready;              // agent_pipeline:in_ready -> hdmi_dmac_0_s_axi_wr_burst_adapter:source0_ready
	wire   [11:0] hdmi_dmac_0_s_axi_wr_burst_adapter_source0_channel;            // hdmi_dmac_0_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          hdmi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket;      // hdmi_dmac_0_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          hdmi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket;        // hdmi_dmac_0_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                  // agent_pipeline:out_valid -> hdmi_dmac_0_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_source0_data;                                   // agent_pipeline:out_data -> hdmi_dmac_0_s_axi_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                  // hdmi_dmac_0_s_axi_agent:write_cp_ready -> agent_pipeline:out_ready
	wire   [11:0] agent_pipeline_source0_channel;                                // agent_pipeline:out_channel -> hdmi_dmac_0_s_axi_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                          // agent_pipeline:out_startofpacket -> hdmi_dmac_0_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                            // agent_pipeline:out_endofpacket -> hdmi_dmac_0_s_axi_agent:write_cp_endofpacket
	wire          hdmi_dmac_0_s_axi_rd_burst_adapter_source0_valid;              // hdmi_dmac_0_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_001:in_valid
	wire  [115:0] hdmi_dmac_0_s_axi_rd_burst_adapter_source0_data;               // hdmi_dmac_0_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_001:in_data
	wire          hdmi_dmac_0_s_axi_rd_burst_adapter_source0_ready;              // agent_pipeline_001:in_ready -> hdmi_dmac_0_s_axi_rd_burst_adapter:source0_ready
	wire   [11:0] hdmi_dmac_0_s_axi_rd_burst_adapter_source0_channel;            // hdmi_dmac_0_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_001:in_channel
	wire          hdmi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket;      // hdmi_dmac_0_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          hdmi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket;        // hdmi_dmac_0_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                              // agent_pipeline_001:out_valid -> hdmi_dmac_0_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_001_source0_data;                               // agent_pipeline_001:out_data -> hdmi_dmac_0_s_axi_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                              // hdmi_dmac_0_s_axi_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire   [11:0] agent_pipeline_001_source0_channel;                            // agent_pipeline_001:out_channel -> hdmi_dmac_0_s_axi_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                      // agent_pipeline_001:out_startofpacket -> hdmi_dmac_0_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                        // agent_pipeline_001:out_endofpacket -> hdmi_dmac_0_s_axi_agent:read_cp_endofpacket
	wire          hdmi_dmac_0_s_axi_agent_write_rp_valid;                        // hdmi_dmac_0_s_axi_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [115:0] hdmi_dmac_0_s_axi_agent_write_rp_data;                         // hdmi_dmac_0_s_axi_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          hdmi_dmac_0_s_axi_agent_write_rp_ready;                        // agent_pipeline_002:in_ready -> hdmi_dmac_0_s_axi_agent:write_rp_ready
	wire          hdmi_dmac_0_s_axi_agent_write_rp_startofpacket;                // hdmi_dmac_0_s_axi_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          hdmi_dmac_0_s_axi_agent_write_rp_endofpacket;                  // hdmi_dmac_0_s_axi_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                              // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [115:0] agent_pipeline_002_source0_data;                               // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                              // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                      // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                        // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          hdmi_dmac_0_s_axi_agent_read_rp_valid;                         // hdmi_dmac_0_s_axi_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [115:0] hdmi_dmac_0_s_axi_agent_read_rp_data;                          // hdmi_dmac_0_s_axi_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          hdmi_dmac_0_s_axi_agent_read_rp_ready;                         // agent_pipeline_003:in_ready -> hdmi_dmac_0_s_axi_agent:read_rp_ready
	wire          hdmi_dmac_0_s_axi_agent_read_rp_startofpacket;                 // hdmi_dmac_0_s_axi_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          hdmi_dmac_0_s_axi_agent_read_rp_endofpacket;                   // hdmi_dmac_0_s_axi_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                              // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [115:0] agent_pipeline_003_source0_data;                               // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                              // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                      // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                        // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_valid;            // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [115:0] axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_data;             // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_ready;            // agent_pipeline_004:in_ready -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_ready
	wire   [11:0] axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_channel;          // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_startofpacket;    // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_endofpacket;      // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                              // agent_pipeline_004:out_valid -> axi_hdmi_tx_0_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_004_source0_data;                               // agent_pipeline_004:out_data -> axi_hdmi_tx_0_s_axi_agent:write_cp_data
	wire          agent_pipeline_004_source0_ready;                              // axi_hdmi_tx_0_s_axi_agent:write_cp_ready -> agent_pipeline_004:out_ready
	wire   [11:0] agent_pipeline_004_source0_channel;                            // agent_pipeline_004:out_channel -> axi_hdmi_tx_0_s_axi_agent:write_cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                      // agent_pipeline_004:out_startofpacket -> axi_hdmi_tx_0_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                        // agent_pipeline_004:out_endofpacket -> axi_hdmi_tx_0_s_axi_agent:write_cp_endofpacket
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_valid;            // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_005:in_valid
	wire  [115:0] axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_data;             // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_005:in_data
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_ready;            // agent_pipeline_005:in_ready -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_ready
	wire   [11:0] axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_channel;          // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_005:in_channel
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_startofpacket;    // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_endofpacket;      // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                              // agent_pipeline_005:out_valid -> axi_hdmi_tx_0_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_005_source0_data;                               // agent_pipeline_005:out_data -> axi_hdmi_tx_0_s_axi_agent:read_cp_data
	wire          agent_pipeline_005_source0_ready;                              // axi_hdmi_tx_0_s_axi_agent:read_cp_ready -> agent_pipeline_005:out_ready
	wire   [11:0] agent_pipeline_005_source0_channel;                            // agent_pipeline_005:out_channel -> axi_hdmi_tx_0_s_axi_agent:read_cp_channel
	wire          agent_pipeline_005_source0_startofpacket;                      // agent_pipeline_005:out_startofpacket -> axi_hdmi_tx_0_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                        // agent_pipeline_005:out_endofpacket -> axi_hdmi_tx_0_s_axi_agent:read_cp_endofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_valid;                      // axi_hdmi_tx_0_s_axi_agent:write_rp_valid -> agent_pipeline_006:in_valid
	wire  [115:0] axi_hdmi_tx_0_s_axi_agent_write_rp_data;                       // axi_hdmi_tx_0_s_axi_agent:write_rp_data -> agent_pipeline_006:in_data
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_ready;                      // agent_pipeline_006:in_ready -> axi_hdmi_tx_0_s_axi_agent:write_rp_ready
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_startofpacket;              // axi_hdmi_tx_0_s_axi_agent:write_rp_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_endofpacket;                // axi_hdmi_tx_0_s_axi_agent:write_rp_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                              // agent_pipeline_006:out_valid -> router_004:sink_valid
	wire  [115:0] agent_pipeline_006_source0_data;                               // agent_pipeline_006:out_data -> router_004:sink_data
	wire          agent_pipeline_006_source0_ready;                              // router_004:sink_ready -> agent_pipeline_006:out_ready
	wire          agent_pipeline_006_source0_startofpacket;                      // agent_pipeline_006:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                        // agent_pipeline_006:out_endofpacket -> router_004:sink_endofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_valid;                       // axi_hdmi_tx_0_s_axi_agent:read_rp_valid -> agent_pipeline_007:in_valid
	wire  [115:0] axi_hdmi_tx_0_s_axi_agent_read_rp_data;                        // axi_hdmi_tx_0_s_axi_agent:read_rp_data -> agent_pipeline_007:in_data
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_ready;                       // agent_pipeline_007:in_ready -> axi_hdmi_tx_0_s_axi_agent:read_rp_ready
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_startofpacket;               // axi_hdmi_tx_0_s_axi_agent:read_rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_endofpacket;                 // axi_hdmi_tx_0_s_axi_agent:read_rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                              // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire  [115:0] agent_pipeline_007_source0_data;                               // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                              // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                      // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                        // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          axi_spi_engine_0_s_axi_wr_burst_adapter_source0_valid;         // axi_spi_engine_0_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [115:0] axi_spi_engine_0_s_axi_wr_burst_adapter_source0_data;          // axi_spi_engine_0_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          axi_spi_engine_0_s_axi_wr_burst_adapter_source0_ready;         // agent_pipeline_008:in_ready -> axi_spi_engine_0_s_axi_wr_burst_adapter:source0_ready
	wire   [11:0] axi_spi_engine_0_s_axi_wr_burst_adapter_source0_channel;       // axi_spi_engine_0_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          axi_spi_engine_0_s_axi_wr_burst_adapter_source0_startofpacket; // axi_spi_engine_0_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          axi_spi_engine_0_s_axi_wr_burst_adapter_source0_endofpacket;   // axi_spi_engine_0_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                              // agent_pipeline_008:out_valid -> axi_spi_engine_0_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_008_source0_data;                               // agent_pipeline_008:out_data -> axi_spi_engine_0_s_axi_agent:write_cp_data
	wire          agent_pipeline_008_source0_ready;                              // axi_spi_engine_0_s_axi_agent:write_cp_ready -> agent_pipeline_008:out_ready
	wire   [11:0] agent_pipeline_008_source0_channel;                            // agent_pipeline_008:out_channel -> axi_spi_engine_0_s_axi_agent:write_cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                      // agent_pipeline_008:out_startofpacket -> axi_spi_engine_0_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                        // agent_pipeline_008:out_endofpacket -> axi_spi_engine_0_s_axi_agent:write_cp_endofpacket
	wire          axi_spi_engine_0_s_axi_rd_burst_adapter_source0_valid;         // axi_spi_engine_0_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_009:in_valid
	wire  [115:0] axi_spi_engine_0_s_axi_rd_burst_adapter_source0_data;          // axi_spi_engine_0_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_009:in_data
	wire          axi_spi_engine_0_s_axi_rd_burst_adapter_source0_ready;         // agent_pipeline_009:in_ready -> axi_spi_engine_0_s_axi_rd_burst_adapter:source0_ready
	wire   [11:0] axi_spi_engine_0_s_axi_rd_burst_adapter_source0_channel;       // axi_spi_engine_0_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_009:in_channel
	wire          axi_spi_engine_0_s_axi_rd_burst_adapter_source0_startofpacket; // axi_spi_engine_0_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          axi_spi_engine_0_s_axi_rd_burst_adapter_source0_endofpacket;   // axi_spi_engine_0_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                              // agent_pipeline_009:out_valid -> axi_spi_engine_0_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_009_source0_data;                               // agent_pipeline_009:out_data -> axi_spi_engine_0_s_axi_agent:read_cp_data
	wire          agent_pipeline_009_source0_ready;                              // axi_spi_engine_0_s_axi_agent:read_cp_ready -> agent_pipeline_009:out_ready
	wire   [11:0] agent_pipeline_009_source0_channel;                            // agent_pipeline_009:out_channel -> axi_spi_engine_0_s_axi_agent:read_cp_channel
	wire          agent_pipeline_009_source0_startofpacket;                      // agent_pipeline_009:out_startofpacket -> axi_spi_engine_0_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                        // agent_pipeline_009:out_endofpacket -> axi_spi_engine_0_s_axi_agent:read_cp_endofpacket
	wire          axi_spi_engine_0_s_axi_agent_write_rp_valid;                   // axi_spi_engine_0_s_axi_agent:write_rp_valid -> agent_pipeline_010:in_valid
	wire  [115:0] axi_spi_engine_0_s_axi_agent_write_rp_data;                    // axi_spi_engine_0_s_axi_agent:write_rp_data -> agent_pipeline_010:in_data
	wire          axi_spi_engine_0_s_axi_agent_write_rp_ready;                   // agent_pipeline_010:in_ready -> axi_spi_engine_0_s_axi_agent:write_rp_ready
	wire          axi_spi_engine_0_s_axi_agent_write_rp_startofpacket;           // axi_spi_engine_0_s_axi_agent:write_rp_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          axi_spi_engine_0_s_axi_agent_write_rp_endofpacket;             // axi_spi_engine_0_s_axi_agent:write_rp_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                              // agent_pipeline_010:out_valid -> router_006:sink_valid
	wire  [115:0] agent_pipeline_010_source0_data;                               // agent_pipeline_010:out_data -> router_006:sink_data
	wire          agent_pipeline_010_source0_ready;                              // router_006:sink_ready -> agent_pipeline_010:out_ready
	wire          agent_pipeline_010_source0_startofpacket;                      // agent_pipeline_010:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                        // agent_pipeline_010:out_endofpacket -> router_006:sink_endofpacket
	wire          axi_spi_engine_0_s_axi_agent_read_rp_valid;                    // axi_spi_engine_0_s_axi_agent:read_rp_valid -> agent_pipeline_011:in_valid
	wire  [115:0] axi_spi_engine_0_s_axi_agent_read_rp_data;                     // axi_spi_engine_0_s_axi_agent:read_rp_data -> agent_pipeline_011:in_data
	wire          axi_spi_engine_0_s_axi_agent_read_rp_ready;                    // agent_pipeline_011:in_ready -> axi_spi_engine_0_s_axi_agent:read_rp_ready
	wire          axi_spi_engine_0_s_axi_agent_read_rp_startofpacket;            // axi_spi_engine_0_s_axi_agent:read_rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          axi_spi_engine_0_s_axi_agent_read_rp_endofpacket;              // axi_spi_engine_0_s_axi_agent:read_rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                              // agent_pipeline_011:out_valid -> router_007:sink_valid
	wire  [115:0] agent_pipeline_011_source0_data;                               // agent_pipeline_011:out_data -> router_007:sink_data
	wire          agent_pipeline_011_source0_ready;                              // router_007:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                      // agent_pipeline_011:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                        // agent_pipeline_011:out_endofpacket -> router_007:sink_endofpacket
	wire          spi_dmac_0_s_axi_wr_burst_adapter_source0_valid;               // spi_dmac_0_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_012:in_valid
	wire  [115:0] spi_dmac_0_s_axi_wr_burst_adapter_source0_data;                // spi_dmac_0_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_012:in_data
	wire          spi_dmac_0_s_axi_wr_burst_adapter_source0_ready;               // agent_pipeline_012:in_ready -> spi_dmac_0_s_axi_wr_burst_adapter:source0_ready
	wire   [11:0] spi_dmac_0_s_axi_wr_burst_adapter_source0_channel;             // spi_dmac_0_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_012:in_channel
	wire          spi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket;       // spi_dmac_0_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          spi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket;         // spi_dmac_0_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                              // agent_pipeline_012:out_valid -> spi_dmac_0_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_012_source0_data;                               // agent_pipeline_012:out_data -> spi_dmac_0_s_axi_agent:write_cp_data
	wire          agent_pipeline_012_source0_ready;                              // spi_dmac_0_s_axi_agent:write_cp_ready -> agent_pipeline_012:out_ready
	wire   [11:0] agent_pipeline_012_source0_channel;                            // agent_pipeline_012:out_channel -> spi_dmac_0_s_axi_agent:write_cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                      // agent_pipeline_012:out_startofpacket -> spi_dmac_0_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                        // agent_pipeline_012:out_endofpacket -> spi_dmac_0_s_axi_agent:write_cp_endofpacket
	wire          spi_dmac_0_s_axi_rd_burst_adapter_source0_valid;               // spi_dmac_0_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_013:in_valid
	wire  [115:0] spi_dmac_0_s_axi_rd_burst_adapter_source0_data;                // spi_dmac_0_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_013:in_data
	wire          spi_dmac_0_s_axi_rd_burst_adapter_source0_ready;               // agent_pipeline_013:in_ready -> spi_dmac_0_s_axi_rd_burst_adapter:source0_ready
	wire   [11:0] spi_dmac_0_s_axi_rd_burst_adapter_source0_channel;             // spi_dmac_0_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_013:in_channel
	wire          spi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket;       // spi_dmac_0_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          spi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket;         // spi_dmac_0_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                              // agent_pipeline_013:out_valid -> spi_dmac_0_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_013_source0_data;                               // agent_pipeline_013:out_data -> spi_dmac_0_s_axi_agent:read_cp_data
	wire          agent_pipeline_013_source0_ready;                              // spi_dmac_0_s_axi_agent:read_cp_ready -> agent_pipeline_013:out_ready
	wire   [11:0] agent_pipeline_013_source0_channel;                            // agent_pipeline_013:out_channel -> spi_dmac_0_s_axi_agent:read_cp_channel
	wire          agent_pipeline_013_source0_startofpacket;                      // agent_pipeline_013:out_startofpacket -> spi_dmac_0_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                        // agent_pipeline_013:out_endofpacket -> spi_dmac_0_s_axi_agent:read_cp_endofpacket
	wire          spi_dmac_0_s_axi_agent_write_rp_valid;                         // spi_dmac_0_s_axi_agent:write_rp_valid -> agent_pipeline_014:in_valid
	wire  [115:0] spi_dmac_0_s_axi_agent_write_rp_data;                          // spi_dmac_0_s_axi_agent:write_rp_data -> agent_pipeline_014:in_data
	wire          spi_dmac_0_s_axi_agent_write_rp_ready;                         // agent_pipeline_014:in_ready -> spi_dmac_0_s_axi_agent:write_rp_ready
	wire          spi_dmac_0_s_axi_agent_write_rp_startofpacket;                 // spi_dmac_0_s_axi_agent:write_rp_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          spi_dmac_0_s_axi_agent_write_rp_endofpacket;                   // spi_dmac_0_s_axi_agent:write_rp_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                              // agent_pipeline_014:out_valid -> router_008:sink_valid
	wire  [115:0] agent_pipeline_014_source0_data;                               // agent_pipeline_014:out_data -> router_008:sink_data
	wire          agent_pipeline_014_source0_ready;                              // router_008:sink_ready -> agent_pipeline_014:out_ready
	wire          agent_pipeline_014_source0_startofpacket;                      // agent_pipeline_014:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                        // agent_pipeline_014:out_endofpacket -> router_008:sink_endofpacket
	wire          spi_dmac_0_s_axi_agent_read_rp_valid;                          // spi_dmac_0_s_axi_agent:read_rp_valid -> agent_pipeline_015:in_valid
	wire  [115:0] spi_dmac_0_s_axi_agent_read_rp_data;                           // spi_dmac_0_s_axi_agent:read_rp_data -> agent_pipeline_015:in_data
	wire          spi_dmac_0_s_axi_agent_read_rp_ready;                          // agent_pipeline_015:in_ready -> spi_dmac_0_s_axi_agent:read_rp_ready
	wire          spi_dmac_0_s_axi_agent_read_rp_startofpacket;                  // spi_dmac_0_s_axi_agent:read_rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          spi_dmac_0_s_axi_agent_read_rp_endofpacket;                    // spi_dmac_0_s_axi_agent:read_rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                              // agent_pipeline_015:out_valid -> router_009:sink_valid
	wire  [115:0] agent_pipeline_015_source0_data;                               // agent_pipeline_015:out_data -> router_009:sink_data
	wire          agent_pipeline_015_source0_ready;                              // router_009:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                      // agent_pipeline_015:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                        // agent_pipeline_015:out_endofpacket -> router_009:sink_endofpacket
	wire          sys_id_control_slave_burst_adapter_source0_valid;              // sys_id_control_slave_burst_adapter:source0_valid -> agent_pipeline_016:in_valid
	wire  [115:0] sys_id_control_slave_burst_adapter_source0_data;               // sys_id_control_slave_burst_adapter:source0_data -> agent_pipeline_016:in_data
	wire          sys_id_control_slave_burst_adapter_source0_ready;              // agent_pipeline_016:in_ready -> sys_id_control_slave_burst_adapter:source0_ready
	wire   [11:0] sys_id_control_slave_burst_adapter_source0_channel;            // sys_id_control_slave_burst_adapter:source0_channel -> agent_pipeline_016:in_channel
	wire          sys_id_control_slave_burst_adapter_source0_startofpacket;      // sys_id_control_slave_burst_adapter:source0_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          sys_id_control_slave_burst_adapter_source0_endofpacket;        // sys_id_control_slave_burst_adapter:source0_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                              // agent_pipeline_016:out_valid -> sys_id_control_slave_agent:cp_valid
	wire  [115:0] agent_pipeline_016_source0_data;                               // agent_pipeline_016:out_data -> sys_id_control_slave_agent:cp_data
	wire          agent_pipeline_016_source0_ready;                              // sys_id_control_slave_agent:cp_ready -> agent_pipeline_016:out_ready
	wire   [11:0] agent_pipeline_016_source0_channel;                            // agent_pipeline_016:out_channel -> sys_id_control_slave_agent:cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                      // agent_pipeline_016:out_startofpacket -> sys_id_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                        // agent_pipeline_016:out_endofpacket -> sys_id_control_slave_agent:cp_endofpacket
	wire          sys_id_control_slave_agent_rp_valid;                           // sys_id_control_slave_agent:rp_valid -> agent_pipeline_017:in_valid
	wire  [115:0] sys_id_control_slave_agent_rp_data;                            // sys_id_control_slave_agent:rp_data -> agent_pipeline_017:in_data
	wire          sys_id_control_slave_agent_rp_ready;                           // agent_pipeline_017:in_ready -> sys_id_control_slave_agent:rp_ready
	wire          sys_id_control_slave_agent_rp_startofpacket;                   // sys_id_control_slave_agent:rp_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          sys_id_control_slave_agent_rp_endofpacket;                     // sys_id_control_slave_agent:rp_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                              // agent_pipeline_017:out_valid -> router_010:sink_valid
	wire  [115:0] agent_pipeline_017_source0_data;                               // agent_pipeline_017:out_data -> router_010:sink_data
	wire          agent_pipeline_017_source0_ready;                              // router_010:sink_ready -> agent_pipeline_017:out_ready
	wire          agent_pipeline_017_source0_startofpacket;                      // agent_pipeline_017:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                        // agent_pipeline_017:out_endofpacket -> router_010:sink_endofpacket
	wire          sys_gpio_bd_s1_burst_adapter_source0_valid;                    // sys_gpio_bd_s1_burst_adapter:source0_valid -> agent_pipeline_018:in_valid
	wire  [115:0] sys_gpio_bd_s1_burst_adapter_source0_data;                     // sys_gpio_bd_s1_burst_adapter:source0_data -> agent_pipeline_018:in_data
	wire          sys_gpio_bd_s1_burst_adapter_source0_ready;                    // agent_pipeline_018:in_ready -> sys_gpio_bd_s1_burst_adapter:source0_ready
	wire   [11:0] sys_gpio_bd_s1_burst_adapter_source0_channel;                  // sys_gpio_bd_s1_burst_adapter:source0_channel -> agent_pipeline_018:in_channel
	wire          sys_gpio_bd_s1_burst_adapter_source0_startofpacket;            // sys_gpio_bd_s1_burst_adapter:source0_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          sys_gpio_bd_s1_burst_adapter_source0_endofpacket;              // sys_gpio_bd_s1_burst_adapter:source0_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                              // agent_pipeline_018:out_valid -> sys_gpio_bd_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_018_source0_data;                               // agent_pipeline_018:out_data -> sys_gpio_bd_s1_agent:cp_data
	wire          agent_pipeline_018_source0_ready;                              // sys_gpio_bd_s1_agent:cp_ready -> agent_pipeline_018:out_ready
	wire   [11:0] agent_pipeline_018_source0_channel;                            // agent_pipeline_018:out_channel -> sys_gpio_bd_s1_agent:cp_channel
	wire          agent_pipeline_018_source0_startofpacket;                      // agent_pipeline_018:out_startofpacket -> sys_gpio_bd_s1_agent:cp_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                        // agent_pipeline_018:out_endofpacket -> sys_gpio_bd_s1_agent:cp_endofpacket
	wire          sys_gpio_bd_s1_agent_rp_valid;                                 // sys_gpio_bd_s1_agent:rp_valid -> agent_pipeline_019:in_valid
	wire  [115:0] sys_gpio_bd_s1_agent_rp_data;                                  // sys_gpio_bd_s1_agent:rp_data -> agent_pipeline_019:in_data
	wire          sys_gpio_bd_s1_agent_rp_ready;                                 // agent_pipeline_019:in_ready -> sys_gpio_bd_s1_agent:rp_ready
	wire          sys_gpio_bd_s1_agent_rp_startofpacket;                         // sys_gpio_bd_s1_agent:rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          sys_gpio_bd_s1_agent_rp_endofpacket;                           // sys_gpio_bd_s1_agent:rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                              // agent_pipeline_019:out_valid -> router_011:sink_valid
	wire  [115:0] agent_pipeline_019_source0_data;                               // agent_pipeline_019:out_data -> router_011:sink_data
	wire          agent_pipeline_019_source0_ready;                              // router_011:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                      // agent_pipeline_019:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                        // agent_pipeline_019:out_endofpacket -> router_011:sink_endofpacket
	wire          sys_gpio_in_s1_burst_adapter_source0_valid;                    // sys_gpio_in_s1_burst_adapter:source0_valid -> agent_pipeline_020:in_valid
	wire  [115:0] sys_gpio_in_s1_burst_adapter_source0_data;                     // sys_gpio_in_s1_burst_adapter:source0_data -> agent_pipeline_020:in_data
	wire          sys_gpio_in_s1_burst_adapter_source0_ready;                    // agent_pipeline_020:in_ready -> sys_gpio_in_s1_burst_adapter:source0_ready
	wire   [11:0] sys_gpio_in_s1_burst_adapter_source0_channel;                  // sys_gpio_in_s1_burst_adapter:source0_channel -> agent_pipeline_020:in_channel
	wire          sys_gpio_in_s1_burst_adapter_source0_startofpacket;            // sys_gpio_in_s1_burst_adapter:source0_startofpacket -> agent_pipeline_020:in_startofpacket
	wire          sys_gpio_in_s1_burst_adapter_source0_endofpacket;              // sys_gpio_in_s1_burst_adapter:source0_endofpacket -> agent_pipeline_020:in_endofpacket
	wire          agent_pipeline_020_source0_valid;                              // agent_pipeline_020:out_valid -> sys_gpio_in_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_020_source0_data;                               // agent_pipeline_020:out_data -> sys_gpio_in_s1_agent:cp_data
	wire          agent_pipeline_020_source0_ready;                              // sys_gpio_in_s1_agent:cp_ready -> agent_pipeline_020:out_ready
	wire   [11:0] agent_pipeline_020_source0_channel;                            // agent_pipeline_020:out_channel -> sys_gpio_in_s1_agent:cp_channel
	wire          agent_pipeline_020_source0_startofpacket;                      // agent_pipeline_020:out_startofpacket -> sys_gpio_in_s1_agent:cp_startofpacket
	wire          agent_pipeline_020_source0_endofpacket;                        // agent_pipeline_020:out_endofpacket -> sys_gpio_in_s1_agent:cp_endofpacket
	wire          sys_gpio_in_s1_agent_rp_valid;                                 // sys_gpio_in_s1_agent:rp_valid -> agent_pipeline_021:in_valid
	wire  [115:0] sys_gpio_in_s1_agent_rp_data;                                  // sys_gpio_in_s1_agent:rp_data -> agent_pipeline_021:in_data
	wire          sys_gpio_in_s1_agent_rp_ready;                                 // agent_pipeline_021:in_ready -> sys_gpio_in_s1_agent:rp_ready
	wire          sys_gpio_in_s1_agent_rp_startofpacket;                         // sys_gpio_in_s1_agent:rp_startofpacket -> agent_pipeline_021:in_startofpacket
	wire          sys_gpio_in_s1_agent_rp_endofpacket;                           // sys_gpio_in_s1_agent:rp_endofpacket -> agent_pipeline_021:in_endofpacket
	wire          agent_pipeline_021_source0_valid;                              // agent_pipeline_021:out_valid -> router_012:sink_valid
	wire  [115:0] agent_pipeline_021_source0_data;                               // agent_pipeline_021:out_data -> router_012:sink_data
	wire          agent_pipeline_021_source0_ready;                              // router_012:sink_ready -> agent_pipeline_021:out_ready
	wire          agent_pipeline_021_source0_startofpacket;                      // agent_pipeline_021:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_021_source0_endofpacket;                        // agent_pipeline_021:out_endofpacket -> router_012:sink_endofpacket
	wire          sys_gpio_out_s1_burst_adapter_source0_valid;                   // sys_gpio_out_s1_burst_adapter:source0_valid -> agent_pipeline_022:in_valid
	wire  [115:0] sys_gpio_out_s1_burst_adapter_source0_data;                    // sys_gpio_out_s1_burst_adapter:source0_data -> agent_pipeline_022:in_data
	wire          sys_gpio_out_s1_burst_adapter_source0_ready;                   // agent_pipeline_022:in_ready -> sys_gpio_out_s1_burst_adapter:source0_ready
	wire   [11:0] sys_gpio_out_s1_burst_adapter_source0_channel;                 // sys_gpio_out_s1_burst_adapter:source0_channel -> agent_pipeline_022:in_channel
	wire          sys_gpio_out_s1_burst_adapter_source0_startofpacket;           // sys_gpio_out_s1_burst_adapter:source0_startofpacket -> agent_pipeline_022:in_startofpacket
	wire          sys_gpio_out_s1_burst_adapter_source0_endofpacket;             // sys_gpio_out_s1_burst_adapter:source0_endofpacket -> agent_pipeline_022:in_endofpacket
	wire          agent_pipeline_022_source0_valid;                              // agent_pipeline_022:out_valid -> sys_gpio_out_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_022_source0_data;                               // agent_pipeline_022:out_data -> sys_gpio_out_s1_agent:cp_data
	wire          agent_pipeline_022_source0_ready;                              // sys_gpio_out_s1_agent:cp_ready -> agent_pipeline_022:out_ready
	wire   [11:0] agent_pipeline_022_source0_channel;                            // agent_pipeline_022:out_channel -> sys_gpio_out_s1_agent:cp_channel
	wire          agent_pipeline_022_source0_startofpacket;                      // agent_pipeline_022:out_startofpacket -> sys_gpio_out_s1_agent:cp_startofpacket
	wire          agent_pipeline_022_source0_endofpacket;                        // agent_pipeline_022:out_endofpacket -> sys_gpio_out_s1_agent:cp_endofpacket
	wire          sys_gpio_out_s1_agent_rp_valid;                                // sys_gpio_out_s1_agent:rp_valid -> agent_pipeline_023:in_valid
	wire  [115:0] sys_gpio_out_s1_agent_rp_data;                                 // sys_gpio_out_s1_agent:rp_data -> agent_pipeline_023:in_data
	wire          sys_gpio_out_s1_agent_rp_ready;                                // agent_pipeline_023:in_ready -> sys_gpio_out_s1_agent:rp_ready
	wire          sys_gpio_out_s1_agent_rp_startofpacket;                        // sys_gpio_out_s1_agent:rp_startofpacket -> agent_pipeline_023:in_startofpacket
	wire          sys_gpio_out_s1_agent_rp_endofpacket;                          // sys_gpio_out_s1_agent:rp_endofpacket -> agent_pipeline_023:in_endofpacket
	wire          agent_pipeline_023_source0_valid;                              // agent_pipeline_023:out_valid -> router_013:sink_valid
	wire  [115:0] agent_pipeline_023_source0_data;                               // agent_pipeline_023:out_data -> router_013:sink_data
	wire          agent_pipeline_023_source0_ready;                              // router_013:sink_ready -> agent_pipeline_023:out_ready
	wire          agent_pipeline_023_source0_startofpacket;                      // agent_pipeline_023:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_023_source0_endofpacket;                        // agent_pipeline_023:out_endofpacket -> router_013:sink_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [115:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                          // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                    // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [115:0] mux_pipeline_source0_data;                                     // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                    // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire   [11:0] mux_pipeline_source0_channel;                                  // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                            // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                              // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                      // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [115:0] cmd_demux_001_src0_data;                                       // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                      // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                    // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                              // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [115:0] mux_pipeline_001_source0_data;                                 // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire   [11:0] mux_pipeline_001_source0_channel;                              // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                        // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                          // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [115:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                          // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire   [11:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [115:0] mux_pipeline_002_source0_data;                                 // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire   [11:0] mux_pipeline_002_source0_channel;                              // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                        // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                          // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                      // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [115:0] cmd_demux_001_src1_data;                                       // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                      // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                    // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                              // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                // mux_pipeline_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [115:0] mux_pipeline_003_source0_data;                                 // mux_pipeline_003:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_003_source0_ready;                                // cmd_mux_003:sink0_ready -> mux_pipeline_003:out_ready
	wire   [11:0] mux_pipeline_003_source0_channel;                              // mux_pipeline_003:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                        // mux_pipeline_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                          // mux_pipeline_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                          // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [115:0] cmd_demux_src2_data;                                           // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                          // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire   [11:0] cmd_demux_src2_channel;                                        // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                  // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                    // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                // mux_pipeline_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [115:0] mux_pipeline_004_source0_data;                                 // mux_pipeline_004:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_004_source0_ready;                                // cmd_mux_004:sink0_ready -> mux_pipeline_004:out_ready
	wire   [11:0] mux_pipeline_004_source0_channel;                              // mux_pipeline_004:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                        // mux_pipeline_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                          // mux_pipeline_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                      // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [115:0] cmd_demux_001_src2_data;                                       // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                      // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                    // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                              // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                // mux_pipeline_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [115:0] mux_pipeline_005_source0_data;                                 // mux_pipeline_005:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_005_source0_ready;                                // cmd_mux_005:sink0_ready -> mux_pipeline_005:out_ready
	wire   [11:0] mux_pipeline_005_source0_channel;                              // mux_pipeline_005:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                        // mux_pipeline_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                          // mux_pipeline_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                          // cmd_demux:src3_valid -> mux_pipeline_006:in_valid
	wire  [115:0] cmd_demux_src3_data;                                           // cmd_demux:src3_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src3_ready;                                          // mux_pipeline_006:in_ready -> cmd_demux:src3_ready
	wire   [11:0] cmd_demux_src3_channel;                                        // cmd_demux:src3_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src3_startofpacket;                                  // cmd_demux:src3_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                    // cmd_demux:src3_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                // mux_pipeline_006:out_valid -> cmd_mux_006:sink0_valid
	wire  [115:0] mux_pipeline_006_source0_data;                                 // mux_pipeline_006:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_006_source0_ready;                                // cmd_mux_006:sink0_ready -> mux_pipeline_006:out_ready
	wire   [11:0] mux_pipeline_006_source0_channel;                              // mux_pipeline_006:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                        // mux_pipeline_006:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                          // mux_pipeline_006:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                      // cmd_demux_001:src3_valid -> mux_pipeline_007:in_valid
	wire  [115:0] cmd_demux_001_src3_data;                                       // cmd_demux_001:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_001_src3_ready;                                      // mux_pipeline_007:in_ready -> cmd_demux_001:src3_ready
	wire   [11:0] cmd_demux_001_src3_channel;                                    // cmd_demux_001:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_001_src3_startofpacket;                              // cmd_demux_001:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                // cmd_demux_001:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                // mux_pipeline_007:out_valid -> cmd_mux_007:sink0_valid
	wire  [115:0] mux_pipeline_007_source0_data;                                 // mux_pipeline_007:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_007_source0_ready;                                // cmd_mux_007:sink0_ready -> mux_pipeline_007:out_ready
	wire   [11:0] mux_pipeline_007_source0_channel;                              // mux_pipeline_007:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                        // mux_pipeline_007:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                          // mux_pipeline_007:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                          // cmd_demux:src4_valid -> mux_pipeline_008:in_valid
	wire  [115:0] cmd_demux_src4_data;                                           // cmd_demux:src4_data -> mux_pipeline_008:in_data
	wire          cmd_demux_src4_ready;                                          // mux_pipeline_008:in_ready -> cmd_demux:src4_ready
	wire   [11:0] cmd_demux_src4_channel;                                        // cmd_demux:src4_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_src4_startofpacket;                                  // cmd_demux:src4_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                    // cmd_demux:src4_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                // mux_pipeline_008:out_valid -> cmd_mux_008:sink0_valid
	wire  [115:0] mux_pipeline_008_source0_data;                                 // mux_pipeline_008:out_data -> cmd_mux_008:sink0_data
	wire          mux_pipeline_008_source0_ready;                                // cmd_mux_008:sink0_ready -> mux_pipeline_008:out_ready
	wire   [11:0] mux_pipeline_008_source0_channel;                              // mux_pipeline_008:out_channel -> cmd_mux_008:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                        // mux_pipeline_008:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                          // mux_pipeline_008:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                      // cmd_demux_001:src4_valid -> mux_pipeline_009:in_valid
	wire  [115:0] cmd_demux_001_src4_data;                                       // cmd_demux_001:src4_data -> mux_pipeline_009:in_data
	wire          cmd_demux_001_src4_ready;                                      // mux_pipeline_009:in_ready -> cmd_demux_001:src4_ready
	wire   [11:0] cmd_demux_001_src4_channel;                                    // cmd_demux_001:src4_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_001_src4_startofpacket;                              // cmd_demux_001:src4_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                // cmd_demux_001:src4_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                // mux_pipeline_009:out_valid -> cmd_mux_008:sink1_valid
	wire  [115:0] mux_pipeline_009_source0_data;                                 // mux_pipeline_009:out_data -> cmd_mux_008:sink1_data
	wire          mux_pipeline_009_source0_ready;                                // cmd_mux_008:sink1_ready -> mux_pipeline_009:out_ready
	wire   [11:0] mux_pipeline_009_source0_channel;                              // mux_pipeline_009:out_channel -> cmd_mux_008:sink1_channel
	wire          mux_pipeline_009_source0_startofpacket;                        // mux_pipeline_009:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                          // mux_pipeline_009:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_src5_valid;                                          // cmd_demux:src5_valid -> mux_pipeline_010:in_valid
	wire  [115:0] cmd_demux_src5_data;                                           // cmd_demux:src5_data -> mux_pipeline_010:in_data
	wire          cmd_demux_src5_ready;                                          // mux_pipeline_010:in_ready -> cmd_demux:src5_ready
	wire   [11:0] cmd_demux_src5_channel;                                        // cmd_demux:src5_channel -> mux_pipeline_010:in_channel
	wire          cmd_demux_src5_startofpacket;                                  // cmd_demux:src5_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                    // cmd_demux:src5_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                // mux_pipeline_010:out_valid -> cmd_mux_009:sink0_valid
	wire  [115:0] mux_pipeline_010_source0_data;                                 // mux_pipeline_010:out_data -> cmd_mux_009:sink0_data
	wire          mux_pipeline_010_source0_ready;                                // cmd_mux_009:sink0_ready -> mux_pipeline_010:out_ready
	wire   [11:0] mux_pipeline_010_source0_channel;                              // mux_pipeline_010:out_channel -> cmd_mux_009:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                        // mux_pipeline_010:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                          // mux_pipeline_010:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                      // cmd_demux_001:src5_valid -> mux_pipeline_011:in_valid
	wire  [115:0] cmd_demux_001_src5_data;                                       // cmd_demux_001:src5_data -> mux_pipeline_011:in_data
	wire          cmd_demux_001_src5_ready;                                      // mux_pipeline_011:in_ready -> cmd_demux_001:src5_ready
	wire   [11:0] cmd_demux_001_src5_channel;                                    // cmd_demux_001:src5_channel -> mux_pipeline_011:in_channel
	wire          cmd_demux_001_src5_startofpacket;                              // cmd_demux_001:src5_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                // cmd_demux_001:src5_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                // mux_pipeline_011:out_valid -> cmd_mux_009:sink1_valid
	wire  [115:0] mux_pipeline_011_source0_data;                                 // mux_pipeline_011:out_data -> cmd_mux_009:sink1_data
	wire          mux_pipeline_011_source0_ready;                                // cmd_mux_009:sink1_ready -> mux_pipeline_011:out_ready
	wire   [11:0] mux_pipeline_011_source0_channel;                              // mux_pipeline_011:out_channel -> cmd_mux_009:sink1_channel
	wire          mux_pipeline_011_source0_startofpacket;                        // mux_pipeline_011:out_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                          // mux_pipeline_011:out_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_src6_valid;                                          // cmd_demux:src6_valid -> mux_pipeline_012:in_valid
	wire  [115:0] cmd_demux_src6_data;                                           // cmd_demux:src6_data -> mux_pipeline_012:in_data
	wire          cmd_demux_src6_ready;                                          // mux_pipeline_012:in_ready -> cmd_demux:src6_ready
	wire   [11:0] cmd_demux_src6_channel;                                        // cmd_demux:src6_channel -> mux_pipeline_012:in_channel
	wire          cmd_demux_src6_startofpacket;                                  // cmd_demux:src6_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                    // cmd_demux:src6_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                // mux_pipeline_012:out_valid -> cmd_mux_010:sink0_valid
	wire  [115:0] mux_pipeline_012_source0_data;                                 // mux_pipeline_012:out_data -> cmd_mux_010:sink0_data
	wire          mux_pipeline_012_source0_ready;                                // cmd_mux_010:sink0_ready -> mux_pipeline_012:out_ready
	wire   [11:0] mux_pipeline_012_source0_channel;                              // mux_pipeline_012:out_channel -> cmd_mux_010:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                        // mux_pipeline_012:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                          // mux_pipeline_012:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                      // cmd_demux_001:src6_valid -> mux_pipeline_013:in_valid
	wire  [115:0] cmd_demux_001_src6_data;                                       // cmd_demux_001:src6_data -> mux_pipeline_013:in_data
	wire          cmd_demux_001_src6_ready;                                      // mux_pipeline_013:in_ready -> cmd_demux_001:src6_ready
	wire   [11:0] cmd_demux_001_src6_channel;                                    // cmd_demux_001:src6_channel -> mux_pipeline_013:in_channel
	wire          cmd_demux_001_src6_startofpacket;                              // cmd_demux_001:src6_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                // cmd_demux_001:src6_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                // mux_pipeline_013:out_valid -> cmd_mux_010:sink1_valid
	wire  [115:0] mux_pipeline_013_source0_data;                                 // mux_pipeline_013:out_data -> cmd_mux_010:sink1_data
	wire          mux_pipeline_013_source0_ready;                                // cmd_mux_010:sink1_ready -> mux_pipeline_013:out_ready
	wire   [11:0] mux_pipeline_013_source0_channel;                              // mux_pipeline_013:out_channel -> cmd_mux_010:sink1_channel
	wire          mux_pipeline_013_source0_startofpacket;                        // mux_pipeline_013:out_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                          // mux_pipeline_013:out_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_src7_valid;                                          // cmd_demux:src7_valid -> mux_pipeline_014:in_valid
	wire  [115:0] cmd_demux_src7_data;                                           // cmd_demux:src7_data -> mux_pipeline_014:in_data
	wire          cmd_demux_src7_ready;                                          // mux_pipeline_014:in_ready -> cmd_demux:src7_ready
	wire   [11:0] cmd_demux_src7_channel;                                        // cmd_demux:src7_channel -> mux_pipeline_014:in_channel
	wire          cmd_demux_src7_startofpacket;                                  // cmd_demux:src7_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                    // cmd_demux:src7_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                // mux_pipeline_014:out_valid -> cmd_mux_011:sink0_valid
	wire  [115:0] mux_pipeline_014_source0_data;                                 // mux_pipeline_014:out_data -> cmd_mux_011:sink0_data
	wire          mux_pipeline_014_source0_ready;                                // cmd_mux_011:sink0_ready -> mux_pipeline_014:out_ready
	wire   [11:0] mux_pipeline_014_source0_channel;                              // mux_pipeline_014:out_channel -> cmd_mux_011:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                        // mux_pipeline_014:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                          // mux_pipeline_014:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                      // cmd_demux_001:src7_valid -> mux_pipeline_015:in_valid
	wire  [115:0] cmd_demux_001_src7_data;                                       // cmd_demux_001:src7_data -> mux_pipeline_015:in_data
	wire          cmd_demux_001_src7_ready;                                      // mux_pipeline_015:in_ready -> cmd_demux_001:src7_ready
	wire   [11:0] cmd_demux_001_src7_channel;                                    // cmd_demux_001:src7_channel -> mux_pipeline_015:in_channel
	wire          cmd_demux_001_src7_startofpacket;                              // cmd_demux_001:src7_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                // cmd_demux_001:src7_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                // mux_pipeline_015:out_valid -> cmd_mux_011:sink1_valid
	wire  [115:0] mux_pipeline_015_source0_data;                                 // mux_pipeline_015:out_data -> cmd_mux_011:sink1_data
	wire          mux_pipeline_015_source0_ready;                                // cmd_mux_011:sink1_ready -> mux_pipeline_015:out_ready
	wire   [11:0] mux_pipeline_015_source0_channel;                              // mux_pipeline_015:out_channel -> cmd_mux_011:sink1_channel
	wire          mux_pipeline_015_source0_startofpacket;                        // mux_pipeline_015:out_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                          // mux_pipeline_015:out_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> mux_pipeline_016:in_valid
	wire  [115:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> mux_pipeline_016:in_data
	wire          rsp_demux_src0_ready;                                          // mux_pipeline_016:in_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> mux_pipeline_016:in_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                // mux_pipeline_016:out_valid -> rsp_mux:sink0_valid
	wire  [115:0] mux_pipeline_016_source0_data;                                 // mux_pipeline_016:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_016_source0_ready;                                // rsp_mux:sink0_ready -> mux_pipeline_016:out_ready
	wire   [11:0] mux_pipeline_016_source0_channel;                              // mux_pipeline_016:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_016_source0_startofpacket;                        // mux_pipeline_016:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                          // mux_pipeline_016:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                      // rsp_demux_002:src0_valid -> mux_pipeline_017:in_valid
	wire  [115:0] rsp_demux_002_src0_data;                                       // rsp_demux_002:src0_data -> mux_pipeline_017:in_data
	wire          rsp_demux_002_src0_ready;                                      // mux_pipeline_017:in_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                    // rsp_demux_002:src0_channel -> mux_pipeline_017:in_channel
	wire          rsp_demux_002_src0_startofpacket;                              // rsp_demux_002:src0_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                // rsp_demux_002:src0_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                // mux_pipeline_017:out_valid -> rsp_mux:sink1_valid
	wire  [115:0] mux_pipeline_017_source0_data;                                 // mux_pipeline_017:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_017_source0_ready;                                // rsp_mux:sink1_ready -> mux_pipeline_017:out_ready
	wire   [11:0] mux_pipeline_017_source0_channel;                              // mux_pipeline_017:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_017_source0_startofpacket;                        // mux_pipeline_017:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                          // mux_pipeline_017:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                      // rsp_demux_004:src0_valid -> mux_pipeline_018:in_valid
	wire  [115:0] rsp_demux_004_src0_data;                                       // rsp_demux_004:src0_data -> mux_pipeline_018:in_data
	wire          rsp_demux_004_src0_ready;                                      // mux_pipeline_018:in_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                    // rsp_demux_004:src0_channel -> mux_pipeline_018:in_channel
	wire          rsp_demux_004_src0_startofpacket;                              // rsp_demux_004:src0_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                // rsp_demux_004:src0_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                // mux_pipeline_018:out_valid -> rsp_mux:sink2_valid
	wire  [115:0] mux_pipeline_018_source0_data;                                 // mux_pipeline_018:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_018_source0_ready;                                // rsp_mux:sink2_ready -> mux_pipeline_018:out_ready
	wire   [11:0] mux_pipeline_018_source0_channel;                              // mux_pipeline_018:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_018_source0_startofpacket;                        // mux_pipeline_018:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                          // mux_pipeline_018:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                      // rsp_demux_006:src0_valid -> mux_pipeline_019:in_valid
	wire  [115:0] rsp_demux_006_src0_data;                                       // rsp_demux_006:src0_data -> mux_pipeline_019:in_data
	wire          rsp_demux_006_src0_ready;                                      // mux_pipeline_019:in_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                    // rsp_demux_006:src0_channel -> mux_pipeline_019:in_channel
	wire          rsp_demux_006_src0_startofpacket;                              // rsp_demux_006:src0_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                // rsp_demux_006:src0_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                // mux_pipeline_019:out_valid -> rsp_mux:sink3_valid
	wire  [115:0] mux_pipeline_019_source0_data;                                 // mux_pipeline_019:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_019_source0_ready;                                // rsp_mux:sink3_ready -> mux_pipeline_019:out_ready
	wire   [11:0] mux_pipeline_019_source0_channel;                              // mux_pipeline_019:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_019_source0_startofpacket;                        // mux_pipeline_019:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                          // mux_pipeline_019:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_008_src0_valid;                                      // rsp_demux_008:src0_valid -> mux_pipeline_020:in_valid
	wire  [115:0] rsp_demux_008_src0_data;                                       // rsp_demux_008:src0_data -> mux_pipeline_020:in_data
	wire          rsp_demux_008_src0_ready;                                      // mux_pipeline_020:in_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                    // rsp_demux_008:src0_channel -> mux_pipeline_020:in_channel
	wire          rsp_demux_008_src0_startofpacket;                              // rsp_demux_008:src0_startofpacket -> mux_pipeline_020:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                // rsp_demux_008:src0_endofpacket -> mux_pipeline_020:in_endofpacket
	wire          mux_pipeline_020_source0_valid;                                // mux_pipeline_020:out_valid -> rsp_mux:sink4_valid
	wire  [115:0] mux_pipeline_020_source0_data;                                 // mux_pipeline_020:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_020_source0_ready;                                // rsp_mux:sink4_ready -> mux_pipeline_020:out_ready
	wire   [11:0] mux_pipeline_020_source0_channel;                              // mux_pipeline_020:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_020_source0_startofpacket;                        // mux_pipeline_020:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_020_source0_endofpacket;                          // mux_pipeline_020:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_009_src0_valid;                                      // rsp_demux_009:src0_valid -> mux_pipeline_021:in_valid
	wire  [115:0] rsp_demux_009_src0_data;                                       // rsp_demux_009:src0_data -> mux_pipeline_021:in_data
	wire          rsp_demux_009_src0_ready;                                      // mux_pipeline_021:in_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                    // rsp_demux_009:src0_channel -> mux_pipeline_021:in_channel
	wire          rsp_demux_009_src0_startofpacket;                              // rsp_demux_009:src0_startofpacket -> mux_pipeline_021:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                // rsp_demux_009:src0_endofpacket -> mux_pipeline_021:in_endofpacket
	wire          mux_pipeline_021_source0_valid;                                // mux_pipeline_021:out_valid -> rsp_mux:sink5_valid
	wire  [115:0] mux_pipeline_021_source0_data;                                 // mux_pipeline_021:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_021_source0_ready;                                // rsp_mux:sink5_ready -> mux_pipeline_021:out_ready
	wire   [11:0] mux_pipeline_021_source0_channel;                              // mux_pipeline_021:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_021_source0_startofpacket;                        // mux_pipeline_021:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_021_source0_endofpacket;                          // mux_pipeline_021:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_010_src0_valid;                                      // rsp_demux_010:src0_valid -> mux_pipeline_022:in_valid
	wire  [115:0] rsp_demux_010_src0_data;                                       // rsp_demux_010:src0_data -> mux_pipeline_022:in_data
	wire          rsp_demux_010_src0_ready;                                      // mux_pipeline_022:in_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                    // rsp_demux_010:src0_channel -> mux_pipeline_022:in_channel
	wire          rsp_demux_010_src0_startofpacket;                              // rsp_demux_010:src0_startofpacket -> mux_pipeline_022:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                // rsp_demux_010:src0_endofpacket -> mux_pipeline_022:in_endofpacket
	wire          mux_pipeline_022_source0_valid;                                // mux_pipeline_022:out_valid -> rsp_mux:sink6_valid
	wire  [115:0] mux_pipeline_022_source0_data;                                 // mux_pipeline_022:out_data -> rsp_mux:sink6_data
	wire          mux_pipeline_022_source0_ready;                                // rsp_mux:sink6_ready -> mux_pipeline_022:out_ready
	wire   [11:0] mux_pipeline_022_source0_channel;                              // mux_pipeline_022:out_channel -> rsp_mux:sink6_channel
	wire          mux_pipeline_022_source0_startofpacket;                        // mux_pipeline_022:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          mux_pipeline_022_source0_endofpacket;                          // mux_pipeline_022:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_011_src0_valid;                                      // rsp_demux_011:src0_valid -> mux_pipeline_023:in_valid
	wire  [115:0] rsp_demux_011_src0_data;                                       // rsp_demux_011:src0_data -> mux_pipeline_023:in_data
	wire          rsp_demux_011_src0_ready;                                      // mux_pipeline_023:in_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                    // rsp_demux_011:src0_channel -> mux_pipeline_023:in_channel
	wire          rsp_demux_011_src0_startofpacket;                              // rsp_demux_011:src0_startofpacket -> mux_pipeline_023:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                // rsp_demux_011:src0_endofpacket -> mux_pipeline_023:in_endofpacket
	wire          mux_pipeline_023_source0_valid;                                // mux_pipeline_023:out_valid -> rsp_mux:sink7_valid
	wire  [115:0] mux_pipeline_023_source0_data;                                 // mux_pipeline_023:out_data -> rsp_mux:sink7_data
	wire          mux_pipeline_023_source0_ready;                                // rsp_mux:sink7_ready -> mux_pipeline_023:out_ready
	wire   [11:0] mux_pipeline_023_source0_channel;                              // mux_pipeline_023:out_channel -> rsp_mux:sink7_channel
	wire          mux_pipeline_023_source0_startofpacket;                        // mux_pipeline_023:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          mux_pipeline_023_source0_endofpacket;                          // mux_pipeline_023:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> mux_pipeline_024:in_valid
	wire  [115:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> mux_pipeline_024:in_data
	wire          rsp_demux_001_src0_ready;                                      // mux_pipeline_024:in_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> mux_pipeline_024:in_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> mux_pipeline_024:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> mux_pipeline_024:in_endofpacket
	wire          mux_pipeline_024_source0_valid;                                // mux_pipeline_024:out_valid -> rsp_mux_001:sink0_valid
	wire  [115:0] mux_pipeline_024_source0_data;                                 // mux_pipeline_024:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_024_source0_ready;                                // rsp_mux_001:sink0_ready -> mux_pipeline_024:out_ready
	wire   [11:0] mux_pipeline_024_source0_channel;                              // mux_pipeline_024:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_024_source0_startofpacket;                        // mux_pipeline_024:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_024_source0_endofpacket;                          // mux_pipeline_024:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                      // rsp_demux_003:src0_valid -> mux_pipeline_025:in_valid
	wire  [115:0] rsp_demux_003_src0_data;                                       // rsp_demux_003:src0_data -> mux_pipeline_025:in_data
	wire          rsp_demux_003_src0_ready;                                      // mux_pipeline_025:in_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                    // rsp_demux_003:src0_channel -> mux_pipeline_025:in_channel
	wire          rsp_demux_003_src0_startofpacket;                              // rsp_demux_003:src0_startofpacket -> mux_pipeline_025:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                // rsp_demux_003:src0_endofpacket -> mux_pipeline_025:in_endofpacket
	wire          mux_pipeline_025_source0_valid;                                // mux_pipeline_025:out_valid -> rsp_mux_001:sink1_valid
	wire  [115:0] mux_pipeline_025_source0_data;                                 // mux_pipeline_025:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_025_source0_ready;                                // rsp_mux_001:sink1_ready -> mux_pipeline_025:out_ready
	wire   [11:0] mux_pipeline_025_source0_channel;                              // mux_pipeline_025:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_025_source0_startofpacket;                        // mux_pipeline_025:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_025_source0_endofpacket;                          // mux_pipeline_025:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                      // rsp_demux_005:src0_valid -> mux_pipeline_026:in_valid
	wire  [115:0] rsp_demux_005_src0_data;                                       // rsp_demux_005:src0_data -> mux_pipeline_026:in_data
	wire          rsp_demux_005_src0_ready;                                      // mux_pipeline_026:in_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                    // rsp_demux_005:src0_channel -> mux_pipeline_026:in_channel
	wire          rsp_demux_005_src0_startofpacket;                              // rsp_demux_005:src0_startofpacket -> mux_pipeline_026:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                // rsp_demux_005:src0_endofpacket -> mux_pipeline_026:in_endofpacket
	wire          mux_pipeline_026_source0_valid;                                // mux_pipeline_026:out_valid -> rsp_mux_001:sink2_valid
	wire  [115:0] mux_pipeline_026_source0_data;                                 // mux_pipeline_026:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_026_source0_ready;                                // rsp_mux_001:sink2_ready -> mux_pipeline_026:out_ready
	wire   [11:0] mux_pipeline_026_source0_channel;                              // mux_pipeline_026:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_026_source0_startofpacket;                        // mux_pipeline_026:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_026_source0_endofpacket;                          // mux_pipeline_026:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_007_src0_valid;                                      // rsp_demux_007:src0_valid -> mux_pipeline_027:in_valid
	wire  [115:0] rsp_demux_007_src0_data;                                       // rsp_demux_007:src0_data -> mux_pipeline_027:in_data
	wire          rsp_demux_007_src0_ready;                                      // mux_pipeline_027:in_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                    // rsp_demux_007:src0_channel -> mux_pipeline_027:in_channel
	wire          rsp_demux_007_src0_startofpacket;                              // rsp_demux_007:src0_startofpacket -> mux_pipeline_027:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                // rsp_demux_007:src0_endofpacket -> mux_pipeline_027:in_endofpacket
	wire          mux_pipeline_027_source0_valid;                                // mux_pipeline_027:out_valid -> rsp_mux_001:sink3_valid
	wire  [115:0] mux_pipeline_027_source0_data;                                 // mux_pipeline_027:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_027_source0_ready;                                // rsp_mux_001:sink3_ready -> mux_pipeline_027:out_ready
	wire   [11:0] mux_pipeline_027_source0_channel;                              // mux_pipeline_027:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_027_source0_startofpacket;                        // mux_pipeline_027:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_027_source0_endofpacket;                          // mux_pipeline_027:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_008_src1_valid;                                      // rsp_demux_008:src1_valid -> mux_pipeline_028:in_valid
	wire  [115:0] rsp_demux_008_src1_data;                                       // rsp_demux_008:src1_data -> mux_pipeline_028:in_data
	wire          rsp_demux_008_src1_ready;                                      // mux_pipeline_028:in_ready -> rsp_demux_008:src1_ready
	wire   [11:0] rsp_demux_008_src1_channel;                                    // rsp_demux_008:src1_channel -> mux_pipeline_028:in_channel
	wire          rsp_demux_008_src1_startofpacket;                              // rsp_demux_008:src1_startofpacket -> mux_pipeline_028:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                // rsp_demux_008:src1_endofpacket -> mux_pipeline_028:in_endofpacket
	wire          mux_pipeline_028_source0_valid;                                // mux_pipeline_028:out_valid -> rsp_mux_001:sink4_valid
	wire  [115:0] mux_pipeline_028_source0_data;                                 // mux_pipeline_028:out_data -> rsp_mux_001:sink4_data
	wire          mux_pipeline_028_source0_ready;                                // rsp_mux_001:sink4_ready -> mux_pipeline_028:out_ready
	wire   [11:0] mux_pipeline_028_source0_channel;                              // mux_pipeline_028:out_channel -> rsp_mux_001:sink4_channel
	wire          mux_pipeline_028_source0_startofpacket;                        // mux_pipeline_028:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          mux_pipeline_028_source0_endofpacket;                          // mux_pipeline_028:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_009_src1_valid;                                      // rsp_demux_009:src1_valid -> mux_pipeline_029:in_valid
	wire  [115:0] rsp_demux_009_src1_data;                                       // rsp_demux_009:src1_data -> mux_pipeline_029:in_data
	wire          rsp_demux_009_src1_ready;                                      // mux_pipeline_029:in_ready -> rsp_demux_009:src1_ready
	wire   [11:0] rsp_demux_009_src1_channel;                                    // rsp_demux_009:src1_channel -> mux_pipeline_029:in_channel
	wire          rsp_demux_009_src1_startofpacket;                              // rsp_demux_009:src1_startofpacket -> mux_pipeline_029:in_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                // rsp_demux_009:src1_endofpacket -> mux_pipeline_029:in_endofpacket
	wire          mux_pipeline_029_source0_valid;                                // mux_pipeline_029:out_valid -> rsp_mux_001:sink5_valid
	wire  [115:0] mux_pipeline_029_source0_data;                                 // mux_pipeline_029:out_data -> rsp_mux_001:sink5_data
	wire          mux_pipeline_029_source0_ready;                                // rsp_mux_001:sink5_ready -> mux_pipeline_029:out_ready
	wire   [11:0] mux_pipeline_029_source0_channel;                              // mux_pipeline_029:out_channel -> rsp_mux_001:sink5_channel
	wire          mux_pipeline_029_source0_startofpacket;                        // mux_pipeline_029:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          mux_pipeline_029_source0_endofpacket;                          // mux_pipeline_029:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_010_src1_valid;                                      // rsp_demux_010:src1_valid -> mux_pipeline_030:in_valid
	wire  [115:0] rsp_demux_010_src1_data;                                       // rsp_demux_010:src1_data -> mux_pipeline_030:in_data
	wire          rsp_demux_010_src1_ready;                                      // mux_pipeline_030:in_ready -> rsp_demux_010:src1_ready
	wire   [11:0] rsp_demux_010_src1_channel;                                    // rsp_demux_010:src1_channel -> mux_pipeline_030:in_channel
	wire          rsp_demux_010_src1_startofpacket;                              // rsp_demux_010:src1_startofpacket -> mux_pipeline_030:in_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                // rsp_demux_010:src1_endofpacket -> mux_pipeline_030:in_endofpacket
	wire          mux_pipeline_030_source0_valid;                                // mux_pipeline_030:out_valid -> rsp_mux_001:sink6_valid
	wire  [115:0] mux_pipeline_030_source0_data;                                 // mux_pipeline_030:out_data -> rsp_mux_001:sink6_data
	wire          mux_pipeline_030_source0_ready;                                // rsp_mux_001:sink6_ready -> mux_pipeline_030:out_ready
	wire   [11:0] mux_pipeline_030_source0_channel;                              // mux_pipeline_030:out_channel -> rsp_mux_001:sink6_channel
	wire          mux_pipeline_030_source0_startofpacket;                        // mux_pipeline_030:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          mux_pipeline_030_source0_endofpacket;                          // mux_pipeline_030:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_011_src1_valid;                                      // rsp_demux_011:src1_valid -> mux_pipeline_031:in_valid
	wire  [115:0] rsp_demux_011_src1_data;                                       // rsp_demux_011:src1_data -> mux_pipeline_031:in_data
	wire          rsp_demux_011_src1_ready;                                      // mux_pipeline_031:in_ready -> rsp_demux_011:src1_ready
	wire   [11:0] rsp_demux_011_src1_channel;                                    // rsp_demux_011:src1_channel -> mux_pipeline_031:in_channel
	wire          rsp_demux_011_src1_startofpacket;                              // rsp_demux_011:src1_startofpacket -> mux_pipeline_031:in_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                // rsp_demux_011:src1_endofpacket -> mux_pipeline_031:in_endofpacket
	wire          mux_pipeline_031_source0_valid;                                // mux_pipeline_031:out_valid -> rsp_mux_001:sink7_valid
	wire  [115:0] mux_pipeline_031_source0_data;                                 // mux_pipeline_031:out_data -> rsp_mux_001:sink7_data
	wire          mux_pipeline_031_source0_ready;                                // rsp_mux_001:sink7_ready -> mux_pipeline_031:out_ready
	wire   [11:0] mux_pipeline_031_source0_channel;                              // mux_pipeline_031:out_channel -> rsp_mux_001:sink7_channel
	wire          mux_pipeline_031_source0_startofpacket;                        // mux_pipeline_031:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          mux_pipeline_031_source0_endofpacket;                          // mux_pipeline_031:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          sys_id_control_slave_agent_rdata_fifo_out_valid;               // sys_id_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sys_id_control_slave_agent_rdata_fifo_out_data;                // sys_id_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sys_id_control_slave_agent_rdata_fifo_out_ready;               // avalon_st_adapter:in_0_ready -> sys_id_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> sys_id_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> sys_id_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // sys_id_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> sys_id_control_slave_agent:rdata_fifo_sink_error
	wire          sys_gpio_bd_s1_agent_rdata_fifo_out_valid;                     // sys_gpio_bd_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sys_gpio_bd_s1_agent_rdata_fifo_out_data;                      // sys_gpio_bd_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sys_gpio_bd_s1_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_001:in_0_ready -> sys_gpio_bd_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                             // avalon_st_adapter_001:out_0_valid -> sys_gpio_bd_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                              // avalon_st_adapter_001:out_0_data -> sys_gpio_bd_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                             // sys_gpio_bd_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                             // avalon_st_adapter_001:out_0_error -> sys_gpio_bd_s1_agent:rdata_fifo_sink_error
	wire          sys_gpio_in_s1_agent_rdata_fifo_out_valid;                     // sys_gpio_in_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sys_gpio_in_s1_agent_rdata_fifo_out_data;                      // sys_gpio_in_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sys_gpio_in_s1_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_002:in_0_ready -> sys_gpio_in_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                             // avalon_st_adapter_002:out_0_valid -> sys_gpio_in_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                              // avalon_st_adapter_002:out_0_data -> sys_gpio_in_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                             // sys_gpio_in_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                             // avalon_st_adapter_002:out_0_error -> sys_gpio_in_s1_agent:rdata_fifo_sink_error
	wire          sys_gpio_out_s1_agent_rdata_fifo_out_valid;                    // sys_gpio_out_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sys_gpio_out_s1_agent_rdata_fifo_out_data;                     // sys_gpio_out_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sys_gpio_out_s1_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_003:in_0_ready -> sys_gpio_out_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                             // avalon_st_adapter_003:out_0_valid -> sys_gpio_out_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                              // avalon_st_adapter_003:out_0_data -> sys_gpio_out_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                             // sys_gpio_out_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                             // avalon_st_adapter_003:out_0_error -> sys_gpio_out_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_id_control_slave_translator (
		.clk                    (sys_hps_h2f_user1_clock_clk),                 //                      clk.clk
		.reset                  (sys_id_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sys_id_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sys_id_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sys_id_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sys_id_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sys_id_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sys_id_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sys_id_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sys_id_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sys_id_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sys_id_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sys_id_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sys_id_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sys_id_control_slave_readdata),               //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_gpio_bd_s1_translator (
		.clk                    (sys_hps_h2f_user1_clock_clk),              //                      clk.clk
		.reset                  (sys_id_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_gpio_bd_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (sys_gpio_bd_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (sys_gpio_bd_s1_agent_m0_read),             //                         .read
		.uav_write              (sys_gpio_bd_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (sys_gpio_bd_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (sys_gpio_bd_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (sys_gpio_bd_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (sys_gpio_bd_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (sys_gpio_bd_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (sys_gpio_bd_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (sys_gpio_bd_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (sys_gpio_bd_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (sys_gpio_bd_s1_write),                     //                         .write
		.av_readdata            (sys_gpio_bd_s1_readdata),                  //                         .readdata
		.av_writedata           (sys_gpio_bd_s1_writedata),                 //                         .writedata
		.av_chipselect          (sys_gpio_bd_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_gpio_in_s1_translator (
		.clk                    (sys_hps_h2f_user1_clock_clk),              //                      clk.clk
		.reset                  (sys_id_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_gpio_in_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (sys_gpio_in_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (sys_gpio_in_s1_agent_m0_read),             //                         .read
		.uav_write              (sys_gpio_in_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (sys_gpio_in_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (sys_gpio_in_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (sys_gpio_in_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (sys_gpio_in_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (sys_gpio_in_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (sys_gpio_in_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (sys_gpio_in_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (sys_gpio_in_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (sys_gpio_in_s1_write),                     //                         .write
		.av_readdata            (sys_gpio_in_s1_readdata),                  //                         .readdata
		.av_writedata           (sys_gpio_in_s1_writedata),                 //                         .writedata
		.av_chipselect          (sys_gpio_in_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_gpio_out_s1_translator (
		.clk                    (sys_hps_h2f_user1_clock_clk),              //                      clk.clk
		.reset                  (sys_id_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_gpio_out_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (sys_gpio_out_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (sys_gpio_out_s1_agent_m0_read),            //                         .read
		.uav_write              (sys_gpio_out_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (sys_gpio_out_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (sys_gpio_out_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (sys_gpio_out_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (sys_gpio_out_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (sys_gpio_out_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (sys_gpio_out_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (sys_gpio_out_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (sys_gpio_out_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (sys_gpio_out_s1_write),                    //                         .write
		.av_readdata            (sys_gpio_out_s1_readdata),                 //                         .readdata
		.av_writedata           (sys_gpio_out_s1_writedata),                //                         .writedata
		.av_chipselect          (sys_gpio_out_s1_chipselect),               //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (92),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.ID                        (0)
	) sys_hps_h2f_lw_axi_master_agent (
		.aclk                   (sys_hps_h2f_user1_clock_clk),                                            //              clk.clk
		.aresetn                (~sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (sys_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (sys_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (sys_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (sys_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (sys_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (sys_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (sys_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (sys_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (sys_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (sys_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (sys_hps_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (sys_hps_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (sys_hps_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (sys_hps_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (sys_hps_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (sys_hps_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (sys_hps_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (sys_hps_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (sys_hps_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (sys_hps_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (sys_hps_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (sys_hps_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (sys_hps_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (sys_hps_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (sys_hps_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (sys_hps_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (sys_hps_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (sys_hps_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (sys_hps_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (sys_hps_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (sys_hps_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (sys_hps_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (sys_hps_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (sys_hps_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (sys_hps_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (sys_hps_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (sys_hps_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (sys_hps_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (sys_hps_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (sys_hps_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (sys_hps_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (sys_hps_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (sys_hps_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (sys_hps_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (sys_hps_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (sys_hps_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                   //      (terminated)
		.aruser                 (1'b0),                                                                   //      (terminated)
		.awqos                  (4'b0000),                                                                //      (terminated)
		.arqos                  (4'b0000),                                                                //      (terminated)
		.awregion               (4'b0000),                                                                //      (terminated)
		.arregion               (4'b0000),                                                                //      (terminated)
		.wuser                  (1'b0),                                                                   //      (terminated)
		.ruser                  (),                                                                       //      (terminated)
		.buser                  ()                                                                        //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (85),
		.PKT_QOS_L                   (85),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (92),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (84),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (83),
		.PKT_DATA_SIDEBAND_L         (83),
		.PKT_ADDR_SIDEBAND_H         (82),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (88),
		.PKT_SRC_ID_L                (86),
		.PKT_DEST_ID_H               (91),
		.PKT_DEST_ID_L               (89),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (11),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (12),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) hdmi_dmac_0_s_axi_agent (
		.aclk                   (sys_hps_h2f_user1_clock_clk),                    //        clock_sink.clk
		.aresetn                (~sys_id_reset_reset_bridge_in_reset_reset),      //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),               //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),               //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),             //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),       //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),         //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                   //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                   //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                    //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                 //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),           //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),             //                  .endofpacket
		.read_rp_ready          (hdmi_dmac_0_s_axi_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (hdmi_dmac_0_s_axi_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (hdmi_dmac_0_s_axi_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (hdmi_dmac_0_s_axi_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (hdmi_dmac_0_s_axi_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (hdmi_dmac_0_s_axi_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (hdmi_dmac_0_s_axi_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (hdmi_dmac_0_s_axi_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (hdmi_dmac_0_s_axi_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (hdmi_dmac_0_s_axi_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (hdmi_dmac_0_s_axi_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (hdmi_dmac_0_s_axi_awprot),                       //                  .awprot
		.awvalid                (hdmi_dmac_0_s_axi_awvalid),                      //                  .awvalid
		.awready                (hdmi_dmac_0_s_axi_awready),                      //                  .awready
		.wdata                  (hdmi_dmac_0_s_axi_wdata),                        //                  .wdata
		.wstrb                  (hdmi_dmac_0_s_axi_wstrb),                        //                  .wstrb
		.wvalid                 (hdmi_dmac_0_s_axi_wvalid),                       //                  .wvalid
		.wready                 (hdmi_dmac_0_s_axi_wready),                       //                  .wready
		.bresp                  (hdmi_dmac_0_s_axi_bresp),                        //                  .bresp
		.bvalid                 (hdmi_dmac_0_s_axi_bvalid),                       //                  .bvalid
		.bready                 (hdmi_dmac_0_s_axi_bready),                       //                  .bready
		.araddr                 (hdmi_dmac_0_s_axi_araddr),                       //                  .araddr
		.arprot                 (hdmi_dmac_0_s_axi_arprot),                       //                  .arprot
		.arvalid                (hdmi_dmac_0_s_axi_arvalid),                      //                  .arvalid
		.arready                (hdmi_dmac_0_s_axi_arready),                      //                  .arready
		.rdata                  (hdmi_dmac_0_s_axi_rdata),                        //                  .rdata
		.rresp                  (hdmi_dmac_0_s_axi_rresp),                        //                  .rresp
		.rvalid                 (hdmi_dmac_0_s_axi_rvalid),                       //                  .rvalid
		.rready                 (hdmi_dmac_0_s_axi_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (85),
		.PKT_QOS_L                   (85),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (92),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (84),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (83),
		.PKT_DATA_SIDEBAND_L         (83),
		.PKT_ADDR_SIDEBAND_H         (82),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (88),
		.PKT_SRC_ID_L                (86),
		.PKT_DEST_ID_H               (91),
		.PKT_DEST_ID_L               (89),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (12),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_hdmi_tx_0_s_axi_agent (
		.aclk                   (sys_hps_h2f_user1_clock_clk),                      //        clock_sink.clk
		.aresetn                (~sys_id_reset_reset_bridge_in_reset_reset),        //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_005_source0_valid),                 //           read_cp.valid
		.read_cp_ready          (agent_pipeline_005_source0_ready),                 //                  .ready
		.read_cp_data           (agent_pipeline_005_source0_data),                  //                  .data
		.read_cp_channel        (agent_pipeline_005_source0_channel),               //                  .channel
		.read_cp_startofpacket  (agent_pipeline_005_source0_startofpacket),         //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_005_source0_endofpacket),           //                  .endofpacket
		.write_cp_ready         (agent_pipeline_004_source0_ready),                 //          write_cp.ready
		.write_cp_valid         (agent_pipeline_004_source0_valid),                 //                  .valid
		.write_cp_data          (agent_pipeline_004_source0_data),                  //                  .data
		.write_cp_channel       (agent_pipeline_004_source0_channel),               //                  .channel
		.write_cp_startofpacket (agent_pipeline_004_source0_startofpacket),         //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_004_source0_endofpacket),           //                  .endofpacket
		.read_rp_ready          (axi_hdmi_tx_0_s_axi_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (axi_hdmi_tx_0_s_axi_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (axi_hdmi_tx_0_s_axi_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (axi_hdmi_tx_0_s_axi_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (axi_hdmi_tx_0_s_axi_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (axi_hdmi_tx_0_s_axi_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (axi_hdmi_tx_0_s_axi_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (axi_hdmi_tx_0_s_axi_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (axi_hdmi_tx_0_s_axi_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (axi_hdmi_tx_0_s_axi_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (axi_hdmi_tx_0_s_axi_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (axi_hdmi_tx_0_s_axi_awprot),                       //                  .awprot
		.awvalid                (axi_hdmi_tx_0_s_axi_awvalid),                      //                  .awvalid
		.awready                (axi_hdmi_tx_0_s_axi_awready),                      //                  .awready
		.wdata                  (axi_hdmi_tx_0_s_axi_wdata),                        //                  .wdata
		.wstrb                  (axi_hdmi_tx_0_s_axi_wstrb),                        //                  .wstrb
		.wvalid                 (axi_hdmi_tx_0_s_axi_wvalid),                       //                  .wvalid
		.wready                 (axi_hdmi_tx_0_s_axi_wready),                       //                  .wready
		.bresp                  (axi_hdmi_tx_0_s_axi_bresp),                        //                  .bresp
		.bvalid                 (axi_hdmi_tx_0_s_axi_bvalid),                       //                  .bvalid
		.bready                 (axi_hdmi_tx_0_s_axi_bready),                       //                  .bready
		.araddr                 (axi_hdmi_tx_0_s_axi_araddr),                       //                  .araddr
		.arprot                 (axi_hdmi_tx_0_s_axi_arprot),                       //                  .arprot
		.arvalid                (axi_hdmi_tx_0_s_axi_arvalid),                      //                  .arvalid
		.arready                (axi_hdmi_tx_0_s_axi_arready),                      //                  .arready
		.rdata                  (axi_hdmi_tx_0_s_axi_rdata),                        //                  .rdata
		.rresp                  (axi_hdmi_tx_0_s_axi_rresp),                        //                  .rresp
		.rvalid                 (axi_hdmi_tx_0_s_axi_rvalid),                       //                  .rvalid
		.rready                 (axi_hdmi_tx_0_s_axi_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (85),
		.PKT_QOS_L                   (85),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (92),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (84),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (83),
		.PKT_DATA_SIDEBAND_L         (83),
		.PKT_ADDR_SIDEBAND_H         (82),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (88),
		.PKT_SRC_ID_L                (86),
		.PKT_DEST_ID_H               (91),
		.PKT_DEST_ID_L               (89),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (12),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_spi_engine_0_s_axi_agent (
		.aclk                   (sys_hps_h2f_user1_clock_clk),                         //        clock_sink.clk
		.aresetn                (~sys_id_reset_reset_bridge_in_reset_reset),           //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_009_source0_valid),                    //           read_cp.valid
		.read_cp_ready          (agent_pipeline_009_source0_ready),                    //                  .ready
		.read_cp_data           (agent_pipeline_009_source0_data),                     //                  .data
		.read_cp_channel        (agent_pipeline_009_source0_channel),                  //                  .channel
		.read_cp_startofpacket  (agent_pipeline_009_source0_startofpacket),            //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_009_source0_endofpacket),              //                  .endofpacket
		.write_cp_ready         (agent_pipeline_008_source0_ready),                    //          write_cp.ready
		.write_cp_valid         (agent_pipeline_008_source0_valid),                    //                  .valid
		.write_cp_data          (agent_pipeline_008_source0_data),                     //                  .data
		.write_cp_channel       (agent_pipeline_008_source0_channel),                  //                  .channel
		.write_cp_startofpacket (agent_pipeline_008_source0_startofpacket),            //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_008_source0_endofpacket),              //                  .endofpacket
		.read_rp_ready          (axi_spi_engine_0_s_axi_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (axi_spi_engine_0_s_axi_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (axi_spi_engine_0_s_axi_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (axi_spi_engine_0_s_axi_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (axi_spi_engine_0_s_axi_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (axi_spi_engine_0_s_axi_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (axi_spi_engine_0_s_axi_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (axi_spi_engine_0_s_axi_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (axi_spi_engine_0_s_axi_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (axi_spi_engine_0_s_axi_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (axi_spi_engine_0_s_axi_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (axi_spi_engine_0_s_axi_awprot),                       //                  .awprot
		.awvalid                (axi_spi_engine_0_s_axi_awvalid),                      //                  .awvalid
		.awready                (axi_spi_engine_0_s_axi_awready),                      //                  .awready
		.wdata                  (axi_spi_engine_0_s_axi_wdata),                        //                  .wdata
		.wstrb                  (axi_spi_engine_0_s_axi_wstrb),                        //                  .wstrb
		.wvalid                 (axi_spi_engine_0_s_axi_wvalid),                       //                  .wvalid
		.wready                 (axi_spi_engine_0_s_axi_wready),                       //                  .wready
		.bresp                  (axi_spi_engine_0_s_axi_bresp),                        //                  .bresp
		.bvalid                 (axi_spi_engine_0_s_axi_bvalid),                       //                  .bvalid
		.bready                 (axi_spi_engine_0_s_axi_bready),                       //                  .bready
		.araddr                 (axi_spi_engine_0_s_axi_araddr),                       //                  .araddr
		.arprot                 (axi_spi_engine_0_s_axi_arprot),                       //                  .arprot
		.arvalid                (axi_spi_engine_0_s_axi_arvalid),                      //                  .arvalid
		.arready                (axi_spi_engine_0_s_axi_arready),                      //                  .arready
		.rdata                  (axi_spi_engine_0_s_axi_rdata),                        //                  .rdata
		.rresp                  (axi_spi_engine_0_s_axi_rresp),                        //                  .rresp
		.rvalid                 (axi_spi_engine_0_s_axi_rvalid),                       //                  .rvalid
		.rready                 (axi_spi_engine_0_s_axi_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (85),
		.PKT_QOS_L                   (85),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (92),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (84),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (83),
		.PKT_DATA_SIDEBAND_L         (83),
		.PKT_ADDR_SIDEBAND_H         (82),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (88),
		.PKT_SRC_ID_L                (86),
		.PKT_DEST_ID_H               (91),
		.PKT_DEST_ID_L               (89),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (11),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (12),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) spi_dmac_0_s_axi_agent (
		.aclk                   (sys_hps_h2f_user1_clock_clk),                   //        clock_sink.clk
		.aresetn                (~sys_id_reset_reset_bridge_in_reset_reset),     //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_013_source0_valid),              //           read_cp.valid
		.read_cp_ready          (agent_pipeline_013_source0_ready),              //                  .ready
		.read_cp_data           (agent_pipeline_013_source0_data),               //                  .data
		.read_cp_channel        (agent_pipeline_013_source0_channel),            //                  .channel
		.read_cp_startofpacket  (agent_pipeline_013_source0_startofpacket),      //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_013_source0_endofpacket),        //                  .endofpacket
		.write_cp_ready         (agent_pipeline_012_source0_ready),              //          write_cp.ready
		.write_cp_valid         (agent_pipeline_012_source0_valid),              //                  .valid
		.write_cp_data          (agent_pipeline_012_source0_data),               //                  .data
		.write_cp_channel       (agent_pipeline_012_source0_channel),            //                  .channel
		.write_cp_startofpacket (agent_pipeline_012_source0_startofpacket),      //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_012_source0_endofpacket),        //                  .endofpacket
		.read_rp_ready          (spi_dmac_0_s_axi_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (spi_dmac_0_s_axi_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (spi_dmac_0_s_axi_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (spi_dmac_0_s_axi_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (spi_dmac_0_s_axi_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (spi_dmac_0_s_axi_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (spi_dmac_0_s_axi_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (spi_dmac_0_s_axi_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (spi_dmac_0_s_axi_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (spi_dmac_0_s_axi_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (spi_dmac_0_s_axi_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (spi_dmac_0_s_axi_awprot),                       //                  .awprot
		.awvalid                (spi_dmac_0_s_axi_awvalid),                      //                  .awvalid
		.awready                (spi_dmac_0_s_axi_awready),                      //                  .awready
		.wdata                  (spi_dmac_0_s_axi_wdata),                        //                  .wdata
		.wstrb                  (spi_dmac_0_s_axi_wstrb),                        //                  .wstrb
		.wvalid                 (spi_dmac_0_s_axi_wvalid),                       //                  .wvalid
		.wready                 (spi_dmac_0_s_axi_wready),                       //                  .wready
		.bresp                  (spi_dmac_0_s_axi_bresp),                        //                  .bresp
		.bvalid                 (spi_dmac_0_s_axi_bvalid),                       //                  .bvalid
		.bready                 (spi_dmac_0_s_axi_bready),                       //                  .bready
		.araddr                 (spi_dmac_0_s_axi_araddr),                       //                  .araddr
		.arprot                 (spi_dmac_0_s_axi_arprot),                       //                  .arprot
		.arvalid                (spi_dmac_0_s_axi_arvalid),                      //                  .arvalid
		.arready                (spi_dmac_0_s_axi_arready),                      //                  .arready
		.rdata                  (spi_dmac_0_s_axi_rdata),                        //                  .rdata
		.rresp                  (spi_dmac_0_s_axi_rresp),                        //                  .rresp
		.rvalid                 (spi_dmac_0_s_axi_rvalid),                       //                  .rvalid
		.rready                 (spi_dmac_0_s_axi_rready)                        //                  .rready
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_id_control_slave_agent (
		.clk                     (sys_hps_h2f_user1_clock_clk),                           //             clk.clk
		.reset                   (sys_id_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sys_id_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_id_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_id_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_id_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_id_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_id_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_id_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_id_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_id_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_id_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_id_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_id_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_id_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_id_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_id_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_id_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_016_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_016_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_016_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_016_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_016_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_016_source0_channel),                    //                .channel
		.rf_sink_ready           (sys_id_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_id_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_id_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_id_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_id_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_id_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_id_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_id_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_id_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_id_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sys_id_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_id_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_id_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_id_control_slave_agent_rsp_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),                           //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sys_id_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sys_id_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_id_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_id_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_id_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_id_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_id_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_id_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_id_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_id_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_id_control_slave_agent_rdata_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),                     //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sys_id_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sys_id_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sys_id_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sys_id_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sys_id_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sys_id_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_gpio_bd_s1_agent (
		.clk                     (sys_hps_h2f_user1_clock_clk),                     //             clk.clk
		.reset                   (sys_id_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sys_gpio_bd_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_gpio_bd_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_gpio_bd_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_gpio_bd_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_gpio_bd_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_gpio_bd_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_gpio_bd_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_gpio_bd_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_gpio_bd_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_gpio_bd_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_gpio_bd_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_gpio_bd_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_gpio_bd_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_gpio_bd_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_gpio_bd_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_gpio_bd_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_018_source0_ready),                //              cp.ready
		.cp_valid                (agent_pipeline_018_source0_valid),                //                .valid
		.cp_data                 (agent_pipeline_018_source0_data),                 //                .data
		.cp_startofpacket        (agent_pipeline_018_source0_startofpacket),        //                .startofpacket
		.cp_endofpacket          (agent_pipeline_018_source0_endofpacket),          //                .endofpacket
		.cp_channel              (agent_pipeline_018_source0_channel),              //                .channel
		.rf_sink_ready           (sys_gpio_bd_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_gpio_bd_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_gpio_bd_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_gpio_bd_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_gpio_bd_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_gpio_bd_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_gpio_bd_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_gpio_bd_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_gpio_bd_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_gpio_bd_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),               //                .error
		.rdata_fifo_src_ready    (sys_gpio_bd_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_gpio_bd_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_gpio_bd_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_bd_s1_agent_rsp_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),                     //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sys_gpio_bd_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_gpio_bd_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_gpio_bd_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_gpio_bd_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_gpio_bd_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_gpio_bd_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_gpio_bd_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_gpio_bd_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_gpio_bd_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_gpio_bd_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_bd_s1_agent_rdata_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),               //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sys_gpio_bd_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sys_gpio_bd_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sys_gpio_bd_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sys_gpio_bd_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sys_gpio_bd_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sys_gpio_bd_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_gpio_in_s1_agent (
		.clk                     (sys_hps_h2f_user1_clock_clk),                     //             clk.clk
		.reset                   (sys_id_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sys_gpio_in_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_gpio_in_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_gpio_in_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_gpio_in_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_gpio_in_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_gpio_in_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_gpio_in_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_gpio_in_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_gpio_in_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_gpio_in_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_gpio_in_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_gpio_in_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_gpio_in_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_gpio_in_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_gpio_in_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_gpio_in_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_020_source0_ready),                //              cp.ready
		.cp_valid                (agent_pipeline_020_source0_valid),                //                .valid
		.cp_data                 (agent_pipeline_020_source0_data),                 //                .data
		.cp_startofpacket        (agent_pipeline_020_source0_startofpacket),        //                .startofpacket
		.cp_endofpacket          (agent_pipeline_020_source0_endofpacket),          //                .endofpacket
		.cp_channel              (agent_pipeline_020_source0_channel),              //                .channel
		.rf_sink_ready           (sys_gpio_in_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_gpio_in_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_gpio_in_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_gpio_in_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_gpio_in_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_gpio_in_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_gpio_in_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_gpio_in_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_gpio_in_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_gpio_in_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),               //                .error
		.rdata_fifo_src_ready    (sys_gpio_in_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_gpio_in_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_gpio_in_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_in_s1_agent_rsp_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),                     //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sys_gpio_in_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_gpio_in_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_gpio_in_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_gpio_in_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_gpio_in_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_gpio_in_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_gpio_in_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_gpio_in_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_gpio_in_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_gpio_in_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_in_s1_agent_rdata_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),               //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sys_gpio_in_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sys_gpio_in_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sys_gpio_in_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sys_gpio_in_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sys_gpio_in_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sys_gpio_in_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_gpio_out_s1_agent (
		.clk                     (sys_hps_h2f_user1_clock_clk),                      //             clk.clk
		.reset                   (sys_id_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (sys_gpio_out_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_gpio_out_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_gpio_out_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_gpio_out_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_gpio_out_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_gpio_out_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_gpio_out_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_gpio_out_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_gpio_out_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_gpio_out_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_gpio_out_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_gpio_out_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_gpio_out_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_gpio_out_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_gpio_out_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_gpio_out_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_022_source0_ready),                 //              cp.ready
		.cp_valid                (agent_pipeline_022_source0_valid),                 //                .valid
		.cp_data                 (agent_pipeline_022_source0_data),                  //                .data
		.cp_startofpacket        (agent_pipeline_022_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_022_source0_endofpacket),           //                .endofpacket
		.cp_channel              (agent_pipeline_022_source0_channel),               //                .channel
		.rf_sink_ready           (sys_gpio_out_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_gpio_out_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_gpio_out_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_gpio_out_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_gpio_out_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_gpio_out_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_gpio_out_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_gpio_out_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_gpio_out_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_gpio_out_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sys_gpio_out_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_gpio_out_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_gpio_out_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_out_s1_agent_rsp_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),                      //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sys_gpio_out_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_gpio_out_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_gpio_out_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_gpio_out_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_gpio_out_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_gpio_out_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_gpio_out_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_gpio_out_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_gpio_out_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_gpio_out_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_out_s1_agent_rdata_fifo (
		.clk               (sys_hps_h2f_user1_clock_clk),                //       clk.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sys_gpio_out_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sys_gpio_out_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sys_gpio_out_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sys_gpio_out_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sys_gpio_out_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sys_gpio_out_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	system_bd_mm_interconnect_0_router router (
		.sink_ready         (sys_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (sys_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (sys_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (sys_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (sys_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                      //       src.ready
		.src_valid          (router_src_valid),                                                      //          .valid
		.src_data           (router_src_data),                                                       //          .data
		.src_channel        (router_src_channel),                                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                 //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sys_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (sys_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (sys_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (sys_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (sys_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                  //       src.ready
		.src_valid          (router_001_src_valid),                                                  //          .valid
		.src_data           (router_001_src_data),                                                   //          .data
		.src_channel        (router_001_src_channel),                                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                             //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_002_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                     //       src.ready
		.src_valid          (router_002_src_valid),                     //          .valid
		.src_data           (router_002_src_data),                      //          .data
		.src_channel        (router_002_src_channel),                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_003_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                     //       src.ready
		.src_valid          (router_003_src_valid),                     //          .valid
		.src_data           (router_003_src_data),                      //          .data
		.src_channel        (router_003_src_channel),                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (agent_pipeline_006_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_006_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_006_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_006_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_006_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                     //       src.ready
		.src_valid          (router_004_src_valid),                     //          .valid
		.src_data           (router_004_src_data),                      //          .data
		.src_channel        (router_004_src_channel),                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_007_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                     //       src.ready
		.src_valid          (router_005_src_valid),                     //          .valid
		.src_data           (router_005_src_data),                      //          .data
		.src_channel        (router_005_src_channel),                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (agent_pipeline_010_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_010_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_010_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_010_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_010_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                     //       src.ready
		.src_valid          (router_006_src_valid),                     //          .valid
		.src_data           (router_006_src_data),                      //          .data
		.src_channel        (router_006_src_channel),                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (agent_pipeline_011_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_011_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                     //       src.ready
		.src_valid          (router_007_src_valid),                     //          .valid
		.src_data           (router_007_src_data),                      //          .data
		.src_channel        (router_007_src_channel),                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (agent_pipeline_014_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_014_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_014_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_014_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_014_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (agent_pipeline_015_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_015_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                     //       src.ready
		.src_valid          (router_009_src_valid),                     //          .valid
		.src_data           (router_009_src_data),                      //          .data
		.src_channel        (router_009_src_channel),                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (agent_pipeline_017_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_017_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                     //       src.ready
		.src_valid          (router_010_src_valid),                     //          .valid
		.src_data           (router_010_src_data),                      //          .data
		.src_channel        (router_010_src_channel),                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_010 router_011 (
		.sink_ready         (agent_pipeline_019_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_019_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                     //       src.ready
		.src_valid          (router_011_src_valid),                     //          .valid
		.src_data           (router_011_src_data),                      //          .data
		.src_channel        (router_011_src_channel),                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_010 router_012 (
		.sink_ready         (agent_pipeline_021_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_021_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_021_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_021_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_021_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_router_010 router_013 (
		.sink_ready         (agent_pipeline_023_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_023_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_023_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_023_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_023_source0_endofpacket),   //          .endofpacket
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                     //       src.ready
		.src_valid          (router_013_src_valid),                     //          .valid
		.src_data           (router_013_src_data),                      //          .data
		.src_channel        (router_013_src_channel),                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sys_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset                  (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                      //          .valid
		.cmd_sink_data          (router_src_data),                                                       //          .data
		.cmd_sink_channel       (router_src_channel),                                                    //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                              //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                //          .endofpacket
		.cmd_src_ready          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),                    //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                                    //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                                  //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                                     //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sys_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset                  (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                            //          .endofpacket
		.cmd_src_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),                    //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                                    //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                                  //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                                     //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) hdmi_dmac_0_s_axi_wr_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                              //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                        //          .ready
		.source0_valid         (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) hdmi_dmac_0_s_axi_rd_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                              //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                    //          .ready
		.source0_valid         (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_hdmi_tx_0_s_axi_wr_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                                //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                      //          .ready
		.source0_valid         (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_hdmi_tx_0_s_axi_rd_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                                //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                      //          .ready
		.source0_valid         (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_spi_engine_0_s_axi_wr_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                                   //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                         //          .ready
		.source0_valid         (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_spi_engine_0_s_axi_rd_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                                   //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                         //          .ready
		.source0_valid         (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) spi_dmac_0_s_axi_wr_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                             //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                   //          .ready
		.source0_valid         (spi_dmac_0_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (spi_dmac_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (spi_dmac_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (spi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (spi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (spi_dmac_0_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) spi_dmac_0_s_axi_rd_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                             //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                   //          .ready
		.source0_valid         (spi_dmac_0_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (spi_dmac_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (spi_dmac_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (spi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (spi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (spi_dmac_0_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_id_control_slave_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                              //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                    //          .ready
		.source0_valid         (sys_id_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_id_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_id_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_id_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_id_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_id_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_gpio_bd_s1_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                        //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                               //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                              //          .ready
		.source0_valid         (sys_gpio_bd_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_gpio_bd_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_gpio_bd_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_gpio_bd_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_gpio_bd_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_gpio_bd_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_gpio_in_s1_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                        //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                               //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                              //          .ready
		.source0_valid         (sys_gpio_in_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_gpio_in_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_gpio_in_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_gpio_in_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_gpio_in_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_gpio_in_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_gpio_out_s1_burst_adapter (
		.clk                   (sys_hps_h2f_user1_clock_clk),                         //       cr0.clk
		.reset                 (sys_id_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                               //          .ready
		.source0_valid         (sys_gpio_out_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_gpio_out_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_gpio_out_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_gpio_out_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_gpio_out_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_gpio_out_s1_burst_adapter_source0_ready)          //          .ready
	);

	system_bd_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                                        //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                                      //          .channel
		.sink_data          (limiter_pipeline_source0_data),                                         //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                                  //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                  //          .valid
		.src0_data          (cmd_demux_src0_data),                                                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                            //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                  //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                  //          .valid
		.src1_data          (cmd_demux_src1_data),                                                   //          .data
		.src1_channel       (cmd_demux_src1_channel),                                                //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                          //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                            //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                  //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                  //          .valid
		.src2_data          (cmd_demux_src2_data),                                                   //          .data
		.src2_channel       (cmd_demux_src2_channel),                                                //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                          //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                            //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                  //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                  //          .valid
		.src3_data          (cmd_demux_src3_data),                                                   //          .data
		.src3_channel       (cmd_demux_src3_channel),                                                //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                          //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                            //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                  //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                  //          .valid
		.src4_data          (cmd_demux_src4_data),                                                   //          .data
		.src4_channel       (cmd_demux_src4_channel),                                                //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                          //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                            //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                  //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                  //          .valid
		.src5_data          (cmd_demux_src5_data),                                                   //          .data
		.src5_channel       (cmd_demux_src5_channel),                                                //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                          //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                            //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                  //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                  //          .valid
		.src6_data          (cmd_demux_src6_data),                                                   //          .data
		.src6_channel       (cmd_demux_src6_channel),                                                //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                          //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                            //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                                  //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                                  //          .valid
		.src7_data          (cmd_demux_src7_data),                                                   //          .data
		.src7_channel       (cmd_demux_src7_channel),                                                //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                                          //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                                             //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                                    //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                                  //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                                     //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),                              //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                                    //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                              //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                              //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                               //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                            //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                              //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                              //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                               //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                                            //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                        //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                              //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                              //          .valid
		.src2_data          (cmd_demux_001_src2_data),                                               //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                                            //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                      //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                        //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                              //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                              //          .valid
		.src3_data          (cmd_demux_001_src3_data),                                               //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                                            //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                      //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                        //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                              //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                              //          .valid
		.src4_data          (cmd_demux_001_src4_data),                                               //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                                            //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                      //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                        //          .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                              //      src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                              //          .valid
		.src5_data          (cmd_demux_001_src5_data),                                               //          .data
		.src5_channel       (cmd_demux_001_src5_channel),                                            //          .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                      //          .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                        //          .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                              //      src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                              //          .valid
		.src6_data          (cmd_demux_001_src6_data),                                               //          .data
		.src6_channel       (cmd_demux_001_src6_channel),                                            //          .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                      //          .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                        //          .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                              //      src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                              //          .valid
		.src7_data          (cmd_demux_001_src7_data),                                               //          .data
		.src7_channel       (cmd_demux_001_src7_channel),                                            //          .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                      //          .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket)                                         //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                        //          .valid
		.src_data            (cmd_mux_src_data),                         //          .data
		.src_channel         (cmd_mux_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),               //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),               //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),             //          .channel
		.sink0_data          (mux_pipeline_source0_data),                //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)          //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                    //          .valid
		.src_data            (cmd_mux_001_src_data),                     //          .data
		.src_channel         (cmd_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                    //          .valid
		.src_data            (cmd_mux_002_src_data),                     //          .data
		.src_channel         (cmd_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                    //          .valid
		.src_data            (cmd_mux_003_src_data),                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                    //          .valid
		.src_data            (cmd_mux_004_src_data),                     //          .data
		.src_channel         (cmd_mux_004_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                    //          .valid
		.src_data            (cmd_mux_005_src_data),                     //          .data
		.src_channel         (cmd_mux_005_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                    //          .valid
		.src_data            (cmd_mux_006_src_data),                     //          .data
		.src_channel         (cmd_mux_006_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                    //          .valid
		.src_data            (cmd_mux_007_src_data),                     //          .data
		.src_channel         (cmd_mux_007_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                    //          .valid
		.src_data            (cmd_mux_008_src_data),                     //          .data
		.src_channel         (cmd_mux_008_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_008_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket),     //          .endofpacket
		.sink1_ready         (mux_pipeline_009_source0_ready),           //     sink1.ready
		.sink1_valid         (mux_pipeline_009_source0_valid),           //          .valid
		.sink1_channel       (mux_pipeline_009_source0_channel),         //          .channel
		.sink1_data          (mux_pipeline_009_source0_data),            //          .data
		.sink1_startofpacket (mux_pipeline_009_source0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_009_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux_008 cmd_mux_009 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                    //          .valid
		.src_data            (cmd_mux_009_src_data),                     //          .data
		.src_channel         (cmd_mux_009_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_010_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket),     //          .endofpacket
		.sink1_ready         (mux_pipeline_011_source0_ready),           //     sink1.ready
		.sink1_valid         (mux_pipeline_011_source0_valid),           //          .valid
		.sink1_channel       (mux_pipeline_011_source0_channel),         //          .channel
		.sink1_data          (mux_pipeline_011_source0_data),            //          .data
		.sink1_startofpacket (mux_pipeline_011_source0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_011_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux_008 cmd_mux_010 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                    //          .valid
		.src_data            (cmd_mux_010_src_data),                     //          .data
		.src_channel         (cmd_mux_010_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_012_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket),     //          .endofpacket
		.sink1_ready         (mux_pipeline_013_source0_ready),           //     sink1.ready
		.sink1_valid         (mux_pipeline_013_source0_valid),           //          .valid
		.sink1_channel       (mux_pipeline_013_source0_channel),         //          .channel
		.sink1_data          (mux_pipeline_013_source0_data),            //          .data
		.sink1_startofpacket (mux_pipeline_013_source0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_013_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_cmd_mux_008 cmd_mux_011 (
		.clk                 (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset               (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                    //          .valid
		.src_data            (cmd_mux_011_src_data),                     //          .data
		.src_channel         (cmd_mux_011_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),              //          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),           //     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),           //          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),         //          .channel
		.sink0_data          (mux_pipeline_014_source0_data),            //          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket),     //          .endofpacket
		.sink1_ready         (mux_pipeline_015_source0_ready),           //     sink1.ready
		.sink1_valid         (mux_pipeline_015_source0_valid),           //          .valid
		.sink1_channel       (mux_pipeline_015_source0_channel),         //          .channel
		.sink1_data          (mux_pipeline_015_source0_data),            //          .data
		.sink1_startofpacket (mux_pipeline_015_source0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_015_source0_endofpacket)      //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                     //      sink.ready
		.sink_channel       (router_002_src_channel),                   //          .channel
		.sink_data          (router_002_src_data),                      //          .data
		.sink_startofpacket (router_002_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_002_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_src0_data),                      //          .data
		.src0_channel       (rsp_demux_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                     //      sink.ready
		.sink_channel       (router_003_src_channel),                   //          .channel
		.sink_data          (router_003_src_data),                      //          .data
		.sink_startofpacket (router_003_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_003_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_001_src0_data),                  //          .data
		.src0_channel       (rsp_demux_001_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                     //      sink.ready
		.sink_channel       (router_004_src_channel),                   //          .channel
		.sink_data          (router_004_src_data),                      //          .data
		.sink_startofpacket (router_004_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_004_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_002_src0_data),                  //          .data
		.src0_channel       (rsp_demux_002_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                     //      sink.ready
		.sink_channel       (router_005_src_channel),                   //          .channel
		.sink_data          (router_005_src_data),                      //          .data
		.sink_startofpacket (router_005_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_005_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_003_src0_data),                  //          .data
		.src0_channel       (rsp_demux_003_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                     //      sink.ready
		.sink_channel       (router_006_src_channel),                   //          .channel
		.sink_data          (router_006_src_data),                      //          .data
		.sink_startofpacket (router_006_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_006_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_004_src0_data),                  //          .data
		.src0_channel       (rsp_demux_004_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                     //      sink.ready
		.sink_channel       (router_007_src_channel),                   //          .channel
		.sink_data          (router_007_src_data),                      //          .data
		.sink_startofpacket (router_007_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_007_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_005_src0_data),                  //          .data
		.src0_channel       (rsp_demux_005_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                     //      sink.ready
		.sink_channel       (router_008_src_channel),                   //          .channel
		.sink_data          (router_008_src_data),                      //          .data
		.sink_startofpacket (router_008_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_008_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_006_src0_data),                  //          .data
		.src0_channel       (rsp_demux_006_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                     //      sink.ready
		.sink_channel       (router_009_src_channel),                   //          .channel
		.sink_data          (router_009_src_data),                      //          .data
		.sink_startofpacket (router_009_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_009_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_007_src0_data),                  //          .data
		.src0_channel       (rsp_demux_007_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                     //      sink.ready
		.sink_channel       (router_010_src_channel),                   //          .channel
		.sink_data          (router_010_src_data),                      //          .data
		.sink_startofpacket (router_010_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_010_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_008_src0_data),                  //          .data
		.src0_channel       (rsp_demux_008_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_008_src1_data),                  //          .data
		.src1_channel       (rsp_demux_008_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux_008 rsp_demux_009 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                     //      sink.ready
		.sink_channel       (router_011_src_channel),                   //          .channel
		.sink_data          (router_011_src_data),                      //          .data
		.sink_startofpacket (router_011_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_011_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_009_src0_data),                  //          .data
		.src0_channel       (rsp_demux_009_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_009_src1_data),                  //          .data
		.src1_channel       (rsp_demux_009_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux_008 rsp_demux_010 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                     //      sink.ready
		.sink_channel       (router_012_src_channel),                   //          .channel
		.sink_data          (router_012_src_data),                      //          .data
		.sink_startofpacket (router_012_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_012_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_010_src0_data),                  //          .data
		.src0_channel       (rsp_demux_010_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_010_src1_data),                  //          .data
		.src1_channel       (rsp_demux_010_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_demux_008 rsp_demux_011 (
		.clk                (sys_hps_h2f_user1_clock_clk),              //       clk.clk
		.reset              (sys_id_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                     //      sink.ready
		.sink_channel       (router_013_src_channel),                   //          .channel
		.sink_data          (router_013_src_data),                      //          .data
		.sink_startofpacket (router_013_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_013_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_011_src0_data),                  //          .data
		.src0_channel       (rsp_demux_011_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_011_src1_data),                  //          .data
		.src1_channel       (rsp_demux_011_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)            //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                     //          .valid
		.src_data            (rsp_mux_src_data),                                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (mux_pipeline_016_source0_ready),                                        //     sink0.ready
		.sink0_valid         (mux_pipeline_016_source0_valid),                                        //          .valid
		.sink0_channel       (mux_pipeline_016_source0_channel),                                      //          .channel
		.sink0_data          (mux_pipeline_016_source0_data),                                         //          .data
		.sink0_startofpacket (mux_pipeline_016_source0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_016_source0_endofpacket),                                  //          .endofpacket
		.sink1_ready         (mux_pipeline_017_source0_ready),                                        //     sink1.ready
		.sink1_valid         (mux_pipeline_017_source0_valid),                                        //          .valid
		.sink1_channel       (mux_pipeline_017_source0_channel),                                      //          .channel
		.sink1_data          (mux_pipeline_017_source0_data),                                         //          .data
		.sink1_startofpacket (mux_pipeline_017_source0_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_017_source0_endofpacket),                                  //          .endofpacket
		.sink2_ready         (mux_pipeline_018_source0_ready),                                        //     sink2.ready
		.sink2_valid         (mux_pipeline_018_source0_valid),                                        //          .valid
		.sink2_channel       (mux_pipeline_018_source0_channel),                                      //          .channel
		.sink2_data          (mux_pipeline_018_source0_data),                                         //          .data
		.sink2_startofpacket (mux_pipeline_018_source0_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_018_source0_endofpacket),                                  //          .endofpacket
		.sink3_ready         (mux_pipeline_019_source0_ready),                                        //     sink3.ready
		.sink3_valid         (mux_pipeline_019_source0_valid),                                        //          .valid
		.sink3_channel       (mux_pipeline_019_source0_channel),                                      //          .channel
		.sink3_data          (mux_pipeline_019_source0_data),                                         //          .data
		.sink3_startofpacket (mux_pipeline_019_source0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_019_source0_endofpacket),                                  //          .endofpacket
		.sink4_ready         (mux_pipeline_020_source0_ready),                                        //     sink4.ready
		.sink4_valid         (mux_pipeline_020_source0_valid),                                        //          .valid
		.sink4_channel       (mux_pipeline_020_source0_channel),                                      //          .channel
		.sink4_data          (mux_pipeline_020_source0_data),                                         //          .data
		.sink4_startofpacket (mux_pipeline_020_source0_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_020_source0_endofpacket),                                  //          .endofpacket
		.sink5_ready         (mux_pipeline_021_source0_ready),                                        //     sink5.ready
		.sink5_valid         (mux_pipeline_021_source0_valid),                                        //          .valid
		.sink5_channel       (mux_pipeline_021_source0_channel),                                      //          .channel
		.sink5_data          (mux_pipeline_021_source0_data),                                         //          .data
		.sink5_startofpacket (mux_pipeline_021_source0_startofpacket),                                //          .startofpacket
		.sink5_endofpacket   (mux_pipeline_021_source0_endofpacket),                                  //          .endofpacket
		.sink6_ready         (mux_pipeline_022_source0_ready),                                        //     sink6.ready
		.sink6_valid         (mux_pipeline_022_source0_valid),                                        //          .valid
		.sink6_channel       (mux_pipeline_022_source0_channel),                                      //          .channel
		.sink6_data          (mux_pipeline_022_source0_data),                                         //          .data
		.sink6_startofpacket (mux_pipeline_022_source0_startofpacket),                                //          .startofpacket
		.sink6_endofpacket   (mux_pipeline_022_source0_endofpacket),                                  //          .endofpacket
		.sink7_ready         (mux_pipeline_023_source0_ready),                                        //     sink7.ready
		.sink7_valid         (mux_pipeline_023_source0_valid),                                        //          .valid
		.sink7_channel       (mux_pipeline_023_source0_channel),                                      //          .channel
		.sink7_data          (mux_pipeline_023_source0_data),                                         //          .data
		.sink7_startofpacket (mux_pipeline_023_source0_startofpacket),                                //          .startofpacket
		.sink7_endofpacket   (mux_pipeline_023_source0_endofpacket)                                   //          .endofpacket
	);

	system_bd_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (sys_hps_h2f_user1_clock_clk),                                           //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_001_src_data),                                                  //          .data
		.src_channel         (rsp_mux_001_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (mux_pipeline_024_source0_ready),                                        //     sink0.ready
		.sink0_valid         (mux_pipeline_024_source0_valid),                                        //          .valid
		.sink0_channel       (mux_pipeline_024_source0_channel),                                      //          .channel
		.sink0_data          (mux_pipeline_024_source0_data),                                         //          .data
		.sink0_startofpacket (mux_pipeline_024_source0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_024_source0_endofpacket),                                  //          .endofpacket
		.sink1_ready         (mux_pipeline_025_source0_ready),                                        //     sink1.ready
		.sink1_valid         (mux_pipeline_025_source0_valid),                                        //          .valid
		.sink1_channel       (mux_pipeline_025_source0_channel),                                      //          .channel
		.sink1_data          (mux_pipeline_025_source0_data),                                         //          .data
		.sink1_startofpacket (mux_pipeline_025_source0_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_025_source0_endofpacket),                                  //          .endofpacket
		.sink2_ready         (mux_pipeline_026_source0_ready),                                        //     sink2.ready
		.sink2_valid         (mux_pipeline_026_source0_valid),                                        //          .valid
		.sink2_channel       (mux_pipeline_026_source0_channel),                                      //          .channel
		.sink2_data          (mux_pipeline_026_source0_data),                                         //          .data
		.sink2_startofpacket (mux_pipeline_026_source0_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_026_source0_endofpacket),                                  //          .endofpacket
		.sink3_ready         (mux_pipeline_027_source0_ready),                                        //     sink3.ready
		.sink3_valid         (mux_pipeline_027_source0_valid),                                        //          .valid
		.sink3_channel       (mux_pipeline_027_source0_channel),                                      //          .channel
		.sink3_data          (mux_pipeline_027_source0_data),                                         //          .data
		.sink3_startofpacket (mux_pipeline_027_source0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_027_source0_endofpacket),                                  //          .endofpacket
		.sink4_ready         (mux_pipeline_028_source0_ready),                                        //     sink4.ready
		.sink4_valid         (mux_pipeline_028_source0_valid),                                        //          .valid
		.sink4_channel       (mux_pipeline_028_source0_channel),                                      //          .channel
		.sink4_data          (mux_pipeline_028_source0_data),                                         //          .data
		.sink4_startofpacket (mux_pipeline_028_source0_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_028_source0_endofpacket),                                  //          .endofpacket
		.sink5_ready         (mux_pipeline_029_source0_ready),                                        //     sink5.ready
		.sink5_valid         (mux_pipeline_029_source0_valid),                                        //          .valid
		.sink5_channel       (mux_pipeline_029_source0_channel),                                      //          .channel
		.sink5_data          (mux_pipeline_029_source0_data),                                         //          .data
		.sink5_startofpacket (mux_pipeline_029_source0_startofpacket),                                //          .startofpacket
		.sink5_endofpacket   (mux_pipeline_029_source0_endofpacket),                                  //          .endofpacket
		.sink6_ready         (mux_pipeline_030_source0_ready),                                        //     sink6.ready
		.sink6_valid         (mux_pipeline_030_source0_valid),                                        //          .valid
		.sink6_channel       (mux_pipeline_030_source0_channel),                                      //          .channel
		.sink6_data          (mux_pipeline_030_source0_data),                                         //          .data
		.sink6_startofpacket (mux_pipeline_030_source0_startofpacket),                                //          .startofpacket
		.sink6_endofpacket   (mux_pipeline_030_source0_endofpacket),                                  //          .endofpacket
		.sink7_ready         (mux_pipeline_031_source0_ready),                                        //     sink7.ready
		.sink7_valid         (mux_pipeline_031_source0_valid),                                        //          .valid
		.sink7_channel       (mux_pipeline_031_source0_channel),                                      //          .channel
		.sink7_data          (mux_pipeline_031_source0_data),                                         //          .data
		.sink7_startofpacket (mux_pipeline_031_source0_startofpacket),                                //          .startofpacket
		.sink7_endofpacket   (mux_pipeline_031_source0_endofpacket)                                   //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //     sink0.ready
		.in_valid          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),                    //          .valid
		.in_startofpacket  (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.in_data           (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.in_channel        (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                        //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                        //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                                  //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                         //          .data
		.out_channel       (limiter_pipeline_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                                     //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                                     //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.in_data           (rsp_mux_src_data),                                                      //          .data
		.in_channel        (rsp_mux_src_channel),                                                   //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                                    //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                                    //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                              //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                                     //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //     sink0.ready
		.in_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),                    //          .valid
		.in_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.in_data           (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.in_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                                    //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                                    //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                              //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                                     //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                                 //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                                 //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                                  //          .data
		.in_channel        (rsp_mux_001_src_channel),                                               //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                                    //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                                    //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),                              //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                                     //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (sys_hps_h2f_user1_clock_clk),                              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (hdmi_dmac_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                              //          .data
		.out_channel       (agent_pipeline_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (sys_hps_h2f_user1_clock_clk),                              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (hdmi_dmac_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                          //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (sys_hps_h2f_user1_clock_clk),                    //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (hdmi_dmac_0_s_axi_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (hdmi_dmac_0_s_axi_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (hdmi_dmac_0_s_axi_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (hdmi_dmac_0_s_axi_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (hdmi_dmac_0_s_axi_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_002_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                //          .data
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_channel       (),                                               // (terminated)
		.in_channel        (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (sys_hps_h2f_user1_clock_clk),                   //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (hdmi_dmac_0_s_axi_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (hdmi_dmac_0_s_axi_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (hdmi_dmac_0_s_axi_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (hdmi_dmac_0_s_axi_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (hdmi_dmac_0_s_axi_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),              //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),              //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),        //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),               //          .data
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_channel       (),                                              // (terminated)
		.in_channel        (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                            //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_005_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                            //          .data
		.out_channel       (agent_pipeline_005_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (sys_hps_h2f_user1_clock_clk),                      //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (axi_hdmi_tx_0_s_axi_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (axi_hdmi_tx_0_s_axi_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (axi_hdmi_tx_0_s_axi_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_hdmi_tx_0_s_axi_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (axi_hdmi_tx_0_s_axi_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_006_source0_ready),                 //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                 //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),           //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                  //          .data
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_channel       (),                                                 // (terminated)
		.in_channel        (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (sys_hps_h2f_user1_clock_clk),                     //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (axi_hdmi_tx_0_s_axi_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (axi_hdmi_tx_0_s_axi_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (axi_hdmi_tx_0_s_axi_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_hdmi_tx_0_s_axi_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (axi_hdmi_tx_0_s_axi_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                 //          .data
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_channel       (),                                                // (terminated)
		.in_channel        (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                   //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.in_ready          (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_spi_engine_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                              //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                              //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                        //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                               //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                            //          .channel
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                   //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.in_ready          (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_spi_engine_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_009_source0_ready),                              //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                              //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                        //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                               //          .data
		.out_channel       (agent_pipeline_009_source0_channel),                            //          .channel
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_error          (1'b0)                                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (sys_hps_h2f_user1_clock_clk),                         //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.in_ready          (axi_spi_engine_0_s_axi_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (axi_spi_engine_0_s_axi_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (axi_spi_engine_0_s_axi_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_spi_engine_0_s_axi_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (axi_spi_engine_0_s_axi_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_010_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                     //          .data
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_channel       (),                                                    // (terminated)
		.in_channel        (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (sys_hps_h2f_user1_clock_clk),                        //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (axi_spi_engine_0_s_axi_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (axi_spi_engine_0_s_axi_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (axi_spi_engine_0_s_axi_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_spi_engine_0_s_axi_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (axi_spi_engine_0_s_axi_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                    //          .data
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_channel       (),                                                   // (terminated)
		.in_channel        (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (sys_hps_h2f_user1_clock_clk),                             //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (spi_dmac_0_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (spi_dmac_0_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (spi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (spi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (spi_dmac_0_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (spi_dmac_0_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                         //          .data
		.out_channel       (agent_pipeline_012_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (sys_hps_h2f_user1_clock_clk),                             //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (spi_dmac_0_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (spi_dmac_0_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (spi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (spi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (spi_dmac_0_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (spi_dmac_0_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_013_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),                         //          .data
		.out_channel       (agent_pipeline_013_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (sys_hps_h2f_user1_clock_clk),                   //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (spi_dmac_0_s_axi_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (spi_dmac_0_s_axi_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (spi_dmac_0_s_axi_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (spi_dmac_0_s_axi_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (spi_dmac_0_s_axi_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_014_source0_ready),              //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),              //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),        //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),               //          .data
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_channel       (),                                              // (terminated)
		.in_channel        (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (sys_hps_h2f_user1_clock_clk),                  //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (spi_dmac_0_s_axi_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (spi_dmac_0_s_axi_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (spi_dmac_0_s_axi_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (spi_dmac_0_s_axi_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (spi_dmac_0_s_axi_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_015_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (sys_hps_h2f_user1_clock_clk),                              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (sys_id_control_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_id_control_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_id_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_id_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_id_control_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_id_control_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),                          //          .data
		.out_channel       (agent_pipeline_016_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (sys_hps_h2f_user1_clock_clk),                 //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sys_id_control_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (sys_id_control_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (sys_id_control_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_id_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (sys_id_control_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_017_source0_ready),            //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),            //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),      //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),             //          .data
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.out_error         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_channel       (),                                            // (terminated)
		.in_channel        (1'b0)                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (sys_hps_h2f_user1_clock_clk),                        //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (sys_gpio_bd_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_gpio_bd_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_gpio_bd_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_gpio_bd_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_gpio_bd_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_gpio_bd_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_018_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),                    //          .data
		.out_channel       (agent_pipeline_018_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_bd_s1_agent_rp_ready),            //     sink0.ready
		.in_valid          (sys_gpio_bd_s1_agent_rp_valid),            //          .valid
		.in_startofpacket  (sys_gpio_bd_s1_agent_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_gpio_bd_s1_agent_rp_endofpacket),      //          .endofpacket
		.in_data           (sys_gpio_bd_s1_agent_rp_data),             //          .data
		.out_ready         (agent_pipeline_019_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_020 (
		.clk               (sys_hps_h2f_user1_clock_clk),                        //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (sys_gpio_in_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_gpio_in_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_gpio_in_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_gpio_in_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_gpio_in_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_gpio_in_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_020_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_020_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_020_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_020_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_020_source0_data),                    //          .data
		.out_channel       (agent_pipeline_020_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_021 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_in_s1_agent_rp_ready),            //     sink0.ready
		.in_valid          (sys_gpio_in_s1_agent_rp_valid),            //          .valid
		.in_startofpacket  (sys_gpio_in_s1_agent_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_gpio_in_s1_agent_rp_endofpacket),      //          .endofpacket
		.in_data           (sys_gpio_in_s1_agent_rp_data),             //          .data
		.out_ready         (agent_pipeline_021_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_021_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_021_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_021_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_021_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_022 (
		.clk               (sys_hps_h2f_user1_clock_clk),                         //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.in_ready          (sys_gpio_out_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_gpio_out_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_gpio_out_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_gpio_out_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_gpio_out_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_gpio_out_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_022_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_022_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_022_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_022_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_022_source0_data),                     //          .data
		.out_channel       (agent_pipeline_022_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_023 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_out_s1_agent_rp_ready),           //     sink0.ready
		.in_valid          (sys_gpio_out_s1_agent_rp_valid),           //          .valid
		.in_startofpacket  (sys_gpio_out_s1_agent_rp_startofpacket),   //          .startofpacket
		.in_endofpacket    (sys_gpio_out_s1_agent_rp_endofpacket),     //          .endofpacket
		.in_data           (sys_gpio_out_s1_agent_rp_data),            //          .data
		.out_ready         (agent_pipeline_023_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_023_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_023_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_023_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_023_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src0_data),                      //          .data
		.in_channel        (cmd_demux_src0_channel),                   //          .channel
		.out_ready         (mux_pipeline_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                //          .data
		.out_channel       (mux_pipeline_source0_channel),             //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                  //          .data
		.in_channel        (cmd_demux_001_src0_channel),               //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),            //          .data
		.out_channel       (mux_pipeline_001_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src1_data),                      //          .data
		.in_channel        (cmd_demux_src1_channel),                   //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),            //          .data
		.out_channel       (mux_pipeline_002_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                  //          .data
		.in_channel        (cmd_demux_001_src1_channel),               //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),            //          .data
		.out_channel       (mux_pipeline_003_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src2_data),                      //          .data
		.in_channel        (cmd_demux_src2_channel),                   //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),            //          .data
		.out_channel       (mux_pipeline_004_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                  //          .data
		.in_channel        (cmd_demux_001_src2_channel),               //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),            //          .data
		.out_channel       (mux_pipeline_005_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src3_data),                      //          .data
		.in_channel        (cmd_demux_src3_channel),                   //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),            //          .data
		.out_channel       (mux_pipeline_006_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                  //          .data
		.in_channel        (cmd_demux_001_src3_channel),               //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),            //          .data
		.out_channel       (mux_pipeline_007_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src4_data),                      //          .data
		.in_channel        (cmd_demux_src4_channel),                   //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),            //          .data
		.out_channel       (mux_pipeline_008_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src4_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src4_data),                  //          .data
		.in_channel        (cmd_demux_001_src4_channel),               //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),            //          .data
		.out_channel       (mux_pipeline_009_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src5_data),                      //          .data
		.in_channel        (cmd_demux_src5_channel),                   //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),            //          .data
		.out_channel       (mux_pipeline_010_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src5_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src5_data),                  //          .data
		.in_channel        (cmd_demux_001_src5_channel),               //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),            //          .data
		.out_channel       (mux_pipeline_011_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src6_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src6_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src6_data),                      //          .data
		.in_channel        (cmd_demux_src6_channel),                   //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),            //          .data
		.out_channel       (mux_pipeline_012_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src6_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src6_data),                  //          .data
		.in_channel        (cmd_demux_001_src6_channel),               //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),            //          .data
		.out_channel       (mux_pipeline_013_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src7_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_src7_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_src7_data),                      //          .data
		.in_channel        (cmd_demux_src7_channel),                   //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),            //          .data
		.out_channel       (mux_pipeline_014_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (sys_hps_h2f_user1_clock_clk),              //       cr0.clk
		.reset             (sys_id_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src7_ready),                 //     sink0.ready
		.in_valid          (cmd_demux_001_src7_valid),                 //          .valid
		.in_startofpacket  (cmd_demux_001_src7_startofpacket),         //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src7_endofpacket),           //          .endofpacket
		.in_data           (cmd_demux_001_src7_data),                  //          .data
		.in_channel        (cmd_demux_001_src7_channel),               //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),           //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),           //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),     //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),            //          .data
		.out_channel       (mux_pipeline_015_source0_channel),         //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                  //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                                  //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                          //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                            //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                                   //          .data
		.in_channel        (rsp_demux_src0_channel),                                                //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_016_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                                               //          .data
		.in_channel        (rsp_demux_002_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_017_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                                               //          .data
		.in_channel        (rsp_demux_004_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_018_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                                               //          .data
		.in_channel        (rsp_demux_006_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_019_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_020 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_008_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_008_src0_data),                                               //          .data
		.in_channel        (rsp_demux_008_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_020_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_020_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_020_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_020_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_020_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_020_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_021 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_009_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_009_src0_data),                                               //          .data
		.in_channel        (rsp_demux_009_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_021_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_021_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_021_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_021_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_021_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_021_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_022 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_010_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_010_src0_data),                                               //          .data
		.in_channel        (rsp_demux_010_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_022_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_022_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_022_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_022_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_022_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_022_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_023 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_011_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_011_src0_data),                                               //          .data
		.in_channel        (rsp_demux_011_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_023_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_023_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_023_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_023_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_023_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_023_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_024 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                               //          .data
		.in_channel        (rsp_demux_001_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_024_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_024_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_024_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_024_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_024_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_024_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_025 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                                               //          .data
		.in_channel        (rsp_demux_003_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_025_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_025_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_025_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_025_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_025_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_025_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_026 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                                               //          .data
		.in_channel        (rsp_demux_005_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_026_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_026_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_026_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_026_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_026_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_026_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_027 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                                               //          .data
		.in_channel        (rsp_demux_007_src0_channel),                                            //          .channel
		.out_ready         (mux_pipeline_027_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_027_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_027_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_027_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_027_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_027_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_028 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_008_src1_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_008_src1_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_008_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src1_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_008_src1_data),                                               //          .data
		.in_channel        (rsp_demux_008_src1_channel),                                            //          .channel
		.out_ready         (mux_pipeline_028_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_028_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_028_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_028_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_028_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_028_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_029 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_009_src1_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_009_src1_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_009_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src1_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_009_src1_data),                                               //          .data
		.in_channel        (rsp_demux_009_src1_channel),                                            //          .channel
		.out_ready         (mux_pipeline_029_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_029_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_029_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_029_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_029_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_029_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_030 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_010_src1_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_010_src1_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_010_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_010_src1_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_010_src1_data),                                               //          .data
		.in_channel        (rsp_demux_010_src1_channel),                                            //          .channel
		.out_ready         (mux_pipeline_030_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_030_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_030_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_030_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_030_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_030_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (12),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_031 (
		.clk               (sys_hps_h2f_user1_clock_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_011_src1_ready),                                              //     sink0.ready
		.in_valid          (rsp_demux_011_src1_valid),                                              //          .valid
		.in_startofpacket  (rsp_demux_011_src1_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (rsp_demux_011_src1_endofpacket),                                        //          .endofpacket
		.in_data           (rsp_demux_011_src1_data),                                               //          .data
		.in_channel        (rsp_demux_011_src1_channel),                                            //          .channel
		.out_ready         (mux_pipeline_031_source0_ready),                                        //   source0.ready
		.out_valid         (mux_pipeline_031_source0_valid),                                        //          .valid
		.out_startofpacket (mux_pipeline_031_source0_startofpacket),                                //          .startofpacket
		.out_endofpacket   (mux_pipeline_031_source0_endofpacket),                                  //          .endofpacket
		.out_data          (mux_pipeline_031_source0_data),                                         //          .data
		.out_channel       (mux_pipeline_031_source0_channel),                                      //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	system_bd_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_hps_h2f_user1_clock_clk),                     // in_clk_0.clk
		.in_rst_0_reset (sys_id_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sys_id_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sys_id_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sys_id_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

	system_bd_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (sys_hps_h2f_user1_clock_clk),               // in_clk_0.clk
		.in_rst_0_reset (sys_id_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (sys_gpio_bd_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sys_gpio_bd_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sys_gpio_bd_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)          //         .error
	);

	system_bd_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_hps_h2f_user1_clock_clk),               // in_clk_0.clk
		.in_rst_0_reset (sys_id_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (sys_gpio_in_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sys_gpio_in_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sys_gpio_in_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)          //         .error
	);

	system_bd_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_hps_h2f_user1_clock_clk),                // in_clk_0.clk
		.in_rst_0_reset (sys_id_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (sys_gpio_out_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sys_gpio_out_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sys_gpio_out_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)           //         .error
	);

endmodule
