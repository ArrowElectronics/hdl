// ghrd_hps_system.v

// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module ghrd_hps_system (
		output wire        emac0_mdio_mac_mdc,       //      emac0_mdio.mac_mdc
		input  wire        emac0_mdio_mac_mdi,       //                .mac_mdi
		output wire        emac0_mdio_mac_mdo,       //                .mac_mdo
		output wire        emac0_mdio_mac_mdoe,      //                .mac_mdoe
		output wire        emac0_app_rst_reset_n,    //   emac0_app_rst.reset_n
		output wire        emac0_mac_tx_clk_o,       //           emac0.mac_tx_clk_o
		input  wire        emac0_mac_tx_clk_i,       //                .mac_tx_clk_i
		input  wire        emac0_mac_rx_clk,         //                .mac_rx_clk
		output wire        emac0_mac_rst_tx_n,       //                .mac_rst_tx_n
		output wire        emac0_mac_rst_rx_n,       //                .mac_rst_rx_n
		output wire        emac0_mac_txen,           //                .mac_txen
		output wire        emac0_mac_txer,           //                .mac_txer
		input  wire        emac0_mac_rxdv,           //                .mac_rxdv
		input  wire        emac0_mac_rxer,           //                .mac_rxer
		input  wire [7:0]  emac0_mac_rxd,            //                .mac_rxd
		input  wire        emac0_mac_col,            //                .mac_col
		input  wire        emac0_mac_crs,            //                .mac_crs
		output wire [2:0]  emac0_mac_speed,          //                .mac_speed
		output wire [7:0]  emac0_mac_txd_o,          //                .mac_txd_o
		output wire        emac2_app_rst_reset_n,    //   emac2_app_rst.reset_n
		input  wire        spim0_miso_i,             //           spim0.miso_i
		output wire        spim0_mosi_o,             //                .mosi_o
		output wire        spim0_mosi_oe,            //                .mosi_oe
		input  wire        spim0_ss_in_n,            //                .ss_in_n
		output wire        spim0_ss0_n_o,            //                .ss0_n_o
		output wire        spim0_ss1_n_o,            //                .ss1_n_o
		output wire        spim0_ss2_n_o,            //                .ss2_n_o
		output wire        spim0_ss3_n_o,            //                .ss3_n_o
		output wire        spim0_sclk_out_clk,       //  spim0_sclk_out.clk
		input  wire        i2c1_scl_i_clk,           //      i2c1_scl_i.clk
		output wire        i2c1_scl_oe_clk,          //     i2c1_scl_oe.clk
		input  wire        i2c1_sda_i,               //            i2c1.sda_i
		output wire        i2c1_sda_oe,              //                .sda_oe
		input  wire        hps_io_hps_osc_clk,       //          hps_io.hps_osc_clk
		inout  wire        hps_io_sdmmc_data0,       //                .sdmmc_data0
		inout  wire        hps_io_sdmmc_data1,       //                .sdmmc_data1
		output wire        hps_io_sdmmc_cclk,        //                .sdmmc_cclk
		inout  wire        hps_io_sdmmc_data2,       //                .sdmmc_data2
		inout  wire        hps_io_sdmmc_data3,       //                .sdmmc_data3
		inout  wire        hps_io_sdmmc_cmd,         //                .sdmmc_cmd
		input  wire        hps_io_usb1_clk,          //                .usb1_clk
		output wire        hps_io_usb1_stp,          //                .usb1_stp
		input  wire        hps_io_usb1_dir,          //                .usb1_dir
		inout  wire        hps_io_usb1_data0,        //                .usb1_data0
		inout  wire        hps_io_usb1_data1,        //                .usb1_data1
		input  wire        hps_io_usb1_nxr,          //                .usb1_nxr
		inout  wire        hps_io_usb1_data2,        //                .usb1_data2
		inout  wire        hps_io_usb1_data3,        //                .usb1_data3
		inout  wire        hps_io_usb1_data4,        //                .usb1_data4
		inout  wire        hps_io_usb1_data5,        //                .usb1_data5
		inout  wire        hps_io_usb1_data6,        //                .usb1_data6
		inout  wire        hps_io_usb1_data7,        //                .usb1_data7
		output wire        hps_io_emac2_tx_clk,      //                .emac2_tx_clk
		output wire        hps_io_emac2_tx_ctl,      //                .emac2_tx_ctl
		input  wire        hps_io_emac2_rx_clk,      //                .emac2_rx_clk
		input  wire        hps_io_emac2_rx_ctl,      //                .emac2_rx_ctl
		output wire        hps_io_emac2_txd0,        //                .emac2_txd0
		output wire        hps_io_emac2_txd1,        //                .emac2_txd1
		input  wire        hps_io_emac2_rxd0,        //                .emac2_rxd0
		input  wire        hps_io_emac2_rxd1,        //                .emac2_rxd1
		output wire        hps_io_emac2_txd2,        //                .emac2_txd2
		output wire        hps_io_emac2_txd3,        //                .emac2_txd3
		input  wire        hps_io_emac2_rxd2,        //                .emac2_rxd2
		input  wire        hps_io_emac2_rxd3,        //                .emac2_rxd3
		inout  wire        hps_io_mdio2_mdio,        //                .mdio2_mdio
		output wire        hps_io_mdio2_mdc,         //                .mdio2_mdc
		output wire        hps_io_uart0_tx,          //                .uart0_tx
		input  wire        hps_io_uart0_rx,          //                .uart0_rx
		inout  wire        hps_io_i2c0_sda,          //                .i2c0_sda
		inout  wire        hps_io_i2c0_scl,          //                .i2c0_scl
		inout  wire        hps_io_gpio8,             //                .gpio8
		inout  wire        hps_io_gpio9,             //                .gpio9
		inout  wire        hps_io_gpio10,            //                .gpio10
		inout  wire        hps_io_gpio11,            //                .gpio11
		inout  wire        hps_io_gpio28,            //                .gpio28
		inout  wire        hps_io_gpio35,            //                .gpio35
		input  wire        usb31_io_vbus_det,        //        usb31_io.vbus_det
		input  wire        usb31_io_flt_bar,         //                .flt_bar
		output wire [1:0]  usb31_io_usb_ctrl,        //                .usb_ctrl
		input  wire        usb31_io_usb31_id,        //                .usb31_id
		output wire        hdmi_h_clk,               //            hdmi.h_clk
		output wire        hdmi_h16_hsync,           //                .h16_hsync
		output wire        hdmi_h16_vsync,           //                .h16_vsync
		output wire        hdmi_h16_data_e,          //                .h16_data_e
		output wire [15:0] hdmi_h16_data,            //                .h16_data
		output wire [15:0] hdmi_h16_es_data,         //                .h16_es_data
		output wire        hdmi_h24_hsync,           //                .h24_hsync
		output wire        hdmi_h24_vsync,           //                .h24_vsync
		output wire        hdmi_h24_data_e,          //                .h24_data_e
		output wire [23:0] hdmi_h24_data,            //                .h24_data
		output wire        hdmi_h36_hsync,           //                .h36_hsync
		output wire        hdmi_h36_vsync,           //                .h36_vsync
		output wire        hdmi_h36_data_e,          //                .h36_data_e
		output wire [35:0] hdmi_h36_data,            //                .h36_data
		input  wire        sys_clk_clk,              //         sys_clk.clk
		input  wire [1:0]  dipsw_export,             //           dipsw.export
		output wire        soc_lpddr4_mem_ck_t,      //      soc_lpddr4.mem_ck_t
		output wire        soc_lpddr4_mem_ck_c,      //                .mem_ck_c
		output wire        soc_lpddr4_mem_cke,       //                .mem_cke
		output wire        soc_lpddr4_mem_reset_n,   //                .mem_reset_n
		output wire        soc_lpddr4_mem_cs,        //                .mem_cs
		output wire [5:0]  soc_lpddr4_mem_ca,        //                .mem_ca
		inout  wire [31:0] soc_lpddr4_mem_dq,        //                .mem_dq
		inout  wire [3:0]  soc_lpddr4_mem_dqs_t,     //                .mem_dqs_t
		inout  wire [3:0]  soc_lpddr4_mem_dqs_c,     //                .mem_dqs_c
		inout  wire [3:0]  soc_lpddr4_mem_dmi,       //                .mem_dmi
		input  wire        soc_lpddr4_oct_oct_rzqin, //  soc_lpddr4_oct.oct_rzqin
		input  wire        hdmi_pll_refclk_clk,      // hdmi_pll_refclk.clk
		input  wire [1:0]  pb_export,                //              pb.export
		input  wire        sys_reset_reset,          //       sys_reset.reset
		output wire [2:0]  rgb_led0_export,          //        rgb_led0.export
		output wire [2:0]  rgb_led1_export,          //        rgb_led1.export
		output wire [2:0]  rgb_led2_export,          //        rgb_led2.export
		output wire [2:0]  rgb_led3_export           //        rgb_led3.export
	);

	wire          axi_dmac_0_m_axis_tvalid;                                  // axi_dmac_0:m_axis_valid -> axi_hdmi_tx_0:vdma_valid
	wire          axi_dmac_0_m_axis_tready;                                  // axi_hdmi_tx_0:vdma_ready -> axi_dmac_0:m_axis_ready
	wire          axi_dmac_0_m_axis_tlast;                                   // axi_dmac_0:m_axis_last -> axi_hdmi_tx_0:vdma_end_of_frame
	wire   [63:0] axi_dmac_0_m_axis_tdata;                                   // axi_dmac_0:m_axis_data -> axi_hdmi_tx_0:vdma_data
	wire          agilex_5_soc_h2f_user0_clk_clk;                            // agilex_5_soc:h2f_user0_clk_clk -> [agilex_5_soc:emac_ptp_clk_clk, agilex_5_soc:emac_timestamp_clk_clk, agilex_5_soc:emif0_ch0_axi_clk_clk, emif_ph2_0:ref_clk_0, emif_ph2_0:usr_async_clk_0, mm_interconnect_0:agilex_5_soc_h2f_user0_clk_clk, mm_interconnect_1:agilex_5_soc_h2f_user0_clk_clk, onchip_sram:clk, rst_controller_001:clk, rst_controller_008:clk, rst_controller_009:clk, rst_controller_010:clk, rst_controller_012:clk]
	wire          agilex_5_soc_h2f_user1_clk_clk;                            // agilex_5_soc:h2f_user1_clk_clk -> [agilex_5_soc:emif0_csr_axi_clk_clk, agilex_5_soc:lwhps2fpga_axi_clock_clk, axi_dmac_0:s_axi_aclk, axi_hdmi_tx_0:hdmi_clk, dipsw:clk, emif_ph2_0:s0_axil_clk, hps_jtag_master:clk_clk, jtag_master:clk_clk, jtag_uart:clk, mm_interconnect_1:agilex_5_soc_h2f_user1_clk_clk, pb:clk, rgb_led0:clk, rgb_led1:clk, rgb_led2:clk, rgb_led3:clk, rst_controller:clk, rst_controller_004:clk, rst_controller_006:clk, rst_controller_011:clk, rst_controller_013:clk, rst_controller_016:clk, rst_controller_018:clk, sys_id:clock]
	wire          clock_in_out_clk_clk;                                      // clock_in:out_clk -> [agilex_5_soc:hps2fpga_axi_clock_clk, mm_interconnect_1:clock_in_out_clk_clk, reset_in:clk, rst_controller_015:clk]
	wire          hdmi_pll_outclk0_clk;                                      // hdmi_pll:outclk_0 -> [axi_dmac_0:m_axis_aclk, axi_dmac_0:m_src_axi_aclk, axi_hdmi_tx_0:s_axi_aclk, axi_hdmi_tx_0:vdma_clk, mm_interconnect_1:hdmi_pll_outclk0_clk, rst_controller_002:clk, rst_controller_003:clk, rst_controller_014:clk, rst_controller_017:clk]
	wire          agilex_5_soc_h2f_reset_reset;                              // agilex_5_soc:h2f_reset_reset_n -> [agilex_5_soc:hps2fpga_axi_reset_reset_n, agilex_5_soc:lwhps2fpga_axi_reset_reset_n, hdmi_pll:rst, hps_jtag_master:clk_reset_reset, rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_002:reset_in0, rst_controller_003:reset_in0, rst_controller_004:reset_in0, rst_controller_005:reset_in1, rst_controller_006:reset_in1, rst_controller_007:reset_in0, rst_controller_008:reset_in0, rst_controller_009:reset_in0, rst_controller_011:reset_in0, rst_controller_012:reset_in0, rst_controller_013:reset_in0, rst_controller_014:reset_in0, rst_controller_015:reset_in0, rst_controller_016:reset_in0, rst_controller_017:reset_in0, rst_controller_018:reset_in1]
	wire   [31:0] agilex_5_soc_emif0_ch0_axi_ruser;                          // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_ruser -> agilex_5_soc:emif0_ch0_axi_ruser
	wire   [31:0] agilex_5_soc_emif0_ch0_axi_wuser;                          // agilex_5_soc:emif0_ch0_axi_wuser -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_wuser
	wire    [1:0] agilex_5_soc_emif0_ch0_axi_awburst;                        // agilex_5_soc:emif0_ch0_axi_awburst -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awburst
	wire    [7:0] agilex_5_soc_emif0_ch0_axi_arlen;                          // agilex_5_soc:emif0_ch0_axi_arlen -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arlen
	wire    [3:0] agilex_5_soc_emif0_ch0_axi_arqos;                          // agilex_5_soc:emif0_ch0_axi_arqos -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arqos
	wire   [13:0] agilex_5_soc_emif0_ch0_axi_awuser;                         // agilex_5_soc:emif0_ch0_axi_awuser -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awuser
	wire          agilex_5_soc_emif0_ch0_axi_wready;                         // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_wready -> agilex_5_soc:emif0_ch0_axi_wready
	wire   [31:0] agilex_5_soc_emif0_ch0_axi_wstrb;                          // agilex_5_soc:emif0_ch0_axi_wstrb -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_wstrb
	wire    [6:0] agilex_5_soc_emif0_ch0_axi_rid;                            // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_rid -> agilex_5_soc:emif0_ch0_axi_rid
	wire          agilex_5_soc_emif0_ch0_axi_rready;                         // agilex_5_soc:emif0_ch0_axi_rready -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_rready
	wire    [7:0] agilex_5_soc_emif0_ch0_axi_awlen;                          // agilex_5_soc:emif0_ch0_axi_awlen -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awlen
	wire    [3:0] agilex_5_soc_emif0_ch0_axi_awqos;                          // agilex_5_soc:emif0_ch0_axi_awqos -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awqos
	wire   [43:0] agilex_5_soc_emif0_ch0_axi_araddr;                         // agilex_5_soc:emif0_ch0_axi_araddr -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_araddr
	wire          agilex_5_soc_emif0_ch0_axi_wvalid;                         // agilex_5_soc:emif0_ch0_axi_wvalid -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_wvalid
	wire    [2:0] agilex_5_soc_emif0_ch0_axi_arprot;                         // agilex_5_soc:emif0_ch0_axi_arprot -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arprot
	wire          agilex_5_soc_emif0_ch0_axi_arvalid;                        // agilex_5_soc:emif0_ch0_axi_arvalid -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arvalid
	wire  [255:0] agilex_5_soc_emif0_ch0_axi_wdata;                          // agilex_5_soc:emif0_ch0_axi_wdata -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_wdata
	wire    [2:0] agilex_5_soc_emif0_ch0_axi_awprot;                         // agilex_5_soc:emif0_ch0_axi_awprot -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awprot
	wire    [6:0] agilex_5_soc_emif0_ch0_axi_arid;                           // agilex_5_soc:emif0_ch0_axi_arid -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arid
	wire          agilex_5_soc_emif0_ch0_axi_arlock;                         // agilex_5_soc:emif0_ch0_axi_arlock -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arlock
	wire          agilex_5_soc_emif0_ch0_axi_awlock;                         // agilex_5_soc:emif0_ch0_axi_awlock -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awlock
	wire   [43:0] agilex_5_soc_emif0_ch0_axi_awaddr;                         // agilex_5_soc:emif0_ch0_axi_awaddr -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awaddr
	wire          agilex_5_soc_emif0_ch0_axi_arready;                        // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arready -> agilex_5_soc:emif0_ch0_axi_arready
	wire    [1:0] agilex_5_soc_emif0_ch0_axi_bresp;                          // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_bresp -> agilex_5_soc:emif0_ch0_axi_bresp
	wire  [255:0] agilex_5_soc_emif0_ch0_axi_rdata;                          // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_rdata -> agilex_5_soc:emif0_ch0_axi_rdata
	wire          agilex_5_soc_emif0_ch0_axi_awready;                        // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awready -> agilex_5_soc:emif0_ch0_axi_awready
	wire    [1:0] agilex_5_soc_emif0_ch0_axi_arburst;                        // agilex_5_soc:emif0_ch0_axi_arburst -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arburst
	wire    [2:0] agilex_5_soc_emif0_ch0_axi_arsize;                         // agilex_5_soc:emif0_ch0_axi_arsize -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_arsize
	wire          agilex_5_soc_emif0_ch0_axi_rlast;                          // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_rlast -> agilex_5_soc:emif0_ch0_axi_rlast
	wire          agilex_5_soc_emif0_ch0_axi_bready;                         // agilex_5_soc:emif0_ch0_axi_bready -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_bready
	wire          agilex_5_soc_emif0_ch0_axi_wlast;                          // agilex_5_soc:emif0_ch0_axi_wlast -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_wlast
	wire    [1:0] agilex_5_soc_emif0_ch0_axi_rresp;                          // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_rresp -> agilex_5_soc:emif0_ch0_axi_rresp
	wire    [6:0] agilex_5_soc_emif0_ch0_axi_bid;                            // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_bid -> agilex_5_soc:emif0_ch0_axi_bid
	wire    [6:0] agilex_5_soc_emif0_ch0_axi_awid;                           // agilex_5_soc:emif0_ch0_axi_awid -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awid
	wire          agilex_5_soc_emif0_ch0_axi_bvalid;                         // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_bvalid -> agilex_5_soc:emif0_ch0_axi_bvalid
	wire          agilex_5_soc_emif0_ch0_axi_rvalid;                         // mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_rvalid -> agilex_5_soc:emif0_ch0_axi_rvalid
	wire   [13:0] agilex_5_soc_emif0_ch0_axi_aruser;                         // agilex_5_soc:emif0_ch0_axi_aruser -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_aruser
	wire    [2:0] agilex_5_soc_emif0_ch0_axi_awsize;                         // agilex_5_soc:emif0_ch0_axi_awsize -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awsize
	wire          agilex_5_soc_emif0_ch0_axi_awvalid;                        // agilex_5_soc:emif0_ch0_axi_awvalid -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_awvalid
	wire   [63:0] mm_interconnect_0_emif_ph2_0_s0_axi4_ruser;                // emif_ph2_0:s0_axi4_ruser -> mm_interconnect_0:emif_ph2_0_s0_axi4_ruser
	wire   [63:0] mm_interconnect_0_emif_ph2_0_s0_axi4_wuser;                // mm_interconnect_0:emif_ph2_0_s0_axi4_wuser -> emif_ph2_0:s0_axi4_wuser
	wire    [1:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awburst;              // mm_interconnect_0:emif_ph2_0_s0_axi4_awburst -> emif_ph2_0:s0_axi4_awburst
	wire   [13:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awuser;               // mm_interconnect_0:emif_ph2_0_s0_axi4_awuser -> emif_ph2_0:s0_axi4_awuser
	wire    [7:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arlen;                // mm_interconnect_0:emif_ph2_0_s0_axi4_arlen -> emif_ph2_0:s0_axi4_arlen
	wire    [3:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arqos;                // mm_interconnect_0:emif_ph2_0_s0_axi4_arqos -> emif_ph2_0:s0_axi4_arqos
	wire   [31:0] mm_interconnect_0_emif_ph2_0_s0_axi4_wstrb;                // mm_interconnect_0:emif_ph2_0_s0_axi4_wstrb -> emif_ph2_0:s0_axi4_wstrb
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_wready;               // emif_ph2_0:s0_axi4_wready -> mm_interconnect_0:emif_ph2_0_s0_axi4_wready
	wire    [6:0] mm_interconnect_0_emif_ph2_0_s0_axi4_rid;                  // emif_ph2_0:s0_axi4_rid -> mm_interconnect_0:emif_ph2_0_s0_axi4_rid
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_rready;               // mm_interconnect_0:emif_ph2_0_s0_axi4_rready -> emif_ph2_0:s0_axi4_rready
	wire    [7:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awlen;                // mm_interconnect_0:emif_ph2_0_s0_axi4_awlen -> emif_ph2_0:s0_axi4_awlen
	wire    [3:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awqos;                // mm_interconnect_0:emif_ph2_0_s0_axi4_awqos -> emif_ph2_0:s0_axi4_awqos
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_wvalid;               // mm_interconnect_0:emif_ph2_0_s0_axi4_wvalid -> emif_ph2_0:s0_axi4_wvalid
	wire   [31:0] mm_interconnect_0_emif_ph2_0_s0_axi4_araddr;               // mm_interconnect_0:emif_ph2_0_s0_axi4_araddr -> emif_ph2_0:s0_axi4_araddr
	wire    [2:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arprot;               // mm_interconnect_0:emif_ph2_0_s0_axi4_arprot -> emif_ph2_0:s0_axi4_arprot
	wire    [2:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awprot;               // mm_interconnect_0:emif_ph2_0_s0_axi4_awprot -> emif_ph2_0:s0_axi4_awprot
	wire  [255:0] mm_interconnect_0_emif_ph2_0_s0_axi4_wdata;                // mm_interconnect_0:emif_ph2_0_s0_axi4_wdata -> emif_ph2_0:s0_axi4_wdata
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_arvalid;              // mm_interconnect_0:emif_ph2_0_s0_axi4_arvalid -> emif_ph2_0:s0_axi4_arvalid
	wire    [6:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arid;                 // mm_interconnect_0:emif_ph2_0_s0_axi4_arid -> emif_ph2_0:s0_axi4_arid
	wire    [0:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arlock;               // mm_interconnect_0:emif_ph2_0_s0_axi4_arlock -> emif_ph2_0:s0_axi4_arlock
	wire    [0:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awlock;               // mm_interconnect_0:emif_ph2_0_s0_axi4_awlock -> emif_ph2_0:s0_axi4_awlock
	wire   [31:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awaddr;               // mm_interconnect_0:emif_ph2_0_s0_axi4_awaddr -> emif_ph2_0:s0_axi4_awaddr
	wire    [1:0] mm_interconnect_0_emif_ph2_0_s0_axi4_bresp;                // emif_ph2_0:s0_axi4_bresp -> mm_interconnect_0:emif_ph2_0_s0_axi4_bresp
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_arready;              // emif_ph2_0:s0_axi4_arready -> mm_interconnect_0:emif_ph2_0_s0_axi4_arready
	wire  [255:0] mm_interconnect_0_emif_ph2_0_s0_axi4_rdata;                // emif_ph2_0:s0_axi4_rdata -> mm_interconnect_0:emif_ph2_0_s0_axi4_rdata
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_awready;              // emif_ph2_0:s0_axi4_awready -> mm_interconnect_0:emif_ph2_0_s0_axi4_awready
	wire    [1:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arburst;              // mm_interconnect_0:emif_ph2_0_s0_axi4_arburst -> emif_ph2_0:s0_axi4_arburst
	wire    [2:0] mm_interconnect_0_emif_ph2_0_s0_axi4_arsize;               // mm_interconnect_0:emif_ph2_0_s0_axi4_arsize -> emif_ph2_0:s0_axi4_arsize
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_bready;               // mm_interconnect_0:emif_ph2_0_s0_axi4_bready -> emif_ph2_0:s0_axi4_bready
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_rlast;                // emif_ph2_0:s0_axi4_rlast -> mm_interconnect_0:emif_ph2_0_s0_axi4_rlast
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_wlast;                // mm_interconnect_0:emif_ph2_0_s0_axi4_wlast -> emif_ph2_0:s0_axi4_wlast
	wire    [1:0] mm_interconnect_0_emif_ph2_0_s0_axi4_rresp;                // emif_ph2_0:s0_axi4_rresp -> mm_interconnect_0:emif_ph2_0_s0_axi4_rresp
	wire    [6:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awid;                 // mm_interconnect_0:emif_ph2_0_s0_axi4_awid -> emif_ph2_0:s0_axi4_awid
	wire    [6:0] mm_interconnect_0_emif_ph2_0_s0_axi4_bid;                  // emif_ph2_0:s0_axi4_bid -> mm_interconnect_0:emif_ph2_0_s0_axi4_bid
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_bvalid;               // emif_ph2_0:s0_axi4_bvalid -> mm_interconnect_0:emif_ph2_0_s0_axi4_bvalid
	wire    [2:0] mm_interconnect_0_emif_ph2_0_s0_axi4_awsize;               // mm_interconnect_0:emif_ph2_0_s0_axi4_awsize -> emif_ph2_0:s0_axi4_awsize
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_awvalid;              // mm_interconnect_0:emif_ph2_0_s0_axi4_awvalid -> emif_ph2_0:s0_axi4_awvalid
	wire   [13:0] mm_interconnect_0_emif_ph2_0_s0_axi4_aruser;               // mm_interconnect_0:emif_ph2_0_s0_axi4_aruser -> emif_ph2_0:s0_axi4_aruser
	wire          mm_interconnect_0_emif_ph2_0_s0_axi4_rvalid;               // emif_ph2_0:s0_axi4_rvalid -> mm_interconnect_0:emif_ph2_0_s0_axi4_rvalid
	wire    [1:0] agilex_5_soc_hps2fpga_awburst;                             // agilex_5_soc:hps2fpga_awburst -> mm_interconnect_1:agilex_5_soc_hps2fpga_awburst
	wire    [7:0] agilex_5_soc_hps2fpga_arlen;                               // agilex_5_soc:hps2fpga_arlen -> mm_interconnect_1:agilex_5_soc_hps2fpga_arlen
	wire    [3:0] agilex_5_soc_hps2fpga_wstrb;                               // agilex_5_soc:hps2fpga_wstrb -> mm_interconnect_1:agilex_5_soc_hps2fpga_wstrb
	wire          agilex_5_soc_hps2fpga_wready;                              // mm_interconnect_1:agilex_5_soc_hps2fpga_wready -> agilex_5_soc:hps2fpga_wready
	wire    [3:0] agilex_5_soc_hps2fpga_rid;                                 // mm_interconnect_1:agilex_5_soc_hps2fpga_rid -> agilex_5_soc:hps2fpga_rid
	wire          agilex_5_soc_hps2fpga_rready;                              // agilex_5_soc:hps2fpga_rready -> mm_interconnect_1:agilex_5_soc_hps2fpga_rready
	wire    [7:0] agilex_5_soc_hps2fpga_awlen;                               // agilex_5_soc:hps2fpga_awlen -> mm_interconnect_1:agilex_5_soc_hps2fpga_awlen
	wire    [3:0] agilex_5_soc_hps2fpga_arcache;                             // agilex_5_soc:hps2fpga_arcache -> mm_interconnect_1:agilex_5_soc_hps2fpga_arcache
	wire          agilex_5_soc_hps2fpga_wvalid;                              // agilex_5_soc:hps2fpga_wvalid -> mm_interconnect_1:agilex_5_soc_hps2fpga_wvalid
	wire   [31:0] agilex_5_soc_hps2fpga_araddr;                              // agilex_5_soc:hps2fpga_araddr -> mm_interconnect_1:agilex_5_soc_hps2fpga_araddr
	wire    [2:0] agilex_5_soc_hps2fpga_arprot;                              // agilex_5_soc:hps2fpga_arprot -> mm_interconnect_1:agilex_5_soc_hps2fpga_arprot
	wire    [2:0] agilex_5_soc_hps2fpga_awprot;                              // agilex_5_soc:hps2fpga_awprot -> mm_interconnect_1:agilex_5_soc_hps2fpga_awprot
	wire   [31:0] agilex_5_soc_hps2fpga_wdata;                               // agilex_5_soc:hps2fpga_wdata -> mm_interconnect_1:agilex_5_soc_hps2fpga_wdata
	wire          agilex_5_soc_hps2fpga_arvalid;                             // agilex_5_soc:hps2fpga_arvalid -> mm_interconnect_1:agilex_5_soc_hps2fpga_arvalid
	wire    [3:0] agilex_5_soc_hps2fpga_awcache;                             // agilex_5_soc:hps2fpga_awcache -> mm_interconnect_1:agilex_5_soc_hps2fpga_awcache
	wire    [3:0] agilex_5_soc_hps2fpga_arid;                                // agilex_5_soc:hps2fpga_arid -> mm_interconnect_1:agilex_5_soc_hps2fpga_arid
	wire          agilex_5_soc_hps2fpga_arlock;                              // agilex_5_soc:hps2fpga_arlock -> mm_interconnect_1:agilex_5_soc_hps2fpga_arlock
	wire          agilex_5_soc_hps2fpga_awlock;                              // agilex_5_soc:hps2fpga_awlock -> mm_interconnect_1:agilex_5_soc_hps2fpga_awlock
	wire   [31:0] agilex_5_soc_hps2fpga_awaddr;                              // agilex_5_soc:hps2fpga_awaddr -> mm_interconnect_1:agilex_5_soc_hps2fpga_awaddr
	wire    [1:0] agilex_5_soc_hps2fpga_bresp;                               // mm_interconnect_1:agilex_5_soc_hps2fpga_bresp -> agilex_5_soc:hps2fpga_bresp
	wire          agilex_5_soc_hps2fpga_arready;                             // mm_interconnect_1:agilex_5_soc_hps2fpga_arready -> agilex_5_soc:hps2fpga_arready
	wire   [31:0] agilex_5_soc_hps2fpga_rdata;                               // mm_interconnect_1:agilex_5_soc_hps2fpga_rdata -> agilex_5_soc:hps2fpga_rdata
	wire          agilex_5_soc_hps2fpga_awready;                             // mm_interconnect_1:agilex_5_soc_hps2fpga_awready -> agilex_5_soc:hps2fpga_awready
	wire    [1:0] agilex_5_soc_hps2fpga_arburst;                             // agilex_5_soc:hps2fpga_arburst -> mm_interconnect_1:agilex_5_soc_hps2fpga_arburst
	wire    [2:0] agilex_5_soc_hps2fpga_arsize;                              // agilex_5_soc:hps2fpga_arsize -> mm_interconnect_1:agilex_5_soc_hps2fpga_arsize
	wire          agilex_5_soc_hps2fpga_bready;                              // agilex_5_soc:hps2fpga_bready -> mm_interconnect_1:agilex_5_soc_hps2fpga_bready
	wire          agilex_5_soc_hps2fpga_rlast;                               // mm_interconnect_1:agilex_5_soc_hps2fpga_rlast -> agilex_5_soc:hps2fpga_rlast
	wire          agilex_5_soc_hps2fpga_wlast;                               // agilex_5_soc:hps2fpga_wlast -> mm_interconnect_1:agilex_5_soc_hps2fpga_wlast
	wire    [1:0] agilex_5_soc_hps2fpga_rresp;                               // mm_interconnect_1:agilex_5_soc_hps2fpga_rresp -> agilex_5_soc:hps2fpga_rresp
	wire    [3:0] agilex_5_soc_hps2fpga_awid;                                // agilex_5_soc:hps2fpga_awid -> mm_interconnect_1:agilex_5_soc_hps2fpga_awid
	wire    [3:0] agilex_5_soc_hps2fpga_bid;                                 // mm_interconnect_1:agilex_5_soc_hps2fpga_bid -> agilex_5_soc:hps2fpga_bid
	wire          agilex_5_soc_hps2fpga_bvalid;                              // mm_interconnect_1:agilex_5_soc_hps2fpga_bvalid -> agilex_5_soc:hps2fpga_bvalid
	wire    [2:0] agilex_5_soc_hps2fpga_awsize;                              // agilex_5_soc:hps2fpga_awsize -> mm_interconnect_1:agilex_5_soc_hps2fpga_awsize
	wire          agilex_5_soc_hps2fpga_awvalid;                             // agilex_5_soc:hps2fpga_awvalid -> mm_interconnect_1:agilex_5_soc_hps2fpga_awvalid
	wire          agilex_5_soc_hps2fpga_rvalid;                              // mm_interconnect_1:agilex_5_soc_hps2fpga_rvalid -> agilex_5_soc:hps2fpga_rvalid
	wire    [1:0] agilex_5_soc_lwhps2fpga_awburst;                           // agilex_5_soc:lwhps2fpga_awburst -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awburst
	wire    [7:0] agilex_5_soc_lwhps2fpga_arlen;                             // agilex_5_soc:lwhps2fpga_arlen -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arlen
	wire    [3:0] agilex_5_soc_lwhps2fpga_wstrb;                             // agilex_5_soc:lwhps2fpga_wstrb -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_wstrb
	wire          agilex_5_soc_lwhps2fpga_wready;                            // mm_interconnect_1:agilex_5_soc_lwhps2fpga_wready -> agilex_5_soc:lwhps2fpga_wready
	wire    [3:0] agilex_5_soc_lwhps2fpga_rid;                               // mm_interconnect_1:agilex_5_soc_lwhps2fpga_rid -> agilex_5_soc:lwhps2fpga_rid
	wire          agilex_5_soc_lwhps2fpga_rready;                            // agilex_5_soc:lwhps2fpga_rready -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_rready
	wire    [7:0] agilex_5_soc_lwhps2fpga_awlen;                             // agilex_5_soc:lwhps2fpga_awlen -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awlen
	wire    [3:0] agilex_5_soc_lwhps2fpga_arcache;                           // agilex_5_soc:lwhps2fpga_arcache -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arcache
	wire          agilex_5_soc_lwhps2fpga_wvalid;                            // agilex_5_soc:lwhps2fpga_wvalid -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_wvalid
	wire   [28:0] agilex_5_soc_lwhps2fpga_araddr;                            // agilex_5_soc:lwhps2fpga_araddr -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_araddr
	wire    [2:0] agilex_5_soc_lwhps2fpga_arprot;                            // agilex_5_soc:lwhps2fpga_arprot -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arprot
	wire    [2:0] agilex_5_soc_lwhps2fpga_awprot;                            // agilex_5_soc:lwhps2fpga_awprot -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awprot
	wire   [31:0] agilex_5_soc_lwhps2fpga_wdata;                             // agilex_5_soc:lwhps2fpga_wdata -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_wdata
	wire          agilex_5_soc_lwhps2fpga_arvalid;                           // agilex_5_soc:lwhps2fpga_arvalid -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arvalid
	wire    [3:0] agilex_5_soc_lwhps2fpga_awcache;                           // agilex_5_soc:lwhps2fpga_awcache -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awcache
	wire    [3:0] agilex_5_soc_lwhps2fpga_arid;                              // agilex_5_soc:lwhps2fpga_arid -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arid
	wire          agilex_5_soc_lwhps2fpga_arlock;                            // agilex_5_soc:lwhps2fpga_arlock -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arlock
	wire          agilex_5_soc_lwhps2fpga_awlock;                            // agilex_5_soc:lwhps2fpga_awlock -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awlock
	wire   [28:0] agilex_5_soc_lwhps2fpga_awaddr;                            // agilex_5_soc:lwhps2fpga_awaddr -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awaddr
	wire    [1:0] agilex_5_soc_lwhps2fpga_bresp;                             // mm_interconnect_1:agilex_5_soc_lwhps2fpga_bresp -> agilex_5_soc:lwhps2fpga_bresp
	wire          agilex_5_soc_lwhps2fpga_arready;                           // mm_interconnect_1:agilex_5_soc_lwhps2fpga_arready -> agilex_5_soc:lwhps2fpga_arready
	wire   [31:0] agilex_5_soc_lwhps2fpga_rdata;                             // mm_interconnect_1:agilex_5_soc_lwhps2fpga_rdata -> agilex_5_soc:lwhps2fpga_rdata
	wire          agilex_5_soc_lwhps2fpga_awready;                           // mm_interconnect_1:agilex_5_soc_lwhps2fpga_awready -> agilex_5_soc:lwhps2fpga_awready
	wire    [1:0] agilex_5_soc_lwhps2fpga_arburst;                           // agilex_5_soc:lwhps2fpga_arburst -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arburst
	wire    [2:0] agilex_5_soc_lwhps2fpga_arsize;                            // agilex_5_soc:lwhps2fpga_arsize -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_arsize
	wire          agilex_5_soc_lwhps2fpga_bready;                            // agilex_5_soc:lwhps2fpga_bready -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_bready
	wire          agilex_5_soc_lwhps2fpga_rlast;                             // mm_interconnect_1:agilex_5_soc_lwhps2fpga_rlast -> agilex_5_soc:lwhps2fpga_rlast
	wire          agilex_5_soc_lwhps2fpga_wlast;                             // agilex_5_soc:lwhps2fpga_wlast -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_wlast
	wire    [1:0] agilex_5_soc_lwhps2fpga_rresp;                             // mm_interconnect_1:agilex_5_soc_lwhps2fpga_rresp -> agilex_5_soc:lwhps2fpga_rresp
	wire    [3:0] agilex_5_soc_lwhps2fpga_awid;                              // agilex_5_soc:lwhps2fpga_awid -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awid
	wire    [3:0] agilex_5_soc_lwhps2fpga_bid;                               // mm_interconnect_1:agilex_5_soc_lwhps2fpga_bid -> agilex_5_soc:lwhps2fpga_bid
	wire          agilex_5_soc_lwhps2fpga_bvalid;                            // mm_interconnect_1:agilex_5_soc_lwhps2fpga_bvalid -> agilex_5_soc:lwhps2fpga_bvalid
	wire    [2:0] agilex_5_soc_lwhps2fpga_awsize;                            // agilex_5_soc:lwhps2fpga_awsize -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awsize
	wire          agilex_5_soc_lwhps2fpga_awvalid;                           // agilex_5_soc:lwhps2fpga_awvalid -> mm_interconnect_1:agilex_5_soc_lwhps2fpga_awvalid
	wire          agilex_5_soc_lwhps2fpga_rvalid;                            // mm_interconnect_1:agilex_5_soc_lwhps2fpga_rvalid -> agilex_5_soc:lwhps2fpga_rvalid
	wire    [1:0] axi_dmac_0_m_src_axi_awburst;                              // axi_dmac_0:m_src_axi_awburst -> mm_interconnect_1:axi_dmac_0_m_src_axi_awburst
	wire    [3:0] axi_dmac_0_m_src_axi_arlen;                                // axi_dmac_0:m_src_axi_arlen -> mm_interconnect_1:axi_dmac_0_m_src_axi_arlen
	wire    [7:0] axi_dmac_0_m_src_axi_wstrb;                                // axi_dmac_0:m_src_axi_wstrb -> mm_interconnect_1:axi_dmac_0_m_src_axi_wstrb
	wire          axi_dmac_0_m_src_axi_wready;                               // mm_interconnect_1:axi_dmac_0_m_src_axi_wready -> axi_dmac_0:m_src_axi_wready
	wire          axi_dmac_0_m_src_axi_rid;                                  // mm_interconnect_1:axi_dmac_0_m_src_axi_rid -> axi_dmac_0:m_src_axi_rid
	wire          axi_dmac_0_m_src_axi_rready;                               // axi_dmac_0:m_src_axi_rready -> mm_interconnect_1:axi_dmac_0_m_src_axi_rready
	wire    [3:0] axi_dmac_0_m_src_axi_awlen;                                // axi_dmac_0:m_src_axi_awlen -> mm_interconnect_1:axi_dmac_0_m_src_axi_awlen
	wire          axi_dmac_0_m_src_axi_wid;                                  // axi_dmac_0:m_src_axi_wid -> mm_interconnect_1:axi_dmac_0_m_src_axi_wid
	wire    [3:0] axi_dmac_0_m_src_axi_arcache;                              // axi_dmac_0:m_src_axi_arcache -> mm_interconnect_1:axi_dmac_0_m_src_axi_arcache
	wire          axi_dmac_0_m_src_axi_wvalid;                               // axi_dmac_0:m_src_axi_wvalid -> mm_interconnect_1:axi_dmac_0_m_src_axi_wvalid
	wire   [31:0] axi_dmac_0_m_src_axi_araddr;                               // axi_dmac_0:m_src_axi_araddr -> mm_interconnect_1:axi_dmac_0_m_src_axi_araddr
	wire    [2:0] axi_dmac_0_m_src_axi_arprot;                               // axi_dmac_0:m_src_axi_arprot -> mm_interconnect_1:axi_dmac_0_m_src_axi_arprot
	wire   [63:0] axi_dmac_0_m_src_axi_wdata;                                // axi_dmac_0:m_src_axi_wdata -> mm_interconnect_1:axi_dmac_0_m_src_axi_wdata
	wire          axi_dmac_0_m_src_axi_arvalid;                              // axi_dmac_0:m_src_axi_arvalid -> mm_interconnect_1:axi_dmac_0_m_src_axi_arvalid
	wire    [2:0] axi_dmac_0_m_src_axi_awprot;                               // axi_dmac_0:m_src_axi_awprot -> mm_interconnect_1:axi_dmac_0_m_src_axi_awprot
	wire    [3:0] axi_dmac_0_m_src_axi_awcache;                              // axi_dmac_0:m_src_axi_awcache -> mm_interconnect_1:axi_dmac_0_m_src_axi_awcache
	wire          axi_dmac_0_m_src_axi_arid;                                 // axi_dmac_0:m_src_axi_arid -> mm_interconnect_1:axi_dmac_0_m_src_axi_arid
	wire    [1:0] axi_dmac_0_m_src_axi_arlock;                               // axi_dmac_0:m_src_axi_arlock -> mm_interconnect_1:axi_dmac_0_m_src_axi_arlock
	wire    [1:0] axi_dmac_0_m_src_axi_awlock;                               // axi_dmac_0:m_src_axi_awlock -> mm_interconnect_1:axi_dmac_0_m_src_axi_awlock
	wire   [31:0] axi_dmac_0_m_src_axi_awaddr;                               // axi_dmac_0:m_src_axi_awaddr -> mm_interconnect_1:axi_dmac_0_m_src_axi_awaddr
	wire    [1:0] axi_dmac_0_m_src_axi_bresp;                                // mm_interconnect_1:axi_dmac_0_m_src_axi_bresp -> axi_dmac_0:m_src_axi_bresp
	wire          axi_dmac_0_m_src_axi_arready;                              // mm_interconnect_1:axi_dmac_0_m_src_axi_arready -> axi_dmac_0:m_src_axi_arready
	wire   [63:0] axi_dmac_0_m_src_axi_rdata;                                // mm_interconnect_1:axi_dmac_0_m_src_axi_rdata -> axi_dmac_0:m_src_axi_rdata
	wire          axi_dmac_0_m_src_axi_awready;                              // mm_interconnect_1:axi_dmac_0_m_src_axi_awready -> axi_dmac_0:m_src_axi_awready
	wire    [1:0] axi_dmac_0_m_src_axi_arburst;                              // axi_dmac_0:m_src_axi_arburst -> mm_interconnect_1:axi_dmac_0_m_src_axi_arburst
	wire    [2:0] axi_dmac_0_m_src_axi_arsize;                               // axi_dmac_0:m_src_axi_arsize -> mm_interconnect_1:axi_dmac_0_m_src_axi_arsize
	wire          axi_dmac_0_m_src_axi_bready;                               // axi_dmac_0:m_src_axi_bready -> mm_interconnect_1:axi_dmac_0_m_src_axi_bready
	wire          axi_dmac_0_m_src_axi_rlast;                                // mm_interconnect_1:axi_dmac_0_m_src_axi_rlast -> axi_dmac_0:m_src_axi_rlast
	wire          axi_dmac_0_m_src_axi_wlast;                                // axi_dmac_0:m_src_axi_wlast -> mm_interconnect_1:axi_dmac_0_m_src_axi_wlast
	wire    [1:0] axi_dmac_0_m_src_axi_rresp;                                // mm_interconnect_1:axi_dmac_0_m_src_axi_rresp -> axi_dmac_0:m_src_axi_rresp
	wire          axi_dmac_0_m_src_axi_awid;                                 // axi_dmac_0:m_src_axi_awid -> mm_interconnect_1:axi_dmac_0_m_src_axi_awid
	wire          axi_dmac_0_m_src_axi_bid;                                  // mm_interconnect_1:axi_dmac_0_m_src_axi_bid -> axi_dmac_0:m_src_axi_bid
	wire          axi_dmac_0_m_src_axi_bvalid;                               // mm_interconnect_1:axi_dmac_0_m_src_axi_bvalid -> axi_dmac_0:m_src_axi_bvalid
	wire          axi_dmac_0_m_src_axi_awvalid;                              // axi_dmac_0:m_src_axi_awvalid -> mm_interconnect_1:axi_dmac_0_m_src_axi_awvalid
	wire          axi_dmac_0_m_src_axi_rvalid;                               // mm_interconnect_1:axi_dmac_0_m_src_axi_rvalid -> axi_dmac_0:m_src_axi_rvalid
	wire    [2:0] axi_dmac_0_m_src_axi_awsize;                               // axi_dmac_0:m_src_axi_awsize -> mm_interconnect_1:axi_dmac_0_m_src_axi_awsize
	wire   [31:0] hps_jtag_master_master_readdata;                           // mm_interconnect_1:hps_jtag_master_master_readdata -> hps_jtag_master:master_readdata
	wire          hps_jtag_master_master_waitrequest;                        // mm_interconnect_1:hps_jtag_master_master_waitrequest -> hps_jtag_master:master_waitrequest
	wire   [31:0] hps_jtag_master_master_address;                            // hps_jtag_master:master_address -> mm_interconnect_1:hps_jtag_master_master_address
	wire          hps_jtag_master_master_read;                               // hps_jtag_master:master_read -> mm_interconnect_1:hps_jtag_master_master_read
	wire    [3:0] hps_jtag_master_master_byteenable;                         // hps_jtag_master:master_byteenable -> mm_interconnect_1:hps_jtag_master_master_byteenable
	wire          hps_jtag_master_master_readdatavalid;                      // mm_interconnect_1:hps_jtag_master_master_readdatavalid -> hps_jtag_master:master_readdatavalid
	wire          hps_jtag_master_master_write;                              // hps_jtag_master:master_write -> mm_interconnect_1:hps_jtag_master_master_write
	wire   [31:0] hps_jtag_master_master_writedata;                          // hps_jtag_master:master_writedata -> mm_interconnect_1:hps_jtag_master_master_writedata
	wire   [31:0] jtag_master_master_readdata;                               // mm_interconnect_1:jtag_master_master_readdata -> jtag_master:master_readdata
	wire          jtag_master_master_waitrequest;                            // mm_interconnect_1:jtag_master_master_waitrequest -> jtag_master:master_waitrequest
	wire   [31:0] jtag_master_master_address;                                // jtag_master:master_address -> mm_interconnect_1:jtag_master_master_address
	wire          jtag_master_master_read;                                   // jtag_master:master_read -> mm_interconnect_1:jtag_master_master_read
	wire    [3:0] jtag_master_master_byteenable;                             // jtag_master:master_byteenable -> mm_interconnect_1:jtag_master_master_byteenable
	wire          jtag_master_master_readdatavalid;                          // mm_interconnect_1:jtag_master_master_readdatavalid -> jtag_master:master_readdatavalid
	wire          jtag_master_master_write;                                  // jtag_master:master_write -> mm_interconnect_1:jtag_master_master_write
	wire   [31:0] jtag_master_master_writedata;                              // jtag_master:master_writedata -> mm_interconnect_1:jtag_master_master_writedata
	wire    [1:0] mm_interconnect_1_onchip_sram_axi_s1_awburst;              // mm_interconnect_1:onchip_sram_axi_s1_awburst -> onchip_sram:s1_awburst
	wire    [7:0] mm_interconnect_1_onchip_sram_axi_s1_arlen;                // mm_interconnect_1:onchip_sram_axi_s1_arlen -> onchip_sram:s1_arlen
	wire    [7:0] mm_interconnect_1_onchip_sram_axi_s1_wstrb;                // mm_interconnect_1:onchip_sram_axi_s1_wstrb -> onchip_sram:s1_wstrb
	wire          mm_interconnect_1_onchip_sram_axi_s1_wready;               // onchip_sram:s1_wready -> mm_interconnect_1:onchip_sram_axi_s1_wready
	wire    [6:0] mm_interconnect_1_onchip_sram_axi_s1_rid;                  // onchip_sram:s1_rid -> mm_interconnect_1:onchip_sram_axi_s1_rid
	wire          mm_interconnect_1_onchip_sram_axi_s1_rready;               // mm_interconnect_1:onchip_sram_axi_s1_rready -> onchip_sram:s1_rready
	wire    [7:0] mm_interconnect_1_onchip_sram_axi_s1_awlen;                // mm_interconnect_1:onchip_sram_axi_s1_awlen -> onchip_sram:s1_awlen
	wire          mm_interconnect_1_onchip_sram_axi_s1_wvalid;               // mm_interconnect_1:onchip_sram_axi_s1_wvalid -> onchip_sram:s1_wvalid
	wire   [12:0] mm_interconnect_1_onchip_sram_axi_s1_araddr;               // mm_interconnect_1:onchip_sram_axi_s1_araddr -> onchip_sram:s1_araddr
	wire   [63:0] mm_interconnect_1_onchip_sram_axi_s1_wdata;                // mm_interconnect_1:onchip_sram_axi_s1_wdata -> onchip_sram:s1_wdata
	wire          mm_interconnect_1_onchip_sram_axi_s1_arvalid;              // mm_interconnect_1:onchip_sram_axi_s1_arvalid -> onchip_sram:s1_arvalid
	wire    [6:0] mm_interconnect_1_onchip_sram_axi_s1_arid;                 // mm_interconnect_1:onchip_sram_axi_s1_arid -> onchip_sram:s1_arid
	wire   [12:0] mm_interconnect_1_onchip_sram_axi_s1_awaddr;               // mm_interconnect_1:onchip_sram_axi_s1_awaddr -> onchip_sram:s1_awaddr
	wire    [1:0] mm_interconnect_1_onchip_sram_axi_s1_bresp;                // onchip_sram:s1_bresp -> mm_interconnect_1:onchip_sram_axi_s1_bresp
	wire          mm_interconnect_1_onchip_sram_axi_s1_arready;              // onchip_sram:s1_arready -> mm_interconnect_1:onchip_sram_axi_s1_arready
	wire   [63:0] mm_interconnect_1_onchip_sram_axi_s1_rdata;                // onchip_sram:s1_rdata -> mm_interconnect_1:onchip_sram_axi_s1_rdata
	wire          mm_interconnect_1_onchip_sram_axi_s1_awready;              // onchip_sram:s1_awready -> mm_interconnect_1:onchip_sram_axi_s1_awready
	wire    [1:0] mm_interconnect_1_onchip_sram_axi_s1_arburst;              // mm_interconnect_1:onchip_sram_axi_s1_arburst -> onchip_sram:s1_arburst
	wire    [2:0] mm_interconnect_1_onchip_sram_axi_s1_arsize;               // mm_interconnect_1:onchip_sram_axi_s1_arsize -> onchip_sram:s1_arsize
	wire          mm_interconnect_1_onchip_sram_axi_s1_bready;               // mm_interconnect_1:onchip_sram_axi_s1_bready -> onchip_sram:s1_bready
	wire          mm_interconnect_1_onchip_sram_axi_s1_rlast;                // onchip_sram:s1_rlast -> mm_interconnect_1:onchip_sram_axi_s1_rlast
	wire          mm_interconnect_1_onchip_sram_axi_s1_wlast;                // mm_interconnect_1:onchip_sram_axi_s1_wlast -> onchip_sram:s1_wlast
	wire    [1:0] mm_interconnect_1_onchip_sram_axi_s1_rresp;                // onchip_sram:s1_rresp -> mm_interconnect_1:onchip_sram_axi_s1_rresp
	wire    [6:0] mm_interconnect_1_onchip_sram_axi_s1_awid;                 // mm_interconnect_1:onchip_sram_axi_s1_awid -> onchip_sram:s1_awid
	wire    [6:0] mm_interconnect_1_onchip_sram_axi_s1_bid;                  // onchip_sram:s1_bid -> mm_interconnect_1:onchip_sram_axi_s1_bid
	wire          mm_interconnect_1_onchip_sram_axi_s1_bvalid;               // onchip_sram:s1_bvalid -> mm_interconnect_1:onchip_sram_axi_s1_bvalid
	wire    [2:0] mm_interconnect_1_onchip_sram_axi_s1_awsize;               // mm_interconnect_1:onchip_sram_axi_s1_awsize -> onchip_sram:s1_awsize
	wire          mm_interconnect_1_onchip_sram_axi_s1_awvalid;              // mm_interconnect_1:onchip_sram_axi_s1_awvalid -> onchip_sram:s1_awvalid
	wire          mm_interconnect_1_onchip_sram_axi_s1_rvalid;               // onchip_sram:s1_rvalid -> mm_interconnect_1:onchip_sram_axi_s1_rvalid
	wire          mm_interconnect_1_jtag_uart_avalon_jtag_slave_chipselect;  // mm_interconnect_1:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire   [31:0] mm_interconnect_1_jtag_uart_avalon_jtag_slave_readdata;    // jtag_uart:av_readdata -> mm_interconnect_1:jtag_uart_avalon_jtag_slave_readdata
	wire          mm_interconnect_1_jtag_uart_avalon_jtag_slave_waitrequest; // jtag_uart:av_waitrequest -> mm_interconnect_1:jtag_uart_avalon_jtag_slave_waitrequest
	wire    [0:0] mm_interconnect_1_jtag_uart_avalon_jtag_slave_address;     // mm_interconnect_1:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire          mm_interconnect_1_jtag_uart_avalon_jtag_slave_read;        // mm_interconnect_1:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire          mm_interconnect_1_jtag_uart_avalon_jtag_slave_write;       // mm_interconnect_1:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire   [31:0] mm_interconnect_1_jtag_uart_avalon_jtag_slave_writedata;   // mm_interconnect_1:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire   [31:0] mm_interconnect_1_sys_id_control_slave_readdata;           // sys_id:readdata -> mm_interconnect_1:sys_id_control_slave_readdata
	wire    [0:0] mm_interconnect_1_sys_id_control_slave_address;            // mm_interconnect_1:sys_id_control_slave_address -> sys_id:address
	wire   [26:0] mm_interconnect_1_emif_ph2_0_s0_axil_awaddr;               // mm_interconnect_1:emif_ph2_0_s0_axil_awaddr -> emif_ph2_0:s0_axil_awaddr
	wire    [1:0] mm_interconnect_1_emif_ph2_0_s0_axil_bresp;                // emif_ph2_0:s0_axil_bresp -> mm_interconnect_1:emif_ph2_0_s0_axil_bresp
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_arready;              // emif_ph2_0:s0_axil_arready -> mm_interconnect_1:emif_ph2_0_s0_axil_arready
	wire   [31:0] mm_interconnect_1_emif_ph2_0_s0_axil_rdata;                // emif_ph2_0:s0_axil_rdata -> mm_interconnect_1:emif_ph2_0_s0_axil_rdata
	wire    [3:0] mm_interconnect_1_emif_ph2_0_s0_axil_wstrb;                // mm_interconnect_1:emif_ph2_0_s0_axil_wstrb -> emif_ph2_0:s0_axil_wstrb
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_wready;               // emif_ph2_0:s0_axil_wready -> mm_interconnect_1:emif_ph2_0_s0_axil_wready
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_awready;              // emif_ph2_0:s0_axil_awready -> mm_interconnect_1:emif_ph2_0_s0_axil_awready
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_rready;               // mm_interconnect_1:emif_ph2_0_s0_axil_rready -> emif_ph2_0:s0_axil_rready
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_bready;               // mm_interconnect_1:emif_ph2_0_s0_axil_bready -> emif_ph2_0:s0_axil_bready
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_wvalid;               // mm_interconnect_1:emif_ph2_0_s0_axil_wvalid -> emif_ph2_0:s0_axil_wvalid
	wire   [26:0] mm_interconnect_1_emif_ph2_0_s0_axil_araddr;               // mm_interconnect_1:emif_ph2_0_s0_axil_araddr -> emif_ph2_0:s0_axil_araddr
	wire    [2:0] mm_interconnect_1_emif_ph2_0_s0_axil_arprot;               // mm_interconnect_1:emif_ph2_0_s0_axil_arprot -> emif_ph2_0:s0_axil_arprot
	wire    [1:0] mm_interconnect_1_emif_ph2_0_s0_axil_rresp;                // emif_ph2_0:s0_axil_rresp -> mm_interconnect_1:emif_ph2_0_s0_axil_rresp
	wire    [2:0] mm_interconnect_1_emif_ph2_0_s0_axil_awprot;               // mm_interconnect_1:emif_ph2_0_s0_axil_awprot -> emif_ph2_0:s0_axil_awprot
	wire   [31:0] mm_interconnect_1_emif_ph2_0_s0_axil_wdata;                // mm_interconnect_1:emif_ph2_0_s0_axil_wdata -> emif_ph2_0:s0_axil_wdata
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_arvalid;              // mm_interconnect_1:emif_ph2_0_s0_axil_arvalid -> emif_ph2_0:s0_axil_arvalid
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_bvalid;               // emif_ph2_0:s0_axil_bvalid -> mm_interconnect_1:emif_ph2_0_s0_axil_bvalid
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_awvalid;              // mm_interconnect_1:emif_ph2_0_s0_axil_awvalid -> emif_ph2_0:s0_axil_awvalid
	wire          mm_interconnect_1_emif_ph2_0_s0_axil_rvalid;               // emif_ph2_0:s0_axil_rvalid -> mm_interconnect_1:emif_ph2_0_s0_axil_rvalid
	wire          mm_interconnect_1_pb_s1_chipselect;                        // mm_interconnect_1:pb_s1_chipselect -> pb:chipselect
	wire   [31:0] mm_interconnect_1_pb_s1_readdata;                          // pb:readdata -> mm_interconnect_1:pb_s1_readdata
	wire    [1:0] mm_interconnect_1_pb_s1_address;                           // mm_interconnect_1:pb_s1_address -> pb:address
	wire          mm_interconnect_1_pb_s1_write;                             // mm_interconnect_1:pb_s1_write -> pb:write_n
	wire   [31:0] mm_interconnect_1_pb_s1_writedata;                         // mm_interconnect_1:pb_s1_writedata -> pb:writedata
	wire          mm_interconnect_1_dipsw_s1_chipselect;                     // mm_interconnect_1:dipsw_s1_chipselect -> dipsw:chipselect
	wire   [31:0] mm_interconnect_1_dipsw_s1_readdata;                       // dipsw:readdata -> mm_interconnect_1:dipsw_s1_readdata
	wire    [1:0] mm_interconnect_1_dipsw_s1_address;                        // mm_interconnect_1:dipsw_s1_address -> dipsw:address
	wire          mm_interconnect_1_dipsw_s1_write;                          // mm_interconnect_1:dipsw_s1_write -> dipsw:write_n
	wire   [31:0] mm_interconnect_1_dipsw_s1_writedata;                      // mm_interconnect_1:dipsw_s1_writedata -> dipsw:writedata
	wire          mm_interconnect_1_rgb_led0_s1_chipselect;                  // mm_interconnect_1:rgb_led0_s1_chipselect -> rgb_led0:chipselect
	wire   [31:0] mm_interconnect_1_rgb_led0_s1_readdata;                    // rgb_led0:readdata -> mm_interconnect_1:rgb_led0_s1_readdata
	wire    [1:0] mm_interconnect_1_rgb_led0_s1_address;                     // mm_interconnect_1:rgb_led0_s1_address -> rgb_led0:address
	wire          mm_interconnect_1_rgb_led0_s1_write;                       // mm_interconnect_1:rgb_led0_s1_write -> rgb_led0:write_n
	wire   [31:0] mm_interconnect_1_rgb_led0_s1_writedata;                   // mm_interconnect_1:rgb_led0_s1_writedata -> rgb_led0:writedata
	wire          mm_interconnect_1_rgb_led1_s1_chipselect;                  // mm_interconnect_1:rgb_led1_s1_chipselect -> rgb_led1:chipselect
	wire   [31:0] mm_interconnect_1_rgb_led1_s1_readdata;                    // rgb_led1:readdata -> mm_interconnect_1:rgb_led1_s1_readdata
	wire    [1:0] mm_interconnect_1_rgb_led1_s1_address;                     // mm_interconnect_1:rgb_led1_s1_address -> rgb_led1:address
	wire          mm_interconnect_1_rgb_led1_s1_write;                       // mm_interconnect_1:rgb_led1_s1_write -> rgb_led1:write_n
	wire   [31:0] mm_interconnect_1_rgb_led1_s1_writedata;                   // mm_interconnect_1:rgb_led1_s1_writedata -> rgb_led1:writedata
	wire          mm_interconnect_1_rgb_led2_s1_chipselect;                  // mm_interconnect_1:rgb_led2_s1_chipselect -> rgb_led2:chipselect
	wire   [31:0] mm_interconnect_1_rgb_led2_s1_readdata;                    // rgb_led2:readdata -> mm_interconnect_1:rgb_led2_s1_readdata
	wire    [1:0] mm_interconnect_1_rgb_led2_s1_address;                     // mm_interconnect_1:rgb_led2_s1_address -> rgb_led2:address
	wire          mm_interconnect_1_rgb_led2_s1_write;                       // mm_interconnect_1:rgb_led2_s1_write -> rgb_led2:write_n
	wire   [31:0] mm_interconnect_1_rgb_led2_s1_writedata;                   // mm_interconnect_1:rgb_led2_s1_writedata -> rgb_led2:writedata
	wire          mm_interconnect_1_rgb_led3_s1_chipselect;                  // mm_interconnect_1:rgb_led3_s1_chipselect -> rgb_led3:chipselect
	wire   [31:0] mm_interconnect_1_rgb_led3_s1_readdata;                    // rgb_led3:readdata -> mm_interconnect_1:rgb_led3_s1_readdata
	wire    [1:0] mm_interconnect_1_rgb_led3_s1_address;                     // mm_interconnect_1:rgb_led3_s1_address -> rgb_led3:address
	wire          mm_interconnect_1_rgb_led3_s1_write;                       // mm_interconnect_1:rgb_led3_s1_write -> rgb_led3:write_n
	wire   [31:0] mm_interconnect_1_rgb_led3_s1_writedata;                   // mm_interconnect_1:rgb_led3_s1_writedata -> rgb_led3:writedata
	wire   [10:0] mm_interconnect_1_axi_dmac_0_s_axi_awaddr;                 // mm_interconnect_1:axi_dmac_0_s_axi_awaddr -> axi_dmac_0:s_axi_awaddr
	wire    [1:0] mm_interconnect_1_axi_dmac_0_s_axi_bresp;                  // axi_dmac_0:s_axi_bresp -> mm_interconnect_1:axi_dmac_0_s_axi_bresp
	wire          mm_interconnect_1_axi_dmac_0_s_axi_arready;                // axi_dmac_0:s_axi_arready -> mm_interconnect_1:axi_dmac_0_s_axi_arready
	wire   [31:0] mm_interconnect_1_axi_dmac_0_s_axi_rdata;                  // axi_dmac_0:s_axi_rdata -> mm_interconnect_1:axi_dmac_0_s_axi_rdata
	wire    [3:0] mm_interconnect_1_axi_dmac_0_s_axi_wstrb;                  // mm_interconnect_1:axi_dmac_0_s_axi_wstrb -> axi_dmac_0:s_axi_wstrb
	wire          mm_interconnect_1_axi_dmac_0_s_axi_wready;                 // axi_dmac_0:s_axi_wready -> mm_interconnect_1:axi_dmac_0_s_axi_wready
	wire          mm_interconnect_1_axi_dmac_0_s_axi_awready;                // axi_dmac_0:s_axi_awready -> mm_interconnect_1:axi_dmac_0_s_axi_awready
	wire          mm_interconnect_1_axi_dmac_0_s_axi_rready;                 // mm_interconnect_1:axi_dmac_0_s_axi_rready -> axi_dmac_0:s_axi_rready
	wire          mm_interconnect_1_axi_dmac_0_s_axi_bready;                 // mm_interconnect_1:axi_dmac_0_s_axi_bready -> axi_dmac_0:s_axi_bready
	wire          mm_interconnect_1_axi_dmac_0_s_axi_wvalid;                 // mm_interconnect_1:axi_dmac_0_s_axi_wvalid -> axi_dmac_0:s_axi_wvalid
	wire   [10:0] mm_interconnect_1_axi_dmac_0_s_axi_araddr;                 // mm_interconnect_1:axi_dmac_0_s_axi_araddr -> axi_dmac_0:s_axi_araddr
	wire    [2:0] mm_interconnect_1_axi_dmac_0_s_axi_arprot;                 // mm_interconnect_1:axi_dmac_0_s_axi_arprot -> axi_dmac_0:s_axi_arprot
	wire    [1:0] mm_interconnect_1_axi_dmac_0_s_axi_rresp;                  // axi_dmac_0:s_axi_rresp -> mm_interconnect_1:axi_dmac_0_s_axi_rresp
	wire    [2:0] mm_interconnect_1_axi_dmac_0_s_axi_awprot;                 // mm_interconnect_1:axi_dmac_0_s_axi_awprot -> axi_dmac_0:s_axi_awprot
	wire   [31:0] mm_interconnect_1_axi_dmac_0_s_axi_wdata;                  // mm_interconnect_1:axi_dmac_0_s_axi_wdata -> axi_dmac_0:s_axi_wdata
	wire          mm_interconnect_1_axi_dmac_0_s_axi_arvalid;                // mm_interconnect_1:axi_dmac_0_s_axi_arvalid -> axi_dmac_0:s_axi_arvalid
	wire          mm_interconnect_1_axi_dmac_0_s_axi_bvalid;                 // axi_dmac_0:s_axi_bvalid -> mm_interconnect_1:axi_dmac_0_s_axi_bvalid
	wire          mm_interconnect_1_axi_dmac_0_s_axi_awvalid;                // mm_interconnect_1:axi_dmac_0_s_axi_awvalid -> axi_dmac_0:s_axi_awvalid
	wire          mm_interconnect_1_axi_dmac_0_s_axi_rvalid;                 // axi_dmac_0:s_axi_rvalid -> mm_interconnect_1:axi_dmac_0_s_axi_rvalid
	wire   [15:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_awaddr;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_awaddr -> axi_hdmi_tx_0:s_axi_awaddr
	wire    [1:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_bresp;               // axi_hdmi_tx_0:s_axi_bresp -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_bresp
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_arready;             // axi_hdmi_tx_0:s_axi_arready -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_arready
	wire   [31:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_rdata;               // axi_hdmi_tx_0:s_axi_rdata -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_rdata
	wire    [3:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_wstrb;               // mm_interconnect_1:axi_hdmi_tx_0_s_axi_wstrb -> axi_hdmi_tx_0:s_axi_wstrb
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_wready;              // axi_hdmi_tx_0:s_axi_wready -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_wready
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_awready;             // axi_hdmi_tx_0:s_axi_awready -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_awready
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_rready;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_rready -> axi_hdmi_tx_0:s_axi_rready
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_bready;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_bready -> axi_hdmi_tx_0:s_axi_bready
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_wvalid;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_wvalid -> axi_hdmi_tx_0:s_axi_wvalid
	wire   [15:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_araddr;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_araddr -> axi_hdmi_tx_0:s_axi_araddr
	wire    [2:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_arprot;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_arprot -> axi_hdmi_tx_0:s_axi_arprot
	wire    [1:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_rresp;               // axi_hdmi_tx_0:s_axi_rresp -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_rresp
	wire    [2:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_awprot;              // mm_interconnect_1:axi_hdmi_tx_0_s_axi_awprot -> axi_hdmi_tx_0:s_axi_awprot
	wire   [31:0] mm_interconnect_1_axi_hdmi_tx_0_s_axi_wdata;               // mm_interconnect_1:axi_hdmi_tx_0_s_axi_wdata -> axi_hdmi_tx_0:s_axi_wdata
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_arvalid;             // mm_interconnect_1:axi_hdmi_tx_0_s_axi_arvalid -> axi_hdmi_tx_0:s_axi_arvalid
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_bvalid;              // axi_hdmi_tx_0:s_axi_bvalid -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_bvalid
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_awvalid;             // mm_interconnect_1:axi_hdmi_tx_0_s_axi_awvalid -> axi_hdmi_tx_0:s_axi_awvalid
	wire          mm_interconnect_1_axi_hdmi_tx_0_s_axi_rvalid;              // axi_hdmi_tx_0:s_axi_rvalid -> mm_interconnect_1:axi_hdmi_tx_0_s_axi_rvalid
	wire   [62:0] agilex_5_soc_fpga2hps_interrupt_irq;                       // irq_mapper:sender_irq -> agilex_5_soc:fpga2hps_interrupt_irq
	wire          rst_controller_reset_out_reset;                            // rst_controller:reset_out -> [agilex_5_soc:emif0_csr_axi_rst_reset_n, axi_dmac_0:s_axi_aresetn, rgb_led0:reset_n, rgb_led1:reset_n, rgb_led2:reset_n, rgb_led3:reset_n]
	wire          rst_controller_001_reset_out_reset;                        // rst_controller_001:reset_out -> agilex_5_soc:emif0_ch0_axi_rst_reset_n
	wire          emif_ph2_0_usr_rst_n_0_reset;                              // emif_ph2_0:usr_rst_n_0 -> [rst_controller_001:reset_in1, rst_controller_009:reset_in1, rst_controller_010:reset_in0]
	wire          rst_controller_002_reset_out_reset;                        // rst_controller_002:reset_out -> axi_dmac_0:m_src_axi_aresetn
	wire          jtag_master_master_reset_reset;                            // jtag_master:master_reset_reset -> [rst_controller_002:reset_in1, rst_controller_007:reset_in1, rst_controller_016:reset_in1, rst_controller_017:reset_in1]
	wire          rst_controller_003_reset_out_reset;                        // rst_controller_003:reset_out -> axi_hdmi_tx_0:s_axi_aresetn
	wire          rst_controller_004_reset_out_reset;                        // rst_controller_004:reset_out -> [dipsw:reset_n, jtag_uart:rst_n, pb:reset_n, sys_id:reset_n]
	wire          hps_jtag_master_master_reset_reset;                        // hps_jtag_master:master_reset_reset -> [rst_controller_004:reset_in1, rst_controller_013:reset_in1]
	wire          rst_controller_005_reset_out_reset;                        // rst_controller_005:reset_out -> emif_ph2_0:core_init_n_0
	wire          agilex_5_soc_h2f_cold_reset_reset;                         // agilex_5_soc:h2f_cold_reset_reset_n -> [rst_controller_005:reset_in0, rst_controller_006:reset_in0, rst_controller_018:reset_in0]
	wire          rst_controller_006_reset_out_reset;                        // rst_controller_006:reset_out -> emif_ph2_0:s0_axil_rst_n
	wire          rst_controller_007_reset_out_reset;                        // rst_controller_007:reset_out -> jtag_master:clk_reset_reset
	wire          rst_controller_008_reset_out_reset;                        // rst_controller_008:reset_out -> onchip_sram:reset
	wire          rst_controller_009_reset_out_reset;                        // rst_controller_009:reset_out -> mm_interconnect_0:agilex_5_soc_emif0_ch0_axi_translator_clk_reset_reset_bridge_in_reset_reset
	wire          rst_controller_010_reset_out_reset;                        // rst_controller_010:reset_out -> mm_interconnect_0:emif_ph2_0_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset
	wire          rst_controller_011_reset_out_reset;                        // rst_controller_011:reset_out -> [mm_interconnect_1:agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_012_reset_out_reset;                        // rst_controller_012:reset_out -> [mm_interconnect_1:onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:onchip_sram_reset1_reset_bridge_in_reset_reset]
	wire          rst_controller_013_reset_out_reset;                        // rst_controller_013:reset_out -> [mm_interconnect_1:jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:jtag_uart_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_014_reset_out_reset;                        // rst_controller_014:reset_out -> [mm_interconnect_1:axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset, mm_interconnect_1:axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_015_reset_out_reset;                        // rst_controller_015:reset_out -> [mm_interconnect_1:agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:crosser_010_in_clk_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_016_reset_out_reset;                        // rst_controller_016:reset_out -> mm_interconnect_1:jtag_master_master_translator_reset_reset_bridge_in_reset_reset
	wire          rst_controller_017_reset_out_reset;                        // rst_controller_017:reset_out -> mm_interconnect_1:axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset
	wire          rst_controller_018_reset_out_reset;                        // rst_controller_018:reset_out -> mm_interconnect_1:emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset

	ghrd_hps_system_intel_agilex_5_soc_0 agilex_5_soc (
		.h2f_reset_reset_n                  (agilex_5_soc_h2f_reset_reset),        //  output,    width = 1,                h2f_reset.reset_n
		.hps2fpga_axi_clock_clk             (clock_in_out_clk_clk),                //   input,    width = 1,       hps2fpga_axi_clock.clk
		.hps2fpga_axi_reset_reset_n         (agilex_5_soc_h2f_reset_reset),        //   input,    width = 1,       hps2fpga_axi_reset.reset_n
		.hps2fpga_awid                      (agilex_5_soc_hps2fpga_awid),          //  output,    width = 4,                 hps2fpga.awid
		.hps2fpga_awaddr                    (agilex_5_soc_hps2fpga_awaddr),        //  output,   width = 32,                         .awaddr
		.hps2fpga_awlen                     (agilex_5_soc_hps2fpga_awlen),         //  output,    width = 8,                         .awlen
		.hps2fpga_awsize                    (agilex_5_soc_hps2fpga_awsize),        //  output,    width = 3,                         .awsize
		.hps2fpga_awburst                   (agilex_5_soc_hps2fpga_awburst),       //  output,    width = 2,                         .awburst
		.hps2fpga_awlock                    (agilex_5_soc_hps2fpga_awlock),        //  output,    width = 1,                         .awlock
		.hps2fpga_awcache                   (agilex_5_soc_hps2fpga_awcache),       //  output,    width = 4,                         .awcache
		.hps2fpga_awprot                    (agilex_5_soc_hps2fpga_awprot),        //  output,    width = 3,                         .awprot
		.hps2fpga_awvalid                   (agilex_5_soc_hps2fpga_awvalid),       //  output,    width = 1,                         .awvalid
		.hps2fpga_awready                   (agilex_5_soc_hps2fpga_awready),       //   input,    width = 1,                         .awready
		.hps2fpga_wdata                     (agilex_5_soc_hps2fpga_wdata),         //  output,   width = 32,                         .wdata
		.hps2fpga_wstrb                     (agilex_5_soc_hps2fpga_wstrb),         //  output,    width = 4,                         .wstrb
		.hps2fpga_wlast                     (agilex_5_soc_hps2fpga_wlast),         //  output,    width = 1,                         .wlast
		.hps2fpga_wvalid                    (agilex_5_soc_hps2fpga_wvalid),        //  output,    width = 1,                         .wvalid
		.hps2fpga_wready                    (agilex_5_soc_hps2fpga_wready),        //   input,    width = 1,                         .wready
		.hps2fpga_bid                       (agilex_5_soc_hps2fpga_bid),           //   input,    width = 4,                         .bid
		.hps2fpga_bresp                     (agilex_5_soc_hps2fpga_bresp),         //   input,    width = 2,                         .bresp
		.hps2fpga_bvalid                    (agilex_5_soc_hps2fpga_bvalid),        //   input,    width = 1,                         .bvalid
		.hps2fpga_bready                    (agilex_5_soc_hps2fpga_bready),        //  output,    width = 1,                         .bready
		.hps2fpga_arid                      (agilex_5_soc_hps2fpga_arid),          //  output,    width = 4,                         .arid
		.hps2fpga_araddr                    (agilex_5_soc_hps2fpga_araddr),        //  output,   width = 32,                         .araddr
		.hps2fpga_arlen                     (agilex_5_soc_hps2fpga_arlen),         //  output,    width = 8,                         .arlen
		.hps2fpga_arsize                    (agilex_5_soc_hps2fpga_arsize),        //  output,    width = 3,                         .arsize
		.hps2fpga_arburst                   (agilex_5_soc_hps2fpga_arburst),       //  output,    width = 2,                         .arburst
		.hps2fpga_arlock                    (agilex_5_soc_hps2fpga_arlock),        //  output,    width = 1,                         .arlock
		.hps2fpga_arcache                   (agilex_5_soc_hps2fpga_arcache),       //  output,    width = 4,                         .arcache
		.hps2fpga_arprot                    (agilex_5_soc_hps2fpga_arprot),        //  output,    width = 3,                         .arprot
		.hps2fpga_arvalid                   (agilex_5_soc_hps2fpga_arvalid),       //  output,    width = 1,                         .arvalid
		.hps2fpga_arready                   (agilex_5_soc_hps2fpga_arready),       //   input,    width = 1,                         .arready
		.hps2fpga_rid                       (agilex_5_soc_hps2fpga_rid),           //   input,    width = 4,                         .rid
		.hps2fpga_rdata                     (agilex_5_soc_hps2fpga_rdata),         //   input,   width = 32,                         .rdata
		.hps2fpga_rresp                     (agilex_5_soc_hps2fpga_rresp),         //   input,    width = 2,                         .rresp
		.hps2fpga_rlast                     (agilex_5_soc_hps2fpga_rlast),         //   input,    width = 1,                         .rlast
		.hps2fpga_rvalid                    (agilex_5_soc_hps2fpga_rvalid),        //   input,    width = 1,                         .rvalid
		.hps2fpga_rready                    (agilex_5_soc_hps2fpga_rready),        //  output,    width = 1,                         .rready
		.lwhps2fpga_axi_clock_clk           (agilex_5_soc_h2f_user1_clk_clk),      //   input,    width = 1,     lwhps2fpga_axi_clock.clk
		.lwhps2fpga_axi_reset_reset_n       (agilex_5_soc_h2f_reset_reset),        //   input,    width = 1,     lwhps2fpga_axi_reset.reset_n
		.lwhps2fpga_awid                    (agilex_5_soc_lwhps2fpga_awid),        //  output,    width = 4,               lwhps2fpga.awid
		.lwhps2fpga_awaddr                  (agilex_5_soc_lwhps2fpga_awaddr),      //  output,   width = 29,                         .awaddr
		.lwhps2fpga_awlen                   (agilex_5_soc_lwhps2fpga_awlen),       //  output,    width = 8,                         .awlen
		.lwhps2fpga_awsize                  (agilex_5_soc_lwhps2fpga_awsize),      //  output,    width = 3,                         .awsize
		.lwhps2fpga_awburst                 (agilex_5_soc_lwhps2fpga_awburst),     //  output,    width = 2,                         .awburst
		.lwhps2fpga_awlock                  (agilex_5_soc_lwhps2fpga_awlock),      //  output,    width = 1,                         .awlock
		.lwhps2fpga_awcache                 (agilex_5_soc_lwhps2fpga_awcache),     //  output,    width = 4,                         .awcache
		.lwhps2fpga_awprot                  (agilex_5_soc_lwhps2fpga_awprot),      //  output,    width = 3,                         .awprot
		.lwhps2fpga_awvalid                 (agilex_5_soc_lwhps2fpga_awvalid),     //  output,    width = 1,                         .awvalid
		.lwhps2fpga_awready                 (agilex_5_soc_lwhps2fpga_awready),     //   input,    width = 1,                         .awready
		.lwhps2fpga_wdata                   (agilex_5_soc_lwhps2fpga_wdata),       //  output,   width = 32,                         .wdata
		.lwhps2fpga_wstrb                   (agilex_5_soc_lwhps2fpga_wstrb),       //  output,    width = 4,                         .wstrb
		.lwhps2fpga_wlast                   (agilex_5_soc_lwhps2fpga_wlast),       //  output,    width = 1,                         .wlast
		.lwhps2fpga_wvalid                  (agilex_5_soc_lwhps2fpga_wvalid),      //  output,    width = 1,                         .wvalid
		.lwhps2fpga_wready                  (agilex_5_soc_lwhps2fpga_wready),      //   input,    width = 1,                         .wready
		.lwhps2fpga_bid                     (agilex_5_soc_lwhps2fpga_bid),         //   input,    width = 4,                         .bid
		.lwhps2fpga_bresp                   (agilex_5_soc_lwhps2fpga_bresp),       //   input,    width = 2,                         .bresp
		.lwhps2fpga_bvalid                  (agilex_5_soc_lwhps2fpga_bvalid),      //   input,    width = 1,                         .bvalid
		.lwhps2fpga_bready                  (agilex_5_soc_lwhps2fpga_bready),      //  output,    width = 1,                         .bready
		.lwhps2fpga_arid                    (agilex_5_soc_lwhps2fpga_arid),        //  output,    width = 4,                         .arid
		.lwhps2fpga_araddr                  (agilex_5_soc_lwhps2fpga_araddr),      //  output,   width = 29,                         .araddr
		.lwhps2fpga_arlen                   (agilex_5_soc_lwhps2fpga_arlen),       //  output,    width = 8,                         .arlen
		.lwhps2fpga_arsize                  (agilex_5_soc_lwhps2fpga_arsize),      //  output,    width = 3,                         .arsize
		.lwhps2fpga_arburst                 (agilex_5_soc_lwhps2fpga_arburst),     //  output,    width = 2,                         .arburst
		.lwhps2fpga_arlock                  (agilex_5_soc_lwhps2fpga_arlock),      //  output,    width = 1,                         .arlock
		.lwhps2fpga_arcache                 (agilex_5_soc_lwhps2fpga_arcache),     //  output,    width = 4,                         .arcache
		.lwhps2fpga_arprot                  (agilex_5_soc_lwhps2fpga_arprot),      //  output,    width = 3,                         .arprot
		.lwhps2fpga_arvalid                 (agilex_5_soc_lwhps2fpga_arvalid),     //  output,    width = 1,                         .arvalid
		.lwhps2fpga_arready                 (agilex_5_soc_lwhps2fpga_arready),     //   input,    width = 1,                         .arready
		.lwhps2fpga_rid                     (agilex_5_soc_lwhps2fpga_rid),         //   input,    width = 4,                         .rid
		.lwhps2fpga_rdata                   (agilex_5_soc_lwhps2fpga_rdata),       //   input,   width = 32,                         .rdata
		.lwhps2fpga_rresp                   (agilex_5_soc_lwhps2fpga_rresp),       //   input,    width = 2,                         .rresp
		.lwhps2fpga_rlast                   (agilex_5_soc_lwhps2fpga_rlast),       //   input,    width = 1,                         .rlast
		.lwhps2fpga_rvalid                  (agilex_5_soc_lwhps2fpga_rvalid),      //   input,    width = 1,                         .rvalid
		.lwhps2fpga_rready                  (agilex_5_soc_lwhps2fpga_rready),      //  output,    width = 1,                         .rready
		.emac_ptp_clk_clk                   (agilex_5_soc_h2f_user0_clk_clk),      //   input,    width = 1,             emac_ptp_clk.clk
		.emac_timestamp_clk_clk             (agilex_5_soc_h2f_user0_clk_clk),      //   input,    width = 1,       emac_timestamp_clk.clk
		.emac_timestamp_data_data_in        (),                                    //   input,   width = 64,      emac_timestamp_data.data_in
		.emac0_mdio_mac_mdc                 (emac0_mdio_mac_mdc),                  //  output,    width = 1,               emac0_mdio.mac_mdc
		.emac0_mdio_mac_mdi                 (emac0_mdio_mac_mdi),                  //   input,    width = 1,                         .mac_mdi
		.emac0_mdio_mac_mdo                 (emac0_mdio_mac_mdo),                  //  output,    width = 1,                         .mac_mdo
		.emac0_mdio_mac_mdoe                (emac0_mdio_mac_mdoe),                 //  output,    width = 1,                         .mac_mdoe
		.emac0_app_rst_reset_n              (emac0_app_rst_reset_n),               //  output,    width = 1,            emac0_app_rst.reset_n
		.emac0_mac_tx_clk_o                 (emac0_mac_tx_clk_o),                  //  output,    width = 1,                    emac0.mac_tx_clk_o
		.emac0_mac_tx_clk_i                 (emac0_mac_tx_clk_i),                  //   input,    width = 1,                         .mac_tx_clk_i
		.emac0_mac_rx_clk                   (emac0_mac_rx_clk),                    //   input,    width = 1,                         .mac_rx_clk
		.emac0_mac_rst_tx_n                 (emac0_mac_rst_tx_n),                  //  output,    width = 1,                         .mac_rst_tx_n
		.emac0_mac_rst_rx_n                 (emac0_mac_rst_rx_n),                  //  output,    width = 1,                         .mac_rst_rx_n
		.emac0_mac_txen                     (emac0_mac_txen),                      //  output,    width = 1,                         .mac_txen
		.emac0_mac_txer                     (emac0_mac_txer),                      //  output,    width = 1,                         .mac_txer
		.emac0_mac_rxdv                     (emac0_mac_rxdv),                      //   input,    width = 1,                         .mac_rxdv
		.emac0_mac_rxer                     (emac0_mac_rxer),                      //   input,    width = 1,                         .mac_rxer
		.emac0_mac_rxd                      (emac0_mac_rxd),                       //   input,    width = 8,                         .mac_rxd
		.emac0_mac_col                      (emac0_mac_col),                       //   input,    width = 1,                         .mac_col
		.emac0_mac_crs                      (emac0_mac_crs),                       //   input,    width = 1,                         .mac_crs
		.emac0_mac_speed                    (emac0_mac_speed),                     //  output,    width = 3,                         .mac_speed
		.emac0_mac_txd_o                    (emac0_mac_txd_o),                     //  output,    width = 8,                         .mac_txd_o
		.emac2_app_rst_reset_n              (emac2_app_rst_reset_n),               //  output,    width = 1,            emac2_app_rst.reset_n
		.spim0_miso_i                       (spim0_miso_i),                        //   input,    width = 1,                    spim0.miso_i
		.spim0_mosi_o                       (spim0_mosi_o),                        //  output,    width = 1,                         .mosi_o
		.spim0_mosi_oe                      (spim0_mosi_oe),                       //  output,    width = 1,                         .mosi_oe
		.spim0_ss_in_n                      (spim0_ss_in_n),                       //   input,    width = 1,                         .ss_in_n
		.spim0_ss0_n_o                      (spim0_ss0_n_o),                       //  output,    width = 1,                         .ss0_n_o
		.spim0_ss1_n_o                      (spim0_ss1_n_o),                       //  output,    width = 1,                         .ss1_n_o
		.spim0_ss2_n_o                      (spim0_ss2_n_o),                       //  output,    width = 1,                         .ss2_n_o
		.spim0_ss3_n_o                      (spim0_ss3_n_o),                       //  output,    width = 1,                         .ss3_n_o
		.spim0_sclk_out_clk                 (spim0_sclk_out_clk),                  //  output,    width = 1,           spim0_sclk_out.clk
		.I2C1_scl_i_clk                     (i2c1_scl_i_clk),                      //   input,    width = 1,               I2C1_scl_i.clk
		.I2C1_scl_oe_clk                    (i2c1_scl_oe_clk),                     //  output,    width = 1,              I2C1_scl_oe.clk
		.I2C1_sda_i                         (i2c1_sda_i),                          //   input,    width = 1,                     I2C1.sda_i
		.I2C1_sda_oe                        (i2c1_sda_oe),                         //  output,    width = 1,                         .sda_oe
		.h2f_user0_clk_clk                  (agilex_5_soc_h2f_user0_clk_clk),      //  output,    width = 1,            h2f_user0_clk.clk
		.h2f_user1_clk_clk                  (agilex_5_soc_h2f_user1_clk_clk),      //  output,    width = 1,            h2f_user1_clk.clk
		.h2f_warm_reset_handshake_reset_req (),                                    //  output,    width = 1, h2f_warm_reset_handshake.reset_req
		.h2f_warm_reset_handshake_reset_ack (),                                    //   input,    width = 1,                         .reset_ack
		.h2f_cold_reset_reset_n             (agilex_5_soc_h2f_cold_reset_reset),   //  output,    width = 1,           h2f_cold_reset.reset_n
		.hps_io_hps_osc_clk                 (hps_io_hps_osc_clk),                  //   input,    width = 1,                   hps_io.hps_osc_clk
		.hps_io_sdmmc_data0                 (hps_io_sdmmc_data0),                  //   inout,    width = 1,                         .sdmmc_data0
		.hps_io_sdmmc_data1                 (hps_io_sdmmc_data1),                  //   inout,    width = 1,                         .sdmmc_data1
		.hps_io_sdmmc_cclk                  (hps_io_sdmmc_cclk),                   //  output,    width = 1,                         .sdmmc_cclk
		.hps_io_sdmmc_data2                 (hps_io_sdmmc_data2),                  //   inout,    width = 1,                         .sdmmc_data2
		.hps_io_sdmmc_data3                 (hps_io_sdmmc_data3),                  //   inout,    width = 1,                         .sdmmc_data3
		.hps_io_sdmmc_cmd                   (hps_io_sdmmc_cmd),                    //   inout,    width = 1,                         .sdmmc_cmd
		.hps_io_usb1_clk                    (hps_io_usb1_clk),                     //   input,    width = 1,                         .usb1_clk
		.hps_io_usb1_stp                    (hps_io_usb1_stp),                     //  output,    width = 1,                         .usb1_stp
		.hps_io_usb1_dir                    (hps_io_usb1_dir),                     //   input,    width = 1,                         .usb1_dir
		.hps_io_usb1_data0                  (hps_io_usb1_data0),                   //   inout,    width = 1,                         .usb1_data0
		.hps_io_usb1_data1                  (hps_io_usb1_data1),                   //   inout,    width = 1,                         .usb1_data1
		.hps_io_usb1_nxr                    (hps_io_usb1_nxr),                     //   input,    width = 1,                         .usb1_nxr
		.hps_io_usb1_data2                  (hps_io_usb1_data2),                   //   inout,    width = 1,                         .usb1_data2
		.hps_io_usb1_data3                  (hps_io_usb1_data3),                   //   inout,    width = 1,                         .usb1_data3
		.hps_io_usb1_data4                  (hps_io_usb1_data4),                   //   inout,    width = 1,                         .usb1_data4
		.hps_io_usb1_data5                  (hps_io_usb1_data5),                   //   inout,    width = 1,                         .usb1_data5
		.hps_io_usb1_data6                  (hps_io_usb1_data6),                   //   inout,    width = 1,                         .usb1_data6
		.hps_io_usb1_data7                  (hps_io_usb1_data7),                   //   inout,    width = 1,                         .usb1_data7
		.hps_io_emac2_tx_clk                (hps_io_emac2_tx_clk),                 //  output,    width = 1,                         .emac2_tx_clk
		.hps_io_emac2_tx_ctl                (hps_io_emac2_tx_ctl),                 //  output,    width = 1,                         .emac2_tx_ctl
		.hps_io_emac2_rx_clk                (hps_io_emac2_rx_clk),                 //   input,    width = 1,                         .emac2_rx_clk
		.hps_io_emac2_rx_ctl                (hps_io_emac2_rx_ctl),                 //   input,    width = 1,                         .emac2_rx_ctl
		.hps_io_emac2_txd0                  (hps_io_emac2_txd0),                   //  output,    width = 1,                         .emac2_txd0
		.hps_io_emac2_txd1                  (hps_io_emac2_txd1),                   //  output,    width = 1,                         .emac2_txd1
		.hps_io_emac2_rxd0                  (hps_io_emac2_rxd0),                   //   input,    width = 1,                         .emac2_rxd0
		.hps_io_emac2_rxd1                  (hps_io_emac2_rxd1),                   //   input,    width = 1,                         .emac2_rxd1
		.hps_io_emac2_txd2                  (hps_io_emac2_txd2),                   //  output,    width = 1,                         .emac2_txd2
		.hps_io_emac2_txd3                  (hps_io_emac2_txd3),                   //  output,    width = 1,                         .emac2_txd3
		.hps_io_emac2_rxd2                  (hps_io_emac2_rxd2),                   //   input,    width = 1,                         .emac2_rxd2
		.hps_io_emac2_rxd3                  (hps_io_emac2_rxd3),                   //   input,    width = 1,                         .emac2_rxd3
		.hps_io_mdio2_mdio                  (hps_io_mdio2_mdio),                   //   inout,    width = 1,                         .mdio2_mdio
		.hps_io_mdio2_mdc                   (hps_io_mdio2_mdc),                    //  output,    width = 1,                         .mdio2_mdc
		.hps_io_uart0_tx                    (hps_io_uart0_tx),                     //  output,    width = 1,                         .uart0_tx
		.hps_io_uart0_rx                    (hps_io_uart0_rx),                     //   input,    width = 1,                         .uart0_rx
		.hps_io_i2c0_sda                    (hps_io_i2c0_sda),                     //   inout,    width = 1,                         .i2c0_sda
		.hps_io_i2c0_scl                    (hps_io_i2c0_scl),                     //   inout,    width = 1,                         .i2c0_scl
		.hps_io_gpio8                       (hps_io_gpio8),                        //   inout,    width = 1,                         .gpio8
		.hps_io_gpio9                       (hps_io_gpio9),                        //   inout,    width = 1,                         .gpio9
		.hps_io_gpio10                      (hps_io_gpio10),                       //   inout,    width = 1,                         .gpio10
		.hps_io_gpio11                      (hps_io_gpio11),                       //   inout,    width = 1,                         .gpio11
		.hps_io_gpio28                      (hps_io_gpio28),                       //   inout,    width = 1,                         .gpio28
		.hps_io_gpio35                      (hps_io_gpio35),                       //   inout,    width = 1,                         .gpio35
		.usb31_io_vbus_det                  (usb31_io_vbus_det),                   //   input,    width = 1,                 usb31_io.vbus_det
		.usb31_io_flt_bar                   (usb31_io_flt_bar),                    //   input,    width = 1,                         .flt_bar
		.usb31_io_usb_ctrl                  (usb31_io_usb_ctrl),                   //  output,    width = 2,                         .usb_ctrl
		.usb31_io_usb31_id                  (usb31_io_usb31_id),                   //   input,    width = 1,                         .usb31_id
		.fpga2hps_interrupt_irq             (agilex_5_soc_fpga2hps_interrupt_irq), //   input,   width = 63,       fpga2hps_interrupt.irq
		.emif0_csr_axi_clk_clk              (agilex_5_soc_h2f_user1_clk_clk),      //   input,    width = 1,        emif0_csr_axi_clk.clk
		.emif0_csr_axi_rst_reset_n          (~rst_controller_reset_out_reset),     //   input,    width = 1,        emif0_csr_axi_rst.reset_n
		.emif0_csr_axi_arready              (),                                    //   input,    width = 1,            emif0_csr_axi.arready
		.emif0_csr_axi_awready              (),                                    //   input,    width = 1,                         .awready
		.emif0_csr_axi_bresp                (),                                    //   input,    width = 2,                         .bresp
		.emif0_csr_axi_bvalid               (),                                    //   input,    width = 1,                         .bvalid
		.emif0_csr_axi_rdata                (),                                    //   input,   width = 32,                         .rdata
		.emif0_csr_axi_rresp                (),                                    //   input,    width = 2,                         .rresp
		.emif0_csr_axi_rvalid               (),                                    //   input,    width = 1,                         .rvalid
		.emif0_csr_axi_wready               (),                                    //   input,    width = 1,                         .wready
		.emif0_csr_axi_araddr               (),                                    //  output,   width = 32,                         .araddr
		.emif0_csr_axi_arvalid              (),                                    //  output,    width = 1,                         .arvalid
		.emif0_csr_axi_awaddr               (),                                    //  output,   width = 32,                         .awaddr
		.emif0_csr_axi_awvalid              (),                                    //  output,    width = 1,                         .awvalid
		.emif0_csr_axi_bready               (),                                    //  output,    width = 1,                         .bready
		.emif0_csr_axi_rready               (),                                    //  output,    width = 1,                         .rready
		.emif0_csr_axi_wdata                (),                                    //  output,   width = 32,                         .wdata
		.emif0_csr_axi_wstrb                (),                                    //  output,    width = 4,                         .wstrb
		.emif0_csr_axi_wvalid               (),                                    //  output,    width = 1,                         .wvalid
		.emif0_csr_axi_arprot               (),                                    //  output,    width = 3,                         .arprot
		.emif0_csr_axi_awprot               (),                                    //  output,    width = 3,                         .awprot
		.emif0_ch0_axi_clk_clk              (agilex_5_soc_h2f_user0_clk_clk),      //   input,    width = 1,        emif0_ch0_axi_clk.clk
		.emif0_ch0_axi_rst_reset_n          (~rst_controller_001_reset_out_reset), //   input,    width = 1,        emif0_ch0_axi_rst.reset_n
		.emif0_ch0_axi_arready              (agilex_5_soc_emif0_ch0_axi_arready),  //   input,    width = 1,            emif0_ch0_axi.arready
		.emif0_ch0_axi_awready              (agilex_5_soc_emif0_ch0_axi_awready),  //   input,    width = 1,                         .awready
		.emif0_ch0_axi_bid                  (agilex_5_soc_emif0_ch0_axi_bid),      //   input,    width = 7,                         .bid
		.emif0_ch0_axi_bresp                (agilex_5_soc_emif0_ch0_axi_bresp),    //   input,    width = 2,                         .bresp
		.emif0_ch0_axi_bvalid               (agilex_5_soc_emif0_ch0_axi_bvalid),   //   input,    width = 1,                         .bvalid
		.emif0_ch0_axi_rdata                (agilex_5_soc_emif0_ch0_axi_rdata),    //   input,  width = 256,                         .rdata
		.emif0_ch0_axi_rid                  (agilex_5_soc_emif0_ch0_axi_rid),      //   input,    width = 7,                         .rid
		.emif0_ch0_axi_rlast                (agilex_5_soc_emif0_ch0_axi_rlast),    //   input,    width = 1,                         .rlast
		.emif0_ch0_axi_rresp                (agilex_5_soc_emif0_ch0_axi_rresp),    //   input,    width = 2,                         .rresp
		.emif0_ch0_axi_ruser                (agilex_5_soc_emif0_ch0_axi_ruser),    //   input,   width = 32,                         .ruser
		.emif0_ch0_axi_rvalid               (agilex_5_soc_emif0_ch0_axi_rvalid),   //   input,    width = 1,                         .rvalid
		.emif0_ch0_axi_wready               (agilex_5_soc_emif0_ch0_axi_wready),   //   input,    width = 1,                         .wready
		.emif0_ch0_axi_araddr               (agilex_5_soc_emif0_ch0_axi_araddr),   //  output,   width = 44,                         .araddr
		.emif0_ch0_axi_arburst              (agilex_5_soc_emif0_ch0_axi_arburst),  //  output,    width = 2,                         .arburst
		.emif0_ch0_axi_arid                 (agilex_5_soc_emif0_ch0_axi_arid),     //  output,    width = 7,                         .arid
		.emif0_ch0_axi_arlen                (agilex_5_soc_emif0_ch0_axi_arlen),    //  output,    width = 8,                         .arlen
		.emif0_ch0_axi_arlock               (agilex_5_soc_emif0_ch0_axi_arlock),   //  output,    width = 1,                         .arlock
		.emif0_ch0_axi_arqos                (agilex_5_soc_emif0_ch0_axi_arqos),    //  output,    width = 4,                         .arqos
		.emif0_ch0_axi_arsize               (agilex_5_soc_emif0_ch0_axi_arsize),   //  output,    width = 3,                         .arsize
		.emif0_ch0_axi_aruser               (agilex_5_soc_emif0_ch0_axi_aruser),   //  output,   width = 14,                         .aruser
		.emif0_ch0_axi_arvalid              (agilex_5_soc_emif0_ch0_axi_arvalid),  //  output,    width = 1,                         .arvalid
		.emif0_ch0_axi_awaddr               (agilex_5_soc_emif0_ch0_axi_awaddr),   //  output,   width = 44,                         .awaddr
		.emif0_ch0_axi_awburst              (agilex_5_soc_emif0_ch0_axi_awburst),  //  output,    width = 2,                         .awburst
		.emif0_ch0_axi_awid                 (agilex_5_soc_emif0_ch0_axi_awid),     //  output,    width = 7,                         .awid
		.emif0_ch0_axi_awlen                (agilex_5_soc_emif0_ch0_axi_awlen),    //  output,    width = 8,                         .awlen
		.emif0_ch0_axi_awlock               (agilex_5_soc_emif0_ch0_axi_awlock),   //  output,    width = 1,                         .awlock
		.emif0_ch0_axi_awqos                (agilex_5_soc_emif0_ch0_axi_awqos),    //  output,    width = 4,                         .awqos
		.emif0_ch0_axi_awsize               (agilex_5_soc_emif0_ch0_axi_awsize),   //  output,    width = 3,                         .awsize
		.emif0_ch0_axi_awuser               (agilex_5_soc_emif0_ch0_axi_awuser),   //  output,   width = 14,                         .awuser
		.emif0_ch0_axi_awvalid              (agilex_5_soc_emif0_ch0_axi_awvalid),  //  output,    width = 1,                         .awvalid
		.emif0_ch0_axi_bready               (agilex_5_soc_emif0_ch0_axi_bready),   //  output,    width = 1,                         .bready
		.emif0_ch0_axi_rready               (agilex_5_soc_emif0_ch0_axi_rready),   //  output,    width = 1,                         .rready
		.emif0_ch0_axi_wdata                (agilex_5_soc_emif0_ch0_axi_wdata),    //  output,  width = 256,                         .wdata
		.emif0_ch0_axi_wlast                (agilex_5_soc_emif0_ch0_axi_wlast),    //  output,    width = 1,                         .wlast
		.emif0_ch0_axi_wstrb                (agilex_5_soc_emif0_ch0_axi_wstrb),    //  output,   width = 32,                         .wstrb
		.emif0_ch0_axi_wuser                (agilex_5_soc_emif0_ch0_axi_wuser),    //  output,   width = 32,                         .wuser
		.emif0_ch0_axi_wvalid               (agilex_5_soc_emif0_ch0_axi_wvalid),   //  output,    width = 1,                         .wvalid
		.emif0_ch0_axi_arprot               (agilex_5_soc_emif0_ch0_axi_arprot),   //  output,    width = 3,                         .arprot
		.emif0_ch0_axi_awprot               (agilex_5_soc_emif0_ch0_axi_awprot)    //  output,    width = 3,                         .awprot
	);

	ghrd_hps_system_axi_dmac_0 axi_dmac_0 (
		.s_axi_aclk        (agilex_5_soc_h2f_user1_clk_clk),             //   input,   width = 1,        s_axi_clock.clk
		.s_axi_aresetn     (~rst_controller_reset_out_reset),            //   input,   width = 1,        s_axi_reset.reset_n
		.s_axi_awvalid     (mm_interconnect_1_axi_dmac_0_s_axi_awvalid), //   input,   width = 1,              s_axi.awvalid
		.s_axi_awaddr      (mm_interconnect_1_axi_dmac_0_s_axi_awaddr),  //   input,  width = 11,                   .awaddr
		.s_axi_awprot      (mm_interconnect_1_axi_dmac_0_s_axi_awprot),  //   input,   width = 3,                   .awprot
		.s_axi_awready     (mm_interconnect_1_axi_dmac_0_s_axi_awready), //  output,   width = 1,                   .awready
		.s_axi_wvalid      (mm_interconnect_1_axi_dmac_0_s_axi_wvalid),  //   input,   width = 1,                   .wvalid
		.s_axi_wdata       (mm_interconnect_1_axi_dmac_0_s_axi_wdata),   //   input,  width = 32,                   .wdata
		.s_axi_wstrb       (mm_interconnect_1_axi_dmac_0_s_axi_wstrb),   //   input,   width = 4,                   .wstrb
		.s_axi_wready      (mm_interconnect_1_axi_dmac_0_s_axi_wready),  //  output,   width = 1,                   .wready
		.s_axi_bvalid      (mm_interconnect_1_axi_dmac_0_s_axi_bvalid),  //  output,   width = 1,                   .bvalid
		.s_axi_bresp       (mm_interconnect_1_axi_dmac_0_s_axi_bresp),   //  output,   width = 2,                   .bresp
		.s_axi_bready      (mm_interconnect_1_axi_dmac_0_s_axi_bready),  //   input,   width = 1,                   .bready
		.s_axi_arvalid     (mm_interconnect_1_axi_dmac_0_s_axi_arvalid), //   input,   width = 1,                   .arvalid
		.s_axi_araddr      (mm_interconnect_1_axi_dmac_0_s_axi_araddr),  //   input,  width = 11,                   .araddr
		.s_axi_arprot      (mm_interconnect_1_axi_dmac_0_s_axi_arprot),  //   input,   width = 3,                   .arprot
		.s_axi_arready     (mm_interconnect_1_axi_dmac_0_s_axi_arready), //  output,   width = 1,                   .arready
		.s_axi_rvalid      (mm_interconnect_1_axi_dmac_0_s_axi_rvalid),  //  output,   width = 1,                   .rvalid
		.s_axi_rresp       (mm_interconnect_1_axi_dmac_0_s_axi_rresp),   //  output,   width = 2,                   .rresp
		.s_axi_rdata       (mm_interconnect_1_axi_dmac_0_s_axi_rdata),   //  output,  width = 32,                   .rdata
		.s_axi_rready      (mm_interconnect_1_axi_dmac_0_s_axi_rready),  //   input,   width = 1,                   .rready
		.irq               (),                                           //  output,   width = 1,   interrupt_sender.irq
		.m_src_axi_aclk    (hdmi_pll_outclk0_clk),                       //   input,   width = 1,    m_src_axi_clock.clk
		.m_src_axi_aresetn (~rst_controller_002_reset_out_reset),        //   input,   width = 1,    m_src_axi_reset.reset_n
		.m_axis_aclk       (hdmi_pll_outclk0_clk),                       //   input,   width = 1,     if_m_axis_aclk.clk
		.m_axis_xfer_req   (),                                           //  output,   width = 1, if_m_axis_xfer_req.xfer_req
		.m_axis_valid      (axi_dmac_0_m_axis_tvalid),                   //  output,   width = 1,             m_axis.tvalid
		.m_axis_last       (axi_dmac_0_m_axis_tlast),                    //  output,   width = 1,                   .tlast
		.m_axis_ready      (axi_dmac_0_m_axis_tready),                   //   input,   width = 1,                   .tready
		.m_axis_data       (axi_dmac_0_m_axis_tdata),                    //  output,  width = 64,                   .tdata
		.m_src_axi_awvalid (axi_dmac_0_m_src_axi_awvalid),               //  output,   width = 1,          m_src_axi.awvalid
		.m_src_axi_awaddr  (axi_dmac_0_m_src_axi_awaddr),                //  output,  width = 32,                   .awaddr
		.m_src_axi_awready (axi_dmac_0_m_src_axi_awready),               //   input,   width = 1,                   .awready
		.m_src_axi_wvalid  (axi_dmac_0_m_src_axi_wvalid),                //  output,   width = 1,                   .wvalid
		.m_src_axi_wdata   (axi_dmac_0_m_src_axi_wdata),                 //  output,  width = 64,                   .wdata
		.m_src_axi_wstrb   (axi_dmac_0_m_src_axi_wstrb),                 //  output,   width = 8,                   .wstrb
		.m_src_axi_wready  (axi_dmac_0_m_src_axi_wready),                //   input,   width = 1,                   .wready
		.m_src_axi_bvalid  (axi_dmac_0_m_src_axi_bvalid),                //   input,   width = 1,                   .bvalid
		.m_src_axi_bresp   (axi_dmac_0_m_src_axi_bresp),                 //   input,   width = 2,                   .bresp
		.m_src_axi_bready  (axi_dmac_0_m_src_axi_bready),                //  output,   width = 1,                   .bready
		.m_src_axi_arvalid (axi_dmac_0_m_src_axi_arvalid),               //  output,   width = 1,                   .arvalid
		.m_src_axi_araddr  (axi_dmac_0_m_src_axi_araddr),                //  output,  width = 32,                   .araddr
		.m_src_axi_arready (axi_dmac_0_m_src_axi_arready),               //   input,   width = 1,                   .arready
		.m_src_axi_rvalid  (axi_dmac_0_m_src_axi_rvalid),                //   input,   width = 1,                   .rvalid
		.m_src_axi_rresp   (axi_dmac_0_m_src_axi_rresp),                 //   input,   width = 2,                   .rresp
		.m_src_axi_rdata   (axi_dmac_0_m_src_axi_rdata),                 //   input,  width = 64,                   .rdata
		.m_src_axi_rready  (axi_dmac_0_m_src_axi_rready),                //  output,   width = 1,                   .rready
		.m_src_axi_awlen   (axi_dmac_0_m_src_axi_awlen),                 //  output,   width = 4,                   .awlen
		.m_src_axi_awsize  (axi_dmac_0_m_src_axi_awsize),                //  output,   width = 3,                   .awsize
		.m_src_axi_awburst (axi_dmac_0_m_src_axi_awburst),               //  output,   width = 2,                   .awburst
		.m_src_axi_awcache (axi_dmac_0_m_src_axi_awcache),               //  output,   width = 4,                   .awcache
		.m_src_axi_awprot  (axi_dmac_0_m_src_axi_awprot),                //  output,   width = 3,                   .awprot
		.m_src_axi_wlast   (axi_dmac_0_m_src_axi_wlast),                 //  output,   width = 1,                   .wlast
		.m_src_axi_arlen   (axi_dmac_0_m_src_axi_arlen),                 //  output,   width = 4,                   .arlen
		.m_src_axi_arsize  (axi_dmac_0_m_src_axi_arsize),                //  output,   width = 3,                   .arsize
		.m_src_axi_arburst (axi_dmac_0_m_src_axi_arburst),               //  output,   width = 2,                   .arburst
		.m_src_axi_arcache (axi_dmac_0_m_src_axi_arcache),               //  output,   width = 4,                   .arcache
		.m_src_axi_arprot  (axi_dmac_0_m_src_axi_arprot),                //  output,   width = 3,                   .arprot
		.m_src_axi_awid    (axi_dmac_0_m_src_axi_awid),                  //  output,   width = 1,                   .awid
		.m_src_axi_awlock  (axi_dmac_0_m_src_axi_awlock),                //  output,   width = 2,                   .awlock
		.m_src_axi_wid     (axi_dmac_0_m_src_axi_wid),                   //  output,   width = 1,                   .wid
		.m_src_axi_arid    (axi_dmac_0_m_src_axi_arid),                  //  output,   width = 1,                   .arid
		.m_src_axi_arlock  (axi_dmac_0_m_src_axi_arlock),                //  output,   width = 2,                   .arlock
		.m_src_axi_rid     (axi_dmac_0_m_src_axi_rid),                   //   input,   width = 1,                   .rid
		.m_src_axi_bid     (axi_dmac_0_m_src_axi_bid),                   //   input,   width = 1,                   .bid
		.m_src_axi_rlast   (axi_dmac_0_m_src_axi_rlast)                  //   input,   width = 1,                   .rlast
	);

	ghrd_hps_system_axi_hdmi_tx_0 axi_hdmi_tx_0 (
		.s_axi_aclk        (hdmi_pll_outclk0_clk),                          //   input,   width = 1, s_axi_clock.clk
		.s_axi_awvalid     (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awvalid), //   input,   width = 1,       s_axi.awvalid
		.s_axi_awaddr      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awaddr),  //   input,  width = 16,            .awaddr
		.s_axi_awprot      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awprot),  //   input,   width = 3,            .awprot
		.s_axi_awready     (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awready), //  output,   width = 1,            .awready
		.s_axi_wvalid      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wvalid),  //   input,   width = 1,            .wvalid
		.s_axi_wdata       (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wdata),   //   input,  width = 32,            .wdata
		.s_axi_wstrb       (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wstrb),   //   input,   width = 4,            .wstrb
		.s_axi_wready      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wready),  //  output,   width = 1,            .wready
		.s_axi_bvalid      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_bvalid),  //  output,   width = 1,            .bvalid
		.s_axi_bresp       (mm_interconnect_1_axi_hdmi_tx_0_s_axi_bresp),   //  output,   width = 2,            .bresp
		.s_axi_bready      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_bready),  //   input,   width = 1,            .bready
		.s_axi_arvalid     (mm_interconnect_1_axi_hdmi_tx_0_s_axi_arvalid), //   input,   width = 1,            .arvalid
		.s_axi_araddr      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_araddr),  //   input,  width = 16,            .araddr
		.s_axi_arprot      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_arprot),  //   input,   width = 3,            .arprot
		.s_axi_arready     (mm_interconnect_1_axi_hdmi_tx_0_s_axi_arready), //  output,   width = 1,            .arready
		.s_axi_rvalid      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rvalid),  //  output,   width = 1,            .rvalid
		.s_axi_rresp       (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rresp),   //  output,   width = 2,            .rresp
		.s_axi_rdata       (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rdata),   //  output,  width = 32,            .rdata
		.s_axi_rready      (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rready),  //   input,   width = 1,            .rready
		.hdmi_clk          (agilex_5_soc_h2f_user1_clk_clk),                //   input,   width = 1,  hdmi_clock.clk
		.hdmi_out_clk      (hdmi_h_clk),                                    //  output,   width = 1,     hdmi_if.h_clk
		.hdmi_16_hsync     (hdmi_h16_hsync),                                //  output,   width = 1,            .h16_hsync
		.hdmi_16_vsync     (hdmi_h16_vsync),                                //  output,   width = 1,            .h16_vsync
		.hdmi_16_data_e    (hdmi_h16_data_e),                               //  output,   width = 1,            .h16_data_e
		.hdmi_16_data      (hdmi_h16_data),                                 //  output,  width = 16,            .h16_data
		.hdmi_16_es_data   (hdmi_h16_es_data),                              //  output,  width = 16,            .h16_es_data
		.hdmi_24_hsync     (hdmi_h24_hsync),                                //  output,   width = 1,            .h24_hsync
		.hdmi_24_vsync     (hdmi_h24_vsync),                                //  output,   width = 1,            .h24_vsync
		.hdmi_24_data_e    (hdmi_h24_data_e),                               //  output,   width = 1,            .h24_data_e
		.hdmi_24_data      (hdmi_h24_data),                                 //  output,  width = 24,            .h24_data
		.hdmi_36_hsync     (hdmi_h36_hsync),                                //  output,   width = 1,            .h36_hsync
		.hdmi_36_vsync     (hdmi_h36_vsync),                                //  output,   width = 1,            .h36_vsync
		.hdmi_36_data_e    (hdmi_h36_data_e),                               //  output,   width = 1,            .h36_data_e
		.hdmi_36_data      (hdmi_h36_data),                                 //  output,  width = 36,            .h36_data
		.vdma_clk          (hdmi_pll_outclk0_clk),                          //   input,   width = 1,  vdma_clock.clk
		.s_axi_aresetn     (~rst_controller_003_reset_out_reset),           //   input,   width = 1,  vdma_reset.reset_n
		.vdma_end_of_frame (axi_dmac_0_m_axis_tlast),                       //   input,   width = 1,     vdma_if.tlast
		.vdma_valid        (axi_dmac_0_m_axis_tvalid),                      //   input,   width = 1,            .tvalid
		.vdma_data         (axi_dmac_0_m_axis_tdata),                       //   input,  width = 64,            .tdata
		.vdma_ready        (axi_dmac_0_m_axis_tready)                       //  output,   width = 1,            .tready
	);

	ghrd_hps_system_clock_in clock_in (
		.in_clk  (sys_clk_clk),          //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	ghrd_hps_system_pio_1 dipsw (
		.clk        (agilex_5_soc_h2f_user1_clk_clk),        //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_004_reset_out_reset),   //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_dipsw_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_dipsw_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_dipsw_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_dipsw_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_dipsw_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (dipsw_export),                          //   input,   width = 2, external_connection.export
		.irq        ()                                       //  output,   width = 1,                 irq.irq
	);

	ghrd_hps_system_emif_ph2_0 emif_ph2_0 (
		.ref_clk_0       (agilex_5_soc_h2f_user0_clk_clk),               //   input,    width = 1,       ref_clk_0.clk
		.core_init_n_0   (~rst_controller_005_reset_out_reset),          //   input,    width = 1,   core_init_n_0.reset_n
		.usr_async_clk_0 (agilex_5_soc_h2f_user0_clk_clk),               //   input,    width = 1, usr_async_clk_0.clk
		.usr_rst_n_0     (emif_ph2_0_usr_rst_n_0_reset),                 //  output,    width = 1,     usr_rst_n_0.reset_n
		.s0_axi4_araddr  (mm_interconnect_0_emif_ph2_0_s0_axi4_araddr),  //   input,   width = 32,         s0_axi4.araddr
		.s0_axi4_arburst (mm_interconnect_0_emif_ph2_0_s0_axi4_arburst), //   input,    width = 2,                .arburst
		.s0_axi4_arid    (mm_interconnect_0_emif_ph2_0_s0_axi4_arid),    //   input,    width = 7,                .arid
		.s0_axi4_arlen   (mm_interconnect_0_emif_ph2_0_s0_axi4_arlen),   //   input,    width = 8,                .arlen
		.s0_axi4_arlock  (mm_interconnect_0_emif_ph2_0_s0_axi4_arlock),  //   input,    width = 1,                .arlock
		.s0_axi4_arqos   (mm_interconnect_0_emif_ph2_0_s0_axi4_arqos),   //   input,    width = 4,                .arqos
		.s0_axi4_arsize  (mm_interconnect_0_emif_ph2_0_s0_axi4_arsize),  //   input,    width = 3,                .arsize
		.s0_axi4_arvalid (mm_interconnect_0_emif_ph2_0_s0_axi4_arvalid), //   input,    width = 1,                .arvalid
		.s0_axi4_aruser  (mm_interconnect_0_emif_ph2_0_s0_axi4_aruser),  //   input,   width = 14,                .aruser
		.s0_axi4_arprot  (mm_interconnect_0_emif_ph2_0_s0_axi4_arprot),  //   input,    width = 3,                .arprot
		.s0_axi4_awaddr  (mm_interconnect_0_emif_ph2_0_s0_axi4_awaddr),  //   input,   width = 32,                .awaddr
		.s0_axi4_awburst (mm_interconnect_0_emif_ph2_0_s0_axi4_awburst), //   input,    width = 2,                .awburst
		.s0_axi4_awid    (mm_interconnect_0_emif_ph2_0_s0_axi4_awid),    //   input,    width = 7,                .awid
		.s0_axi4_awlen   (mm_interconnect_0_emif_ph2_0_s0_axi4_awlen),   //   input,    width = 8,                .awlen
		.s0_axi4_awlock  (mm_interconnect_0_emif_ph2_0_s0_axi4_awlock),  //   input,    width = 1,                .awlock
		.s0_axi4_awqos   (mm_interconnect_0_emif_ph2_0_s0_axi4_awqos),   //   input,    width = 4,                .awqos
		.s0_axi4_awsize  (mm_interconnect_0_emif_ph2_0_s0_axi4_awsize),  //   input,    width = 3,                .awsize
		.s0_axi4_awvalid (mm_interconnect_0_emif_ph2_0_s0_axi4_awvalid), //   input,    width = 1,                .awvalid
		.s0_axi4_awuser  (mm_interconnect_0_emif_ph2_0_s0_axi4_awuser),  //   input,   width = 14,                .awuser
		.s0_axi4_awprot  (mm_interconnect_0_emif_ph2_0_s0_axi4_awprot),  //   input,    width = 3,                .awprot
		.s0_axi4_bready  (mm_interconnect_0_emif_ph2_0_s0_axi4_bready),  //   input,    width = 1,                .bready
		.s0_axi4_rready  (mm_interconnect_0_emif_ph2_0_s0_axi4_rready),  //   input,    width = 1,                .rready
		.s0_axi4_wdata   (mm_interconnect_0_emif_ph2_0_s0_axi4_wdata),   //   input,  width = 256,                .wdata
		.s0_axi4_wstrb   (mm_interconnect_0_emif_ph2_0_s0_axi4_wstrb),   //   input,   width = 32,                .wstrb
		.s0_axi4_wlast   (mm_interconnect_0_emif_ph2_0_s0_axi4_wlast),   //   input,    width = 1,                .wlast
		.s0_axi4_wvalid  (mm_interconnect_0_emif_ph2_0_s0_axi4_wvalid),  //   input,    width = 1,                .wvalid
		.s0_axi4_wuser   (mm_interconnect_0_emif_ph2_0_s0_axi4_wuser),   //   input,   width = 64,                .wuser
		.s0_axi4_ruser   (mm_interconnect_0_emif_ph2_0_s0_axi4_ruser),   //  output,   width = 64,                .ruser
		.s0_axi4_arready (mm_interconnect_0_emif_ph2_0_s0_axi4_arready), //  output,    width = 1,                .arready
		.s0_axi4_awready (mm_interconnect_0_emif_ph2_0_s0_axi4_awready), //  output,    width = 1,                .awready
		.s0_axi4_bid     (mm_interconnect_0_emif_ph2_0_s0_axi4_bid),     //  output,    width = 7,                .bid
		.s0_axi4_bresp   (mm_interconnect_0_emif_ph2_0_s0_axi4_bresp),   //  output,    width = 2,                .bresp
		.s0_axi4_bvalid  (mm_interconnect_0_emif_ph2_0_s0_axi4_bvalid),  //  output,    width = 1,                .bvalid
		.s0_axi4_rdata   (mm_interconnect_0_emif_ph2_0_s0_axi4_rdata),   //  output,  width = 256,                .rdata
		.s0_axi4_rid     (mm_interconnect_0_emif_ph2_0_s0_axi4_rid),     //  output,    width = 7,                .rid
		.s0_axi4_rlast   (mm_interconnect_0_emif_ph2_0_s0_axi4_rlast),   //  output,    width = 1,                .rlast
		.s0_axi4_rresp   (mm_interconnect_0_emif_ph2_0_s0_axi4_rresp),   //  output,    width = 2,                .rresp
		.s0_axi4_rvalid  (mm_interconnect_0_emif_ph2_0_s0_axi4_rvalid),  //  output,    width = 1,                .rvalid
		.s0_axi4_wready  (mm_interconnect_0_emif_ph2_0_s0_axi4_wready),  //  output,    width = 1,                .wready
		.mem_ck_t_0      (soc_lpddr4_mem_ck_t),                          //  output,    width = 1,           mem_0.mem_ck_t
		.mem_ck_c_0      (soc_lpddr4_mem_ck_c),                          //  output,    width = 1,                .mem_ck_c
		.mem_cke_0       (soc_lpddr4_mem_cke),                           //  output,    width = 1,                .mem_cke
		.mem_reset_n_0   (soc_lpddr4_mem_reset_n),                       //  output,    width = 1,                .mem_reset_n
		.mem_cs_0        (soc_lpddr4_mem_cs),                            //  output,    width = 1,                .mem_cs
		.mem_ca_0        (soc_lpddr4_mem_ca),                            //  output,    width = 6,                .mem_ca
		.mem_dq_0        (soc_lpddr4_mem_dq),                            //   inout,   width = 32,                .mem_dq
		.mem_dqs_t_0     (soc_lpddr4_mem_dqs_t),                         //   inout,    width = 4,                .mem_dqs_t
		.mem_dqs_c_0     (soc_lpddr4_mem_dqs_c),                         //   inout,    width = 4,                .mem_dqs_c
		.mem_dmi_0       (soc_lpddr4_mem_dmi),                           //   inout,    width = 4,                .mem_dmi
		.oct_rzqin_0     (soc_lpddr4_oct_oct_rzqin),                     //   input,    width = 1,           oct_0.oct_rzqin
		.s0_axil_clk     (agilex_5_soc_h2f_user1_clk_clk),               //   input,    width = 1,     s0_axil_clk.clk
		.s0_axil_rst_n   (~rst_controller_006_reset_out_reset),          //   input,    width = 1,   s0_axil_rst_n.reset_n
		.s0_axil_awaddr  (mm_interconnect_1_emif_ph2_0_s0_axil_awaddr),  //   input,   width = 27,         s0_axil.awaddr
		.s0_axil_awvalid (mm_interconnect_1_emif_ph2_0_s0_axil_awvalid), //   input,    width = 1,                .awvalid
		.s0_axil_awready (mm_interconnect_1_emif_ph2_0_s0_axil_awready), //  output,    width = 1,                .awready
		.s0_axil_wdata   (mm_interconnect_1_emif_ph2_0_s0_axil_wdata),   //   input,   width = 32,                .wdata
		.s0_axil_wstrb   (mm_interconnect_1_emif_ph2_0_s0_axil_wstrb),   //   input,    width = 4,                .wstrb
		.s0_axil_wvalid  (mm_interconnect_1_emif_ph2_0_s0_axil_wvalid),  //   input,    width = 1,                .wvalid
		.s0_axil_wready  (mm_interconnect_1_emif_ph2_0_s0_axil_wready),  //  output,    width = 1,                .wready
		.s0_axil_bresp   (mm_interconnect_1_emif_ph2_0_s0_axil_bresp),   //  output,    width = 2,                .bresp
		.s0_axil_bvalid  (mm_interconnect_1_emif_ph2_0_s0_axil_bvalid),  //  output,    width = 1,                .bvalid
		.s0_axil_bready  (mm_interconnect_1_emif_ph2_0_s0_axil_bready),  //   input,    width = 1,                .bready
		.s0_axil_araddr  (mm_interconnect_1_emif_ph2_0_s0_axil_araddr),  //   input,   width = 27,                .araddr
		.s0_axil_arvalid (mm_interconnect_1_emif_ph2_0_s0_axil_arvalid), //   input,    width = 1,                .arvalid
		.s0_axil_arready (mm_interconnect_1_emif_ph2_0_s0_axil_arready), //  output,    width = 1,                .arready
		.s0_axil_rdata   (mm_interconnect_1_emif_ph2_0_s0_axil_rdata),   //  output,   width = 32,                .rdata
		.s0_axil_rresp   (mm_interconnect_1_emif_ph2_0_s0_axil_rresp),   //  output,    width = 2,                .rresp
		.s0_axil_rvalid  (mm_interconnect_1_emif_ph2_0_s0_axil_rvalid),  //  output,    width = 1,                .rvalid
		.s0_axil_rready  (mm_interconnect_1_emif_ph2_0_s0_axil_rready),  //   input,    width = 1,                .rready
		.s0_axil_awprot  (mm_interconnect_1_emif_ph2_0_s0_axil_awprot),  //   input,    width = 3,                .awprot
		.s0_axil_arprot  (mm_interconnect_1_emif_ph2_0_s0_axil_arprot)   //   input,    width = 3,                .arprot
	);

	ghrd_hps_system_iopll_0 hdmi_pll (
		.refclk   (hdmi_pll_refclk_clk),           //   input,  width = 1,  refclk.clk
		.rst      (~agilex_5_soc_h2f_reset_reset), //   input,  width = 1,   reset.reset
		.outclk_0 (hdmi_pll_outclk0_clk)           //  output,  width = 1, outclk0.clk
	);

	ghrd_hps_system_master_0 hps_jtag_master (
		.clk_clk              (agilex_5_soc_h2f_user1_clk_clk),       //   input,   width = 1,          clk.clk
		.clk_reset_reset      (~agilex_5_soc_h2f_reset_reset),        //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (hps_jtag_master_master_reset_reset),   //  output,   width = 1, master_reset.reset
		.master_address       (hps_jtag_master_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (hps_jtag_master_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (hps_jtag_master_master_read),          //  output,   width = 1,             .read
		.master_write         (hps_jtag_master_master_write),         //  output,   width = 1,             .write
		.master_writedata     (hps_jtag_master_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (hps_jtag_master_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (hps_jtag_master_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (hps_jtag_master_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	ghrd_hps_system_master_1 jtag_master (
		.clk_clk              (agilex_5_soc_h2f_user1_clk_clk),     //   input,   width = 1,          clk.clk
		.clk_reset_reset      (rst_controller_007_reset_out_reset), //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (jtag_master_master_reset_reset),     //  output,   width = 1, master_reset.reset
		.master_address       (jtag_master_master_address),         //  output,  width = 32,       master.address
		.master_readdata      (jtag_master_master_readdata),        //   input,  width = 32,             .readdata
		.master_read          (jtag_master_master_read),            //  output,   width = 1,             .read
		.master_write         (jtag_master_master_write),           //  output,   width = 1,             .write
		.master_writedata     (jtag_master_master_writedata),       //  output,  width = 32,             .writedata
		.master_waitrequest   (jtag_master_master_waitrequest),     //   input,   width = 1,             .waitrequest
		.master_readdatavalid (jtag_master_master_readdatavalid),   //   input,   width = 1,             .readdatavalid
		.master_byteenable    (jtag_master_master_byteenable)       //  output,   width = 4,             .byteenable
	);

	ghrd_hps_system_jtag_uart_0 jtag_uart (
		.clk            (agilex_5_soc_h2f_user1_clk_clk),                            //   input,   width = 1,               clk.clk
		.rst_n          (~rst_controller_004_reset_out_reset),                       //   input,   width = 1,             reset.reset_n
		.av_chipselect  (mm_interconnect_1_jtag_uart_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_1_jtag_uart_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_1_jtag_uart_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_1_jtag_uart_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_1_jtag_uart_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_1_jtag_uart_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_1_jtag_uart_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.av_irq         ()                                                           //  output,   width = 1,               irq.irq
	);

	ghrd_hps_system_intel_onchip_memory_0 onchip_sram (
		.clk        (agilex_5_soc_h2f_user0_clk_clk),               //   input,   width = 1,   clk1.clk
		.s1_arid    (mm_interconnect_1_onchip_sram_axi_s1_arid),    //   input,   width = 7, axi_s1.arid
		.s1_araddr  (mm_interconnect_1_onchip_sram_axi_s1_araddr),  //   input,  width = 13,       .araddr
		.s1_arlen   (mm_interconnect_1_onchip_sram_axi_s1_arlen),   //   input,   width = 8,       .arlen
		.s1_arsize  (mm_interconnect_1_onchip_sram_axi_s1_arsize),  //   input,   width = 3,       .arsize
		.s1_arburst (mm_interconnect_1_onchip_sram_axi_s1_arburst), //   input,   width = 2,       .arburst
		.s1_arready (mm_interconnect_1_onchip_sram_axi_s1_arready), //  output,   width = 1,       .arready
		.s1_arvalid (mm_interconnect_1_onchip_sram_axi_s1_arvalid), //   input,   width = 1,       .arvalid
		.s1_awid    (mm_interconnect_1_onchip_sram_axi_s1_awid),    //   input,   width = 7,       .awid
		.s1_awaddr  (mm_interconnect_1_onchip_sram_axi_s1_awaddr),  //   input,  width = 13,       .awaddr
		.s1_awlen   (mm_interconnect_1_onchip_sram_axi_s1_awlen),   //   input,   width = 8,       .awlen
		.s1_awsize  (mm_interconnect_1_onchip_sram_axi_s1_awsize),  //   input,   width = 3,       .awsize
		.s1_awburst (mm_interconnect_1_onchip_sram_axi_s1_awburst), //   input,   width = 2,       .awburst
		.s1_awready (mm_interconnect_1_onchip_sram_axi_s1_awready), //  output,   width = 1,       .awready
		.s1_awvalid (mm_interconnect_1_onchip_sram_axi_s1_awvalid), //   input,   width = 1,       .awvalid
		.s1_rid     (mm_interconnect_1_onchip_sram_axi_s1_rid),     //  output,   width = 7,       .rid
		.s1_rdata   (mm_interconnect_1_onchip_sram_axi_s1_rdata),   //  output,  width = 64,       .rdata
		.s1_rlast   (mm_interconnect_1_onchip_sram_axi_s1_rlast),   //  output,   width = 1,       .rlast
		.s1_rready  (mm_interconnect_1_onchip_sram_axi_s1_rready),  //   input,   width = 1,       .rready
		.s1_rvalid  (mm_interconnect_1_onchip_sram_axi_s1_rvalid),  //  output,   width = 1,       .rvalid
		.s1_rresp   (mm_interconnect_1_onchip_sram_axi_s1_rresp),   //  output,   width = 2,       .rresp
		.s1_wdata   (mm_interconnect_1_onchip_sram_axi_s1_wdata),   //   input,  width = 64,       .wdata
		.s1_wstrb   (mm_interconnect_1_onchip_sram_axi_s1_wstrb),   //   input,   width = 8,       .wstrb
		.s1_wlast   (mm_interconnect_1_onchip_sram_axi_s1_wlast),   //   input,   width = 1,       .wlast
		.s1_wready  (mm_interconnect_1_onchip_sram_axi_s1_wready),  //  output,   width = 1,       .wready
		.s1_wvalid  (mm_interconnect_1_onchip_sram_axi_s1_wvalid),  //   input,   width = 1,       .wvalid
		.s1_bid     (mm_interconnect_1_onchip_sram_axi_s1_bid),     //  output,   width = 7,       .bid
		.s1_bresp   (mm_interconnect_1_onchip_sram_axi_s1_bresp),   //  output,   width = 2,       .bresp
		.s1_bready  (mm_interconnect_1_onchip_sram_axi_s1_bready),  //   input,   width = 1,       .bready
		.s1_bvalid  (mm_interconnect_1_onchip_sram_axi_s1_bvalid),  //  output,   width = 1,       .bvalid
		.reset      (rst_controller_008_reset_out_reset)            //   input,   width = 1, reset1.reset
	);

	ghrd_hps_system_pio_0 pb (
		.clk        (agilex_5_soc_h2f_user1_clk_clk),      //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_004_reset_out_reset), //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_pb_s1_address),     //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_pb_s1_write),      //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_pb_s1_writedata),   //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_pb_s1_chipselect),  //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_pb_s1_readdata),    //  output,  width = 32,                    .readdata
		.in_port    (pb_export),                           //   input,   width = 2, external_connection.export
		.irq        ()                                     //  output,   width = 1,                 irq.irq
	);

	ghrd_hps_system_reset_in reset_in (
		.clk       (clock_in_out_clk_clk), //   input,  width = 1,       clk.clk
		.in_reset  (sys_reset_reset),      //   input,  width = 1,  in_reset.reset
		.out_reset ()                      //  output,  width = 1, out_reset.reset
	);

	ghrd_hps_system_pio_2 rgb_led0 (
		.clk        (agilex_5_soc_h2f_user1_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_rgb_led0_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_rgb_led0_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_rgb_led0_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_rgb_led0_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_rgb_led0_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led0_export)                           //  output,   width = 3, external_connection.export
	);

	rgb_led0_0 rgb_led1 (
		.clk        (agilex_5_soc_h2f_user1_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_rgb_led1_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_rgb_led1_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_rgb_led1_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_rgb_led1_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_rgb_led1_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led1_export)                           //  output,   width = 3, external_connection.export
	);

	rgb_led1_0 rgb_led2 (
		.clk        (agilex_5_soc_h2f_user1_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_rgb_led2_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_rgb_led2_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_rgb_led2_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_rgb_led2_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_rgb_led2_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led2_export)                           //  output,   width = 3, external_connection.export
	);

	rgb_led2_0 rgb_led3 (
		.clk        (agilex_5_soc_h2f_user1_clk_clk),           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_rgb_led3_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_rgb_led3_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_rgb_led3_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_rgb_led3_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_rgb_led3_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led3_export)                           //  output,   width = 3, external_connection.export
	);

	ghrd_hps_system_sysid_qsys_0 sys_id (
		.clock    (agilex_5_soc_h2f_user1_clk_clk),                  //   input,   width = 1,           clk.clk
		.reset_n  (~rst_controller_004_reset_out_reset),             //   input,   width = 1,         reset.reset_n
		.readdata (mm_interconnect_1_sys_id_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_1_sys_id_control_slave_address)   //   input,   width = 1,              .address
	);

	ghrd_hps_system_altera_mm_interconnect_1920_nn3bsiy mm_interconnect_0 (
		.agilex_5_soc_emif0_ch0_axi_awid                                             (agilex_5_soc_emif0_ch0_axi_awid),              //   input,    width = 7,                                            agilex_5_soc_emif0_ch0_axi.awid
		.agilex_5_soc_emif0_ch0_axi_awaddr                                           (agilex_5_soc_emif0_ch0_axi_awaddr),            //   input,   width = 44,                                                                      .awaddr
		.agilex_5_soc_emif0_ch0_axi_awlen                                            (agilex_5_soc_emif0_ch0_axi_awlen),             //   input,    width = 8,                                                                      .awlen
		.agilex_5_soc_emif0_ch0_axi_awsize                                           (agilex_5_soc_emif0_ch0_axi_awsize),            //   input,    width = 3,                                                                      .awsize
		.agilex_5_soc_emif0_ch0_axi_awburst                                          (agilex_5_soc_emif0_ch0_axi_awburst),           //   input,    width = 2,                                                                      .awburst
		.agilex_5_soc_emif0_ch0_axi_awlock                                           (agilex_5_soc_emif0_ch0_axi_awlock),            //   input,    width = 1,                                                                      .awlock
		.agilex_5_soc_emif0_ch0_axi_awprot                                           (agilex_5_soc_emif0_ch0_axi_awprot),            //   input,    width = 3,                                                                      .awprot
		.agilex_5_soc_emif0_ch0_axi_awuser                                           (agilex_5_soc_emif0_ch0_axi_awuser),            //   input,   width = 14,                                                                      .awuser
		.agilex_5_soc_emif0_ch0_axi_awqos                                            (agilex_5_soc_emif0_ch0_axi_awqos),             //   input,    width = 4,                                                                      .awqos
		.agilex_5_soc_emif0_ch0_axi_awvalid                                          (agilex_5_soc_emif0_ch0_axi_awvalid),           //   input,    width = 1,                                                                      .awvalid
		.agilex_5_soc_emif0_ch0_axi_awready                                          (agilex_5_soc_emif0_ch0_axi_awready),           //  output,    width = 1,                                                                      .awready
		.agilex_5_soc_emif0_ch0_axi_wdata                                            (agilex_5_soc_emif0_ch0_axi_wdata),             //   input,  width = 256,                                                                      .wdata
		.agilex_5_soc_emif0_ch0_axi_wstrb                                            (agilex_5_soc_emif0_ch0_axi_wstrb),             //   input,   width = 32,                                                                      .wstrb
		.agilex_5_soc_emif0_ch0_axi_wlast                                            (agilex_5_soc_emif0_ch0_axi_wlast),             //   input,    width = 1,                                                                      .wlast
		.agilex_5_soc_emif0_ch0_axi_wvalid                                           (agilex_5_soc_emif0_ch0_axi_wvalid),            //   input,    width = 1,                                                                      .wvalid
		.agilex_5_soc_emif0_ch0_axi_wuser                                            (agilex_5_soc_emif0_ch0_axi_wuser),             //   input,   width = 32,                                                                      .wuser
		.agilex_5_soc_emif0_ch0_axi_wready                                           (agilex_5_soc_emif0_ch0_axi_wready),            //  output,    width = 1,                                                                      .wready
		.agilex_5_soc_emif0_ch0_axi_bid                                              (agilex_5_soc_emif0_ch0_axi_bid),               //  output,    width = 7,                                                                      .bid
		.agilex_5_soc_emif0_ch0_axi_bresp                                            (agilex_5_soc_emif0_ch0_axi_bresp),             //  output,    width = 2,                                                                      .bresp
		.agilex_5_soc_emif0_ch0_axi_bvalid                                           (agilex_5_soc_emif0_ch0_axi_bvalid),            //  output,    width = 1,                                                                      .bvalid
		.agilex_5_soc_emif0_ch0_axi_bready                                           (agilex_5_soc_emif0_ch0_axi_bready),            //   input,    width = 1,                                                                      .bready
		.agilex_5_soc_emif0_ch0_axi_arid                                             (agilex_5_soc_emif0_ch0_axi_arid),              //   input,    width = 7,                                                                      .arid
		.agilex_5_soc_emif0_ch0_axi_araddr                                           (agilex_5_soc_emif0_ch0_axi_araddr),            //   input,   width = 44,                                                                      .araddr
		.agilex_5_soc_emif0_ch0_axi_arlen                                            (agilex_5_soc_emif0_ch0_axi_arlen),             //   input,    width = 8,                                                                      .arlen
		.agilex_5_soc_emif0_ch0_axi_arsize                                           (agilex_5_soc_emif0_ch0_axi_arsize),            //   input,    width = 3,                                                                      .arsize
		.agilex_5_soc_emif0_ch0_axi_arburst                                          (agilex_5_soc_emif0_ch0_axi_arburst),           //   input,    width = 2,                                                                      .arburst
		.agilex_5_soc_emif0_ch0_axi_arlock                                           (agilex_5_soc_emif0_ch0_axi_arlock),            //   input,    width = 1,                                                                      .arlock
		.agilex_5_soc_emif0_ch0_axi_arprot                                           (agilex_5_soc_emif0_ch0_axi_arprot),            //   input,    width = 3,                                                                      .arprot
		.agilex_5_soc_emif0_ch0_axi_aruser                                           (agilex_5_soc_emif0_ch0_axi_aruser),            //   input,   width = 14,                                                                      .aruser
		.agilex_5_soc_emif0_ch0_axi_arqos                                            (agilex_5_soc_emif0_ch0_axi_arqos),             //   input,    width = 4,                                                                      .arqos
		.agilex_5_soc_emif0_ch0_axi_arvalid                                          (agilex_5_soc_emif0_ch0_axi_arvalid),           //   input,    width = 1,                                                                      .arvalid
		.agilex_5_soc_emif0_ch0_axi_arready                                          (agilex_5_soc_emif0_ch0_axi_arready),           //  output,    width = 1,                                                                      .arready
		.agilex_5_soc_emif0_ch0_axi_rid                                              (agilex_5_soc_emif0_ch0_axi_rid),               //  output,    width = 7,                                                                      .rid
		.agilex_5_soc_emif0_ch0_axi_rdata                                            (agilex_5_soc_emif0_ch0_axi_rdata),             //  output,  width = 256,                                                                      .rdata
		.agilex_5_soc_emif0_ch0_axi_rresp                                            (agilex_5_soc_emif0_ch0_axi_rresp),             //  output,    width = 2,                                                                      .rresp
		.agilex_5_soc_emif0_ch0_axi_rlast                                            (agilex_5_soc_emif0_ch0_axi_rlast),             //  output,    width = 1,                                                                      .rlast
		.agilex_5_soc_emif0_ch0_axi_rvalid                                           (agilex_5_soc_emif0_ch0_axi_rvalid),            //  output,    width = 1,                                                                      .rvalid
		.agilex_5_soc_emif0_ch0_axi_rready                                           (agilex_5_soc_emif0_ch0_axi_rready),            //   input,    width = 1,                                                                      .rready
		.agilex_5_soc_emif0_ch0_axi_ruser                                            (agilex_5_soc_emif0_ch0_axi_ruser),             //  output,   width = 32,                                                                      .ruser
		.emif_ph2_0_s0_axi4_awid                                                     (mm_interconnect_0_emif_ph2_0_s0_axi4_awid),    //  output,    width = 7,                                                    emif_ph2_0_s0_axi4.awid
		.emif_ph2_0_s0_axi4_awaddr                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_awaddr),  //  output,   width = 32,                                                                      .awaddr
		.emif_ph2_0_s0_axi4_awlen                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_awlen),   //  output,    width = 8,                                                                      .awlen
		.emif_ph2_0_s0_axi4_awsize                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_awsize),  //  output,    width = 3,                                                                      .awsize
		.emif_ph2_0_s0_axi4_awburst                                                  (mm_interconnect_0_emif_ph2_0_s0_axi4_awburst), //  output,    width = 2,                                                                      .awburst
		.emif_ph2_0_s0_axi4_awlock                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_awlock),  //  output,    width = 1,                                                                      .awlock
		.emif_ph2_0_s0_axi4_awprot                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_awprot),  //  output,    width = 3,                                                                      .awprot
		.emif_ph2_0_s0_axi4_awuser                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_awuser),  //  output,   width = 14,                                                                      .awuser
		.emif_ph2_0_s0_axi4_awqos                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_awqos),   //  output,    width = 4,                                                                      .awqos
		.emif_ph2_0_s0_axi4_awvalid                                                  (mm_interconnect_0_emif_ph2_0_s0_axi4_awvalid), //  output,    width = 1,                                                                      .awvalid
		.emif_ph2_0_s0_axi4_awready                                                  (mm_interconnect_0_emif_ph2_0_s0_axi4_awready), //   input,    width = 1,                                                                      .awready
		.emif_ph2_0_s0_axi4_wdata                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_wdata),   //  output,  width = 256,                                                                      .wdata
		.emif_ph2_0_s0_axi4_wstrb                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_wstrb),   //  output,   width = 32,                                                                      .wstrb
		.emif_ph2_0_s0_axi4_wlast                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_wlast),   //  output,    width = 1,                                                                      .wlast
		.emif_ph2_0_s0_axi4_wvalid                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_wvalid),  //  output,    width = 1,                                                                      .wvalid
		.emif_ph2_0_s0_axi4_wuser                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_wuser),   //  output,   width = 64,                                                                      .wuser
		.emif_ph2_0_s0_axi4_wready                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_wready),  //   input,    width = 1,                                                                      .wready
		.emif_ph2_0_s0_axi4_bid                                                      (mm_interconnect_0_emif_ph2_0_s0_axi4_bid),     //   input,    width = 7,                                                                      .bid
		.emif_ph2_0_s0_axi4_bresp                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_bresp),   //   input,    width = 2,                                                                      .bresp
		.emif_ph2_0_s0_axi4_bvalid                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_bvalid),  //   input,    width = 1,                                                                      .bvalid
		.emif_ph2_0_s0_axi4_bready                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_bready),  //  output,    width = 1,                                                                      .bready
		.emif_ph2_0_s0_axi4_arid                                                     (mm_interconnect_0_emif_ph2_0_s0_axi4_arid),    //  output,    width = 7,                                                                      .arid
		.emif_ph2_0_s0_axi4_araddr                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_araddr),  //  output,   width = 32,                                                                      .araddr
		.emif_ph2_0_s0_axi4_arlen                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_arlen),   //  output,    width = 8,                                                                      .arlen
		.emif_ph2_0_s0_axi4_arsize                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_arsize),  //  output,    width = 3,                                                                      .arsize
		.emif_ph2_0_s0_axi4_arburst                                                  (mm_interconnect_0_emif_ph2_0_s0_axi4_arburst), //  output,    width = 2,                                                                      .arburst
		.emif_ph2_0_s0_axi4_arlock                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_arlock),  //  output,    width = 1,                                                                      .arlock
		.emif_ph2_0_s0_axi4_arprot                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_arprot),  //  output,    width = 3,                                                                      .arprot
		.emif_ph2_0_s0_axi4_aruser                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_aruser),  //  output,   width = 14,                                                                      .aruser
		.emif_ph2_0_s0_axi4_arqos                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_arqos),   //  output,    width = 4,                                                                      .arqos
		.emif_ph2_0_s0_axi4_arvalid                                                  (mm_interconnect_0_emif_ph2_0_s0_axi4_arvalid), //  output,    width = 1,                                                                      .arvalid
		.emif_ph2_0_s0_axi4_arready                                                  (mm_interconnect_0_emif_ph2_0_s0_axi4_arready), //   input,    width = 1,                                                                      .arready
		.emif_ph2_0_s0_axi4_rid                                                      (mm_interconnect_0_emif_ph2_0_s0_axi4_rid),     //   input,    width = 7,                                                                      .rid
		.emif_ph2_0_s0_axi4_rdata                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_rdata),   //   input,  width = 256,                                                                      .rdata
		.emif_ph2_0_s0_axi4_rresp                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_rresp),   //   input,    width = 2,                                                                      .rresp
		.emif_ph2_0_s0_axi4_rlast                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_rlast),   //   input,    width = 1,                                                                      .rlast
		.emif_ph2_0_s0_axi4_rvalid                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_rvalid),  //   input,    width = 1,                                                                      .rvalid
		.emif_ph2_0_s0_axi4_rready                                                   (mm_interconnect_0_emif_ph2_0_s0_axi4_rready),  //  output,    width = 1,                                                                      .rready
		.emif_ph2_0_s0_axi4_ruser                                                    (mm_interconnect_0_emif_ph2_0_s0_axi4_ruser),   //   input,   width = 64,                                                                      .ruser
		.agilex_5_soc_emif0_ch0_axi_translator_clk_reset_reset_bridge_in_reset_reset (rst_controller_009_reset_out_reset),           //   input,    width = 1, agilex_5_soc_emif0_ch0_axi_translator_clk_reset_reset_bridge_in_reset.reset
		.emif_ph2_0_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset         (rst_controller_010_reset_out_reset),           //   input,    width = 1,         emif_ph2_0_s0_axi4_translator_clk_reset_reset_bridge_in_reset.reset
		.agilex_5_soc_h2f_user0_clk_clk                                              (agilex_5_soc_h2f_user0_clk_clk)                //   input,    width = 1,                                            agilex_5_soc_h2f_user0_clk.clk
	);

	ghrd_hps_system_altera_mm_interconnect_1920_x2bp47a mm_interconnect_1 (
		.agilex_5_soc_hps2fpga_awid                                               (agilex_5_soc_hps2fpga_awid),                                //   input,   width = 4,                                              agilex_5_soc_hps2fpga.awid
		.agilex_5_soc_hps2fpga_awaddr                                             (agilex_5_soc_hps2fpga_awaddr),                              //   input,  width = 32,                                                                   .awaddr
		.agilex_5_soc_hps2fpga_awlen                                              (agilex_5_soc_hps2fpga_awlen),                               //   input,   width = 8,                                                                   .awlen
		.agilex_5_soc_hps2fpga_awsize                                             (agilex_5_soc_hps2fpga_awsize),                              //   input,   width = 3,                                                                   .awsize
		.agilex_5_soc_hps2fpga_awburst                                            (agilex_5_soc_hps2fpga_awburst),                             //   input,   width = 2,                                                                   .awburst
		.agilex_5_soc_hps2fpga_awlock                                             (agilex_5_soc_hps2fpga_awlock),                              //   input,   width = 1,                                                                   .awlock
		.agilex_5_soc_hps2fpga_awcache                                            (agilex_5_soc_hps2fpga_awcache),                             //   input,   width = 4,                                                                   .awcache
		.agilex_5_soc_hps2fpga_awprot                                             (agilex_5_soc_hps2fpga_awprot),                              //   input,   width = 3,                                                                   .awprot
		.agilex_5_soc_hps2fpga_awvalid                                            (agilex_5_soc_hps2fpga_awvalid),                             //   input,   width = 1,                                                                   .awvalid
		.agilex_5_soc_hps2fpga_awready                                            (agilex_5_soc_hps2fpga_awready),                             //  output,   width = 1,                                                                   .awready
		.agilex_5_soc_hps2fpga_wdata                                              (agilex_5_soc_hps2fpga_wdata),                               //   input,  width = 32,                                                                   .wdata
		.agilex_5_soc_hps2fpga_wstrb                                              (agilex_5_soc_hps2fpga_wstrb),                               //   input,   width = 4,                                                                   .wstrb
		.agilex_5_soc_hps2fpga_wlast                                              (agilex_5_soc_hps2fpga_wlast),                               //   input,   width = 1,                                                                   .wlast
		.agilex_5_soc_hps2fpga_wvalid                                             (agilex_5_soc_hps2fpga_wvalid),                              //   input,   width = 1,                                                                   .wvalid
		.agilex_5_soc_hps2fpga_wready                                             (agilex_5_soc_hps2fpga_wready),                              //  output,   width = 1,                                                                   .wready
		.agilex_5_soc_hps2fpga_bid                                                (agilex_5_soc_hps2fpga_bid),                                 //  output,   width = 4,                                                                   .bid
		.agilex_5_soc_hps2fpga_bresp                                              (agilex_5_soc_hps2fpga_bresp),                               //  output,   width = 2,                                                                   .bresp
		.agilex_5_soc_hps2fpga_bvalid                                             (agilex_5_soc_hps2fpga_bvalid),                              //  output,   width = 1,                                                                   .bvalid
		.agilex_5_soc_hps2fpga_bready                                             (agilex_5_soc_hps2fpga_bready),                              //   input,   width = 1,                                                                   .bready
		.agilex_5_soc_hps2fpga_arid                                               (agilex_5_soc_hps2fpga_arid),                                //   input,   width = 4,                                                                   .arid
		.agilex_5_soc_hps2fpga_araddr                                             (agilex_5_soc_hps2fpga_araddr),                              //   input,  width = 32,                                                                   .araddr
		.agilex_5_soc_hps2fpga_arlen                                              (agilex_5_soc_hps2fpga_arlen),                               //   input,   width = 8,                                                                   .arlen
		.agilex_5_soc_hps2fpga_arsize                                             (agilex_5_soc_hps2fpga_arsize),                              //   input,   width = 3,                                                                   .arsize
		.agilex_5_soc_hps2fpga_arburst                                            (agilex_5_soc_hps2fpga_arburst),                             //   input,   width = 2,                                                                   .arburst
		.agilex_5_soc_hps2fpga_arlock                                             (agilex_5_soc_hps2fpga_arlock),                              //   input,   width = 1,                                                                   .arlock
		.agilex_5_soc_hps2fpga_arcache                                            (agilex_5_soc_hps2fpga_arcache),                             //   input,   width = 4,                                                                   .arcache
		.agilex_5_soc_hps2fpga_arprot                                             (agilex_5_soc_hps2fpga_arprot),                              //   input,   width = 3,                                                                   .arprot
		.agilex_5_soc_hps2fpga_arvalid                                            (agilex_5_soc_hps2fpga_arvalid),                             //   input,   width = 1,                                                                   .arvalid
		.agilex_5_soc_hps2fpga_arready                                            (agilex_5_soc_hps2fpga_arready),                             //  output,   width = 1,                                                                   .arready
		.agilex_5_soc_hps2fpga_rid                                                (agilex_5_soc_hps2fpga_rid),                                 //  output,   width = 4,                                                                   .rid
		.agilex_5_soc_hps2fpga_rdata                                              (agilex_5_soc_hps2fpga_rdata),                               //  output,  width = 32,                                                                   .rdata
		.agilex_5_soc_hps2fpga_rresp                                              (agilex_5_soc_hps2fpga_rresp),                               //  output,   width = 2,                                                                   .rresp
		.agilex_5_soc_hps2fpga_rlast                                              (agilex_5_soc_hps2fpga_rlast),                               //  output,   width = 1,                                                                   .rlast
		.agilex_5_soc_hps2fpga_rvalid                                             (agilex_5_soc_hps2fpga_rvalid),                              //  output,   width = 1,                                                                   .rvalid
		.agilex_5_soc_hps2fpga_rready                                             (agilex_5_soc_hps2fpga_rready),                              //   input,   width = 1,                                                                   .rready
		.agilex_5_soc_lwhps2fpga_awid                                             (agilex_5_soc_lwhps2fpga_awid),                              //   input,   width = 4,                                            agilex_5_soc_lwhps2fpga.awid
		.agilex_5_soc_lwhps2fpga_awaddr                                           (agilex_5_soc_lwhps2fpga_awaddr),                            //   input,  width = 29,                                                                   .awaddr
		.agilex_5_soc_lwhps2fpga_awlen                                            (agilex_5_soc_lwhps2fpga_awlen),                             //   input,   width = 8,                                                                   .awlen
		.agilex_5_soc_lwhps2fpga_awsize                                           (agilex_5_soc_lwhps2fpga_awsize),                            //   input,   width = 3,                                                                   .awsize
		.agilex_5_soc_lwhps2fpga_awburst                                          (agilex_5_soc_lwhps2fpga_awburst),                           //   input,   width = 2,                                                                   .awburst
		.agilex_5_soc_lwhps2fpga_awlock                                           (agilex_5_soc_lwhps2fpga_awlock),                            //   input,   width = 1,                                                                   .awlock
		.agilex_5_soc_lwhps2fpga_awcache                                          (agilex_5_soc_lwhps2fpga_awcache),                           //   input,   width = 4,                                                                   .awcache
		.agilex_5_soc_lwhps2fpga_awprot                                           (agilex_5_soc_lwhps2fpga_awprot),                            //   input,   width = 3,                                                                   .awprot
		.agilex_5_soc_lwhps2fpga_awvalid                                          (agilex_5_soc_lwhps2fpga_awvalid),                           //   input,   width = 1,                                                                   .awvalid
		.agilex_5_soc_lwhps2fpga_awready                                          (agilex_5_soc_lwhps2fpga_awready),                           //  output,   width = 1,                                                                   .awready
		.agilex_5_soc_lwhps2fpga_wdata                                            (agilex_5_soc_lwhps2fpga_wdata),                             //   input,  width = 32,                                                                   .wdata
		.agilex_5_soc_lwhps2fpga_wstrb                                            (agilex_5_soc_lwhps2fpga_wstrb),                             //   input,   width = 4,                                                                   .wstrb
		.agilex_5_soc_lwhps2fpga_wlast                                            (agilex_5_soc_lwhps2fpga_wlast),                             //   input,   width = 1,                                                                   .wlast
		.agilex_5_soc_lwhps2fpga_wvalid                                           (agilex_5_soc_lwhps2fpga_wvalid),                            //   input,   width = 1,                                                                   .wvalid
		.agilex_5_soc_lwhps2fpga_wready                                           (agilex_5_soc_lwhps2fpga_wready),                            //  output,   width = 1,                                                                   .wready
		.agilex_5_soc_lwhps2fpga_bid                                              (agilex_5_soc_lwhps2fpga_bid),                               //  output,   width = 4,                                                                   .bid
		.agilex_5_soc_lwhps2fpga_bresp                                            (agilex_5_soc_lwhps2fpga_bresp),                             //  output,   width = 2,                                                                   .bresp
		.agilex_5_soc_lwhps2fpga_bvalid                                           (agilex_5_soc_lwhps2fpga_bvalid),                            //  output,   width = 1,                                                                   .bvalid
		.agilex_5_soc_lwhps2fpga_bready                                           (agilex_5_soc_lwhps2fpga_bready),                            //   input,   width = 1,                                                                   .bready
		.agilex_5_soc_lwhps2fpga_arid                                             (agilex_5_soc_lwhps2fpga_arid),                              //   input,   width = 4,                                                                   .arid
		.agilex_5_soc_lwhps2fpga_araddr                                           (agilex_5_soc_lwhps2fpga_araddr),                            //   input,  width = 29,                                                                   .araddr
		.agilex_5_soc_lwhps2fpga_arlen                                            (agilex_5_soc_lwhps2fpga_arlen),                             //   input,   width = 8,                                                                   .arlen
		.agilex_5_soc_lwhps2fpga_arsize                                           (agilex_5_soc_lwhps2fpga_arsize),                            //   input,   width = 3,                                                                   .arsize
		.agilex_5_soc_lwhps2fpga_arburst                                          (agilex_5_soc_lwhps2fpga_arburst),                           //   input,   width = 2,                                                                   .arburst
		.agilex_5_soc_lwhps2fpga_arlock                                           (agilex_5_soc_lwhps2fpga_arlock),                            //   input,   width = 1,                                                                   .arlock
		.agilex_5_soc_lwhps2fpga_arcache                                          (agilex_5_soc_lwhps2fpga_arcache),                           //   input,   width = 4,                                                                   .arcache
		.agilex_5_soc_lwhps2fpga_arprot                                           (agilex_5_soc_lwhps2fpga_arprot),                            //   input,   width = 3,                                                                   .arprot
		.agilex_5_soc_lwhps2fpga_arvalid                                          (agilex_5_soc_lwhps2fpga_arvalid),                           //   input,   width = 1,                                                                   .arvalid
		.agilex_5_soc_lwhps2fpga_arready                                          (agilex_5_soc_lwhps2fpga_arready),                           //  output,   width = 1,                                                                   .arready
		.agilex_5_soc_lwhps2fpga_rid                                              (agilex_5_soc_lwhps2fpga_rid),                               //  output,   width = 4,                                                                   .rid
		.agilex_5_soc_lwhps2fpga_rdata                                            (agilex_5_soc_lwhps2fpga_rdata),                             //  output,  width = 32,                                                                   .rdata
		.agilex_5_soc_lwhps2fpga_rresp                                            (agilex_5_soc_lwhps2fpga_rresp),                             //  output,   width = 2,                                                                   .rresp
		.agilex_5_soc_lwhps2fpga_rlast                                            (agilex_5_soc_lwhps2fpga_rlast),                             //  output,   width = 1,                                                                   .rlast
		.agilex_5_soc_lwhps2fpga_rvalid                                           (agilex_5_soc_lwhps2fpga_rvalid),                            //  output,   width = 1,                                                                   .rvalid
		.agilex_5_soc_lwhps2fpga_rready                                           (agilex_5_soc_lwhps2fpga_rready),                            //   input,   width = 1,                                                                   .rready
		.hps_jtag_master_master_address                                           (hps_jtag_master_master_address),                            //   input,  width = 32,                                             hps_jtag_master_master.address
		.hps_jtag_master_master_waitrequest                                       (hps_jtag_master_master_waitrequest),                        //  output,   width = 1,                                                                   .waitrequest
		.hps_jtag_master_master_byteenable                                        (hps_jtag_master_master_byteenable),                         //   input,   width = 4,                                                                   .byteenable
		.hps_jtag_master_master_read                                              (hps_jtag_master_master_read),                               //   input,   width = 1,                                                                   .read
		.hps_jtag_master_master_readdata                                          (hps_jtag_master_master_readdata),                           //  output,  width = 32,                                                                   .readdata
		.hps_jtag_master_master_readdatavalid                                     (hps_jtag_master_master_readdatavalid),                      //  output,   width = 1,                                                                   .readdatavalid
		.hps_jtag_master_master_write                                             (hps_jtag_master_master_write),                              //   input,   width = 1,                                                                   .write
		.hps_jtag_master_master_writedata                                         (hps_jtag_master_master_writedata),                          //   input,  width = 32,                                                                   .writedata
		.jtag_master_master_address                                               (jtag_master_master_address),                                //   input,  width = 32,                                                 jtag_master_master.address
		.jtag_master_master_waitrequest                                           (jtag_master_master_waitrequest),                            //  output,   width = 1,                                                                   .waitrequest
		.jtag_master_master_byteenable                                            (jtag_master_master_byteenable),                             //   input,   width = 4,                                                                   .byteenable
		.jtag_master_master_read                                                  (jtag_master_master_read),                                   //   input,   width = 1,                                                                   .read
		.jtag_master_master_readdata                                              (jtag_master_master_readdata),                               //  output,  width = 32,                                                                   .readdata
		.jtag_master_master_readdatavalid                                         (jtag_master_master_readdatavalid),                          //  output,   width = 1,                                                                   .readdatavalid
		.jtag_master_master_write                                                 (jtag_master_master_write),                                  //   input,   width = 1,                                                                   .write
		.jtag_master_master_writedata                                             (jtag_master_master_writedata),                              //   input,  width = 32,                                                                   .writedata
		.onchip_sram_axi_s1_awid                                                  (mm_interconnect_1_onchip_sram_axi_s1_awid),                 //  output,   width = 7,                                                 onchip_sram_axi_s1.awid
		.onchip_sram_axi_s1_awaddr                                                (mm_interconnect_1_onchip_sram_axi_s1_awaddr),               //  output,  width = 13,                                                                   .awaddr
		.onchip_sram_axi_s1_awlen                                                 (mm_interconnect_1_onchip_sram_axi_s1_awlen),                //  output,   width = 8,                                                                   .awlen
		.onchip_sram_axi_s1_awsize                                                (mm_interconnect_1_onchip_sram_axi_s1_awsize),               //  output,   width = 3,                                                                   .awsize
		.onchip_sram_axi_s1_awburst                                               (mm_interconnect_1_onchip_sram_axi_s1_awburst),              //  output,   width = 2,                                                                   .awburst
		.onchip_sram_axi_s1_awvalid                                               (mm_interconnect_1_onchip_sram_axi_s1_awvalid),              //  output,   width = 1,                                                                   .awvalid
		.onchip_sram_axi_s1_awready                                               (mm_interconnect_1_onchip_sram_axi_s1_awready),              //   input,   width = 1,                                                                   .awready
		.onchip_sram_axi_s1_wdata                                                 (mm_interconnect_1_onchip_sram_axi_s1_wdata),                //  output,  width = 64,                                                                   .wdata
		.onchip_sram_axi_s1_wstrb                                                 (mm_interconnect_1_onchip_sram_axi_s1_wstrb),                //  output,   width = 8,                                                                   .wstrb
		.onchip_sram_axi_s1_wlast                                                 (mm_interconnect_1_onchip_sram_axi_s1_wlast),                //  output,   width = 1,                                                                   .wlast
		.onchip_sram_axi_s1_wvalid                                                (mm_interconnect_1_onchip_sram_axi_s1_wvalid),               //  output,   width = 1,                                                                   .wvalid
		.onchip_sram_axi_s1_wready                                                (mm_interconnect_1_onchip_sram_axi_s1_wready),               //   input,   width = 1,                                                                   .wready
		.onchip_sram_axi_s1_bid                                                   (mm_interconnect_1_onchip_sram_axi_s1_bid),                  //   input,   width = 7,                                                                   .bid
		.onchip_sram_axi_s1_bresp                                                 (mm_interconnect_1_onchip_sram_axi_s1_bresp),                //   input,   width = 2,                                                                   .bresp
		.onchip_sram_axi_s1_bvalid                                                (mm_interconnect_1_onchip_sram_axi_s1_bvalid),               //   input,   width = 1,                                                                   .bvalid
		.onchip_sram_axi_s1_bready                                                (mm_interconnect_1_onchip_sram_axi_s1_bready),               //  output,   width = 1,                                                                   .bready
		.onchip_sram_axi_s1_arid                                                  (mm_interconnect_1_onchip_sram_axi_s1_arid),                 //  output,   width = 7,                                                                   .arid
		.onchip_sram_axi_s1_araddr                                                (mm_interconnect_1_onchip_sram_axi_s1_araddr),               //  output,  width = 13,                                                                   .araddr
		.onchip_sram_axi_s1_arlen                                                 (mm_interconnect_1_onchip_sram_axi_s1_arlen),                //  output,   width = 8,                                                                   .arlen
		.onchip_sram_axi_s1_arsize                                                (mm_interconnect_1_onchip_sram_axi_s1_arsize),               //  output,   width = 3,                                                                   .arsize
		.onchip_sram_axi_s1_arburst                                               (mm_interconnect_1_onchip_sram_axi_s1_arburst),              //  output,   width = 2,                                                                   .arburst
		.onchip_sram_axi_s1_arvalid                                               (mm_interconnect_1_onchip_sram_axi_s1_arvalid),              //  output,   width = 1,                                                                   .arvalid
		.onchip_sram_axi_s1_arready                                               (mm_interconnect_1_onchip_sram_axi_s1_arready),              //   input,   width = 1,                                                                   .arready
		.onchip_sram_axi_s1_rid                                                   (mm_interconnect_1_onchip_sram_axi_s1_rid),                  //   input,   width = 7,                                                                   .rid
		.onchip_sram_axi_s1_rdata                                                 (mm_interconnect_1_onchip_sram_axi_s1_rdata),                //   input,  width = 64,                                                                   .rdata
		.onchip_sram_axi_s1_rresp                                                 (mm_interconnect_1_onchip_sram_axi_s1_rresp),                //   input,   width = 2,                                                                   .rresp
		.onchip_sram_axi_s1_rlast                                                 (mm_interconnect_1_onchip_sram_axi_s1_rlast),                //   input,   width = 1,                                                                   .rlast
		.onchip_sram_axi_s1_rvalid                                                (mm_interconnect_1_onchip_sram_axi_s1_rvalid),               //   input,   width = 1,                                                                   .rvalid
		.onchip_sram_axi_s1_rready                                                (mm_interconnect_1_onchip_sram_axi_s1_rready),               //  output,   width = 1,                                                                   .rready
		.jtag_uart_avalon_jtag_slave_address                                      (mm_interconnect_1_jtag_uart_avalon_jtag_slave_address),     //  output,   width = 1,                                        jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write                                        (mm_interconnect_1_jtag_uart_avalon_jtag_slave_write),       //  output,   width = 1,                                                                   .write
		.jtag_uart_avalon_jtag_slave_read                                         (mm_interconnect_1_jtag_uart_avalon_jtag_slave_read),        //  output,   width = 1,                                                                   .read
		.jtag_uart_avalon_jtag_slave_readdata                                     (mm_interconnect_1_jtag_uart_avalon_jtag_slave_readdata),    //   input,  width = 32,                                                                   .readdata
		.jtag_uart_avalon_jtag_slave_writedata                                    (mm_interconnect_1_jtag_uart_avalon_jtag_slave_writedata),   //  output,  width = 32,                                                                   .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest                                  (mm_interconnect_1_jtag_uart_avalon_jtag_slave_waitrequest), //   input,   width = 1,                                                                   .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect                                   (mm_interconnect_1_jtag_uart_avalon_jtag_slave_chipselect),  //  output,   width = 1,                                                                   .chipselect
		.sys_id_control_slave_address                                             (mm_interconnect_1_sys_id_control_slave_address),            //  output,   width = 1,                                               sys_id_control_slave.address
		.sys_id_control_slave_readdata                                            (mm_interconnect_1_sys_id_control_slave_readdata),           //   input,  width = 32,                                                                   .readdata
		.pb_s1_address                                                            (mm_interconnect_1_pb_s1_address),                           //  output,   width = 2,                                                              pb_s1.address
		.pb_s1_write                                                              (mm_interconnect_1_pb_s1_write),                             //  output,   width = 1,                                                                   .write
		.pb_s1_readdata                                                           (mm_interconnect_1_pb_s1_readdata),                          //   input,  width = 32,                                                                   .readdata
		.pb_s1_writedata                                                          (mm_interconnect_1_pb_s1_writedata),                         //  output,  width = 32,                                                                   .writedata
		.pb_s1_chipselect                                                         (mm_interconnect_1_pb_s1_chipselect),                        //  output,   width = 1,                                                                   .chipselect
		.dipsw_s1_address                                                         (mm_interconnect_1_dipsw_s1_address),                        //  output,   width = 2,                                                           dipsw_s1.address
		.dipsw_s1_write                                                           (mm_interconnect_1_dipsw_s1_write),                          //  output,   width = 1,                                                                   .write
		.dipsw_s1_readdata                                                        (mm_interconnect_1_dipsw_s1_readdata),                       //   input,  width = 32,                                                                   .readdata
		.dipsw_s1_writedata                                                       (mm_interconnect_1_dipsw_s1_writedata),                      //  output,  width = 32,                                                                   .writedata
		.dipsw_s1_chipselect                                                      (mm_interconnect_1_dipsw_s1_chipselect),                     //  output,   width = 1,                                                                   .chipselect
		.rgb_led0_s1_address                                                      (mm_interconnect_1_rgb_led0_s1_address),                     //  output,   width = 2,                                                        rgb_led0_s1.address
		.rgb_led0_s1_write                                                        (mm_interconnect_1_rgb_led0_s1_write),                       //  output,   width = 1,                                                                   .write
		.rgb_led0_s1_readdata                                                     (mm_interconnect_1_rgb_led0_s1_readdata),                    //   input,  width = 32,                                                                   .readdata
		.rgb_led0_s1_writedata                                                    (mm_interconnect_1_rgb_led0_s1_writedata),                   //  output,  width = 32,                                                                   .writedata
		.rgb_led0_s1_chipselect                                                   (mm_interconnect_1_rgb_led0_s1_chipselect),                  //  output,   width = 1,                                                                   .chipselect
		.rgb_led1_s1_address                                                      (mm_interconnect_1_rgb_led1_s1_address),                     //  output,   width = 2,                                                        rgb_led1_s1.address
		.rgb_led1_s1_write                                                        (mm_interconnect_1_rgb_led1_s1_write),                       //  output,   width = 1,                                                                   .write
		.rgb_led1_s1_readdata                                                     (mm_interconnect_1_rgb_led1_s1_readdata),                    //   input,  width = 32,                                                                   .readdata
		.rgb_led1_s1_writedata                                                    (mm_interconnect_1_rgb_led1_s1_writedata),                   //  output,  width = 32,                                                                   .writedata
		.rgb_led1_s1_chipselect                                                   (mm_interconnect_1_rgb_led1_s1_chipselect),                  //  output,   width = 1,                                                                   .chipselect
		.rgb_led2_s1_address                                                      (mm_interconnect_1_rgb_led2_s1_address),                     //  output,   width = 2,                                                        rgb_led2_s1.address
		.rgb_led2_s1_write                                                        (mm_interconnect_1_rgb_led2_s1_write),                       //  output,   width = 1,                                                                   .write
		.rgb_led2_s1_readdata                                                     (mm_interconnect_1_rgb_led2_s1_readdata),                    //   input,  width = 32,                                                                   .readdata
		.rgb_led2_s1_writedata                                                    (mm_interconnect_1_rgb_led2_s1_writedata),                   //  output,  width = 32,                                                                   .writedata
		.rgb_led2_s1_chipselect                                                   (mm_interconnect_1_rgb_led2_s1_chipselect),                  //  output,   width = 1,                                                                   .chipselect
		.rgb_led3_s1_address                                                      (mm_interconnect_1_rgb_led3_s1_address),                     //  output,   width = 2,                                                        rgb_led3_s1.address
		.rgb_led3_s1_write                                                        (mm_interconnect_1_rgb_led3_s1_write),                       //  output,   width = 1,                                                                   .write
		.rgb_led3_s1_readdata                                                     (mm_interconnect_1_rgb_led3_s1_readdata),                    //   input,  width = 32,                                                                   .readdata
		.rgb_led3_s1_writedata                                                    (mm_interconnect_1_rgb_led3_s1_writedata),                   //  output,  width = 32,                                                                   .writedata
		.rgb_led3_s1_chipselect                                                   (mm_interconnect_1_rgb_led3_s1_chipselect),                  //  output,   width = 1,                                                                   .chipselect
		.axi_dmac_0_m_src_axi_awid                                                (axi_dmac_0_m_src_axi_awid),                                 //   input,   width = 1,                                               axi_dmac_0_m_src_axi.awid
		.axi_dmac_0_m_src_axi_awaddr                                              (axi_dmac_0_m_src_axi_awaddr),                               //   input,  width = 32,                                                                   .awaddr
		.axi_dmac_0_m_src_axi_awlen                                               (axi_dmac_0_m_src_axi_awlen),                                //   input,   width = 4,                                                                   .awlen
		.axi_dmac_0_m_src_axi_awsize                                              (axi_dmac_0_m_src_axi_awsize),                               //   input,   width = 3,                                                                   .awsize
		.axi_dmac_0_m_src_axi_awburst                                             (axi_dmac_0_m_src_axi_awburst),                              //   input,   width = 2,                                                                   .awburst
		.axi_dmac_0_m_src_axi_awlock                                              (axi_dmac_0_m_src_axi_awlock),                               //   input,   width = 2,                                                                   .awlock
		.axi_dmac_0_m_src_axi_awcache                                             (axi_dmac_0_m_src_axi_awcache),                              //   input,   width = 4,                                                                   .awcache
		.axi_dmac_0_m_src_axi_awprot                                              (axi_dmac_0_m_src_axi_awprot),                               //   input,   width = 3,                                                                   .awprot
		.axi_dmac_0_m_src_axi_awvalid                                             (axi_dmac_0_m_src_axi_awvalid),                              //   input,   width = 1,                                                                   .awvalid
		.axi_dmac_0_m_src_axi_awready                                             (axi_dmac_0_m_src_axi_awready),                              //  output,   width = 1,                                                                   .awready
		.axi_dmac_0_m_src_axi_wid                                                 (axi_dmac_0_m_src_axi_wid),                                  //   input,   width = 1,                                                                   .wid
		.axi_dmac_0_m_src_axi_wdata                                               (axi_dmac_0_m_src_axi_wdata),                                //   input,  width = 64,                                                                   .wdata
		.axi_dmac_0_m_src_axi_wstrb                                               (axi_dmac_0_m_src_axi_wstrb),                                //   input,   width = 8,                                                                   .wstrb
		.axi_dmac_0_m_src_axi_wlast                                               (axi_dmac_0_m_src_axi_wlast),                                //   input,   width = 1,                                                                   .wlast
		.axi_dmac_0_m_src_axi_wvalid                                              (axi_dmac_0_m_src_axi_wvalid),                               //   input,   width = 1,                                                                   .wvalid
		.axi_dmac_0_m_src_axi_wready                                              (axi_dmac_0_m_src_axi_wready),                               //  output,   width = 1,                                                                   .wready
		.axi_dmac_0_m_src_axi_bid                                                 (axi_dmac_0_m_src_axi_bid),                                  //  output,   width = 1,                                                                   .bid
		.axi_dmac_0_m_src_axi_bresp                                               (axi_dmac_0_m_src_axi_bresp),                                //  output,   width = 2,                                                                   .bresp
		.axi_dmac_0_m_src_axi_bvalid                                              (axi_dmac_0_m_src_axi_bvalid),                               //  output,   width = 1,                                                                   .bvalid
		.axi_dmac_0_m_src_axi_bready                                              (axi_dmac_0_m_src_axi_bready),                               //   input,   width = 1,                                                                   .bready
		.axi_dmac_0_m_src_axi_arid                                                (axi_dmac_0_m_src_axi_arid),                                 //   input,   width = 1,                                                                   .arid
		.axi_dmac_0_m_src_axi_araddr                                              (axi_dmac_0_m_src_axi_araddr),                               //   input,  width = 32,                                                                   .araddr
		.axi_dmac_0_m_src_axi_arlen                                               (axi_dmac_0_m_src_axi_arlen),                                //   input,   width = 4,                                                                   .arlen
		.axi_dmac_0_m_src_axi_arsize                                              (axi_dmac_0_m_src_axi_arsize),                               //   input,   width = 3,                                                                   .arsize
		.axi_dmac_0_m_src_axi_arburst                                             (axi_dmac_0_m_src_axi_arburst),                              //   input,   width = 2,                                                                   .arburst
		.axi_dmac_0_m_src_axi_arlock                                              (axi_dmac_0_m_src_axi_arlock),                               //   input,   width = 2,                                                                   .arlock
		.axi_dmac_0_m_src_axi_arcache                                             (axi_dmac_0_m_src_axi_arcache),                              //   input,   width = 4,                                                                   .arcache
		.axi_dmac_0_m_src_axi_arprot                                              (axi_dmac_0_m_src_axi_arprot),                               //   input,   width = 3,                                                                   .arprot
		.axi_dmac_0_m_src_axi_arvalid                                             (axi_dmac_0_m_src_axi_arvalid),                              //   input,   width = 1,                                                                   .arvalid
		.axi_dmac_0_m_src_axi_arready                                             (axi_dmac_0_m_src_axi_arready),                              //  output,   width = 1,                                                                   .arready
		.axi_dmac_0_m_src_axi_rid                                                 (axi_dmac_0_m_src_axi_rid),                                  //  output,   width = 1,                                                                   .rid
		.axi_dmac_0_m_src_axi_rdata                                               (axi_dmac_0_m_src_axi_rdata),                                //  output,  width = 64,                                                                   .rdata
		.axi_dmac_0_m_src_axi_rresp                                               (axi_dmac_0_m_src_axi_rresp),                                //  output,   width = 2,                                                                   .rresp
		.axi_dmac_0_m_src_axi_rlast                                               (axi_dmac_0_m_src_axi_rlast),                                //  output,   width = 1,                                                                   .rlast
		.axi_dmac_0_m_src_axi_rvalid                                              (axi_dmac_0_m_src_axi_rvalid),                               //  output,   width = 1,                                                                   .rvalid
		.axi_dmac_0_m_src_axi_rready                                              (axi_dmac_0_m_src_axi_rready),                               //   input,   width = 1,                                                                   .rready
		.axi_hdmi_tx_0_s_axi_awaddr                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awaddr),              //  output,  width = 16,                                                axi_hdmi_tx_0_s_axi.awaddr
		.axi_hdmi_tx_0_s_axi_awprot                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awprot),              //  output,   width = 3,                                                                   .awprot
		.axi_hdmi_tx_0_s_axi_awvalid                                              (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awvalid),             //  output,   width = 1,                                                                   .awvalid
		.axi_hdmi_tx_0_s_axi_awready                                              (mm_interconnect_1_axi_hdmi_tx_0_s_axi_awready),             //   input,   width = 1,                                                                   .awready
		.axi_hdmi_tx_0_s_axi_wdata                                                (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wdata),               //  output,  width = 32,                                                                   .wdata
		.axi_hdmi_tx_0_s_axi_wstrb                                                (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wstrb),               //  output,   width = 4,                                                                   .wstrb
		.axi_hdmi_tx_0_s_axi_wvalid                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wvalid),              //  output,   width = 1,                                                                   .wvalid
		.axi_hdmi_tx_0_s_axi_wready                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_wready),              //   input,   width = 1,                                                                   .wready
		.axi_hdmi_tx_0_s_axi_bresp                                                (mm_interconnect_1_axi_hdmi_tx_0_s_axi_bresp),               //   input,   width = 2,                                                                   .bresp
		.axi_hdmi_tx_0_s_axi_bvalid                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_bvalid),              //   input,   width = 1,                                                                   .bvalid
		.axi_hdmi_tx_0_s_axi_bready                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_bready),              //  output,   width = 1,                                                                   .bready
		.axi_hdmi_tx_0_s_axi_araddr                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_araddr),              //  output,  width = 16,                                                                   .araddr
		.axi_hdmi_tx_0_s_axi_arprot                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_arprot),              //  output,   width = 3,                                                                   .arprot
		.axi_hdmi_tx_0_s_axi_arvalid                                              (mm_interconnect_1_axi_hdmi_tx_0_s_axi_arvalid),             //  output,   width = 1,                                                                   .arvalid
		.axi_hdmi_tx_0_s_axi_arready                                              (mm_interconnect_1_axi_hdmi_tx_0_s_axi_arready),             //   input,   width = 1,                                                                   .arready
		.axi_hdmi_tx_0_s_axi_rdata                                                (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rdata),               //   input,  width = 32,                                                                   .rdata
		.axi_hdmi_tx_0_s_axi_rresp                                                (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rresp),               //   input,   width = 2,                                                                   .rresp
		.axi_hdmi_tx_0_s_axi_rvalid                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rvalid),              //   input,   width = 1,                                                                   .rvalid
		.axi_hdmi_tx_0_s_axi_rready                                               (mm_interconnect_1_axi_hdmi_tx_0_s_axi_rready),              //  output,   width = 1,                                                                   .rready
		.axi_dmac_0_s_axi_awaddr                                                  (mm_interconnect_1_axi_dmac_0_s_axi_awaddr),                 //  output,  width = 11,                                                   axi_dmac_0_s_axi.awaddr
		.axi_dmac_0_s_axi_awprot                                                  (mm_interconnect_1_axi_dmac_0_s_axi_awprot),                 //  output,   width = 3,                                                                   .awprot
		.axi_dmac_0_s_axi_awvalid                                                 (mm_interconnect_1_axi_dmac_0_s_axi_awvalid),                //  output,   width = 1,                                                                   .awvalid
		.axi_dmac_0_s_axi_awready                                                 (mm_interconnect_1_axi_dmac_0_s_axi_awready),                //   input,   width = 1,                                                                   .awready
		.axi_dmac_0_s_axi_wdata                                                   (mm_interconnect_1_axi_dmac_0_s_axi_wdata),                  //  output,  width = 32,                                                                   .wdata
		.axi_dmac_0_s_axi_wstrb                                                   (mm_interconnect_1_axi_dmac_0_s_axi_wstrb),                  //  output,   width = 4,                                                                   .wstrb
		.axi_dmac_0_s_axi_wvalid                                                  (mm_interconnect_1_axi_dmac_0_s_axi_wvalid),                 //  output,   width = 1,                                                                   .wvalid
		.axi_dmac_0_s_axi_wready                                                  (mm_interconnect_1_axi_dmac_0_s_axi_wready),                 //   input,   width = 1,                                                                   .wready
		.axi_dmac_0_s_axi_bresp                                                   (mm_interconnect_1_axi_dmac_0_s_axi_bresp),                  //   input,   width = 2,                                                                   .bresp
		.axi_dmac_0_s_axi_bvalid                                                  (mm_interconnect_1_axi_dmac_0_s_axi_bvalid),                 //   input,   width = 1,                                                                   .bvalid
		.axi_dmac_0_s_axi_bready                                                  (mm_interconnect_1_axi_dmac_0_s_axi_bready),                 //  output,   width = 1,                                                                   .bready
		.axi_dmac_0_s_axi_araddr                                                  (mm_interconnect_1_axi_dmac_0_s_axi_araddr),                 //  output,  width = 11,                                                                   .araddr
		.axi_dmac_0_s_axi_arprot                                                  (mm_interconnect_1_axi_dmac_0_s_axi_arprot),                 //  output,   width = 3,                                                                   .arprot
		.axi_dmac_0_s_axi_arvalid                                                 (mm_interconnect_1_axi_dmac_0_s_axi_arvalid),                //  output,   width = 1,                                                                   .arvalid
		.axi_dmac_0_s_axi_arready                                                 (mm_interconnect_1_axi_dmac_0_s_axi_arready),                //   input,   width = 1,                                                                   .arready
		.axi_dmac_0_s_axi_rdata                                                   (mm_interconnect_1_axi_dmac_0_s_axi_rdata),                  //   input,  width = 32,                                                                   .rdata
		.axi_dmac_0_s_axi_rresp                                                   (mm_interconnect_1_axi_dmac_0_s_axi_rresp),                  //   input,   width = 2,                                                                   .rresp
		.axi_dmac_0_s_axi_rvalid                                                  (mm_interconnect_1_axi_dmac_0_s_axi_rvalid),                 //   input,   width = 1,                                                                   .rvalid
		.axi_dmac_0_s_axi_rready                                                  (mm_interconnect_1_axi_dmac_0_s_axi_rready),                 //  output,   width = 1,                                                                   .rready
		.emif_ph2_0_s0_axil_awaddr                                                (mm_interconnect_1_emif_ph2_0_s0_axil_awaddr),               //  output,  width = 27,                                                 emif_ph2_0_s0_axil.awaddr
		.emif_ph2_0_s0_axil_awprot                                                (mm_interconnect_1_emif_ph2_0_s0_axil_awprot),               //  output,   width = 3,                                                                   .awprot
		.emif_ph2_0_s0_axil_awvalid                                               (mm_interconnect_1_emif_ph2_0_s0_axil_awvalid),              //  output,   width = 1,                                                                   .awvalid
		.emif_ph2_0_s0_axil_awready                                               (mm_interconnect_1_emif_ph2_0_s0_axil_awready),              //   input,   width = 1,                                                                   .awready
		.emif_ph2_0_s0_axil_wdata                                                 (mm_interconnect_1_emif_ph2_0_s0_axil_wdata),                //  output,  width = 32,                                                                   .wdata
		.emif_ph2_0_s0_axil_wstrb                                                 (mm_interconnect_1_emif_ph2_0_s0_axil_wstrb),                //  output,   width = 4,                                                                   .wstrb
		.emif_ph2_0_s0_axil_wvalid                                                (mm_interconnect_1_emif_ph2_0_s0_axil_wvalid),               //  output,   width = 1,                                                                   .wvalid
		.emif_ph2_0_s0_axil_wready                                                (mm_interconnect_1_emif_ph2_0_s0_axil_wready),               //   input,   width = 1,                                                                   .wready
		.emif_ph2_0_s0_axil_bresp                                                 (mm_interconnect_1_emif_ph2_0_s0_axil_bresp),                //   input,   width = 2,                                                                   .bresp
		.emif_ph2_0_s0_axil_bvalid                                                (mm_interconnect_1_emif_ph2_0_s0_axil_bvalid),               //   input,   width = 1,                                                                   .bvalid
		.emif_ph2_0_s0_axil_bready                                                (mm_interconnect_1_emif_ph2_0_s0_axil_bready),               //  output,   width = 1,                                                                   .bready
		.emif_ph2_0_s0_axil_araddr                                                (mm_interconnect_1_emif_ph2_0_s0_axil_araddr),               //  output,  width = 27,                                                                   .araddr
		.emif_ph2_0_s0_axil_arprot                                                (mm_interconnect_1_emif_ph2_0_s0_axil_arprot),               //  output,   width = 3,                                                                   .arprot
		.emif_ph2_0_s0_axil_arvalid                                               (mm_interconnect_1_emif_ph2_0_s0_axil_arvalid),              //  output,   width = 1,                                                                   .arvalid
		.emif_ph2_0_s0_axil_arready                                               (mm_interconnect_1_emif_ph2_0_s0_axil_arready),              //   input,   width = 1,                                                                   .arready
		.emif_ph2_0_s0_axil_rdata                                                 (mm_interconnect_1_emif_ph2_0_s0_axil_rdata),                //   input,  width = 32,                                                                   .rdata
		.emif_ph2_0_s0_axil_rresp                                                 (mm_interconnect_1_emif_ph2_0_s0_axil_rresp),                //   input,   width = 2,                                                                   .rresp
		.emif_ph2_0_s0_axil_rvalid                                                (mm_interconnect_1_emif_ph2_0_s0_axil_rvalid),               //   input,   width = 1,                                                                   .rvalid
		.emif_ph2_0_s0_axil_rready                                                (mm_interconnect_1_emif_ph2_0_s0_axil_rready),               //  output,   width = 1,                                                                   .rready
		.axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset                       (rst_controller_011_reset_out_reset),                        //   input,   width = 1,                       axi_dmac_0_s_axi_reset_reset_bridge_in_reset.reset
		.onchip_sram_reset1_reset_bridge_in_reset_reset                           (rst_controller_012_reset_out_reset),                        //   input,   width = 1,                           onchip_sram_reset1_reset_bridge_in_reset.reset
		.jtag_uart_reset_reset_bridge_in_reset_reset                              (rst_controller_013_reset_out_reset),                        //   input,   width = 1,                              jtag_uart_reset_reset_bridge_in_reset.reset
		.axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset                    (rst_controller_014_reset_out_reset),                        //   input,   width = 1,                    axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset.reset
		.agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset   (rst_controller_015_reset_out_reset),                        //   input,   width = 1,   agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset.reset
		.agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset (rst_controller_011_reset_out_reset),                        //   input,   width = 1, agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset.reset
		.jtag_master_master_translator_reset_reset_bridge_in_reset_reset          (rst_controller_016_reset_out_reset),                        //   input,   width = 1,          jtag_master_master_translator_reset_reset_bridge_in_reset.reset
		.onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset      (rst_controller_012_reset_out_reset),                        //   input,   width = 1,      onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset.reset
		.jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset (rst_controller_013_reset_out_reset),                        //   input,   width = 1, jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset.reset
		.axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset         (rst_controller_017_reset_out_reset),                        //   input,   width = 1,         axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset.reset
		.axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset         (rst_controller_014_reset_out_reset),                        //   input,   width = 1,         axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset.reset
		.emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset          (rst_controller_018_reset_out_reset),                        //   input,   width = 1,          emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset.reset
		.crosser_010_in_clk_reset_reset_bridge_in_reset_reset                     (rst_controller_015_reset_out_reset),                        //   input,   width = 1,                     crosser_010_in_clk_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                                     (clock_in_out_clk_clk),                                      //   input,   width = 1,                                                   clock_in_out_clk.clk
		.agilex_5_soc_h2f_user1_clk_clk                                           (agilex_5_soc_h2f_user1_clk_clk),                            //   input,   width = 1,                                         agilex_5_soc_h2f_user1_clk.clk
		.hdmi_pll_outclk0_clk                                                     (hdmi_pll_outclk0_clk),                                      //   input,   width = 1,                                                   hdmi_pll_outclk0.clk
		.agilex_5_soc_h2f_user0_clk_clk                                           (agilex_5_soc_h2f_user0_clk_clk)                             //   input,   width = 1,                                         agilex_5_soc_h2f_user0_clk.clk
	);

	ghrd_hps_system_altera_irq_mapper_2000_d2mno3i irq_mapper (
		.clk        (),                                    //   input,   width = 1,       clk.clk
		.reset      (),                                    //   input,   width = 1, clk_reset.reset
		.sender_irq (agilex_5_soc_fpga2hps_interrupt_irq)  //  output,  width = 63,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),  //   input,  width = 1, reset_in0.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk), //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (~emif_ph2_0_usr_rst_n_0_reset),      //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user0_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (jtag_master_master_reset_reset),     //   input,  width = 1, reset_in1.reset
		.clk            (hdmi_pll_outclk0_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (hdmi_pll_outclk0_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (hps_jtag_master_master_reset_reset), //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_005 (
		.reset_in0      (~agilex_5_soc_h2f_cold_reset_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in1.reset
		.clk            (),                                   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_005_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_006 (
		.reset_in0      (~agilex_5_soc_h2f_cold_reset_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_006_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_007 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (jtag_master_master_reset_reset),     //   input,  width = 1, reset_in1.reset
		.clk            (),                                   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_007_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_008 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (agilex_5_soc_h2f_user0_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_008_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_009 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (~emif_ph2_0_usr_rst_n_0_reset),      //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user0_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_009_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_010 (
		.reset_in0      (~emif_ph2_0_usr_rst_n_0_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (agilex_5_soc_h2f_user0_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_010_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_011 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_011_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_012 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (agilex_5_soc_h2f_user0_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_012_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_013 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (hps_jtag_master_master_reset_reset), //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_013_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_014 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (hdmi_pll_outclk0_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_014_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_015 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (clock_in_out_clk_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_015_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_016 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (jtag_master_master_reset_reset),     //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_016_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_017 (
		.reset_in0      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in0.reset
		.reset_in1      (jtag_master_master_reset_reset),     //   input,  width = 1, reset_in1.reset
		.clk            (hdmi_pll_outclk0_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_017_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_018 (
		.reset_in0      (~agilex_5_soc_h2f_cold_reset_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~agilex_5_soc_h2f_reset_reset),      //   input,  width = 1, reset_in1.reset
		.clk            (agilex_5_soc_h2f_user1_clk_clk),     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_018_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
