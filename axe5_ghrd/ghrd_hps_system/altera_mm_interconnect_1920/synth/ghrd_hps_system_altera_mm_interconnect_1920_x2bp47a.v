// ghrd_hps_system_altera_mm_interconnect_1920_x2bp47a.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module ghrd_hps_system_altera_mm_interconnect_1920_x2bp47a (
		input  wire [3:0]  agilex_5_soc_hps2fpga_awid,                                               //                                              agilex_5_soc_hps2fpga.awid
		input  wire [31:0] agilex_5_soc_hps2fpga_awaddr,                                             //                                                                   .awaddr
		input  wire [7:0]  agilex_5_soc_hps2fpga_awlen,                                              //                                                                   .awlen
		input  wire [2:0]  agilex_5_soc_hps2fpga_awsize,                                             //                                                                   .awsize
		input  wire [1:0]  agilex_5_soc_hps2fpga_awburst,                                            //                                                                   .awburst
		input  wire [0:0]  agilex_5_soc_hps2fpga_awlock,                                             //                                                                   .awlock
		input  wire [3:0]  agilex_5_soc_hps2fpga_awcache,                                            //                                                                   .awcache
		input  wire [2:0]  agilex_5_soc_hps2fpga_awprot,                                             //                                                                   .awprot
		input  wire        agilex_5_soc_hps2fpga_awvalid,                                            //                                                                   .awvalid
		output wire        agilex_5_soc_hps2fpga_awready,                                            //                                                                   .awready
		input  wire [31:0] agilex_5_soc_hps2fpga_wdata,                                              //                                                                   .wdata
		input  wire [3:0]  agilex_5_soc_hps2fpga_wstrb,                                              //                                                                   .wstrb
		input  wire        agilex_5_soc_hps2fpga_wlast,                                              //                                                                   .wlast
		input  wire        agilex_5_soc_hps2fpga_wvalid,                                             //                                                                   .wvalid
		output wire        agilex_5_soc_hps2fpga_wready,                                             //                                                                   .wready
		output wire [3:0]  agilex_5_soc_hps2fpga_bid,                                                //                                                                   .bid
		output wire [1:0]  agilex_5_soc_hps2fpga_bresp,                                              //                                                                   .bresp
		output wire        agilex_5_soc_hps2fpga_bvalid,                                             //                                                                   .bvalid
		input  wire        agilex_5_soc_hps2fpga_bready,                                             //                                                                   .bready
		input  wire [3:0]  agilex_5_soc_hps2fpga_arid,                                               //                                                                   .arid
		input  wire [31:0] agilex_5_soc_hps2fpga_araddr,                                             //                                                                   .araddr
		input  wire [7:0]  agilex_5_soc_hps2fpga_arlen,                                              //                                                                   .arlen
		input  wire [2:0]  agilex_5_soc_hps2fpga_arsize,                                             //                                                                   .arsize
		input  wire [1:0]  agilex_5_soc_hps2fpga_arburst,                                            //                                                                   .arburst
		input  wire [0:0]  agilex_5_soc_hps2fpga_arlock,                                             //                                                                   .arlock
		input  wire [3:0]  agilex_5_soc_hps2fpga_arcache,                                            //                                                                   .arcache
		input  wire [2:0]  agilex_5_soc_hps2fpga_arprot,                                             //                                                                   .arprot
		input  wire        agilex_5_soc_hps2fpga_arvalid,                                            //                                                                   .arvalid
		output wire        agilex_5_soc_hps2fpga_arready,                                            //                                                                   .arready
		output wire [3:0]  agilex_5_soc_hps2fpga_rid,                                                //                                                                   .rid
		output wire [31:0] agilex_5_soc_hps2fpga_rdata,                                              //                                                                   .rdata
		output wire [1:0]  agilex_5_soc_hps2fpga_rresp,                                              //                                                                   .rresp
		output wire        agilex_5_soc_hps2fpga_rlast,                                              //                                                                   .rlast
		output wire        agilex_5_soc_hps2fpga_rvalid,                                             //                                                                   .rvalid
		input  wire        agilex_5_soc_hps2fpga_rready,                                             //                                                                   .rready
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_awid,                                             //                                            agilex_5_soc_lwhps2fpga.awid
		input  wire [28:0] agilex_5_soc_lwhps2fpga_awaddr,                                           //                                                                   .awaddr
		input  wire [7:0]  agilex_5_soc_lwhps2fpga_awlen,                                            //                                                                   .awlen
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_awsize,                                           //                                                                   .awsize
		input  wire [1:0]  agilex_5_soc_lwhps2fpga_awburst,                                          //                                                                   .awburst
		input  wire [0:0]  agilex_5_soc_lwhps2fpga_awlock,                                           //                                                                   .awlock
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_awcache,                                          //                                                                   .awcache
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_awprot,                                           //                                                                   .awprot
		input  wire        agilex_5_soc_lwhps2fpga_awvalid,                                          //                                                                   .awvalid
		output wire        agilex_5_soc_lwhps2fpga_awready,                                          //                                                                   .awready
		input  wire [31:0] agilex_5_soc_lwhps2fpga_wdata,                                            //                                                                   .wdata
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_wstrb,                                            //                                                                   .wstrb
		input  wire        agilex_5_soc_lwhps2fpga_wlast,                                            //                                                                   .wlast
		input  wire        agilex_5_soc_lwhps2fpga_wvalid,                                           //                                                                   .wvalid
		output wire        agilex_5_soc_lwhps2fpga_wready,                                           //                                                                   .wready
		output wire [3:0]  agilex_5_soc_lwhps2fpga_bid,                                              //                                                                   .bid
		output wire [1:0]  agilex_5_soc_lwhps2fpga_bresp,                                            //                                                                   .bresp
		output wire        agilex_5_soc_lwhps2fpga_bvalid,                                           //                                                                   .bvalid
		input  wire        agilex_5_soc_lwhps2fpga_bready,                                           //                                                                   .bready
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_arid,                                             //                                                                   .arid
		input  wire [28:0] agilex_5_soc_lwhps2fpga_araddr,                                           //                                                                   .araddr
		input  wire [7:0]  agilex_5_soc_lwhps2fpga_arlen,                                            //                                                                   .arlen
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_arsize,                                           //                                                                   .arsize
		input  wire [1:0]  agilex_5_soc_lwhps2fpga_arburst,                                          //                                                                   .arburst
		input  wire [0:0]  agilex_5_soc_lwhps2fpga_arlock,                                           //                                                                   .arlock
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_arcache,                                          //                                                                   .arcache
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_arprot,                                           //                                                                   .arprot
		input  wire        agilex_5_soc_lwhps2fpga_arvalid,                                          //                                                                   .arvalid
		output wire        agilex_5_soc_lwhps2fpga_arready,                                          //                                                                   .arready
		output wire [3:0]  agilex_5_soc_lwhps2fpga_rid,                                              //                                                                   .rid
		output wire [31:0] agilex_5_soc_lwhps2fpga_rdata,                                            //                                                                   .rdata
		output wire [1:0]  agilex_5_soc_lwhps2fpga_rresp,                                            //                                                                   .rresp
		output wire        agilex_5_soc_lwhps2fpga_rlast,                                            //                                                                   .rlast
		output wire        agilex_5_soc_lwhps2fpga_rvalid,                                           //                                                                   .rvalid
		input  wire        agilex_5_soc_lwhps2fpga_rready,                                           //                                                                   .rready
		input  wire [31:0] hps_jtag_master_master_address,                                           //                                             hps_jtag_master_master.address
		output wire        hps_jtag_master_master_waitrequest,                                       //                                                                   .waitrequest
		input  wire [3:0]  hps_jtag_master_master_byteenable,                                        //                                                                   .byteenable
		input  wire        hps_jtag_master_master_read,                                              //                                                                   .read
		output wire [31:0] hps_jtag_master_master_readdata,                                          //                                                                   .readdata
		output wire        hps_jtag_master_master_readdatavalid,                                     //                                                                   .readdatavalid
		input  wire        hps_jtag_master_master_write,                                             //                                                                   .write
		input  wire [31:0] hps_jtag_master_master_writedata,                                         //                                                                   .writedata
		input  wire [31:0] jtag_master_master_address,                                               //                                                 jtag_master_master.address
		output wire        jtag_master_master_waitrequest,                                           //                                                                   .waitrequest
		input  wire [3:0]  jtag_master_master_byteenable,                                            //                                                                   .byteenable
		input  wire        jtag_master_master_read,                                                  //                                                                   .read
		output wire [31:0] jtag_master_master_readdata,                                              //                                                                   .readdata
		output wire        jtag_master_master_readdatavalid,                                         //                                                                   .readdatavalid
		input  wire        jtag_master_master_write,                                                 //                                                                   .write
		input  wire [31:0] jtag_master_master_writedata,                                             //                                                                   .writedata
		output wire [6:0]  onchip_sram_axi_s1_awid,                                                  //                                                 onchip_sram_axi_s1.awid
		output wire [12:0] onchip_sram_axi_s1_awaddr,                                                //                                                                   .awaddr
		output wire [7:0]  onchip_sram_axi_s1_awlen,                                                 //                                                                   .awlen
		output wire [2:0]  onchip_sram_axi_s1_awsize,                                                //                                                                   .awsize
		output wire [1:0]  onchip_sram_axi_s1_awburst,                                               //                                                                   .awburst
		output wire        onchip_sram_axi_s1_awvalid,                                               //                                                                   .awvalid
		input  wire        onchip_sram_axi_s1_awready,                                               //                                                                   .awready
		output wire [63:0] onchip_sram_axi_s1_wdata,                                                 //                                                                   .wdata
		output wire [7:0]  onchip_sram_axi_s1_wstrb,                                                 //                                                                   .wstrb
		output wire        onchip_sram_axi_s1_wlast,                                                 //                                                                   .wlast
		output wire        onchip_sram_axi_s1_wvalid,                                                //                                                                   .wvalid
		input  wire        onchip_sram_axi_s1_wready,                                                //                                                                   .wready
		input  wire [6:0]  onchip_sram_axi_s1_bid,                                                   //                                                                   .bid
		input  wire [1:0]  onchip_sram_axi_s1_bresp,                                                 //                                                                   .bresp
		input  wire        onchip_sram_axi_s1_bvalid,                                                //                                                                   .bvalid
		output wire        onchip_sram_axi_s1_bready,                                                //                                                                   .bready
		output wire [6:0]  onchip_sram_axi_s1_arid,                                                  //                                                                   .arid
		output wire [12:0] onchip_sram_axi_s1_araddr,                                                //                                                                   .araddr
		output wire [7:0]  onchip_sram_axi_s1_arlen,                                                 //                                                                   .arlen
		output wire [2:0]  onchip_sram_axi_s1_arsize,                                                //                                                                   .arsize
		output wire [1:0]  onchip_sram_axi_s1_arburst,                                               //                                                                   .arburst
		output wire        onchip_sram_axi_s1_arvalid,                                               //                                                                   .arvalid
		input  wire        onchip_sram_axi_s1_arready,                                               //                                                                   .arready
		input  wire [6:0]  onchip_sram_axi_s1_rid,                                                   //                                                                   .rid
		input  wire [63:0] onchip_sram_axi_s1_rdata,                                                 //                                                                   .rdata
		input  wire [1:0]  onchip_sram_axi_s1_rresp,                                                 //                                                                   .rresp
		input  wire        onchip_sram_axi_s1_rlast,                                                 //                                                                   .rlast
		input  wire        onchip_sram_axi_s1_rvalid,                                                //                                                                   .rvalid
		output wire        onchip_sram_axi_s1_rready,                                                //                                                                   .rready
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                                      //                                        jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                        //                                                                   .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                         //                                                                   .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                                    //                                                                   .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                                  //                                                                   .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                                   //                                                                   .chipselect
		output wire [0:0]  sys_id_control_slave_address,                                             //                                               sys_id_control_slave.address
		input  wire [31:0] sys_id_control_slave_readdata,                                            //                                                                   .readdata
		output wire [1:0]  pb_s1_address,                                                            //                                                              pb_s1.address
		output wire        pb_s1_write,                                                              //                                                                   .write
		input  wire [31:0] pb_s1_readdata,                                                           //                                                                   .readdata
		output wire [31:0] pb_s1_writedata,                                                          //                                                                   .writedata
		output wire        pb_s1_chipselect,                                                         //                                                                   .chipselect
		output wire [1:0]  dipsw_s1_address,                                                         //                                                           dipsw_s1.address
		output wire        dipsw_s1_write,                                                           //                                                                   .write
		input  wire [31:0] dipsw_s1_readdata,                                                        //                                                                   .readdata
		output wire [31:0] dipsw_s1_writedata,                                                       //                                                                   .writedata
		output wire        dipsw_s1_chipselect,                                                      //                                                                   .chipselect
		output wire [1:0]  rgb_led0_s1_address,                                                      //                                                        rgb_led0_s1.address
		output wire        rgb_led0_s1_write,                                                        //                                                                   .write
		input  wire [31:0] rgb_led0_s1_readdata,                                                     //                                                                   .readdata
		output wire [31:0] rgb_led0_s1_writedata,                                                    //                                                                   .writedata
		output wire        rgb_led0_s1_chipselect,                                                   //                                                                   .chipselect
		output wire [1:0]  rgb_led1_s1_address,                                                      //                                                        rgb_led1_s1.address
		output wire        rgb_led1_s1_write,                                                        //                                                                   .write
		input  wire [31:0] rgb_led1_s1_readdata,                                                     //                                                                   .readdata
		output wire [31:0] rgb_led1_s1_writedata,                                                    //                                                                   .writedata
		output wire        rgb_led1_s1_chipselect,                                                   //                                                                   .chipselect
		output wire [1:0]  rgb_led2_s1_address,                                                      //                                                        rgb_led2_s1.address
		output wire        rgb_led2_s1_write,                                                        //                                                                   .write
		input  wire [31:0] rgb_led2_s1_readdata,                                                     //                                                                   .readdata
		output wire [31:0] rgb_led2_s1_writedata,                                                    //                                                                   .writedata
		output wire        rgb_led2_s1_chipselect,                                                   //                                                                   .chipselect
		output wire [1:0]  rgb_led3_s1_address,                                                      //                                                        rgb_led3_s1.address
		output wire        rgb_led3_s1_write,                                                        //                                                                   .write
		input  wire [31:0] rgb_led3_s1_readdata,                                                     //                                                                   .readdata
		output wire [31:0] rgb_led3_s1_writedata,                                                    //                                                                   .writedata
		output wire        rgb_led3_s1_chipselect,                                                   //                                                                   .chipselect
		input  wire [0:0]  axi_dmac_0_m_src_axi_awid,                                                //                                               axi_dmac_0_m_src_axi.awid
		input  wire [31:0] axi_dmac_0_m_src_axi_awaddr,                                              //                                                                   .awaddr
		input  wire [3:0]  axi_dmac_0_m_src_axi_awlen,                                               //                                                                   .awlen
		input  wire [2:0]  axi_dmac_0_m_src_axi_awsize,                                              //                                                                   .awsize
		input  wire [1:0]  axi_dmac_0_m_src_axi_awburst,                                             //                                                                   .awburst
		input  wire [1:0]  axi_dmac_0_m_src_axi_awlock,                                              //                                                                   .awlock
		input  wire [3:0]  axi_dmac_0_m_src_axi_awcache,                                             //                                                                   .awcache
		input  wire [2:0]  axi_dmac_0_m_src_axi_awprot,                                              //                                                                   .awprot
		input  wire        axi_dmac_0_m_src_axi_awvalid,                                             //                                                                   .awvalid
		output wire        axi_dmac_0_m_src_axi_awready,                                             //                                                                   .awready
		input  wire [0:0]  axi_dmac_0_m_src_axi_wid,                                                 //                                                                   .wid
		input  wire [63:0] axi_dmac_0_m_src_axi_wdata,                                               //                                                                   .wdata
		input  wire [7:0]  axi_dmac_0_m_src_axi_wstrb,                                               //                                                                   .wstrb
		input  wire        axi_dmac_0_m_src_axi_wlast,                                               //                                                                   .wlast
		input  wire        axi_dmac_0_m_src_axi_wvalid,                                              //                                                                   .wvalid
		output wire        axi_dmac_0_m_src_axi_wready,                                              //                                                                   .wready
		output wire [0:0]  axi_dmac_0_m_src_axi_bid,                                                 //                                                                   .bid
		output wire [1:0]  axi_dmac_0_m_src_axi_bresp,                                               //                                                                   .bresp
		output wire        axi_dmac_0_m_src_axi_bvalid,                                              //                                                                   .bvalid
		input  wire        axi_dmac_0_m_src_axi_bready,                                              //                                                                   .bready
		input  wire [0:0]  axi_dmac_0_m_src_axi_arid,                                                //                                                                   .arid
		input  wire [31:0] axi_dmac_0_m_src_axi_araddr,                                              //                                                                   .araddr
		input  wire [3:0]  axi_dmac_0_m_src_axi_arlen,                                               //                                                                   .arlen
		input  wire [2:0]  axi_dmac_0_m_src_axi_arsize,                                              //                                                                   .arsize
		input  wire [1:0]  axi_dmac_0_m_src_axi_arburst,                                             //                                                                   .arburst
		input  wire [1:0]  axi_dmac_0_m_src_axi_arlock,                                              //                                                                   .arlock
		input  wire [3:0]  axi_dmac_0_m_src_axi_arcache,                                             //                                                                   .arcache
		input  wire [2:0]  axi_dmac_0_m_src_axi_arprot,                                              //                                                                   .arprot
		input  wire        axi_dmac_0_m_src_axi_arvalid,                                             //                                                                   .arvalid
		output wire        axi_dmac_0_m_src_axi_arready,                                             //                                                                   .arready
		output wire [0:0]  axi_dmac_0_m_src_axi_rid,                                                 //                                                                   .rid
		output wire [63:0] axi_dmac_0_m_src_axi_rdata,                                               //                                                                   .rdata
		output wire [1:0]  axi_dmac_0_m_src_axi_rresp,                                               //                                                                   .rresp
		output wire        axi_dmac_0_m_src_axi_rlast,                                               //                                                                   .rlast
		output wire        axi_dmac_0_m_src_axi_rvalid,                                              //                                                                   .rvalid
		input  wire        axi_dmac_0_m_src_axi_rready,                                              //                                                                   .rready
		output wire [15:0] axi_hdmi_tx_0_s_axi_awaddr,                                               //                                                axi_hdmi_tx_0_s_axi.awaddr
		output wire [2:0]  axi_hdmi_tx_0_s_axi_awprot,                                               //                                                                   .awprot
		output wire        axi_hdmi_tx_0_s_axi_awvalid,                                              //                                                                   .awvalid
		input  wire        axi_hdmi_tx_0_s_axi_awready,                                              //                                                                   .awready
		output wire [31:0] axi_hdmi_tx_0_s_axi_wdata,                                                //                                                                   .wdata
		output wire [3:0]  axi_hdmi_tx_0_s_axi_wstrb,                                                //                                                                   .wstrb
		output wire        axi_hdmi_tx_0_s_axi_wvalid,                                               //                                                                   .wvalid
		input  wire        axi_hdmi_tx_0_s_axi_wready,                                               //                                                                   .wready
		input  wire [1:0]  axi_hdmi_tx_0_s_axi_bresp,                                                //                                                                   .bresp
		input  wire        axi_hdmi_tx_0_s_axi_bvalid,                                               //                                                                   .bvalid
		output wire        axi_hdmi_tx_0_s_axi_bready,                                               //                                                                   .bready
		output wire [15:0] axi_hdmi_tx_0_s_axi_araddr,                                               //                                                                   .araddr
		output wire [2:0]  axi_hdmi_tx_0_s_axi_arprot,                                               //                                                                   .arprot
		output wire        axi_hdmi_tx_0_s_axi_arvalid,                                              //                                                                   .arvalid
		input  wire        axi_hdmi_tx_0_s_axi_arready,                                              //                                                                   .arready
		input  wire [31:0] axi_hdmi_tx_0_s_axi_rdata,                                                //                                                                   .rdata
		input  wire [1:0]  axi_hdmi_tx_0_s_axi_rresp,                                                //                                                                   .rresp
		input  wire        axi_hdmi_tx_0_s_axi_rvalid,                                               //                                                                   .rvalid
		output wire        axi_hdmi_tx_0_s_axi_rready,                                               //                                                                   .rready
		output wire [10:0] axi_dmac_0_s_axi_awaddr,                                                  //                                                   axi_dmac_0_s_axi.awaddr
		output wire [2:0]  axi_dmac_0_s_axi_awprot,                                                  //                                                                   .awprot
		output wire        axi_dmac_0_s_axi_awvalid,                                                 //                                                                   .awvalid
		input  wire        axi_dmac_0_s_axi_awready,                                                 //                                                                   .awready
		output wire [31:0] axi_dmac_0_s_axi_wdata,                                                   //                                                                   .wdata
		output wire [3:0]  axi_dmac_0_s_axi_wstrb,                                                   //                                                                   .wstrb
		output wire        axi_dmac_0_s_axi_wvalid,                                                  //                                                                   .wvalid
		input  wire        axi_dmac_0_s_axi_wready,                                                  //                                                                   .wready
		input  wire [1:0]  axi_dmac_0_s_axi_bresp,                                                   //                                                                   .bresp
		input  wire        axi_dmac_0_s_axi_bvalid,                                                  //                                                                   .bvalid
		output wire        axi_dmac_0_s_axi_bready,                                                  //                                                                   .bready
		output wire [10:0] axi_dmac_0_s_axi_araddr,                                                  //                                                                   .araddr
		output wire [2:0]  axi_dmac_0_s_axi_arprot,                                                  //                                                                   .arprot
		output wire        axi_dmac_0_s_axi_arvalid,                                                 //                                                                   .arvalid
		input  wire        axi_dmac_0_s_axi_arready,                                                 //                                                                   .arready
		input  wire [31:0] axi_dmac_0_s_axi_rdata,                                                   //                                                                   .rdata
		input  wire [1:0]  axi_dmac_0_s_axi_rresp,                                                   //                                                                   .rresp
		input  wire        axi_dmac_0_s_axi_rvalid,                                                  //                                                                   .rvalid
		output wire        axi_dmac_0_s_axi_rready,                                                  //                                                                   .rready
		output wire [26:0] emif_ph2_0_s0_axil_awaddr,                                                //                                                 emif_ph2_0_s0_axil.awaddr
		output wire [2:0]  emif_ph2_0_s0_axil_awprot,                                                //                                                                   .awprot
		output wire        emif_ph2_0_s0_axil_awvalid,                                               //                                                                   .awvalid
		input  wire        emif_ph2_0_s0_axil_awready,                                               //                                                                   .awready
		output wire [31:0] emif_ph2_0_s0_axil_wdata,                                                 //                                                                   .wdata
		output wire [3:0]  emif_ph2_0_s0_axil_wstrb,                                                 //                                                                   .wstrb
		output wire        emif_ph2_0_s0_axil_wvalid,                                                //                                                                   .wvalid
		input  wire        emif_ph2_0_s0_axil_wready,                                                //                                                                   .wready
		input  wire [1:0]  emif_ph2_0_s0_axil_bresp,                                                 //                                                                   .bresp
		input  wire        emif_ph2_0_s0_axil_bvalid,                                                //                                                                   .bvalid
		output wire        emif_ph2_0_s0_axil_bready,                                                //                                                                   .bready
		output wire [26:0] emif_ph2_0_s0_axil_araddr,                                                //                                                                   .araddr
		output wire [2:0]  emif_ph2_0_s0_axil_arprot,                                                //                                                                   .arprot
		output wire        emif_ph2_0_s0_axil_arvalid,                                               //                                                                   .arvalid
		input  wire        emif_ph2_0_s0_axil_arready,                                               //                                                                   .arready
		input  wire [31:0] emif_ph2_0_s0_axil_rdata,                                                 //                                                                   .rdata
		input  wire [1:0]  emif_ph2_0_s0_axil_rresp,                                                 //                                                                   .rresp
		input  wire        emif_ph2_0_s0_axil_rvalid,                                                //                                                                   .rvalid
		output wire        emif_ph2_0_s0_axil_rready,                                                //                                                                   .rready
		input  wire        axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset,                       //                       axi_dmac_0_s_axi_reset_reset_bridge_in_reset.reset
		input  wire        onchip_sram_reset1_reset_bridge_in_reset_reset,                           //                           onchip_sram_reset1_reset_bridge_in_reset.reset
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,                              //                              jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset,                    //                    axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset.reset
		input  wire        agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset,   //   agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire        agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset, // agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire        jtag_master_master_translator_reset_reset_bridge_in_reset_reset,          //          jtag_master_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset,      //      onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset, // jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset.reset
		input  wire        axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset,         //         axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset,         //         axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire        emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset,          //          emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire        crosser_010_in_clk_reset_reset_bridge_in_reset_reset,                     //                     crosser_010_in_clk_reset_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk,                                                     //                                                   clock_in_out_clk.clk
		input  wire        agilex_5_soc_h2f_user1_clk_clk,                                           //                                         agilex_5_soc_h2f_user1_clk.clk
		input  wire        hdmi_pll_outclk0_clk,                                                     //                                                   hdmi_pll_outclk0.clk
		input  wire        agilex_5_soc_h2f_user0_clk_clk                                            //                                         agilex_5_soc_h2f_user0_clk.clk
	);

	wire          rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> axi_dmac_0_m_src_axi_agent:write_rp_valid
	wire  [174:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> axi_dmac_0_m_src_axi_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                                       // axi_dmac_0_m_src_axi_agent:write_rp_ready -> rsp_mux:src_ready
	wire   [15:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> axi_dmac_0_m_src_axi_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> axi_dmac_0_m_src_axi_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> axi_dmac_0_m_src_axi_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                                   // rsp_mux_001:src_valid -> axi_dmac_0_m_src_axi_agent:read_rp_valid
	wire  [174:0] rsp_mux_001_src_data;                                                                    // rsp_mux_001:src_data -> axi_dmac_0_m_src_axi_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                                   // axi_dmac_0_m_src_axi_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire   [15:0] rsp_mux_001_src_channel;                                                                 // rsp_mux_001:src_channel -> axi_dmac_0_m_src_axi_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                           // rsp_mux_001:src_startofpacket -> axi_dmac_0_m_src_axi_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                             // rsp_mux_001:src_endofpacket -> axi_dmac_0_m_src_axi_agent:read_rp_endofpacket
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_ruser;                                             // agilex_5_soc_lwhps2fpga_agent:ruser -> agilex_5_soc_lwhps2fpga_translator:m0_ruser
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_wuser;                                             // agilex_5_soc_lwhps2fpga_translator:m0_wuser -> agilex_5_soc_lwhps2fpga_agent:wuser
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_awburst;                                           // agilex_5_soc_lwhps2fpga_translator:m0_awburst -> agilex_5_soc_lwhps2fpga_agent:awburst
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arregion;                                          // agilex_5_soc_lwhps2fpga_translator:m0_arregion -> agilex_5_soc_lwhps2fpga_agent:arregion
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_awuser;                                            // agilex_5_soc_lwhps2fpga_translator:m0_awuser -> agilex_5_soc_lwhps2fpga_agent:awuser
	wire    [7:0] agilex_5_soc_lwhps2fpga_translator_m0_arlen;                                             // agilex_5_soc_lwhps2fpga_translator:m0_arlen -> agilex_5_soc_lwhps2fpga_agent:arlen
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arqos;                                             // agilex_5_soc_lwhps2fpga_translator:m0_arqos -> agilex_5_soc_lwhps2fpga_agent:arqos
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_wstrb;                                             // agilex_5_soc_lwhps2fpga_translator:m0_wstrb -> agilex_5_soc_lwhps2fpga_agent:wstrb
	wire          agilex_5_soc_lwhps2fpga_translator_m0_wready;                                            // agilex_5_soc_lwhps2fpga_agent:wready -> agilex_5_soc_lwhps2fpga_translator:m0_wready
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_rid;                                               // agilex_5_soc_lwhps2fpga_agent:rid -> agilex_5_soc_lwhps2fpga_translator:m0_rid
	wire          agilex_5_soc_lwhps2fpga_translator_m0_rready;                                            // agilex_5_soc_lwhps2fpga_translator:m0_rready -> agilex_5_soc_lwhps2fpga_agent:rready
	wire    [7:0] agilex_5_soc_lwhps2fpga_translator_m0_awlen;                                             // agilex_5_soc_lwhps2fpga_translator:m0_awlen -> agilex_5_soc_lwhps2fpga_agent:awlen
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awqos;                                             // agilex_5_soc_lwhps2fpga_translator:m0_awqos -> agilex_5_soc_lwhps2fpga_agent:awqos
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arcache;                                           // agilex_5_soc_lwhps2fpga_translator:m0_arcache -> agilex_5_soc_lwhps2fpga_agent:arcache
	wire          agilex_5_soc_lwhps2fpga_translator_m0_wvalid;                                            // agilex_5_soc_lwhps2fpga_translator:m0_wvalid -> agilex_5_soc_lwhps2fpga_agent:wvalid
	wire   [28:0] agilex_5_soc_lwhps2fpga_translator_m0_araddr;                                            // agilex_5_soc_lwhps2fpga_translator:m0_araddr -> agilex_5_soc_lwhps2fpga_agent:araddr
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_arprot;                                            // agilex_5_soc_lwhps2fpga_translator:m0_arprot -> agilex_5_soc_lwhps2fpga_agent:arprot
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_awprot;                                            // agilex_5_soc_lwhps2fpga_translator:m0_awprot -> agilex_5_soc_lwhps2fpga_agent:awprot
	wire   [31:0] agilex_5_soc_lwhps2fpga_translator_m0_wdata;                                             // agilex_5_soc_lwhps2fpga_translator:m0_wdata -> agilex_5_soc_lwhps2fpga_agent:wdata
	wire          agilex_5_soc_lwhps2fpga_translator_m0_arvalid;                                           // agilex_5_soc_lwhps2fpga_translator:m0_arvalid -> agilex_5_soc_lwhps2fpga_agent:arvalid
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awcache;                                           // agilex_5_soc_lwhps2fpga_translator:m0_awcache -> agilex_5_soc_lwhps2fpga_agent:awcache
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arid;                                              // agilex_5_soc_lwhps2fpga_translator:m0_arid -> agilex_5_soc_lwhps2fpga_agent:arid
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_arlock;                                            // agilex_5_soc_lwhps2fpga_translator:m0_arlock -> agilex_5_soc_lwhps2fpga_agent:arlock
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_awlock;                                            // agilex_5_soc_lwhps2fpga_translator:m0_awlock -> agilex_5_soc_lwhps2fpga_agent:awlock
	wire   [28:0] agilex_5_soc_lwhps2fpga_translator_m0_awaddr;                                            // agilex_5_soc_lwhps2fpga_translator:m0_awaddr -> agilex_5_soc_lwhps2fpga_agent:awaddr
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_bresp;                                             // agilex_5_soc_lwhps2fpga_agent:bresp -> agilex_5_soc_lwhps2fpga_translator:m0_bresp
	wire          agilex_5_soc_lwhps2fpga_translator_m0_arready;                                           // agilex_5_soc_lwhps2fpga_agent:arready -> agilex_5_soc_lwhps2fpga_translator:m0_arready
	wire   [31:0] agilex_5_soc_lwhps2fpga_translator_m0_rdata;                                             // agilex_5_soc_lwhps2fpga_agent:rdata -> agilex_5_soc_lwhps2fpga_translator:m0_rdata
	wire          agilex_5_soc_lwhps2fpga_translator_m0_awready;                                           // agilex_5_soc_lwhps2fpga_agent:awready -> agilex_5_soc_lwhps2fpga_translator:m0_awready
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_arburst;                                           // agilex_5_soc_lwhps2fpga_translator:m0_arburst -> agilex_5_soc_lwhps2fpga_agent:arburst
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_arsize;                                            // agilex_5_soc_lwhps2fpga_translator:m0_arsize -> agilex_5_soc_lwhps2fpga_agent:arsize
	wire          agilex_5_soc_lwhps2fpga_translator_m0_bready;                                            // agilex_5_soc_lwhps2fpga_translator:m0_bready -> agilex_5_soc_lwhps2fpga_agent:bready
	wire          agilex_5_soc_lwhps2fpga_translator_m0_rlast;                                             // agilex_5_soc_lwhps2fpga_agent:rlast -> agilex_5_soc_lwhps2fpga_translator:m0_rlast
	wire          agilex_5_soc_lwhps2fpga_translator_m0_wlast;                                             // agilex_5_soc_lwhps2fpga_translator:m0_wlast -> agilex_5_soc_lwhps2fpga_agent:wlast
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awregion;                                          // agilex_5_soc_lwhps2fpga_translator:m0_awregion -> agilex_5_soc_lwhps2fpga_agent:awregion
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_buser;                                             // agilex_5_soc_lwhps2fpga_agent:buser -> agilex_5_soc_lwhps2fpga_translator:m0_buser
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_rresp;                                             // agilex_5_soc_lwhps2fpga_agent:rresp -> agilex_5_soc_lwhps2fpga_translator:m0_rresp
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awid;                                              // agilex_5_soc_lwhps2fpga_translator:m0_awid -> agilex_5_soc_lwhps2fpga_agent:awid
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_bid;                                               // agilex_5_soc_lwhps2fpga_agent:bid -> agilex_5_soc_lwhps2fpga_translator:m0_bid
	wire          agilex_5_soc_lwhps2fpga_translator_m0_bvalid;                                            // agilex_5_soc_lwhps2fpga_agent:bvalid -> agilex_5_soc_lwhps2fpga_translator:m0_bvalid
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_awsize;                                            // agilex_5_soc_lwhps2fpga_translator:m0_awsize -> agilex_5_soc_lwhps2fpga_agent:awsize
	wire          agilex_5_soc_lwhps2fpga_translator_m0_awvalid;                                           // agilex_5_soc_lwhps2fpga_translator:m0_awvalid -> agilex_5_soc_lwhps2fpga_agent:awvalid
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_aruser;                                            // agilex_5_soc_lwhps2fpga_translator:m0_aruser -> agilex_5_soc_lwhps2fpga_agent:aruser
	wire          agilex_5_soc_lwhps2fpga_translator_m0_rvalid;                                            // agilex_5_soc_lwhps2fpga_agent:rvalid -> agilex_5_soc_lwhps2fpga_translator:m0_rvalid
	wire          rsp_mux_002_src_valid;                                                                   // rsp_mux_002:src_valid -> agilex_5_soc_lwhps2fpga_agent:write_rp_valid
	wire  [138:0] rsp_mux_002_src_data;                                                                    // rsp_mux_002:src_data -> agilex_5_soc_lwhps2fpga_agent:write_rp_data
	wire          rsp_mux_002_src_ready;                                                                   // agilex_5_soc_lwhps2fpga_agent:write_rp_ready -> rsp_mux_002:src_ready
	wire   [15:0] rsp_mux_002_src_channel;                                                                 // rsp_mux_002:src_channel -> agilex_5_soc_lwhps2fpga_agent:write_rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                           // rsp_mux_002:src_startofpacket -> agilex_5_soc_lwhps2fpga_agent:write_rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                             // rsp_mux_002:src_endofpacket -> agilex_5_soc_lwhps2fpga_agent:write_rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                                   // rsp_mux_003:src_valid -> agilex_5_soc_lwhps2fpga_agent:read_rp_valid
	wire  [138:0] rsp_mux_003_src_data;                                                                    // rsp_mux_003:src_data -> agilex_5_soc_lwhps2fpga_agent:read_rp_data
	wire          rsp_mux_003_src_ready;                                                                   // agilex_5_soc_lwhps2fpga_agent:read_rp_ready -> rsp_mux_003:src_ready
	wire   [15:0] rsp_mux_003_src_channel;                                                                 // rsp_mux_003:src_channel -> agilex_5_soc_lwhps2fpga_agent:read_rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                           // rsp_mux_003:src_startofpacket -> agilex_5_soc_lwhps2fpga_agent:read_rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                             // rsp_mux_003:src_endofpacket -> agilex_5_soc_lwhps2fpga_agent:read_rp_endofpacket
	wire          hps_jtag_master_master_translator_avalon_universal_master_0_waitrequest;                 // hps_jtag_master_master_agent:av_waitrequest -> hps_jtag_master_master_translator:uav_waitrequest
	wire   [31:0] hps_jtag_master_master_translator_avalon_universal_master_0_readdata;                    // hps_jtag_master_master_agent:av_readdata -> hps_jtag_master_master_translator:uav_readdata
	wire          hps_jtag_master_master_translator_avalon_universal_master_0_debugaccess;                 // hps_jtag_master_master_translator:uav_debugaccess -> hps_jtag_master_master_agent:av_debugaccess
	wire   [31:0] hps_jtag_master_master_translator_avalon_universal_master_0_address;                     // hps_jtag_master_master_translator:uav_address -> hps_jtag_master_master_agent:av_address
	wire          hps_jtag_master_master_translator_avalon_universal_master_0_read;                        // hps_jtag_master_master_translator:uav_read -> hps_jtag_master_master_agent:av_read
	wire    [3:0] hps_jtag_master_master_translator_avalon_universal_master_0_byteenable;                  // hps_jtag_master_master_translator:uav_byteenable -> hps_jtag_master_master_agent:av_byteenable
	wire          hps_jtag_master_master_translator_avalon_universal_master_0_readdatavalid;               // hps_jtag_master_master_agent:av_readdatavalid -> hps_jtag_master_master_translator:uav_readdatavalid
	wire          hps_jtag_master_master_translator_avalon_universal_master_0_lock;                        // hps_jtag_master_master_translator:uav_lock -> hps_jtag_master_master_agent:av_lock
	wire          hps_jtag_master_master_translator_avalon_universal_master_0_write;                       // hps_jtag_master_master_translator:uav_write -> hps_jtag_master_master_agent:av_write
	wire   [31:0] hps_jtag_master_master_translator_avalon_universal_master_0_writedata;                   // hps_jtag_master_master_translator:uav_writedata -> hps_jtag_master_master_agent:av_writedata
	wire    [2:0] hps_jtag_master_master_translator_avalon_universal_master_0_burstcount;                  // hps_jtag_master_master_translator:uav_burstcount -> hps_jtag_master_master_agent:av_burstcount
	wire          jtag_master_master_translator_avalon_universal_master_0_waitrequest;                     // jtag_master_master_agent:av_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;                        // jtag_master_master_agent:av_readdata -> jtag_master_master_translator:uav_readdata
	wire          jtag_master_master_translator_avalon_universal_master_0_debugaccess;                     // jtag_master_master_translator:uav_debugaccess -> jtag_master_master_agent:av_debugaccess
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_address;                         // jtag_master_master_translator:uav_address -> jtag_master_master_agent:av_address
	wire          jtag_master_master_translator_avalon_universal_master_0_read;                            // jtag_master_master_translator:uav_read -> jtag_master_master_agent:av_read
	wire    [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;                      // jtag_master_master_translator:uav_byteenable -> jtag_master_master_agent:av_byteenable
	wire          jtag_master_master_translator_avalon_universal_master_0_readdatavalid;                   // jtag_master_master_agent:av_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire          jtag_master_master_translator_avalon_universal_master_0_lock;                            // jtag_master_master_translator:uav_lock -> jtag_master_master_agent:av_lock
	wire          jtag_master_master_translator_avalon_universal_master_0_write;                           // jtag_master_master_translator:uav_write -> jtag_master_master_agent:av_write
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;                       // jtag_master_master_translator:uav_writedata -> jtag_master_master_agent:av_writedata
	wire    [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;                      // jtag_master_master_translator:uav_burstcount -> jtag_master_master_agent:av_burstcount
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_ruser;                                               // agilex_5_soc_hps2fpga_agent:ruser -> agilex_5_soc_hps2fpga_translator:m0_ruser
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_wuser;                                               // agilex_5_soc_hps2fpga_translator:m0_wuser -> agilex_5_soc_hps2fpga_agent:wuser
	wire    [1:0] agilex_5_soc_hps2fpga_translator_m0_awburst;                                             // agilex_5_soc_hps2fpga_translator:m0_awburst -> agilex_5_soc_hps2fpga_agent:awburst
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_arregion;                                            // agilex_5_soc_hps2fpga_translator:m0_arregion -> agilex_5_soc_hps2fpga_agent:arregion
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_awuser;                                              // agilex_5_soc_hps2fpga_translator:m0_awuser -> agilex_5_soc_hps2fpga_agent:awuser
	wire    [7:0] agilex_5_soc_hps2fpga_translator_m0_arlen;                                               // agilex_5_soc_hps2fpga_translator:m0_arlen -> agilex_5_soc_hps2fpga_agent:arlen
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_arqos;                                               // agilex_5_soc_hps2fpga_translator:m0_arqos -> agilex_5_soc_hps2fpga_agent:arqos
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_wstrb;                                               // agilex_5_soc_hps2fpga_translator:m0_wstrb -> agilex_5_soc_hps2fpga_agent:wstrb
	wire          agilex_5_soc_hps2fpga_translator_m0_wready;                                              // agilex_5_soc_hps2fpga_agent:wready -> agilex_5_soc_hps2fpga_translator:m0_wready
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_rid;                                                 // agilex_5_soc_hps2fpga_agent:rid -> agilex_5_soc_hps2fpga_translator:m0_rid
	wire          agilex_5_soc_hps2fpga_translator_m0_rready;                                              // agilex_5_soc_hps2fpga_translator:m0_rready -> agilex_5_soc_hps2fpga_agent:rready
	wire    [7:0] agilex_5_soc_hps2fpga_translator_m0_awlen;                                               // agilex_5_soc_hps2fpga_translator:m0_awlen -> agilex_5_soc_hps2fpga_agent:awlen
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_awqos;                                               // agilex_5_soc_hps2fpga_translator:m0_awqos -> agilex_5_soc_hps2fpga_agent:awqos
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_arcache;                                             // agilex_5_soc_hps2fpga_translator:m0_arcache -> agilex_5_soc_hps2fpga_agent:arcache
	wire          agilex_5_soc_hps2fpga_translator_m0_wvalid;                                              // agilex_5_soc_hps2fpga_translator:m0_wvalid -> agilex_5_soc_hps2fpga_agent:wvalid
	wire   [31:0] agilex_5_soc_hps2fpga_translator_m0_araddr;                                              // agilex_5_soc_hps2fpga_translator:m0_araddr -> agilex_5_soc_hps2fpga_agent:araddr
	wire    [2:0] agilex_5_soc_hps2fpga_translator_m0_arprot;                                              // agilex_5_soc_hps2fpga_translator:m0_arprot -> agilex_5_soc_hps2fpga_agent:arprot
	wire    [2:0] agilex_5_soc_hps2fpga_translator_m0_awprot;                                              // agilex_5_soc_hps2fpga_translator:m0_awprot -> agilex_5_soc_hps2fpga_agent:awprot
	wire   [31:0] agilex_5_soc_hps2fpga_translator_m0_wdata;                                               // agilex_5_soc_hps2fpga_translator:m0_wdata -> agilex_5_soc_hps2fpga_agent:wdata
	wire          agilex_5_soc_hps2fpga_translator_m0_arvalid;                                             // agilex_5_soc_hps2fpga_translator:m0_arvalid -> agilex_5_soc_hps2fpga_agent:arvalid
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_awcache;                                             // agilex_5_soc_hps2fpga_translator:m0_awcache -> agilex_5_soc_hps2fpga_agent:awcache
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_arid;                                                // agilex_5_soc_hps2fpga_translator:m0_arid -> agilex_5_soc_hps2fpga_agent:arid
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_arlock;                                              // agilex_5_soc_hps2fpga_translator:m0_arlock -> agilex_5_soc_hps2fpga_agent:arlock
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_awlock;                                              // agilex_5_soc_hps2fpga_translator:m0_awlock -> agilex_5_soc_hps2fpga_agent:awlock
	wire   [31:0] agilex_5_soc_hps2fpga_translator_m0_awaddr;                                              // agilex_5_soc_hps2fpga_translator:m0_awaddr -> agilex_5_soc_hps2fpga_agent:awaddr
	wire    [1:0] agilex_5_soc_hps2fpga_translator_m0_bresp;                                               // agilex_5_soc_hps2fpga_agent:bresp -> agilex_5_soc_hps2fpga_translator:m0_bresp
	wire          agilex_5_soc_hps2fpga_translator_m0_arready;                                             // agilex_5_soc_hps2fpga_agent:arready -> agilex_5_soc_hps2fpga_translator:m0_arready
	wire   [31:0] agilex_5_soc_hps2fpga_translator_m0_rdata;                                               // agilex_5_soc_hps2fpga_agent:rdata -> agilex_5_soc_hps2fpga_translator:m0_rdata
	wire          agilex_5_soc_hps2fpga_translator_m0_awready;                                             // agilex_5_soc_hps2fpga_agent:awready -> agilex_5_soc_hps2fpga_translator:m0_awready
	wire    [1:0] agilex_5_soc_hps2fpga_translator_m0_arburst;                                             // agilex_5_soc_hps2fpga_translator:m0_arburst -> agilex_5_soc_hps2fpga_agent:arburst
	wire    [2:0] agilex_5_soc_hps2fpga_translator_m0_arsize;                                              // agilex_5_soc_hps2fpga_translator:m0_arsize -> agilex_5_soc_hps2fpga_agent:arsize
	wire          agilex_5_soc_hps2fpga_translator_m0_bready;                                              // agilex_5_soc_hps2fpga_translator:m0_bready -> agilex_5_soc_hps2fpga_agent:bready
	wire          agilex_5_soc_hps2fpga_translator_m0_rlast;                                               // agilex_5_soc_hps2fpga_agent:rlast -> agilex_5_soc_hps2fpga_translator:m0_rlast
	wire          agilex_5_soc_hps2fpga_translator_m0_wlast;                                               // agilex_5_soc_hps2fpga_translator:m0_wlast -> agilex_5_soc_hps2fpga_agent:wlast
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_awregion;                                            // agilex_5_soc_hps2fpga_translator:m0_awregion -> agilex_5_soc_hps2fpga_agent:awregion
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_buser;                                               // agilex_5_soc_hps2fpga_agent:buser -> agilex_5_soc_hps2fpga_translator:m0_buser
	wire    [1:0] agilex_5_soc_hps2fpga_translator_m0_rresp;                                               // agilex_5_soc_hps2fpga_agent:rresp -> agilex_5_soc_hps2fpga_translator:m0_rresp
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_awid;                                                // agilex_5_soc_hps2fpga_translator:m0_awid -> agilex_5_soc_hps2fpga_agent:awid
	wire    [3:0] agilex_5_soc_hps2fpga_translator_m0_bid;                                                 // agilex_5_soc_hps2fpga_agent:bid -> agilex_5_soc_hps2fpga_translator:m0_bid
	wire          agilex_5_soc_hps2fpga_translator_m0_bvalid;                                              // agilex_5_soc_hps2fpga_agent:bvalid -> agilex_5_soc_hps2fpga_translator:m0_bvalid
	wire    [2:0] agilex_5_soc_hps2fpga_translator_m0_awsize;                                              // agilex_5_soc_hps2fpga_translator:m0_awsize -> agilex_5_soc_hps2fpga_agent:awsize
	wire          agilex_5_soc_hps2fpga_translator_m0_awvalid;                                             // agilex_5_soc_hps2fpga_translator:m0_awvalid -> agilex_5_soc_hps2fpga_agent:awvalid
	wire    [0:0] agilex_5_soc_hps2fpga_translator_m0_aruser;                                              // agilex_5_soc_hps2fpga_translator:m0_aruser -> agilex_5_soc_hps2fpga_agent:aruser
	wire          agilex_5_soc_hps2fpga_translator_m0_rvalid;                                              // agilex_5_soc_hps2fpga_agent:rvalid -> agilex_5_soc_hps2fpga_translator:m0_rvalid
	wire          rsp_mux_006_src_valid;                                                                   // rsp_mux_006:src_valid -> agilex_5_soc_hps2fpga_agent:write_rp_valid
	wire  [138:0] rsp_mux_006_src_data;                                                                    // rsp_mux_006:src_data -> agilex_5_soc_hps2fpga_agent:write_rp_data
	wire          rsp_mux_006_src_ready;                                                                   // agilex_5_soc_hps2fpga_agent:write_rp_ready -> rsp_mux_006:src_ready
	wire   [15:0] rsp_mux_006_src_channel;                                                                 // rsp_mux_006:src_channel -> agilex_5_soc_hps2fpga_agent:write_rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                           // rsp_mux_006:src_startofpacket -> agilex_5_soc_hps2fpga_agent:write_rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                             // rsp_mux_006:src_endofpacket -> agilex_5_soc_hps2fpga_agent:write_rp_endofpacket
	wire          rsp_mux_007_src_valid;                                                                   // rsp_mux_007:src_valid -> agilex_5_soc_hps2fpga_agent:read_rp_valid
	wire  [138:0] rsp_mux_007_src_data;                                                                    // rsp_mux_007:src_data -> agilex_5_soc_hps2fpga_agent:read_rp_data
	wire          rsp_mux_007_src_ready;                                                                   // agilex_5_soc_hps2fpga_agent:read_rp_ready -> rsp_mux_007:src_ready
	wire   [15:0] rsp_mux_007_src_channel;                                                                 // rsp_mux_007:src_channel -> agilex_5_soc_hps2fpga_agent:read_rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                           // rsp_mux_007:src_startofpacket -> agilex_5_soc_hps2fpga_agent:read_rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                             // rsp_mux_007:src_endofpacket -> agilex_5_soc_hps2fpga_agent:read_rp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                           // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                        // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                        // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                            // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                         // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                               // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                      // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                               // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                          // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                              // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                         // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [139:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                        // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                    // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [139:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                    // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                  // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                   // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                  // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                  // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                   // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                  // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire   [31:0] sys_id_control_slave_agent_m0_readdata;                                                  // sys_id_control_slave_translator:uav_readdata -> sys_id_control_slave_agent:m0_readdata
	wire          sys_id_control_slave_agent_m0_waitrequest;                                               // sys_id_control_slave_translator:uav_waitrequest -> sys_id_control_slave_agent:m0_waitrequest
	wire          sys_id_control_slave_agent_m0_debugaccess;                                               // sys_id_control_slave_agent:m0_debugaccess -> sys_id_control_slave_translator:uav_debugaccess
	wire   [31:0] sys_id_control_slave_agent_m0_address;                                                   // sys_id_control_slave_agent:m0_address -> sys_id_control_slave_translator:uav_address
	wire    [3:0] sys_id_control_slave_agent_m0_byteenable;                                                // sys_id_control_slave_agent:m0_byteenable -> sys_id_control_slave_translator:uav_byteenable
	wire          sys_id_control_slave_agent_m0_read;                                                      // sys_id_control_slave_agent:m0_read -> sys_id_control_slave_translator:uav_read
	wire          sys_id_control_slave_agent_m0_readdatavalid;                                             // sys_id_control_slave_translator:uav_readdatavalid -> sys_id_control_slave_agent:m0_readdatavalid
	wire          sys_id_control_slave_agent_m0_lock;                                                      // sys_id_control_slave_agent:m0_lock -> sys_id_control_slave_translator:uav_lock
	wire   [31:0] sys_id_control_slave_agent_m0_writedata;                                                 // sys_id_control_slave_agent:m0_writedata -> sys_id_control_slave_translator:uav_writedata
	wire          sys_id_control_slave_agent_m0_write;                                                     // sys_id_control_slave_agent:m0_write -> sys_id_control_slave_translator:uav_write
	wire    [2:0] sys_id_control_slave_agent_m0_burstcount;                                                // sys_id_control_slave_agent:m0_burstcount -> sys_id_control_slave_translator:uav_burstcount
	wire          sys_id_control_slave_agent_rf_source_valid;                                              // sys_id_control_slave_agent:rf_source_valid -> sys_id_control_slave_agent_rsp_fifo:in_valid
	wire  [139:0] sys_id_control_slave_agent_rf_source_data;                                               // sys_id_control_slave_agent:rf_source_data -> sys_id_control_slave_agent_rsp_fifo:in_data
	wire          sys_id_control_slave_agent_rf_source_ready;                                              // sys_id_control_slave_agent_rsp_fifo:in_ready -> sys_id_control_slave_agent:rf_source_ready
	wire          sys_id_control_slave_agent_rf_source_startofpacket;                                      // sys_id_control_slave_agent:rf_source_startofpacket -> sys_id_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sys_id_control_slave_agent_rf_source_endofpacket;                                        // sys_id_control_slave_agent:rf_source_endofpacket -> sys_id_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sys_id_control_slave_agent_rsp_fifo_out_valid;                                           // sys_id_control_slave_agent_rsp_fifo:out_valid -> sys_id_control_slave_agent:rf_sink_valid
	wire  [139:0] sys_id_control_slave_agent_rsp_fifo_out_data;                                            // sys_id_control_slave_agent_rsp_fifo:out_data -> sys_id_control_slave_agent:rf_sink_data
	wire          sys_id_control_slave_agent_rsp_fifo_out_ready;                                           // sys_id_control_slave_agent:rf_sink_ready -> sys_id_control_slave_agent_rsp_fifo:out_ready
	wire          sys_id_control_slave_agent_rsp_fifo_out_startofpacket;                                   // sys_id_control_slave_agent_rsp_fifo:out_startofpacket -> sys_id_control_slave_agent:rf_sink_startofpacket
	wire          sys_id_control_slave_agent_rsp_fifo_out_endofpacket;                                     // sys_id_control_slave_agent_rsp_fifo:out_endofpacket -> sys_id_control_slave_agent:rf_sink_endofpacket
	wire          sys_id_control_slave_agent_rdata_fifo_src_valid;                                         // sys_id_control_slave_agent:rdata_fifo_src_valid -> sys_id_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sys_id_control_slave_agent_rdata_fifo_src_data;                                          // sys_id_control_slave_agent:rdata_fifo_src_data -> sys_id_control_slave_agent_rdata_fifo:in_data
	wire          sys_id_control_slave_agent_rdata_fifo_src_ready;                                         // sys_id_control_slave_agent_rdata_fifo:in_ready -> sys_id_control_slave_agent:rdata_fifo_src_ready
	wire          sys_id_control_slave_agent_rdata_fifo_out_valid;                                         // sys_id_control_slave_agent_rdata_fifo:out_valid -> sys_id_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sys_id_control_slave_agent_rdata_fifo_out_data;                                          // sys_id_control_slave_agent_rdata_fifo:out_data -> sys_id_control_slave_agent:rdata_fifo_sink_data
	wire          sys_id_control_slave_agent_rdata_fifo_out_ready;                                         // sys_id_control_slave_agent:rdata_fifo_sink_ready -> sys_id_control_slave_agent_rdata_fifo:out_ready
	wire   [31:0] pb_s1_agent_m0_readdata;                                                                 // pb_s1_translator:uav_readdata -> pb_s1_agent:m0_readdata
	wire          pb_s1_agent_m0_waitrequest;                                                              // pb_s1_translator:uav_waitrequest -> pb_s1_agent:m0_waitrequest
	wire          pb_s1_agent_m0_debugaccess;                                                              // pb_s1_agent:m0_debugaccess -> pb_s1_translator:uav_debugaccess
	wire   [31:0] pb_s1_agent_m0_address;                                                                  // pb_s1_agent:m0_address -> pb_s1_translator:uav_address
	wire    [3:0] pb_s1_agent_m0_byteenable;                                                               // pb_s1_agent:m0_byteenable -> pb_s1_translator:uav_byteenable
	wire          pb_s1_agent_m0_read;                                                                     // pb_s1_agent:m0_read -> pb_s1_translator:uav_read
	wire          pb_s1_agent_m0_readdatavalid;                                                            // pb_s1_translator:uav_readdatavalid -> pb_s1_agent:m0_readdatavalid
	wire          pb_s1_agent_m0_lock;                                                                     // pb_s1_agent:m0_lock -> pb_s1_translator:uav_lock
	wire   [31:0] pb_s1_agent_m0_writedata;                                                                // pb_s1_agent:m0_writedata -> pb_s1_translator:uav_writedata
	wire          pb_s1_agent_m0_write;                                                                    // pb_s1_agent:m0_write -> pb_s1_translator:uav_write
	wire    [2:0] pb_s1_agent_m0_burstcount;                                                               // pb_s1_agent:m0_burstcount -> pb_s1_translator:uav_burstcount
	wire          pb_s1_agent_rf_source_valid;                                                             // pb_s1_agent:rf_source_valid -> pb_s1_agent_rsp_fifo:in_valid
	wire  [139:0] pb_s1_agent_rf_source_data;                                                              // pb_s1_agent:rf_source_data -> pb_s1_agent_rsp_fifo:in_data
	wire          pb_s1_agent_rf_source_ready;                                                             // pb_s1_agent_rsp_fifo:in_ready -> pb_s1_agent:rf_source_ready
	wire          pb_s1_agent_rf_source_startofpacket;                                                     // pb_s1_agent:rf_source_startofpacket -> pb_s1_agent_rsp_fifo:in_startofpacket
	wire          pb_s1_agent_rf_source_endofpacket;                                                       // pb_s1_agent:rf_source_endofpacket -> pb_s1_agent_rsp_fifo:in_endofpacket
	wire          pb_s1_agent_rsp_fifo_out_valid;                                                          // pb_s1_agent_rsp_fifo:out_valid -> pb_s1_agent:rf_sink_valid
	wire  [139:0] pb_s1_agent_rsp_fifo_out_data;                                                           // pb_s1_agent_rsp_fifo:out_data -> pb_s1_agent:rf_sink_data
	wire          pb_s1_agent_rsp_fifo_out_ready;                                                          // pb_s1_agent:rf_sink_ready -> pb_s1_agent_rsp_fifo:out_ready
	wire          pb_s1_agent_rsp_fifo_out_startofpacket;                                                  // pb_s1_agent_rsp_fifo:out_startofpacket -> pb_s1_agent:rf_sink_startofpacket
	wire          pb_s1_agent_rsp_fifo_out_endofpacket;                                                    // pb_s1_agent_rsp_fifo:out_endofpacket -> pb_s1_agent:rf_sink_endofpacket
	wire          pb_s1_agent_rdata_fifo_src_valid;                                                        // pb_s1_agent:rdata_fifo_src_valid -> pb_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pb_s1_agent_rdata_fifo_src_data;                                                         // pb_s1_agent:rdata_fifo_src_data -> pb_s1_agent_rdata_fifo:in_data
	wire          pb_s1_agent_rdata_fifo_src_ready;                                                        // pb_s1_agent_rdata_fifo:in_ready -> pb_s1_agent:rdata_fifo_src_ready
	wire          pb_s1_agent_rdata_fifo_out_valid;                                                        // pb_s1_agent_rdata_fifo:out_valid -> pb_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pb_s1_agent_rdata_fifo_out_data;                                                         // pb_s1_agent_rdata_fifo:out_data -> pb_s1_agent:rdata_fifo_sink_data
	wire          pb_s1_agent_rdata_fifo_out_ready;                                                        // pb_s1_agent:rdata_fifo_sink_ready -> pb_s1_agent_rdata_fifo:out_ready
	wire   [31:0] dipsw_s1_agent_m0_readdata;                                                              // dipsw_s1_translator:uav_readdata -> dipsw_s1_agent:m0_readdata
	wire          dipsw_s1_agent_m0_waitrequest;                                                           // dipsw_s1_translator:uav_waitrequest -> dipsw_s1_agent:m0_waitrequest
	wire          dipsw_s1_agent_m0_debugaccess;                                                           // dipsw_s1_agent:m0_debugaccess -> dipsw_s1_translator:uav_debugaccess
	wire   [31:0] dipsw_s1_agent_m0_address;                                                               // dipsw_s1_agent:m0_address -> dipsw_s1_translator:uav_address
	wire    [3:0] dipsw_s1_agent_m0_byteenable;                                                            // dipsw_s1_agent:m0_byteenable -> dipsw_s1_translator:uav_byteenable
	wire          dipsw_s1_agent_m0_read;                                                                  // dipsw_s1_agent:m0_read -> dipsw_s1_translator:uav_read
	wire          dipsw_s1_agent_m0_readdatavalid;                                                         // dipsw_s1_translator:uav_readdatavalid -> dipsw_s1_agent:m0_readdatavalid
	wire          dipsw_s1_agent_m0_lock;                                                                  // dipsw_s1_agent:m0_lock -> dipsw_s1_translator:uav_lock
	wire   [31:0] dipsw_s1_agent_m0_writedata;                                                             // dipsw_s1_agent:m0_writedata -> dipsw_s1_translator:uav_writedata
	wire          dipsw_s1_agent_m0_write;                                                                 // dipsw_s1_agent:m0_write -> dipsw_s1_translator:uav_write
	wire    [2:0] dipsw_s1_agent_m0_burstcount;                                                            // dipsw_s1_agent:m0_burstcount -> dipsw_s1_translator:uav_burstcount
	wire          dipsw_s1_agent_rf_source_valid;                                                          // dipsw_s1_agent:rf_source_valid -> dipsw_s1_agent_rsp_fifo:in_valid
	wire  [139:0] dipsw_s1_agent_rf_source_data;                                                           // dipsw_s1_agent:rf_source_data -> dipsw_s1_agent_rsp_fifo:in_data
	wire          dipsw_s1_agent_rf_source_ready;                                                          // dipsw_s1_agent_rsp_fifo:in_ready -> dipsw_s1_agent:rf_source_ready
	wire          dipsw_s1_agent_rf_source_startofpacket;                                                  // dipsw_s1_agent:rf_source_startofpacket -> dipsw_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_s1_agent_rf_source_endofpacket;                                                    // dipsw_s1_agent:rf_source_endofpacket -> dipsw_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_s1_agent_rsp_fifo_out_valid;                                                       // dipsw_s1_agent_rsp_fifo:out_valid -> dipsw_s1_agent:rf_sink_valid
	wire  [139:0] dipsw_s1_agent_rsp_fifo_out_data;                                                        // dipsw_s1_agent_rsp_fifo:out_data -> dipsw_s1_agent:rf_sink_data
	wire          dipsw_s1_agent_rsp_fifo_out_ready;                                                       // dipsw_s1_agent:rf_sink_ready -> dipsw_s1_agent_rsp_fifo:out_ready
	wire          dipsw_s1_agent_rsp_fifo_out_startofpacket;                                               // dipsw_s1_agent_rsp_fifo:out_startofpacket -> dipsw_s1_agent:rf_sink_startofpacket
	wire          dipsw_s1_agent_rsp_fifo_out_endofpacket;                                                 // dipsw_s1_agent_rsp_fifo:out_endofpacket -> dipsw_s1_agent:rf_sink_endofpacket
	wire          dipsw_s1_agent_rdata_fifo_src_valid;                                                     // dipsw_s1_agent:rdata_fifo_src_valid -> dipsw_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dipsw_s1_agent_rdata_fifo_src_data;                                                      // dipsw_s1_agent:rdata_fifo_src_data -> dipsw_s1_agent_rdata_fifo:in_data
	wire          dipsw_s1_agent_rdata_fifo_src_ready;                                                     // dipsw_s1_agent_rdata_fifo:in_ready -> dipsw_s1_agent:rdata_fifo_src_ready
	wire          dipsw_s1_agent_rdata_fifo_out_valid;                                                     // dipsw_s1_agent_rdata_fifo:out_valid -> dipsw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] dipsw_s1_agent_rdata_fifo_out_data;                                                      // dipsw_s1_agent_rdata_fifo:out_data -> dipsw_s1_agent:rdata_fifo_sink_data
	wire          dipsw_s1_agent_rdata_fifo_out_ready;                                                     // dipsw_s1_agent:rdata_fifo_sink_ready -> dipsw_s1_agent_rdata_fifo:out_ready
	wire   [31:0] rgb_led0_s1_agent_m0_readdata;                                                           // rgb_led0_s1_translator:uav_readdata -> rgb_led0_s1_agent:m0_readdata
	wire          rgb_led0_s1_agent_m0_waitrequest;                                                        // rgb_led0_s1_translator:uav_waitrequest -> rgb_led0_s1_agent:m0_waitrequest
	wire          rgb_led0_s1_agent_m0_debugaccess;                                                        // rgb_led0_s1_agent:m0_debugaccess -> rgb_led0_s1_translator:uav_debugaccess
	wire   [31:0] rgb_led0_s1_agent_m0_address;                                                            // rgb_led0_s1_agent:m0_address -> rgb_led0_s1_translator:uav_address
	wire    [3:0] rgb_led0_s1_agent_m0_byteenable;                                                         // rgb_led0_s1_agent:m0_byteenable -> rgb_led0_s1_translator:uav_byteenable
	wire          rgb_led0_s1_agent_m0_read;                                                               // rgb_led0_s1_agent:m0_read -> rgb_led0_s1_translator:uav_read
	wire          rgb_led0_s1_agent_m0_readdatavalid;                                                      // rgb_led0_s1_translator:uav_readdatavalid -> rgb_led0_s1_agent:m0_readdatavalid
	wire          rgb_led0_s1_agent_m0_lock;                                                               // rgb_led0_s1_agent:m0_lock -> rgb_led0_s1_translator:uav_lock
	wire   [31:0] rgb_led0_s1_agent_m0_writedata;                                                          // rgb_led0_s1_agent:m0_writedata -> rgb_led0_s1_translator:uav_writedata
	wire          rgb_led0_s1_agent_m0_write;                                                              // rgb_led0_s1_agent:m0_write -> rgb_led0_s1_translator:uav_write
	wire    [2:0] rgb_led0_s1_agent_m0_burstcount;                                                         // rgb_led0_s1_agent:m0_burstcount -> rgb_led0_s1_translator:uav_burstcount
	wire          rgb_led0_s1_agent_rf_source_valid;                                                       // rgb_led0_s1_agent:rf_source_valid -> rgb_led0_s1_agent_rsp_fifo:in_valid
	wire  [139:0] rgb_led0_s1_agent_rf_source_data;                                                        // rgb_led0_s1_agent:rf_source_data -> rgb_led0_s1_agent_rsp_fifo:in_data
	wire          rgb_led0_s1_agent_rf_source_ready;                                                       // rgb_led0_s1_agent_rsp_fifo:in_ready -> rgb_led0_s1_agent:rf_source_ready
	wire          rgb_led0_s1_agent_rf_source_startofpacket;                                               // rgb_led0_s1_agent:rf_source_startofpacket -> rgb_led0_s1_agent_rsp_fifo:in_startofpacket
	wire          rgb_led0_s1_agent_rf_source_endofpacket;                                                 // rgb_led0_s1_agent:rf_source_endofpacket -> rgb_led0_s1_agent_rsp_fifo:in_endofpacket
	wire          rgb_led0_s1_agent_rsp_fifo_out_valid;                                                    // rgb_led0_s1_agent_rsp_fifo:out_valid -> rgb_led0_s1_agent:rf_sink_valid
	wire  [139:0] rgb_led0_s1_agent_rsp_fifo_out_data;                                                     // rgb_led0_s1_agent_rsp_fifo:out_data -> rgb_led0_s1_agent:rf_sink_data
	wire          rgb_led0_s1_agent_rsp_fifo_out_ready;                                                    // rgb_led0_s1_agent:rf_sink_ready -> rgb_led0_s1_agent_rsp_fifo:out_ready
	wire          rgb_led0_s1_agent_rsp_fifo_out_startofpacket;                                            // rgb_led0_s1_agent_rsp_fifo:out_startofpacket -> rgb_led0_s1_agent:rf_sink_startofpacket
	wire          rgb_led0_s1_agent_rsp_fifo_out_endofpacket;                                              // rgb_led0_s1_agent_rsp_fifo:out_endofpacket -> rgb_led0_s1_agent:rf_sink_endofpacket
	wire          rgb_led0_s1_agent_rdata_fifo_src_valid;                                                  // rgb_led0_s1_agent:rdata_fifo_src_valid -> rgb_led0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rgb_led0_s1_agent_rdata_fifo_src_data;                                                   // rgb_led0_s1_agent:rdata_fifo_src_data -> rgb_led0_s1_agent_rdata_fifo:in_data
	wire          rgb_led0_s1_agent_rdata_fifo_src_ready;                                                  // rgb_led0_s1_agent_rdata_fifo:in_ready -> rgb_led0_s1_agent:rdata_fifo_src_ready
	wire          rgb_led0_s1_agent_rdata_fifo_out_valid;                                                  // rgb_led0_s1_agent_rdata_fifo:out_valid -> rgb_led0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] rgb_led0_s1_agent_rdata_fifo_out_data;                                                   // rgb_led0_s1_agent_rdata_fifo:out_data -> rgb_led0_s1_agent:rdata_fifo_sink_data
	wire          rgb_led0_s1_agent_rdata_fifo_out_ready;                                                  // rgb_led0_s1_agent:rdata_fifo_sink_ready -> rgb_led0_s1_agent_rdata_fifo:out_ready
	wire   [31:0] rgb_led1_s1_agent_m0_readdata;                                                           // rgb_led1_s1_translator:uav_readdata -> rgb_led1_s1_agent:m0_readdata
	wire          rgb_led1_s1_agent_m0_waitrequest;                                                        // rgb_led1_s1_translator:uav_waitrequest -> rgb_led1_s1_agent:m0_waitrequest
	wire          rgb_led1_s1_agent_m0_debugaccess;                                                        // rgb_led1_s1_agent:m0_debugaccess -> rgb_led1_s1_translator:uav_debugaccess
	wire   [31:0] rgb_led1_s1_agent_m0_address;                                                            // rgb_led1_s1_agent:m0_address -> rgb_led1_s1_translator:uav_address
	wire    [3:0] rgb_led1_s1_agent_m0_byteenable;                                                         // rgb_led1_s1_agent:m0_byteenable -> rgb_led1_s1_translator:uav_byteenable
	wire          rgb_led1_s1_agent_m0_read;                                                               // rgb_led1_s1_agent:m0_read -> rgb_led1_s1_translator:uav_read
	wire          rgb_led1_s1_agent_m0_readdatavalid;                                                      // rgb_led1_s1_translator:uav_readdatavalid -> rgb_led1_s1_agent:m0_readdatavalid
	wire          rgb_led1_s1_agent_m0_lock;                                                               // rgb_led1_s1_agent:m0_lock -> rgb_led1_s1_translator:uav_lock
	wire   [31:0] rgb_led1_s1_agent_m0_writedata;                                                          // rgb_led1_s1_agent:m0_writedata -> rgb_led1_s1_translator:uav_writedata
	wire          rgb_led1_s1_agent_m0_write;                                                              // rgb_led1_s1_agent:m0_write -> rgb_led1_s1_translator:uav_write
	wire    [2:0] rgb_led1_s1_agent_m0_burstcount;                                                         // rgb_led1_s1_agent:m0_burstcount -> rgb_led1_s1_translator:uav_burstcount
	wire          rgb_led1_s1_agent_rf_source_valid;                                                       // rgb_led1_s1_agent:rf_source_valid -> rgb_led1_s1_agent_rsp_fifo:in_valid
	wire  [139:0] rgb_led1_s1_agent_rf_source_data;                                                        // rgb_led1_s1_agent:rf_source_data -> rgb_led1_s1_agent_rsp_fifo:in_data
	wire          rgb_led1_s1_agent_rf_source_ready;                                                       // rgb_led1_s1_agent_rsp_fifo:in_ready -> rgb_led1_s1_agent:rf_source_ready
	wire          rgb_led1_s1_agent_rf_source_startofpacket;                                               // rgb_led1_s1_agent:rf_source_startofpacket -> rgb_led1_s1_agent_rsp_fifo:in_startofpacket
	wire          rgb_led1_s1_agent_rf_source_endofpacket;                                                 // rgb_led1_s1_agent:rf_source_endofpacket -> rgb_led1_s1_agent_rsp_fifo:in_endofpacket
	wire          rgb_led1_s1_agent_rsp_fifo_out_valid;                                                    // rgb_led1_s1_agent_rsp_fifo:out_valid -> rgb_led1_s1_agent:rf_sink_valid
	wire  [139:0] rgb_led1_s1_agent_rsp_fifo_out_data;                                                     // rgb_led1_s1_agent_rsp_fifo:out_data -> rgb_led1_s1_agent:rf_sink_data
	wire          rgb_led1_s1_agent_rsp_fifo_out_ready;                                                    // rgb_led1_s1_agent:rf_sink_ready -> rgb_led1_s1_agent_rsp_fifo:out_ready
	wire          rgb_led1_s1_agent_rsp_fifo_out_startofpacket;                                            // rgb_led1_s1_agent_rsp_fifo:out_startofpacket -> rgb_led1_s1_agent:rf_sink_startofpacket
	wire          rgb_led1_s1_agent_rsp_fifo_out_endofpacket;                                              // rgb_led1_s1_agent_rsp_fifo:out_endofpacket -> rgb_led1_s1_agent:rf_sink_endofpacket
	wire          rgb_led1_s1_agent_rdata_fifo_src_valid;                                                  // rgb_led1_s1_agent:rdata_fifo_src_valid -> rgb_led1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rgb_led1_s1_agent_rdata_fifo_src_data;                                                   // rgb_led1_s1_agent:rdata_fifo_src_data -> rgb_led1_s1_agent_rdata_fifo:in_data
	wire          rgb_led1_s1_agent_rdata_fifo_src_ready;                                                  // rgb_led1_s1_agent_rdata_fifo:in_ready -> rgb_led1_s1_agent:rdata_fifo_src_ready
	wire          rgb_led1_s1_agent_rdata_fifo_out_valid;                                                  // rgb_led1_s1_agent_rdata_fifo:out_valid -> rgb_led1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] rgb_led1_s1_agent_rdata_fifo_out_data;                                                   // rgb_led1_s1_agent_rdata_fifo:out_data -> rgb_led1_s1_agent:rdata_fifo_sink_data
	wire          rgb_led1_s1_agent_rdata_fifo_out_ready;                                                  // rgb_led1_s1_agent:rdata_fifo_sink_ready -> rgb_led1_s1_agent_rdata_fifo:out_ready
	wire   [31:0] rgb_led2_s1_agent_m0_readdata;                                                           // rgb_led2_s1_translator:uav_readdata -> rgb_led2_s1_agent:m0_readdata
	wire          rgb_led2_s1_agent_m0_waitrequest;                                                        // rgb_led2_s1_translator:uav_waitrequest -> rgb_led2_s1_agent:m0_waitrequest
	wire          rgb_led2_s1_agent_m0_debugaccess;                                                        // rgb_led2_s1_agent:m0_debugaccess -> rgb_led2_s1_translator:uav_debugaccess
	wire   [31:0] rgb_led2_s1_agent_m0_address;                                                            // rgb_led2_s1_agent:m0_address -> rgb_led2_s1_translator:uav_address
	wire    [3:0] rgb_led2_s1_agent_m0_byteenable;                                                         // rgb_led2_s1_agent:m0_byteenable -> rgb_led2_s1_translator:uav_byteenable
	wire          rgb_led2_s1_agent_m0_read;                                                               // rgb_led2_s1_agent:m0_read -> rgb_led2_s1_translator:uav_read
	wire          rgb_led2_s1_agent_m0_readdatavalid;                                                      // rgb_led2_s1_translator:uav_readdatavalid -> rgb_led2_s1_agent:m0_readdatavalid
	wire          rgb_led2_s1_agent_m0_lock;                                                               // rgb_led2_s1_agent:m0_lock -> rgb_led2_s1_translator:uav_lock
	wire   [31:0] rgb_led2_s1_agent_m0_writedata;                                                          // rgb_led2_s1_agent:m0_writedata -> rgb_led2_s1_translator:uav_writedata
	wire          rgb_led2_s1_agent_m0_write;                                                              // rgb_led2_s1_agent:m0_write -> rgb_led2_s1_translator:uav_write
	wire    [2:0] rgb_led2_s1_agent_m0_burstcount;                                                         // rgb_led2_s1_agent:m0_burstcount -> rgb_led2_s1_translator:uav_burstcount
	wire          rgb_led2_s1_agent_rf_source_valid;                                                       // rgb_led2_s1_agent:rf_source_valid -> rgb_led2_s1_agent_rsp_fifo:in_valid
	wire  [139:0] rgb_led2_s1_agent_rf_source_data;                                                        // rgb_led2_s1_agent:rf_source_data -> rgb_led2_s1_agent_rsp_fifo:in_data
	wire          rgb_led2_s1_agent_rf_source_ready;                                                       // rgb_led2_s1_agent_rsp_fifo:in_ready -> rgb_led2_s1_agent:rf_source_ready
	wire          rgb_led2_s1_agent_rf_source_startofpacket;                                               // rgb_led2_s1_agent:rf_source_startofpacket -> rgb_led2_s1_agent_rsp_fifo:in_startofpacket
	wire          rgb_led2_s1_agent_rf_source_endofpacket;                                                 // rgb_led2_s1_agent:rf_source_endofpacket -> rgb_led2_s1_agent_rsp_fifo:in_endofpacket
	wire          rgb_led2_s1_agent_rsp_fifo_out_valid;                                                    // rgb_led2_s1_agent_rsp_fifo:out_valid -> rgb_led2_s1_agent:rf_sink_valid
	wire  [139:0] rgb_led2_s1_agent_rsp_fifo_out_data;                                                     // rgb_led2_s1_agent_rsp_fifo:out_data -> rgb_led2_s1_agent:rf_sink_data
	wire          rgb_led2_s1_agent_rsp_fifo_out_ready;                                                    // rgb_led2_s1_agent:rf_sink_ready -> rgb_led2_s1_agent_rsp_fifo:out_ready
	wire          rgb_led2_s1_agent_rsp_fifo_out_startofpacket;                                            // rgb_led2_s1_agent_rsp_fifo:out_startofpacket -> rgb_led2_s1_agent:rf_sink_startofpacket
	wire          rgb_led2_s1_agent_rsp_fifo_out_endofpacket;                                              // rgb_led2_s1_agent_rsp_fifo:out_endofpacket -> rgb_led2_s1_agent:rf_sink_endofpacket
	wire          rgb_led2_s1_agent_rdata_fifo_src_valid;                                                  // rgb_led2_s1_agent:rdata_fifo_src_valid -> rgb_led2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rgb_led2_s1_agent_rdata_fifo_src_data;                                                   // rgb_led2_s1_agent:rdata_fifo_src_data -> rgb_led2_s1_agent_rdata_fifo:in_data
	wire          rgb_led2_s1_agent_rdata_fifo_src_ready;                                                  // rgb_led2_s1_agent_rdata_fifo:in_ready -> rgb_led2_s1_agent:rdata_fifo_src_ready
	wire          rgb_led2_s1_agent_rdata_fifo_out_valid;                                                  // rgb_led2_s1_agent_rdata_fifo:out_valid -> rgb_led2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] rgb_led2_s1_agent_rdata_fifo_out_data;                                                   // rgb_led2_s1_agent_rdata_fifo:out_data -> rgb_led2_s1_agent:rdata_fifo_sink_data
	wire          rgb_led2_s1_agent_rdata_fifo_out_ready;                                                  // rgb_led2_s1_agent:rdata_fifo_sink_ready -> rgb_led2_s1_agent_rdata_fifo:out_ready
	wire   [31:0] rgb_led3_s1_agent_m0_readdata;                                                           // rgb_led3_s1_translator:uav_readdata -> rgb_led3_s1_agent:m0_readdata
	wire          rgb_led3_s1_agent_m0_waitrequest;                                                        // rgb_led3_s1_translator:uav_waitrequest -> rgb_led3_s1_agent:m0_waitrequest
	wire          rgb_led3_s1_agent_m0_debugaccess;                                                        // rgb_led3_s1_agent:m0_debugaccess -> rgb_led3_s1_translator:uav_debugaccess
	wire   [31:0] rgb_led3_s1_agent_m0_address;                                                            // rgb_led3_s1_agent:m0_address -> rgb_led3_s1_translator:uav_address
	wire    [3:0] rgb_led3_s1_agent_m0_byteenable;                                                         // rgb_led3_s1_agent:m0_byteenable -> rgb_led3_s1_translator:uav_byteenable
	wire          rgb_led3_s1_agent_m0_read;                                                               // rgb_led3_s1_agent:m0_read -> rgb_led3_s1_translator:uav_read
	wire          rgb_led3_s1_agent_m0_readdatavalid;                                                      // rgb_led3_s1_translator:uav_readdatavalid -> rgb_led3_s1_agent:m0_readdatavalid
	wire          rgb_led3_s1_agent_m0_lock;                                                               // rgb_led3_s1_agent:m0_lock -> rgb_led3_s1_translator:uav_lock
	wire   [31:0] rgb_led3_s1_agent_m0_writedata;                                                          // rgb_led3_s1_agent:m0_writedata -> rgb_led3_s1_translator:uav_writedata
	wire          rgb_led3_s1_agent_m0_write;                                                              // rgb_led3_s1_agent:m0_write -> rgb_led3_s1_translator:uav_write
	wire    [2:0] rgb_led3_s1_agent_m0_burstcount;                                                         // rgb_led3_s1_agent:m0_burstcount -> rgb_led3_s1_translator:uav_burstcount
	wire          rgb_led3_s1_agent_rf_source_valid;                                                       // rgb_led3_s1_agent:rf_source_valid -> rgb_led3_s1_agent_rsp_fifo:in_valid
	wire  [139:0] rgb_led3_s1_agent_rf_source_data;                                                        // rgb_led3_s1_agent:rf_source_data -> rgb_led3_s1_agent_rsp_fifo:in_data
	wire          rgb_led3_s1_agent_rf_source_ready;                                                       // rgb_led3_s1_agent_rsp_fifo:in_ready -> rgb_led3_s1_agent:rf_source_ready
	wire          rgb_led3_s1_agent_rf_source_startofpacket;                                               // rgb_led3_s1_agent:rf_source_startofpacket -> rgb_led3_s1_agent_rsp_fifo:in_startofpacket
	wire          rgb_led3_s1_agent_rf_source_endofpacket;                                                 // rgb_led3_s1_agent:rf_source_endofpacket -> rgb_led3_s1_agent_rsp_fifo:in_endofpacket
	wire          rgb_led3_s1_agent_rsp_fifo_out_valid;                                                    // rgb_led3_s1_agent_rsp_fifo:out_valid -> rgb_led3_s1_agent:rf_sink_valid
	wire  [139:0] rgb_led3_s1_agent_rsp_fifo_out_data;                                                     // rgb_led3_s1_agent_rsp_fifo:out_data -> rgb_led3_s1_agent:rf_sink_data
	wire          rgb_led3_s1_agent_rsp_fifo_out_ready;                                                    // rgb_led3_s1_agent:rf_sink_ready -> rgb_led3_s1_agent_rsp_fifo:out_ready
	wire          rgb_led3_s1_agent_rsp_fifo_out_startofpacket;                                            // rgb_led3_s1_agent_rsp_fifo:out_startofpacket -> rgb_led3_s1_agent:rf_sink_startofpacket
	wire          rgb_led3_s1_agent_rsp_fifo_out_endofpacket;                                              // rgb_led3_s1_agent_rsp_fifo:out_endofpacket -> rgb_led3_s1_agent:rf_sink_endofpacket
	wire          rgb_led3_s1_agent_rdata_fifo_src_valid;                                                  // rgb_led3_s1_agent:rdata_fifo_src_valid -> rgb_led3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rgb_led3_s1_agent_rdata_fifo_src_data;                                                   // rgb_led3_s1_agent:rdata_fifo_src_data -> rgb_led3_s1_agent_rdata_fifo:in_data
	wire          rgb_led3_s1_agent_rdata_fifo_src_ready;                                                  // rgb_led3_s1_agent_rdata_fifo:in_ready -> rgb_led3_s1_agent:rdata_fifo_src_ready
	wire          rgb_led3_s1_agent_rdata_fifo_out_valid;                                                  // rgb_led3_s1_agent_rdata_fifo:out_valid -> rgb_led3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] rgb_led3_s1_agent_rdata_fifo_out_data;                                                   // rgb_led3_s1_agent_rdata_fifo:out_data -> rgb_led3_s1_agent:rdata_fifo_sink_data
	wire          rgb_led3_s1_agent_rdata_fifo_out_ready;                                                  // rgb_led3_s1_agent:rdata_fifo_sink_ready -> rgb_led3_s1_agent_rdata_fifo:out_ready
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_ruser;                                        // onchip_sram_axi_s1_translator:s0_ruser -> onchip_sram_axi_s1_agent:ruser
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_wuser;                                        // onchip_sram_axi_s1_agent:wuser -> onchip_sram_axi_s1_translator:s0_wuser
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_awburst;                                      // onchip_sram_axi_s1_agent:awburst -> onchip_sram_axi_s1_translator:s0_awburst
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_arregion;                                     // onchip_sram_axi_s1_agent:arregion -> onchip_sram_axi_s1_translator:s0_arregion
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_awuser;                                       // onchip_sram_axi_s1_agent:awuser -> onchip_sram_axi_s1_translator:s0_awuser
	wire    [7:0] onchip_sram_axi_s1_agent_altera_axi_master_arlen;                                        // onchip_sram_axi_s1_agent:arlen -> onchip_sram_axi_s1_translator:s0_arlen
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_arqos;                                        // onchip_sram_axi_s1_agent:arqos -> onchip_sram_axi_s1_translator:s0_arqos
	wire    [7:0] onchip_sram_axi_s1_agent_altera_axi_master_wstrb;                                        // onchip_sram_axi_s1_agent:wstrb -> onchip_sram_axi_s1_translator:s0_wstrb
	wire          onchip_sram_axi_s1_agent_altera_axi_master_wready;                                       // onchip_sram_axi_s1_translator:s0_wready -> onchip_sram_axi_s1_agent:wready
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_rid;                                          // onchip_sram_axi_s1_translator:s0_rid -> onchip_sram_axi_s1_agent:rid
	wire          onchip_sram_axi_s1_agent_altera_axi_master_rready;                                       // onchip_sram_axi_s1_agent:rready -> onchip_sram_axi_s1_translator:s0_rready
	wire    [7:0] onchip_sram_axi_s1_agent_altera_axi_master_awlen;                                        // onchip_sram_axi_s1_agent:awlen -> onchip_sram_axi_s1_translator:s0_awlen
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_awqos;                                        // onchip_sram_axi_s1_agent:awqos -> onchip_sram_axi_s1_translator:s0_awqos
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_arcache;                                      // onchip_sram_axi_s1_agent:arcache -> onchip_sram_axi_s1_translator:s0_arcache
	wire          onchip_sram_axi_s1_agent_altera_axi_master_wvalid;                                       // onchip_sram_axi_s1_agent:wvalid -> onchip_sram_axi_s1_translator:s0_wvalid
	wire   [12:0] onchip_sram_axi_s1_agent_altera_axi_master_araddr;                                       // onchip_sram_axi_s1_agent:araddr -> onchip_sram_axi_s1_translator:s0_araddr
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_arprot;                                       // onchip_sram_axi_s1_agent:arprot -> onchip_sram_axi_s1_translator:s0_arprot
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_awprot;                                       // onchip_sram_axi_s1_agent:awprot -> onchip_sram_axi_s1_translator:s0_awprot
	wire   [63:0] onchip_sram_axi_s1_agent_altera_axi_master_wdata;                                        // onchip_sram_axi_s1_agent:wdata -> onchip_sram_axi_s1_translator:s0_wdata
	wire          onchip_sram_axi_s1_agent_altera_axi_master_arvalid;                                      // onchip_sram_axi_s1_agent:arvalid -> onchip_sram_axi_s1_translator:s0_arvalid
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_awcache;                                      // onchip_sram_axi_s1_agent:awcache -> onchip_sram_axi_s1_translator:s0_awcache
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_arid;                                         // onchip_sram_axi_s1_agent:arid -> onchip_sram_axi_s1_translator:s0_arid
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_arlock;                                       // onchip_sram_axi_s1_agent:arlock -> onchip_sram_axi_s1_translator:s0_arlock
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_awlock;                                       // onchip_sram_axi_s1_agent:awlock -> onchip_sram_axi_s1_translator:s0_awlock
	wire   [12:0] onchip_sram_axi_s1_agent_altera_axi_master_awaddr;                                       // onchip_sram_axi_s1_agent:awaddr -> onchip_sram_axi_s1_translator:s0_awaddr
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_bresp;                                        // onchip_sram_axi_s1_translator:s0_bresp -> onchip_sram_axi_s1_agent:bresp
	wire          onchip_sram_axi_s1_agent_altera_axi_master_arready;                                      // onchip_sram_axi_s1_translator:s0_arready -> onchip_sram_axi_s1_agent:arready
	wire   [63:0] onchip_sram_axi_s1_agent_altera_axi_master_rdata;                                        // onchip_sram_axi_s1_translator:s0_rdata -> onchip_sram_axi_s1_agent:rdata
	wire          onchip_sram_axi_s1_agent_altera_axi_master_awready;                                      // onchip_sram_axi_s1_translator:s0_awready -> onchip_sram_axi_s1_agent:awready
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_arburst;                                      // onchip_sram_axi_s1_agent:arburst -> onchip_sram_axi_s1_translator:s0_arburst
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_arsize;                                       // onchip_sram_axi_s1_agent:arsize -> onchip_sram_axi_s1_translator:s0_arsize
	wire          onchip_sram_axi_s1_agent_altera_axi_master_bready;                                       // onchip_sram_axi_s1_agent:bready -> onchip_sram_axi_s1_translator:s0_bready
	wire          onchip_sram_axi_s1_agent_altera_axi_master_rlast;                                        // onchip_sram_axi_s1_translator:s0_rlast -> onchip_sram_axi_s1_agent:rlast
	wire          onchip_sram_axi_s1_agent_altera_axi_master_wlast;                                        // onchip_sram_axi_s1_agent:wlast -> onchip_sram_axi_s1_translator:s0_wlast
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_awregion;                                     // onchip_sram_axi_s1_agent:awregion -> onchip_sram_axi_s1_translator:s0_awregion
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_buser;                                        // onchip_sram_axi_s1_translator:s0_buser -> onchip_sram_axi_s1_agent:buser
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_rresp;                                        // onchip_sram_axi_s1_translator:s0_rresp -> onchip_sram_axi_s1_agent:rresp
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_awid;                                         // onchip_sram_axi_s1_agent:awid -> onchip_sram_axi_s1_translator:s0_awid
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_bid;                                          // onchip_sram_axi_s1_translator:s0_bid -> onchip_sram_axi_s1_agent:bid
	wire          onchip_sram_axi_s1_agent_altera_axi_master_bvalid;                                       // onchip_sram_axi_s1_translator:s0_bvalid -> onchip_sram_axi_s1_agent:bvalid
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_awsize;                                       // onchip_sram_axi_s1_agent:awsize -> onchip_sram_axi_s1_translator:s0_awsize
	wire          onchip_sram_axi_s1_agent_altera_axi_master_awvalid;                                      // onchip_sram_axi_s1_agent:awvalid -> onchip_sram_axi_s1_translator:s0_awvalid
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_aruser;                                       // onchip_sram_axi_s1_agent:aruser -> onchip_sram_axi_s1_translator:s0_aruser
	wire          onchip_sram_axi_s1_agent_altera_axi_master_rvalid;                                       // onchip_sram_axi_s1_translator:s0_rvalid -> onchip_sram_axi_s1_agent:rvalid
	wire          cmd_mux_014_src_valid;                                                                   // cmd_mux_014:src_valid -> onchip_sram_axi_s1_agent:write_cp_valid
	wire  [174:0] cmd_mux_014_src_data;                                                                    // cmd_mux_014:src_data -> onchip_sram_axi_s1_agent:write_cp_data
	wire          cmd_mux_014_src_ready;                                                                   // onchip_sram_axi_s1_agent:write_cp_ready -> cmd_mux_014:src_ready
	wire   [15:0] cmd_mux_014_src_channel;                                                                 // cmd_mux_014:src_channel -> onchip_sram_axi_s1_agent:write_cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                           // cmd_mux_014:src_startofpacket -> onchip_sram_axi_s1_agent:write_cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                             // cmd_mux_014:src_endofpacket -> onchip_sram_axi_s1_agent:write_cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                   // cmd_mux_015:src_valid -> onchip_sram_axi_s1_agent:read_cp_valid
	wire  [174:0] cmd_mux_015_src_data;                                                                    // cmd_mux_015:src_data -> onchip_sram_axi_s1_agent:read_cp_data
	wire          cmd_mux_015_src_ready;                                                                   // onchip_sram_axi_s1_agent:read_cp_ready -> cmd_mux_015:src_ready
	wire   [15:0] cmd_mux_015_src_channel;                                                                 // cmd_mux_015:src_channel -> onchip_sram_axi_s1_agent:read_cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                           // cmd_mux_015:src_startofpacket -> onchip_sram_axi_s1_agent:read_cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                             // cmd_mux_015:src_endofpacket -> onchip_sram_axi_s1_agent:read_cp_endofpacket
	wire          axi_dmac_0_m_src_axi_agent_write_cp_valid;                                               // axi_dmac_0_m_src_axi_agent:write_cp_valid -> router:sink_valid
	wire  [174:0] axi_dmac_0_m_src_axi_agent_write_cp_data;                                                // axi_dmac_0_m_src_axi_agent:write_cp_data -> router:sink_data
	wire          axi_dmac_0_m_src_axi_agent_write_cp_ready;                                               // router:sink_ready -> axi_dmac_0_m_src_axi_agent:write_cp_ready
	wire          axi_dmac_0_m_src_axi_agent_write_cp_startofpacket;                                       // axi_dmac_0_m_src_axi_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          axi_dmac_0_m_src_axi_agent_write_cp_endofpacket;                                         // axi_dmac_0_m_src_axi_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                        // router:src_valid -> cmd_demux:sink_valid
	wire  [174:0] router_src_data;                                                                         // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                        // cmd_demux:sink_ready -> router:src_ready
	wire   [15:0] router_src_channel;                                                                      // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                  // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          axi_dmac_0_m_src_axi_agent_read_cp_valid;                                                // axi_dmac_0_m_src_axi_agent:read_cp_valid -> router_001:sink_valid
	wire  [174:0] axi_dmac_0_m_src_axi_agent_read_cp_data;                                                 // axi_dmac_0_m_src_axi_agent:read_cp_data -> router_001:sink_data
	wire          axi_dmac_0_m_src_axi_agent_read_cp_ready;                                                // router_001:sink_ready -> axi_dmac_0_m_src_axi_agent:read_cp_ready
	wire          axi_dmac_0_m_src_axi_agent_read_cp_startofpacket;                                        // axi_dmac_0_m_src_axi_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          axi_dmac_0_m_src_axi_agent_read_cp_endofpacket;                                          // axi_dmac_0_m_src_axi_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                    // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [174:0] router_001_src_data;                                                                     // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                    // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [15:0] router_001_src_channel;                                                                  // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_valid;                                            // agilex_5_soc_lwhps2fpga_agent:write_cp_valid -> router_002:sink_valid
	wire  [138:0] agilex_5_soc_lwhps2fpga_agent_write_cp_data;                                             // agilex_5_soc_lwhps2fpga_agent:write_cp_data -> router_002:sink_data
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_ready;                                            // router_002:sink_ready -> agilex_5_soc_lwhps2fpga_agent:write_cp_ready
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_startofpacket;                                    // agilex_5_soc_lwhps2fpga_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_endofpacket;                                      // agilex_5_soc_lwhps2fpga_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                    // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [138:0] router_002_src_data;                                                                     // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                    // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [15:0] router_002_src_channel;                                                                  // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_valid;                                             // agilex_5_soc_lwhps2fpga_agent:read_cp_valid -> router_003:sink_valid
	wire  [138:0] agilex_5_soc_lwhps2fpga_agent_read_cp_data;                                              // agilex_5_soc_lwhps2fpga_agent:read_cp_data -> router_003:sink_data
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_ready;                                             // router_003:sink_ready -> agilex_5_soc_lwhps2fpga_agent:read_cp_ready
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_startofpacket;                                     // agilex_5_soc_lwhps2fpga_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_endofpacket;                                       // agilex_5_soc_lwhps2fpga_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                    // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [138:0] router_003_src_data;                                                                     // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                    // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [15:0] router_003_src_channel;                                                                  // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                            // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                              // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          hps_jtag_master_master_agent_cp_valid;                                                   // hps_jtag_master_master_agent:cp_valid -> router_004:sink_valid
	wire  [138:0] hps_jtag_master_master_agent_cp_data;                                                    // hps_jtag_master_master_agent:cp_data -> router_004:sink_data
	wire          hps_jtag_master_master_agent_cp_ready;                                                   // router_004:sink_ready -> hps_jtag_master_master_agent:cp_ready
	wire          hps_jtag_master_master_agent_cp_startofpacket;                                           // hps_jtag_master_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          hps_jtag_master_master_agent_cp_endofpacket;                                             // hps_jtag_master_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          jtag_master_master_agent_cp_valid;                                                       // jtag_master_master_agent:cp_valid -> router_005:sink_valid
	wire  [138:0] jtag_master_master_agent_cp_data;                                                        // jtag_master_master_agent:cp_data -> router_005:sink_data
	wire          jtag_master_master_agent_cp_ready;                                                       // router_005:sink_ready -> jtag_master_master_agent:cp_ready
	wire          jtag_master_master_agent_cp_startofpacket;                                               // jtag_master_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          jtag_master_master_agent_cp_endofpacket;                                                 // jtag_master_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          agilex_5_soc_hps2fpga_agent_write_cp_valid;                                              // agilex_5_soc_hps2fpga_agent:write_cp_valid -> router_006:sink_valid
	wire  [138:0] agilex_5_soc_hps2fpga_agent_write_cp_data;                                               // agilex_5_soc_hps2fpga_agent:write_cp_data -> router_006:sink_data
	wire          agilex_5_soc_hps2fpga_agent_write_cp_ready;                                              // router_006:sink_ready -> agilex_5_soc_hps2fpga_agent:write_cp_ready
	wire          agilex_5_soc_hps2fpga_agent_write_cp_startofpacket;                                      // agilex_5_soc_hps2fpga_agent:write_cp_startofpacket -> router_006:sink_startofpacket
	wire          agilex_5_soc_hps2fpga_agent_write_cp_endofpacket;                                        // agilex_5_soc_hps2fpga_agent:write_cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                    // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [138:0] router_006_src_data;                                                                     // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                    // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [15:0] router_006_src_channel;                                                                  // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                            // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                              // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          agilex_5_soc_hps2fpga_agent_read_cp_valid;                                               // agilex_5_soc_hps2fpga_agent:read_cp_valid -> router_007:sink_valid
	wire  [138:0] agilex_5_soc_hps2fpga_agent_read_cp_data;                                                // agilex_5_soc_hps2fpga_agent:read_cp_data -> router_007:sink_data
	wire          agilex_5_soc_hps2fpga_agent_read_cp_ready;                                               // router_007:sink_ready -> agilex_5_soc_hps2fpga_agent:read_cp_ready
	wire          agilex_5_soc_hps2fpga_agent_read_cp_startofpacket;                                       // agilex_5_soc_hps2fpga_agent:read_cp_startofpacket -> router_007:sink_startofpacket
	wire          agilex_5_soc_hps2fpga_agent_read_cp_endofpacket;                                         // agilex_5_soc_hps2fpga_agent:read_cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                    // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [138:0] router_007_src_data;                                                                     // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                    // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [15:0] router_007_src_channel;                                                                  // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                            // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                              // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_valid;                                                // axi_hdmi_tx_0_s_axi_agent:write_rp_valid -> router_008:sink_valid
	wire  [138:0] axi_hdmi_tx_0_s_axi_agent_write_rp_data;                                                 // axi_hdmi_tx_0_s_axi_agent:write_rp_data -> router_008:sink_data
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_ready;                                                // router_008:sink_ready -> axi_hdmi_tx_0_s_axi_agent:write_rp_ready
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_startofpacket;                                        // axi_hdmi_tx_0_s_axi_agent:write_rp_startofpacket -> router_008:sink_startofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_write_rp_endofpacket;                                          // axi_hdmi_tx_0_s_axi_agent:write_rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                    // router_008:src_valid -> rsp_demux:sink_valid
	wire  [138:0] router_008_src_data;                                                                     // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                    // rsp_demux:sink_ready -> router_008:src_ready
	wire   [15:0] router_008_src_channel;                                                                  // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                            // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                              // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_valid;                                                 // axi_hdmi_tx_0_s_axi_agent:read_rp_valid -> router_009:sink_valid
	wire  [138:0] axi_hdmi_tx_0_s_axi_agent_read_rp_data;                                                  // axi_hdmi_tx_0_s_axi_agent:read_rp_data -> router_009:sink_data
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_ready;                                                 // router_009:sink_ready -> axi_hdmi_tx_0_s_axi_agent:read_rp_ready
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_startofpacket;                                         // axi_hdmi_tx_0_s_axi_agent:read_rp_startofpacket -> router_009:sink_startofpacket
	wire          axi_hdmi_tx_0_s_axi_agent_read_rp_endofpacket;                                           // axi_hdmi_tx_0_s_axi_agent:read_rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                    // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [138:0] router_009_src_data;                                                                     // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                    // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [15:0] router_009_src_channel;                                                                  // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                            // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                              // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          axi_dmac_0_s_axi_agent_write_rp_valid;                                                   // axi_dmac_0_s_axi_agent:write_rp_valid -> router_010:sink_valid
	wire  [138:0] axi_dmac_0_s_axi_agent_write_rp_data;                                                    // axi_dmac_0_s_axi_agent:write_rp_data -> router_010:sink_data
	wire          axi_dmac_0_s_axi_agent_write_rp_ready;                                                   // router_010:sink_ready -> axi_dmac_0_s_axi_agent:write_rp_ready
	wire          axi_dmac_0_s_axi_agent_write_rp_startofpacket;                                           // axi_dmac_0_s_axi_agent:write_rp_startofpacket -> router_010:sink_startofpacket
	wire          axi_dmac_0_s_axi_agent_write_rp_endofpacket;                                             // axi_dmac_0_s_axi_agent:write_rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                    // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [138:0] router_010_src_data;                                                                     // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                    // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [15:0] router_010_src_channel;                                                                  // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                            // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                              // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          axi_dmac_0_s_axi_agent_read_rp_valid;                                                    // axi_dmac_0_s_axi_agent:read_rp_valid -> router_011:sink_valid
	wire  [138:0] axi_dmac_0_s_axi_agent_read_rp_data;                                                     // axi_dmac_0_s_axi_agent:read_rp_data -> router_011:sink_data
	wire          axi_dmac_0_s_axi_agent_read_rp_ready;                                                    // router_011:sink_ready -> axi_dmac_0_s_axi_agent:read_rp_ready
	wire          axi_dmac_0_s_axi_agent_read_rp_startofpacket;                                            // axi_dmac_0_s_axi_agent:read_rp_startofpacket -> router_011:sink_startofpacket
	wire          axi_dmac_0_s_axi_agent_read_rp_endofpacket;                                              // axi_dmac_0_s_axi_agent:read_rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                    // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [138:0] router_011_src_data;                                                                     // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                    // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [15:0] router_011_src_channel;                                                                  // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                            // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                              // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                              // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_012:sink_valid
	wire  [138:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                               // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_012:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                              // router_012:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                      // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                        // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                    // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [138:0] router_012_src_data;                                                                     // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                    // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [15:0] router_012_src_channel;                                                                  // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                            // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                              // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sys_id_control_slave_agent_rp_valid;                                                     // sys_id_control_slave_agent:rp_valid -> router_013:sink_valid
	wire  [138:0] sys_id_control_slave_agent_rp_data;                                                      // sys_id_control_slave_agent:rp_data -> router_013:sink_data
	wire          sys_id_control_slave_agent_rp_ready;                                                     // router_013:sink_ready -> sys_id_control_slave_agent:rp_ready
	wire          sys_id_control_slave_agent_rp_startofpacket;                                             // sys_id_control_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sys_id_control_slave_agent_rp_endofpacket;                                               // sys_id_control_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                    // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [138:0] router_013_src_data;                                                                     // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                    // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [15:0] router_013_src_channel;                                                                  // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                            // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                              // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          pb_s1_agent_rp_valid;                                                                    // pb_s1_agent:rp_valid -> router_014:sink_valid
	wire  [138:0] pb_s1_agent_rp_data;                                                                     // pb_s1_agent:rp_data -> router_014:sink_data
	wire          pb_s1_agent_rp_ready;                                                                    // router_014:sink_ready -> pb_s1_agent:rp_ready
	wire          pb_s1_agent_rp_startofpacket;                                                            // pb_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          pb_s1_agent_rp_endofpacket;                                                              // pb_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                    // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [138:0] router_014_src_data;                                                                     // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                    // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [15:0] router_014_src_channel;                                                                  // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                            // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                              // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          dipsw_s1_agent_rp_valid;                                                                 // dipsw_s1_agent:rp_valid -> router_015:sink_valid
	wire  [138:0] dipsw_s1_agent_rp_data;                                                                  // dipsw_s1_agent:rp_data -> router_015:sink_data
	wire          dipsw_s1_agent_rp_ready;                                                                 // router_015:sink_ready -> dipsw_s1_agent:rp_ready
	wire          dipsw_s1_agent_rp_startofpacket;                                                         // dipsw_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          dipsw_s1_agent_rp_endofpacket;                                                           // dipsw_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                    // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [138:0] router_015_src_data;                                                                     // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                    // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [15:0] router_015_src_channel;                                                                  // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                            // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                              // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          rgb_led0_s1_agent_rp_valid;                                                              // rgb_led0_s1_agent:rp_valid -> router_016:sink_valid
	wire  [138:0] rgb_led0_s1_agent_rp_data;                                                               // rgb_led0_s1_agent:rp_data -> router_016:sink_data
	wire          rgb_led0_s1_agent_rp_ready;                                                              // router_016:sink_ready -> rgb_led0_s1_agent:rp_ready
	wire          rgb_led0_s1_agent_rp_startofpacket;                                                      // rgb_led0_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          rgb_led0_s1_agent_rp_endofpacket;                                                        // rgb_led0_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                    // router_016:src_valid -> rsp_demux_008:sink_valid
	wire  [138:0] router_016_src_data;                                                                     // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                                    // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [15:0] router_016_src_channel;                                                                  // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                            // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                              // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          rgb_led1_s1_agent_rp_valid;                                                              // rgb_led1_s1_agent:rp_valid -> router_017:sink_valid
	wire  [138:0] rgb_led1_s1_agent_rp_data;                                                               // rgb_led1_s1_agent:rp_data -> router_017:sink_data
	wire          rgb_led1_s1_agent_rp_ready;                                                              // router_017:sink_ready -> rgb_led1_s1_agent:rp_ready
	wire          rgb_led1_s1_agent_rp_startofpacket;                                                      // rgb_led1_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          rgb_led1_s1_agent_rp_endofpacket;                                                        // rgb_led1_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                    // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [138:0] router_017_src_data;                                                                     // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                    // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [15:0] router_017_src_channel;                                                                  // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                            // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                              // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          rgb_led2_s1_agent_rp_valid;                                                              // rgb_led2_s1_agent:rp_valid -> router_018:sink_valid
	wire  [138:0] rgb_led2_s1_agent_rp_data;                                                               // rgb_led2_s1_agent:rp_data -> router_018:sink_data
	wire          rgb_led2_s1_agent_rp_ready;                                                              // router_018:sink_ready -> rgb_led2_s1_agent:rp_ready
	wire          rgb_led2_s1_agent_rp_startofpacket;                                                      // rgb_led2_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          rgb_led2_s1_agent_rp_endofpacket;                                                        // rgb_led2_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                    // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [138:0] router_018_src_data;                                                                     // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                    // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [15:0] router_018_src_channel;                                                                  // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                            // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                              // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          rgb_led3_s1_agent_rp_valid;                                                              // rgb_led3_s1_agent:rp_valid -> router_019:sink_valid
	wire  [138:0] rgb_led3_s1_agent_rp_data;                                                               // rgb_led3_s1_agent:rp_data -> router_019:sink_data
	wire          rgb_led3_s1_agent_rp_ready;                                                              // router_019:sink_ready -> rgb_led3_s1_agent:rp_ready
	wire          rgb_led3_s1_agent_rp_startofpacket;                                                      // rgb_led3_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          rgb_led3_s1_agent_rp_endofpacket;                                                        // rgb_led3_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                    // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [138:0] router_019_src_data;                                                                     // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                    // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [15:0] router_019_src_channel;                                                                  // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                            // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                              // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          emif_ph2_0_s0_axil_agent_write_rp_valid;                                                 // emif_ph2_0_s0_axil_agent:write_rp_valid -> router_020:sink_valid
	wire  [138:0] emif_ph2_0_s0_axil_agent_write_rp_data;                                                  // emif_ph2_0_s0_axil_agent:write_rp_data -> router_020:sink_data
	wire          emif_ph2_0_s0_axil_agent_write_rp_ready;                                                 // router_020:sink_ready -> emif_ph2_0_s0_axil_agent:write_rp_ready
	wire          emif_ph2_0_s0_axil_agent_write_rp_startofpacket;                                         // emif_ph2_0_s0_axil_agent:write_rp_startofpacket -> router_020:sink_startofpacket
	wire          emif_ph2_0_s0_axil_agent_write_rp_endofpacket;                                           // emif_ph2_0_s0_axil_agent:write_rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                    // router_020:src_valid -> rsp_demux_012:sink_valid
	wire  [138:0] router_020_src_data;                                                                     // router_020:src_data -> rsp_demux_012:sink_data
	wire          router_020_src_ready;                                                                    // rsp_demux_012:sink_ready -> router_020:src_ready
	wire   [15:0] router_020_src_channel;                                                                  // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_startofpacket;                                                            // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_020_src_endofpacket;                                                              // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          emif_ph2_0_s0_axil_agent_read_rp_valid;                                                  // emif_ph2_0_s0_axil_agent:read_rp_valid -> router_021:sink_valid
	wire  [138:0] emif_ph2_0_s0_axil_agent_read_rp_data;                                                   // emif_ph2_0_s0_axil_agent:read_rp_data -> router_021:sink_data
	wire          emif_ph2_0_s0_axil_agent_read_rp_ready;                                                  // router_021:sink_ready -> emif_ph2_0_s0_axil_agent:read_rp_ready
	wire          emif_ph2_0_s0_axil_agent_read_rp_startofpacket;                                          // emif_ph2_0_s0_axil_agent:read_rp_startofpacket -> router_021:sink_startofpacket
	wire          emif_ph2_0_s0_axil_agent_read_rp_endofpacket;                                            // emif_ph2_0_s0_axil_agent:read_rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                    // router_021:src_valid -> rsp_demux_013:sink_valid
	wire  [138:0] router_021_src_data;                                                                     // router_021:src_data -> rsp_demux_013:sink_data
	wire          router_021_src_ready;                                                                    // rsp_demux_013:sink_ready -> router_021:src_ready
	wire   [15:0] router_021_src_channel;                                                                  // router_021:src_channel -> rsp_demux_013:sink_channel
	wire          router_021_src_startofpacket;                                                            // router_021:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_021_src_endofpacket;                                                              // router_021:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          onchip_sram_axi_s1_agent_write_rp_valid;                                                 // onchip_sram_axi_s1_agent:write_rp_valid -> router_022:sink_valid
	wire  [174:0] onchip_sram_axi_s1_agent_write_rp_data;                                                  // onchip_sram_axi_s1_agent:write_rp_data -> router_022:sink_data
	wire          onchip_sram_axi_s1_agent_write_rp_ready;                                                 // router_022:sink_ready -> onchip_sram_axi_s1_agent:write_rp_ready
	wire          onchip_sram_axi_s1_agent_write_rp_startofpacket;                                         // onchip_sram_axi_s1_agent:write_rp_startofpacket -> router_022:sink_startofpacket
	wire          onchip_sram_axi_s1_agent_write_rp_endofpacket;                                           // onchip_sram_axi_s1_agent:write_rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                    // router_022:src_valid -> rsp_demux_014:sink_valid
	wire  [174:0] router_022_src_data;                                                                     // router_022:src_data -> rsp_demux_014:sink_data
	wire          router_022_src_ready;                                                                    // rsp_demux_014:sink_ready -> router_022:src_ready
	wire   [15:0] router_022_src_channel;                                                                  // router_022:src_channel -> rsp_demux_014:sink_channel
	wire          router_022_src_startofpacket;                                                            // router_022:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_022_src_endofpacket;                                                              // router_022:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          onchip_sram_axi_s1_agent_read_rp_valid;                                                  // onchip_sram_axi_s1_agent:read_rp_valid -> router_023:sink_valid
	wire  [174:0] onchip_sram_axi_s1_agent_read_rp_data;                                                   // onchip_sram_axi_s1_agent:read_rp_data -> router_023:sink_data
	wire          onchip_sram_axi_s1_agent_read_rp_ready;                                                  // router_023:sink_ready -> onchip_sram_axi_s1_agent:read_rp_ready
	wire          onchip_sram_axi_s1_agent_read_rp_startofpacket;                                          // onchip_sram_axi_s1_agent:read_rp_startofpacket -> router_023:sink_startofpacket
	wire          onchip_sram_axi_s1_agent_read_rp_endofpacket;                                            // onchip_sram_axi_s1_agent:read_rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                    // router_023:src_valid -> rsp_demux_015:sink_valid
	wire  [174:0] router_023_src_data;                                                                     // router_023:src_data -> rsp_demux_015:sink_data
	wire          router_023_src_ready;                                                                    // rsp_demux_015:sink_ready -> router_023:src_ready
	wire   [15:0] router_023_src_channel;                                                                  // router_023:src_channel -> rsp_demux_015:sink_channel
	wire          router_023_src_startofpacket;                                                            // router_023:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_023_src_endofpacket;                                                              // router_023:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_004_src_valid;                                                                    // router_004:src_valid -> hps_jtag_master_master_limiter:cmd_sink_valid
	wire  [138:0] router_004_src_data;                                                                     // router_004:src_data -> hps_jtag_master_master_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                    // hps_jtag_master_master_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [15:0] router_004_src_channel;                                                                  // router_004:src_channel -> hps_jtag_master_master_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                            // router_004:src_startofpacket -> hps_jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                              // router_004:src_endofpacket -> hps_jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [138:0] hps_jtag_master_master_limiter_cmd_src_data;                                             // hps_jtag_master_master_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          hps_jtag_master_master_limiter_cmd_src_ready;                                            // cmd_demux_004:sink_ready -> hps_jtag_master_master_limiter:cmd_src_ready
	wire   [15:0] hps_jtag_master_master_limiter_cmd_src_channel;                                          // hps_jtag_master_master_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          hps_jtag_master_master_limiter_cmd_src_startofpacket;                                    // hps_jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          hps_jtag_master_master_limiter_cmd_src_endofpacket;                                      // hps_jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                   // rsp_mux_004:src_valid -> hps_jtag_master_master_limiter:rsp_sink_valid
	wire  [138:0] rsp_mux_004_src_data;                                                                    // rsp_mux_004:src_data -> hps_jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                   // hps_jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [15:0] rsp_mux_004_src_channel;                                                                 // rsp_mux_004:src_channel -> hps_jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                           // rsp_mux_004:src_startofpacket -> hps_jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                             // rsp_mux_004:src_endofpacket -> hps_jtag_master_master_limiter:rsp_sink_endofpacket
	wire          hps_jtag_master_master_limiter_rsp_src_valid;                                            // hps_jtag_master_master_limiter:rsp_src_valid -> hps_jtag_master_master_agent:rp_valid
	wire  [138:0] hps_jtag_master_master_limiter_rsp_src_data;                                             // hps_jtag_master_master_limiter:rsp_src_data -> hps_jtag_master_master_agent:rp_data
	wire          hps_jtag_master_master_limiter_rsp_src_ready;                                            // hps_jtag_master_master_agent:rp_ready -> hps_jtag_master_master_limiter:rsp_src_ready
	wire   [15:0] hps_jtag_master_master_limiter_rsp_src_channel;                                          // hps_jtag_master_master_limiter:rsp_src_channel -> hps_jtag_master_master_agent:rp_channel
	wire          hps_jtag_master_master_limiter_rsp_src_startofpacket;                                    // hps_jtag_master_master_limiter:rsp_src_startofpacket -> hps_jtag_master_master_agent:rp_startofpacket
	wire          hps_jtag_master_master_limiter_rsp_src_endofpacket;                                      // hps_jtag_master_master_limiter:rsp_src_endofpacket -> hps_jtag_master_master_agent:rp_endofpacket
	wire          router_005_src_valid;                                                                    // router_005:src_valid -> jtag_master_master_limiter:cmd_sink_valid
	wire  [138:0] router_005_src_data;                                                                     // router_005:src_data -> jtag_master_master_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                                    // jtag_master_master_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [15:0] router_005_src_channel;                                                                  // router_005:src_channel -> jtag_master_master_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                            // router_005:src_startofpacket -> jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                              // router_005:src_endofpacket -> jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [138:0] jtag_master_master_limiter_cmd_src_data;                                                 // jtag_master_master_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          jtag_master_master_limiter_cmd_src_ready;                                                // cmd_demux_005:sink_ready -> jtag_master_master_limiter:cmd_src_ready
	wire   [15:0] jtag_master_master_limiter_cmd_src_channel;                                              // jtag_master_master_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          jtag_master_master_limiter_cmd_src_startofpacket;                                        // jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          jtag_master_master_limiter_cmd_src_endofpacket;                                          // jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                                   // rsp_mux_005:src_valid -> jtag_master_master_limiter:rsp_sink_valid
	wire  [138:0] rsp_mux_005_src_data;                                                                    // rsp_mux_005:src_data -> jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                                   // jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [15:0] rsp_mux_005_src_channel;                                                                 // rsp_mux_005:src_channel -> jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                           // rsp_mux_005:src_startofpacket -> jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                             // rsp_mux_005:src_endofpacket -> jtag_master_master_limiter:rsp_sink_endofpacket
	wire          jtag_master_master_limiter_rsp_src_valid;                                                // jtag_master_master_limiter:rsp_src_valid -> jtag_master_master_agent:rp_valid
	wire  [138:0] jtag_master_master_limiter_rsp_src_data;                                                 // jtag_master_master_limiter:rsp_src_data -> jtag_master_master_agent:rp_data
	wire          jtag_master_master_limiter_rsp_src_ready;                                                // jtag_master_master_agent:rp_ready -> jtag_master_master_limiter:rsp_src_ready
	wire   [15:0] jtag_master_master_limiter_rsp_src_channel;                                              // jtag_master_master_limiter:rsp_src_channel -> jtag_master_master_agent:rp_channel
	wire          jtag_master_master_limiter_rsp_src_startofpacket;                                        // jtag_master_master_limiter:rsp_src_startofpacket -> jtag_master_master_agent:rp_startofpacket
	wire          jtag_master_master_limiter_rsp_src_endofpacket;                                          // jtag_master_master_limiter:rsp_src_endofpacket -> jtag_master_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                       // axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [15:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_valid;                                      // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_valid -> axi_hdmi_tx_0_s_axi_agent:write_cp_valid
	wire  [138:0] axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_data;                                       // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_data -> axi_hdmi_tx_0_s_axi_agent:write_cp_data
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_ready;                                      // axi_hdmi_tx_0_s_axi_agent:write_cp_ready -> axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_ready
	wire   [15:0] axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_channel;                                    // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_channel -> axi_hdmi_tx_0_s_axi_agent:write_cp_channel
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_startofpacket;                              // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_startofpacket -> axi_hdmi_tx_0_s_axi_agent:write_cp_startofpacket
	wire          axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_endofpacket;                                // axi_hdmi_tx_0_s_axi_wr_burst_adapter:source0_endofpacket -> axi_hdmi_tx_0_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                   // axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [15:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_valid;                                      // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_valid -> axi_hdmi_tx_0_s_axi_agent:read_cp_valid
	wire  [138:0] axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_data;                                       // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_data -> axi_hdmi_tx_0_s_axi_agent:read_cp_data
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_ready;                                      // axi_hdmi_tx_0_s_axi_agent:read_cp_ready -> axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_ready
	wire   [15:0] axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_channel;                                    // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_channel -> axi_hdmi_tx_0_s_axi_agent:read_cp_channel
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_startofpacket;                              // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_startofpacket -> axi_hdmi_tx_0_s_axi_agent:read_cp_startofpacket
	wire          axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_endofpacket;                                // axi_hdmi_tx_0_s_axi_rd_burst_adapter:source0_endofpacket -> axi_hdmi_tx_0_s_axi_agent:read_cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                   // cmd_mux_002:src_valid -> axi_dmac_0_s_axi_wr_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_002_src_data;                                                                    // cmd_mux_002:src_data -> axi_dmac_0_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                   // axi_dmac_0_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [15:0] cmd_mux_002_src_channel;                                                                 // cmd_mux_002:src_channel -> axi_dmac_0_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                           // cmd_mux_002:src_startofpacket -> axi_dmac_0_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                             // cmd_mux_002:src_endofpacket -> axi_dmac_0_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          axi_dmac_0_s_axi_wr_burst_adapter_source0_valid;                                         // axi_dmac_0_s_axi_wr_burst_adapter:source0_valid -> axi_dmac_0_s_axi_agent:write_cp_valid
	wire  [138:0] axi_dmac_0_s_axi_wr_burst_adapter_source0_data;                                          // axi_dmac_0_s_axi_wr_burst_adapter:source0_data -> axi_dmac_0_s_axi_agent:write_cp_data
	wire          axi_dmac_0_s_axi_wr_burst_adapter_source0_ready;                                         // axi_dmac_0_s_axi_agent:write_cp_ready -> axi_dmac_0_s_axi_wr_burst_adapter:source0_ready
	wire   [15:0] axi_dmac_0_s_axi_wr_burst_adapter_source0_channel;                                       // axi_dmac_0_s_axi_wr_burst_adapter:source0_channel -> axi_dmac_0_s_axi_agent:write_cp_channel
	wire          axi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket;                                 // axi_dmac_0_s_axi_wr_burst_adapter:source0_startofpacket -> axi_dmac_0_s_axi_agent:write_cp_startofpacket
	wire          axi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket;                                   // axi_dmac_0_s_axi_wr_burst_adapter:source0_endofpacket -> axi_dmac_0_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                   // cmd_mux_003:src_valid -> axi_dmac_0_s_axi_rd_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_003_src_data;                                                                    // cmd_mux_003:src_data -> axi_dmac_0_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                   // axi_dmac_0_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [15:0] cmd_mux_003_src_channel;                                                                 // cmd_mux_003:src_channel -> axi_dmac_0_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                           // cmd_mux_003:src_startofpacket -> axi_dmac_0_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                             // cmd_mux_003:src_endofpacket -> axi_dmac_0_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          axi_dmac_0_s_axi_rd_burst_adapter_source0_valid;                                         // axi_dmac_0_s_axi_rd_burst_adapter:source0_valid -> axi_dmac_0_s_axi_agent:read_cp_valid
	wire  [138:0] axi_dmac_0_s_axi_rd_burst_adapter_source0_data;                                          // axi_dmac_0_s_axi_rd_burst_adapter:source0_data -> axi_dmac_0_s_axi_agent:read_cp_data
	wire          axi_dmac_0_s_axi_rd_burst_adapter_source0_ready;                                         // axi_dmac_0_s_axi_agent:read_cp_ready -> axi_dmac_0_s_axi_rd_burst_adapter:source0_ready
	wire   [15:0] axi_dmac_0_s_axi_rd_burst_adapter_source0_channel;                                       // axi_dmac_0_s_axi_rd_burst_adapter:source0_channel -> axi_dmac_0_s_axi_agent:read_cp_channel
	wire          axi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket;                                 // axi_dmac_0_s_axi_rd_burst_adapter:source0_startofpacket -> axi_dmac_0_s_axi_agent:read_cp_startofpacket
	wire          axi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket;                                   // axi_dmac_0_s_axi_rd_burst_adapter:source0_endofpacket -> axi_dmac_0_s_axi_agent:read_cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                   // cmd_mux_004:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_004_src_data;                                                                    // cmd_mux_004:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                   // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [15:0] cmd_mux_004_src_channel;                                                                 // cmd_mux_004:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                           // cmd_mux_004:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                             // cmd_mux_004:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                                 // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [138:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                                  // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                                 // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [15:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                               // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                         // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                           // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                   // cmd_mux_005:src_valid -> sys_id_control_slave_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_005_src_data;                                                                    // cmd_mux_005:src_data -> sys_id_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                   // sys_id_control_slave_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [15:0] cmd_mux_005_src_channel;                                                                 // cmd_mux_005:src_channel -> sys_id_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                           // cmd_mux_005:src_startofpacket -> sys_id_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                             // cmd_mux_005:src_endofpacket -> sys_id_control_slave_burst_adapter:sink0_endofpacket
	wire          sys_id_control_slave_burst_adapter_source0_valid;                                        // sys_id_control_slave_burst_adapter:source0_valid -> sys_id_control_slave_agent:cp_valid
	wire  [138:0] sys_id_control_slave_burst_adapter_source0_data;                                         // sys_id_control_slave_burst_adapter:source0_data -> sys_id_control_slave_agent:cp_data
	wire          sys_id_control_slave_burst_adapter_source0_ready;                                        // sys_id_control_slave_agent:cp_ready -> sys_id_control_slave_burst_adapter:source0_ready
	wire   [15:0] sys_id_control_slave_burst_adapter_source0_channel;                                      // sys_id_control_slave_burst_adapter:source0_channel -> sys_id_control_slave_agent:cp_channel
	wire          sys_id_control_slave_burst_adapter_source0_startofpacket;                                // sys_id_control_slave_burst_adapter:source0_startofpacket -> sys_id_control_slave_agent:cp_startofpacket
	wire          sys_id_control_slave_burst_adapter_source0_endofpacket;                                  // sys_id_control_slave_burst_adapter:source0_endofpacket -> sys_id_control_slave_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                   // cmd_mux_006:src_valid -> pb_s1_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_006_src_data;                                                                    // cmd_mux_006:src_data -> pb_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                   // pb_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [15:0] cmd_mux_006_src_channel;                                                                 // cmd_mux_006:src_channel -> pb_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                           // cmd_mux_006:src_startofpacket -> pb_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                             // cmd_mux_006:src_endofpacket -> pb_s1_burst_adapter:sink0_endofpacket
	wire          pb_s1_burst_adapter_source0_valid;                                                       // pb_s1_burst_adapter:source0_valid -> pb_s1_agent:cp_valid
	wire  [138:0] pb_s1_burst_adapter_source0_data;                                                        // pb_s1_burst_adapter:source0_data -> pb_s1_agent:cp_data
	wire          pb_s1_burst_adapter_source0_ready;                                                       // pb_s1_agent:cp_ready -> pb_s1_burst_adapter:source0_ready
	wire   [15:0] pb_s1_burst_adapter_source0_channel;                                                     // pb_s1_burst_adapter:source0_channel -> pb_s1_agent:cp_channel
	wire          pb_s1_burst_adapter_source0_startofpacket;                                               // pb_s1_burst_adapter:source0_startofpacket -> pb_s1_agent:cp_startofpacket
	wire          pb_s1_burst_adapter_source0_endofpacket;                                                 // pb_s1_burst_adapter:source0_endofpacket -> pb_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                   // cmd_mux_007:src_valid -> dipsw_s1_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_007_src_data;                                                                    // cmd_mux_007:src_data -> dipsw_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                   // dipsw_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [15:0] cmd_mux_007_src_channel;                                                                 // cmd_mux_007:src_channel -> dipsw_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                           // cmd_mux_007:src_startofpacket -> dipsw_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                             // cmd_mux_007:src_endofpacket -> dipsw_s1_burst_adapter:sink0_endofpacket
	wire          dipsw_s1_burst_adapter_source0_valid;                                                    // dipsw_s1_burst_adapter:source0_valid -> dipsw_s1_agent:cp_valid
	wire  [138:0] dipsw_s1_burst_adapter_source0_data;                                                     // dipsw_s1_burst_adapter:source0_data -> dipsw_s1_agent:cp_data
	wire          dipsw_s1_burst_adapter_source0_ready;                                                    // dipsw_s1_agent:cp_ready -> dipsw_s1_burst_adapter:source0_ready
	wire   [15:0] dipsw_s1_burst_adapter_source0_channel;                                                  // dipsw_s1_burst_adapter:source0_channel -> dipsw_s1_agent:cp_channel
	wire          dipsw_s1_burst_adapter_source0_startofpacket;                                            // dipsw_s1_burst_adapter:source0_startofpacket -> dipsw_s1_agent:cp_startofpacket
	wire          dipsw_s1_burst_adapter_source0_endofpacket;                                              // dipsw_s1_burst_adapter:source0_endofpacket -> dipsw_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                   // cmd_mux_008:src_valid -> rgb_led0_s1_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_008_src_data;                                                                    // cmd_mux_008:src_data -> rgb_led0_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                   // rgb_led0_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [15:0] cmd_mux_008_src_channel;                                                                 // cmd_mux_008:src_channel -> rgb_led0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                           // cmd_mux_008:src_startofpacket -> rgb_led0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                             // cmd_mux_008:src_endofpacket -> rgb_led0_s1_burst_adapter:sink0_endofpacket
	wire          rgb_led0_s1_burst_adapter_source0_valid;                                                 // rgb_led0_s1_burst_adapter:source0_valid -> rgb_led0_s1_agent:cp_valid
	wire  [138:0] rgb_led0_s1_burst_adapter_source0_data;                                                  // rgb_led0_s1_burst_adapter:source0_data -> rgb_led0_s1_agent:cp_data
	wire          rgb_led0_s1_burst_adapter_source0_ready;                                                 // rgb_led0_s1_agent:cp_ready -> rgb_led0_s1_burst_adapter:source0_ready
	wire   [15:0] rgb_led0_s1_burst_adapter_source0_channel;                                               // rgb_led0_s1_burst_adapter:source0_channel -> rgb_led0_s1_agent:cp_channel
	wire          rgb_led0_s1_burst_adapter_source0_startofpacket;                                         // rgb_led0_s1_burst_adapter:source0_startofpacket -> rgb_led0_s1_agent:cp_startofpacket
	wire          rgb_led0_s1_burst_adapter_source0_endofpacket;                                           // rgb_led0_s1_burst_adapter:source0_endofpacket -> rgb_led0_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                   // cmd_mux_009:src_valid -> rgb_led1_s1_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_009_src_data;                                                                    // cmd_mux_009:src_data -> rgb_led1_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                   // rgb_led1_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [15:0] cmd_mux_009_src_channel;                                                                 // cmd_mux_009:src_channel -> rgb_led1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                           // cmd_mux_009:src_startofpacket -> rgb_led1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                             // cmd_mux_009:src_endofpacket -> rgb_led1_s1_burst_adapter:sink0_endofpacket
	wire          rgb_led1_s1_burst_adapter_source0_valid;                                                 // rgb_led1_s1_burst_adapter:source0_valid -> rgb_led1_s1_agent:cp_valid
	wire  [138:0] rgb_led1_s1_burst_adapter_source0_data;                                                  // rgb_led1_s1_burst_adapter:source0_data -> rgb_led1_s1_agent:cp_data
	wire          rgb_led1_s1_burst_adapter_source0_ready;                                                 // rgb_led1_s1_agent:cp_ready -> rgb_led1_s1_burst_adapter:source0_ready
	wire   [15:0] rgb_led1_s1_burst_adapter_source0_channel;                                               // rgb_led1_s1_burst_adapter:source0_channel -> rgb_led1_s1_agent:cp_channel
	wire          rgb_led1_s1_burst_adapter_source0_startofpacket;                                         // rgb_led1_s1_burst_adapter:source0_startofpacket -> rgb_led1_s1_agent:cp_startofpacket
	wire          rgb_led1_s1_burst_adapter_source0_endofpacket;                                           // rgb_led1_s1_burst_adapter:source0_endofpacket -> rgb_led1_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                   // cmd_mux_010:src_valid -> rgb_led2_s1_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_010_src_data;                                                                    // cmd_mux_010:src_data -> rgb_led2_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                   // rgb_led2_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [15:0] cmd_mux_010_src_channel;                                                                 // cmd_mux_010:src_channel -> rgb_led2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                           // cmd_mux_010:src_startofpacket -> rgb_led2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                             // cmd_mux_010:src_endofpacket -> rgb_led2_s1_burst_adapter:sink0_endofpacket
	wire          rgb_led2_s1_burst_adapter_source0_valid;                                                 // rgb_led2_s1_burst_adapter:source0_valid -> rgb_led2_s1_agent:cp_valid
	wire  [138:0] rgb_led2_s1_burst_adapter_source0_data;                                                  // rgb_led2_s1_burst_adapter:source0_data -> rgb_led2_s1_agent:cp_data
	wire          rgb_led2_s1_burst_adapter_source0_ready;                                                 // rgb_led2_s1_agent:cp_ready -> rgb_led2_s1_burst_adapter:source0_ready
	wire   [15:0] rgb_led2_s1_burst_adapter_source0_channel;                                               // rgb_led2_s1_burst_adapter:source0_channel -> rgb_led2_s1_agent:cp_channel
	wire          rgb_led2_s1_burst_adapter_source0_startofpacket;                                         // rgb_led2_s1_burst_adapter:source0_startofpacket -> rgb_led2_s1_agent:cp_startofpacket
	wire          rgb_led2_s1_burst_adapter_source0_endofpacket;                                           // rgb_led2_s1_burst_adapter:source0_endofpacket -> rgb_led2_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                   // cmd_mux_011:src_valid -> rgb_led3_s1_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_011_src_data;                                                                    // cmd_mux_011:src_data -> rgb_led3_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                   // rgb_led3_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [15:0] cmd_mux_011_src_channel;                                                                 // cmd_mux_011:src_channel -> rgb_led3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                           // cmd_mux_011:src_startofpacket -> rgb_led3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                             // cmd_mux_011:src_endofpacket -> rgb_led3_s1_burst_adapter:sink0_endofpacket
	wire          rgb_led3_s1_burst_adapter_source0_valid;                                                 // rgb_led3_s1_burst_adapter:source0_valid -> rgb_led3_s1_agent:cp_valid
	wire  [138:0] rgb_led3_s1_burst_adapter_source0_data;                                                  // rgb_led3_s1_burst_adapter:source0_data -> rgb_led3_s1_agent:cp_data
	wire          rgb_led3_s1_burst_adapter_source0_ready;                                                 // rgb_led3_s1_agent:cp_ready -> rgb_led3_s1_burst_adapter:source0_ready
	wire   [15:0] rgb_led3_s1_burst_adapter_source0_channel;                                               // rgb_led3_s1_burst_adapter:source0_channel -> rgb_led3_s1_agent:cp_channel
	wire          rgb_led3_s1_burst_adapter_source0_startofpacket;                                         // rgb_led3_s1_burst_adapter:source0_startofpacket -> rgb_led3_s1_agent:cp_startofpacket
	wire          rgb_led3_s1_burst_adapter_source0_endofpacket;                                           // rgb_led3_s1_burst_adapter:source0_endofpacket -> rgb_led3_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                   // cmd_mux_012:src_valid -> emif_ph2_0_s0_axil_wr_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_012_src_data;                                                                    // cmd_mux_012:src_data -> emif_ph2_0_s0_axil_wr_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                   // emif_ph2_0_s0_axil_wr_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [15:0] cmd_mux_012_src_channel;                                                                 // cmd_mux_012:src_channel -> emif_ph2_0_s0_axil_wr_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                           // cmd_mux_012:src_startofpacket -> emif_ph2_0_s0_axil_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                             // cmd_mux_012:src_endofpacket -> emif_ph2_0_s0_axil_wr_burst_adapter:sink0_endofpacket
	wire          emif_ph2_0_s0_axil_wr_burst_adapter_source0_valid;                                       // emif_ph2_0_s0_axil_wr_burst_adapter:source0_valid -> emif_ph2_0_s0_axil_agent:write_cp_valid
	wire  [138:0] emif_ph2_0_s0_axil_wr_burst_adapter_source0_data;                                        // emif_ph2_0_s0_axil_wr_burst_adapter:source0_data -> emif_ph2_0_s0_axil_agent:write_cp_data
	wire          emif_ph2_0_s0_axil_wr_burst_adapter_source0_ready;                                       // emif_ph2_0_s0_axil_agent:write_cp_ready -> emif_ph2_0_s0_axil_wr_burst_adapter:source0_ready
	wire   [15:0] emif_ph2_0_s0_axil_wr_burst_adapter_source0_channel;                                     // emif_ph2_0_s0_axil_wr_burst_adapter:source0_channel -> emif_ph2_0_s0_axil_agent:write_cp_channel
	wire          emif_ph2_0_s0_axil_wr_burst_adapter_source0_startofpacket;                               // emif_ph2_0_s0_axil_wr_burst_adapter:source0_startofpacket -> emif_ph2_0_s0_axil_agent:write_cp_startofpacket
	wire          emif_ph2_0_s0_axil_wr_burst_adapter_source0_endofpacket;                                 // emif_ph2_0_s0_axil_wr_burst_adapter:source0_endofpacket -> emif_ph2_0_s0_axil_agent:write_cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                                   // cmd_mux_013:src_valid -> emif_ph2_0_s0_axil_rd_burst_adapter:sink0_valid
	wire  [138:0] cmd_mux_013_src_data;                                                                    // cmd_mux_013:src_data -> emif_ph2_0_s0_axil_rd_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                                   // emif_ph2_0_s0_axil_rd_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [15:0] cmd_mux_013_src_channel;                                                                 // cmd_mux_013:src_channel -> emif_ph2_0_s0_axil_rd_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                           // cmd_mux_013:src_startofpacket -> emif_ph2_0_s0_axil_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                             // cmd_mux_013:src_endofpacket -> emif_ph2_0_s0_axil_rd_burst_adapter:sink0_endofpacket
	wire          emif_ph2_0_s0_axil_rd_burst_adapter_source0_valid;                                       // emif_ph2_0_s0_axil_rd_burst_adapter:source0_valid -> emif_ph2_0_s0_axil_agent:read_cp_valid
	wire  [138:0] emif_ph2_0_s0_axil_rd_burst_adapter_source0_data;                                        // emif_ph2_0_s0_axil_rd_burst_adapter:source0_data -> emif_ph2_0_s0_axil_agent:read_cp_data
	wire          emif_ph2_0_s0_axil_rd_burst_adapter_source0_ready;                                       // emif_ph2_0_s0_axil_agent:read_cp_ready -> emif_ph2_0_s0_axil_rd_burst_adapter:source0_ready
	wire   [15:0] emif_ph2_0_s0_axil_rd_burst_adapter_source0_channel;                                     // emif_ph2_0_s0_axil_rd_burst_adapter:source0_channel -> emif_ph2_0_s0_axil_agent:read_cp_channel
	wire          emif_ph2_0_s0_axil_rd_burst_adapter_source0_startofpacket;                               // emif_ph2_0_s0_axil_rd_burst_adapter:source0_startofpacket -> emif_ph2_0_s0_axil_agent:read_cp_startofpacket
	wire          emif_ph2_0_s0_axil_rd_burst_adapter_source0_endofpacket;                                 // emif_ph2_0_s0_axil_rd_burst_adapter:source0_endofpacket -> emif_ph2_0_s0_axil_agent:read_cp_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                // cmd_demux_002:src1_valid -> cmd_mux_002:sink0_valid
	wire  [138:0] cmd_demux_002_src1_data;                                                                 // cmd_demux_002:src1_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src1_ready;                                                                // cmd_mux_002:sink0_ready -> cmd_demux_002:src1_ready
	wire   [15:0] cmd_demux_002_src1_channel;                                                              // cmd_demux_002:src1_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                        // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                          // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                // cmd_demux_002:src2_valid -> cmd_mux_004:sink0_valid
	wire  [138:0] cmd_demux_002_src2_data;                                                                 // cmd_demux_002:src2_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                // cmd_mux_004:sink0_ready -> cmd_demux_002:src2_ready
	wire   [15:0] cmd_demux_002_src2_channel;                                                              // cmd_demux_002:src2_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                        // cmd_demux_002:src2_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                          // cmd_demux_002:src2_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                // cmd_demux_002:src3_valid -> cmd_mux_005:sink0_valid
	wire  [138:0] cmd_demux_002_src3_data;                                                                 // cmd_demux_002:src3_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                // cmd_mux_005:sink0_ready -> cmd_demux_002:src3_ready
	wire   [15:0] cmd_demux_002_src3_channel;                                                              // cmd_demux_002:src3_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                        // cmd_demux_002:src3_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                          // cmd_demux_002:src3_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                // cmd_demux_002:src4_valid -> cmd_mux_006:sink0_valid
	wire  [138:0] cmd_demux_002_src4_data;                                                                 // cmd_demux_002:src4_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src4_ready;                                                                // cmd_mux_006:sink0_ready -> cmd_demux_002:src4_ready
	wire   [15:0] cmd_demux_002_src4_channel;                                                              // cmd_demux_002:src4_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                        // cmd_demux_002:src4_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                          // cmd_demux_002:src4_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                // cmd_demux_002:src5_valid -> cmd_mux_007:sink0_valid
	wire  [138:0] cmd_demux_002_src5_data;                                                                 // cmd_demux_002:src5_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_002_src5_ready;                                                                // cmd_mux_007:sink0_ready -> cmd_demux_002:src5_ready
	wire   [15:0] cmd_demux_002_src5_channel;                                                              // cmd_demux_002:src5_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_002_src5_startofpacket;                                                        // cmd_demux_002:src5_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                          // cmd_demux_002:src5_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                // cmd_demux_002:src6_valid -> cmd_mux_008:sink0_valid
	wire  [138:0] cmd_demux_002_src6_data;                                                                 // cmd_demux_002:src6_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_002_src6_ready;                                                                // cmd_mux_008:sink0_ready -> cmd_demux_002:src6_ready
	wire   [15:0] cmd_demux_002_src6_channel;                                                              // cmd_demux_002:src6_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_002_src6_startofpacket;                                                        // cmd_demux_002:src6_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                          // cmd_demux_002:src6_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_002_src7_valid;                                                                // cmd_demux_002:src7_valid -> cmd_mux_009:sink0_valid
	wire  [138:0] cmd_demux_002_src7_data;                                                                 // cmd_demux_002:src7_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_002_src7_ready;                                                                // cmd_mux_009:sink0_ready -> cmd_demux_002:src7_ready
	wire   [15:0] cmd_demux_002_src7_channel;                                                              // cmd_demux_002:src7_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                        // cmd_demux_002:src7_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                          // cmd_demux_002:src7_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                                // cmd_demux_002:src8_valid -> cmd_mux_010:sink0_valid
	wire  [138:0] cmd_demux_002_src8_data;                                                                 // cmd_demux_002:src8_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_002_src8_ready;                                                                // cmd_mux_010:sink0_ready -> cmd_demux_002:src8_ready
	wire   [15:0] cmd_demux_002_src8_channel;                                                              // cmd_demux_002:src8_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_002_src8_startofpacket;                                                        // cmd_demux_002:src8_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                          // cmd_demux_002:src8_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_002_src9_valid;                                                                // cmd_demux_002:src9_valid -> cmd_mux_011:sink0_valid
	wire  [138:0] cmd_demux_002_src9_data;                                                                 // cmd_demux_002:src9_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_002_src9_ready;                                                                // cmd_mux_011:sink0_ready -> cmd_demux_002:src9_ready
	wire   [15:0] cmd_demux_002_src9_channel;                                                              // cmd_demux_002:src9_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_002_src9_startofpacket;                                                        // cmd_demux_002:src9_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                          // cmd_demux_002:src9_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_002_src10_valid;                                                               // cmd_demux_002:src10_valid -> cmd_mux_012:sink0_valid
	wire  [138:0] cmd_demux_002_src10_data;                                                                // cmd_demux_002:src10_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_002_src10_ready;                                                               // cmd_mux_012:sink0_ready -> cmd_demux_002:src10_ready
	wire   [15:0] cmd_demux_002_src10_channel;                                                             // cmd_demux_002:src10_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_002_src10_startofpacket;                                                       // cmd_demux_002:src10_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                         // cmd_demux_002:src10_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                // cmd_demux_003:src1_valid -> cmd_mux_003:sink0_valid
	wire  [138:0] cmd_demux_003_src1_data;                                                                 // cmd_demux_003:src1_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_003_src1_ready;                                                                // cmd_mux_003:sink0_ready -> cmd_demux_003:src1_ready
	wire   [15:0] cmd_demux_003_src1_channel;                                                              // cmd_demux_003:src1_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_003_src1_startofpacket;                                                        // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                          // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                // cmd_demux_003:src2_valid -> cmd_mux_004:sink1_valid
	wire  [138:0] cmd_demux_003_src2_data;                                                                 // cmd_demux_003:src2_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src2_ready;                                                                // cmd_mux_004:sink1_ready -> cmd_demux_003:src2_ready
	wire   [15:0] cmd_demux_003_src2_channel;                                                              // cmd_demux_003:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                                        // cmd_demux_003:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                          // cmd_demux_003:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                // cmd_demux_003:src3_valid -> cmd_mux_005:sink1_valid
	wire  [138:0] cmd_demux_003_src3_data;                                                                 // cmd_demux_003:src3_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_003_src3_ready;                                                                // cmd_mux_005:sink1_ready -> cmd_demux_003:src3_ready
	wire   [15:0] cmd_demux_003_src3_channel;                                                              // cmd_demux_003:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                                        // cmd_demux_003:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                          // cmd_demux_003:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                // cmd_demux_003:src4_valid -> cmd_mux_006:sink1_valid
	wire  [138:0] cmd_demux_003_src4_data;                                                                 // cmd_demux_003:src4_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_003_src4_ready;                                                                // cmd_mux_006:sink1_ready -> cmd_demux_003:src4_ready
	wire   [15:0] cmd_demux_003_src4_channel;                                                              // cmd_demux_003:src4_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                                        // cmd_demux_003:src4_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                          // cmd_demux_003:src4_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                                // cmd_demux_003:src5_valid -> cmd_mux_007:sink1_valid
	wire  [138:0] cmd_demux_003_src5_data;                                                                 // cmd_demux_003:src5_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_003_src5_ready;                                                                // cmd_mux_007:sink1_ready -> cmd_demux_003:src5_ready
	wire   [15:0] cmd_demux_003_src5_channel;                                                              // cmd_demux_003:src5_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_003_src5_startofpacket;                                                        // cmd_demux_003:src5_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                          // cmd_demux_003:src5_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_003_src6_valid;                                                                // cmd_demux_003:src6_valid -> cmd_mux_008:sink1_valid
	wire  [138:0] cmd_demux_003_src6_data;                                                                 // cmd_demux_003:src6_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_003_src6_ready;                                                                // cmd_mux_008:sink1_ready -> cmd_demux_003:src6_ready
	wire   [15:0] cmd_demux_003_src6_channel;                                                              // cmd_demux_003:src6_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_003_src6_startofpacket;                                                        // cmd_demux_003:src6_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                          // cmd_demux_003:src6_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_003_src7_valid;                                                                // cmd_demux_003:src7_valid -> cmd_mux_009:sink1_valid
	wire  [138:0] cmd_demux_003_src7_data;                                                                 // cmd_demux_003:src7_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_003_src7_ready;                                                                // cmd_mux_009:sink1_ready -> cmd_demux_003:src7_ready
	wire   [15:0] cmd_demux_003_src7_channel;                                                              // cmd_demux_003:src7_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_003_src7_startofpacket;                                                        // cmd_demux_003:src7_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                          // cmd_demux_003:src7_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_003_src8_valid;                                                                // cmd_demux_003:src8_valid -> cmd_mux_010:sink1_valid
	wire  [138:0] cmd_demux_003_src8_data;                                                                 // cmd_demux_003:src8_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_003_src8_ready;                                                                // cmd_mux_010:sink1_ready -> cmd_demux_003:src8_ready
	wire   [15:0] cmd_demux_003_src8_channel;                                                              // cmd_demux_003:src8_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_003_src8_startofpacket;                                                        // cmd_demux_003:src8_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                          // cmd_demux_003:src8_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_003_src9_valid;                                                                // cmd_demux_003:src9_valid -> cmd_mux_011:sink1_valid
	wire  [138:0] cmd_demux_003_src9_data;                                                                 // cmd_demux_003:src9_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_003_src9_ready;                                                                // cmd_mux_011:sink1_ready -> cmd_demux_003:src9_ready
	wire   [15:0] cmd_demux_003_src9_channel;                                                              // cmd_demux_003:src9_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_003_src9_startofpacket;                                                        // cmd_demux_003:src9_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                          // cmd_demux_003:src9_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_003_src10_valid;                                                               // cmd_demux_003:src10_valid -> cmd_mux_013:sink0_valid
	wire  [138:0] cmd_demux_003_src10_data;                                                                // cmd_demux_003:src10_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_003_src10_ready;                                                               // cmd_mux_013:sink0_ready -> cmd_demux_003:src10_ready
	wire   [15:0] cmd_demux_003_src10_channel;                                                             // cmd_demux_003:src10_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_003_src10_startofpacket;                                                       // cmd_demux_003:src10_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                         // cmd_demux_003:src10_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_004_src2_valid;                                                                // cmd_demux_004:src2_valid -> cmd_mux_002:sink1_valid
	wire  [138:0] cmd_demux_004_src2_data;                                                                 // cmd_demux_004:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_004_src2_ready;                                                                // cmd_mux_002:sink1_ready -> cmd_demux_004:src2_ready
	wire   [15:0] cmd_demux_004_src2_channel;                                                              // cmd_demux_004:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_004_src2_startofpacket;                                                        // cmd_demux_004:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                          // cmd_demux_004:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_004_src3_valid;                                                                // cmd_demux_004:src3_valid -> cmd_mux_003:sink1_valid
	wire  [138:0] cmd_demux_004_src3_data;                                                                 // cmd_demux_004:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_004_src3_ready;                                                                // cmd_mux_003:sink1_ready -> cmd_demux_004:src3_ready
	wire   [15:0] cmd_demux_004_src3_channel;                                                              // cmd_demux_004:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_004_src3_startofpacket;                                                        // cmd_demux_004:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                          // cmd_demux_004:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_004_src4_valid;                                                                // cmd_demux_004:src4_valid -> cmd_mux_004:sink2_valid
	wire  [138:0] cmd_demux_004_src4_data;                                                                 // cmd_demux_004:src4_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_004_src4_ready;                                                                // cmd_mux_004:sink2_ready -> cmd_demux_004:src4_ready
	wire   [15:0] cmd_demux_004_src4_channel;                                                              // cmd_demux_004:src4_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_004_src4_startofpacket;                                                        // cmd_demux_004:src4_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                          // cmd_demux_004:src4_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_004_src5_valid;                                                                // cmd_demux_004:src5_valid -> cmd_mux_005:sink2_valid
	wire  [138:0] cmd_demux_004_src5_data;                                                                 // cmd_demux_004:src5_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_004_src5_ready;                                                                // cmd_mux_005:sink2_ready -> cmd_demux_004:src5_ready
	wire   [15:0] cmd_demux_004_src5_channel;                                                              // cmd_demux_004:src5_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_004_src5_startofpacket;                                                        // cmd_demux_004:src5_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_004_src5_endofpacket;                                                          // cmd_demux_004:src5_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src6_valid;                                                                // cmd_demux_004:src6_valid -> cmd_mux_006:sink2_valid
	wire  [138:0] cmd_demux_004_src6_data;                                                                 // cmd_demux_004:src6_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_004_src6_ready;                                                                // cmd_mux_006:sink2_ready -> cmd_demux_004:src6_ready
	wire   [15:0] cmd_demux_004_src6_channel;                                                              // cmd_demux_004:src6_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_004_src6_startofpacket;                                                        // cmd_demux_004:src6_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_004_src6_endofpacket;                                                          // cmd_demux_004:src6_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_004_src7_valid;                                                                // cmd_demux_004:src7_valid -> cmd_mux_007:sink2_valid
	wire  [138:0] cmd_demux_004_src7_data;                                                                 // cmd_demux_004:src7_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_004_src7_ready;                                                                // cmd_mux_007:sink2_ready -> cmd_demux_004:src7_ready
	wire   [15:0] cmd_demux_004_src7_channel;                                                              // cmd_demux_004:src7_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_004_src7_startofpacket;                                                        // cmd_demux_004:src7_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_004_src7_endofpacket;                                                          // cmd_demux_004:src7_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_004_src8_valid;                                                                // cmd_demux_004:src8_valid -> cmd_mux_008:sink2_valid
	wire  [138:0] cmd_demux_004_src8_data;                                                                 // cmd_demux_004:src8_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_004_src8_ready;                                                                // cmd_mux_008:sink2_ready -> cmd_demux_004:src8_ready
	wire   [15:0] cmd_demux_004_src8_channel;                                                              // cmd_demux_004:src8_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_004_src8_startofpacket;                                                        // cmd_demux_004:src8_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_004_src8_endofpacket;                                                          // cmd_demux_004:src8_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_004_src9_valid;                                                                // cmd_demux_004:src9_valid -> cmd_mux_009:sink2_valid
	wire  [138:0] cmd_demux_004_src9_data;                                                                 // cmd_demux_004:src9_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_004_src9_ready;                                                                // cmd_mux_009:sink2_ready -> cmd_demux_004:src9_ready
	wire   [15:0] cmd_demux_004_src9_channel;                                                              // cmd_demux_004:src9_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_004_src9_startofpacket;                                                        // cmd_demux_004:src9_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_004_src9_endofpacket;                                                          // cmd_demux_004:src9_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_004_src10_valid;                                                               // cmd_demux_004:src10_valid -> cmd_mux_010:sink2_valid
	wire  [138:0] cmd_demux_004_src10_data;                                                                // cmd_demux_004:src10_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_004_src10_ready;                                                               // cmd_mux_010:sink2_ready -> cmd_demux_004:src10_ready
	wire   [15:0] cmd_demux_004_src10_channel;                                                             // cmd_demux_004:src10_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_004_src10_startofpacket;                                                       // cmd_demux_004:src10_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_004_src10_endofpacket;                                                         // cmd_demux_004:src10_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_004_src11_valid;                                                               // cmd_demux_004:src11_valid -> cmd_mux_011:sink2_valid
	wire  [138:0] cmd_demux_004_src11_data;                                                                // cmd_demux_004:src11_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_004_src11_ready;                                                               // cmd_mux_011:sink2_ready -> cmd_demux_004:src11_ready
	wire   [15:0] cmd_demux_004_src11_channel;                                                             // cmd_demux_004:src11_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_004_src11_startofpacket;                                                       // cmd_demux_004:src11_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_004_src11_endofpacket;                                                         // cmd_demux_004:src11_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                // cmd_demux_005:src0_valid -> cmd_mux_004:sink3_valid
	wire  [138:0] cmd_demux_005_src0_data;                                                                 // cmd_demux_005:src0_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_005_src0_ready;                                                                // cmd_mux_004:sink3_ready -> cmd_demux_005:src0_ready
	wire   [15:0] cmd_demux_005_src0_channel;                                                              // cmd_demux_005:src0_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_005_src0_startofpacket;                                                        // cmd_demux_005:src0_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                          // cmd_demux_005:src0_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                // cmd_demux_005:src1_valid -> cmd_mux_005:sink3_valid
	wire  [138:0] cmd_demux_005_src1_data;                                                                 // cmd_demux_005:src1_data -> cmd_mux_005:sink3_data
	wire          cmd_demux_005_src1_ready;                                                                // cmd_mux_005:sink3_ready -> cmd_demux_005:src1_ready
	wire   [15:0] cmd_demux_005_src1_channel;                                                              // cmd_demux_005:src1_channel -> cmd_mux_005:sink3_channel
	wire          cmd_demux_005_src1_startofpacket;                                                        // cmd_demux_005:src1_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                          // cmd_demux_005:src1_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_005_src2_valid;                                                                // cmd_demux_005:src2_valid -> cmd_mux_006:sink3_valid
	wire  [138:0] cmd_demux_005_src2_data;                                                                 // cmd_demux_005:src2_data -> cmd_mux_006:sink3_data
	wire          cmd_demux_005_src2_ready;                                                                // cmd_mux_006:sink3_ready -> cmd_demux_005:src2_ready
	wire   [15:0] cmd_demux_005_src2_channel;                                                              // cmd_demux_005:src2_channel -> cmd_mux_006:sink3_channel
	wire          cmd_demux_005_src2_startofpacket;                                                        // cmd_demux_005:src2_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                                          // cmd_demux_005:src2_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          cmd_demux_005_src3_valid;                                                                // cmd_demux_005:src3_valid -> cmd_mux_007:sink3_valid
	wire  [138:0] cmd_demux_005_src3_data;                                                                 // cmd_demux_005:src3_data -> cmd_mux_007:sink3_data
	wire          cmd_demux_005_src3_ready;                                                                // cmd_mux_007:sink3_ready -> cmd_demux_005:src3_ready
	wire   [15:0] cmd_demux_005_src3_channel;                                                              // cmd_demux_005:src3_channel -> cmd_mux_007:sink3_channel
	wire          cmd_demux_005_src3_startofpacket;                                                        // cmd_demux_005:src3_startofpacket -> cmd_mux_007:sink3_startofpacket
	wire          cmd_demux_005_src3_endofpacket;                                                          // cmd_demux_005:src3_endofpacket -> cmd_mux_007:sink3_endofpacket
	wire          cmd_demux_005_src4_valid;                                                                // cmd_demux_005:src4_valid -> cmd_mux_008:sink3_valid
	wire  [138:0] cmd_demux_005_src4_data;                                                                 // cmd_demux_005:src4_data -> cmd_mux_008:sink3_data
	wire          cmd_demux_005_src4_ready;                                                                // cmd_mux_008:sink3_ready -> cmd_demux_005:src4_ready
	wire   [15:0] cmd_demux_005_src4_channel;                                                              // cmd_demux_005:src4_channel -> cmd_mux_008:sink3_channel
	wire          cmd_demux_005_src4_startofpacket;                                                        // cmd_demux_005:src4_startofpacket -> cmd_mux_008:sink3_startofpacket
	wire          cmd_demux_005_src4_endofpacket;                                                          // cmd_demux_005:src4_endofpacket -> cmd_mux_008:sink3_endofpacket
	wire          cmd_demux_005_src5_valid;                                                                // cmd_demux_005:src5_valid -> cmd_mux_009:sink3_valid
	wire  [138:0] cmd_demux_005_src5_data;                                                                 // cmd_demux_005:src5_data -> cmd_mux_009:sink3_data
	wire          cmd_demux_005_src5_ready;                                                                // cmd_mux_009:sink3_ready -> cmd_demux_005:src5_ready
	wire   [15:0] cmd_demux_005_src5_channel;                                                              // cmd_demux_005:src5_channel -> cmd_mux_009:sink3_channel
	wire          cmd_demux_005_src5_startofpacket;                                                        // cmd_demux_005:src5_startofpacket -> cmd_mux_009:sink3_startofpacket
	wire          cmd_demux_005_src5_endofpacket;                                                          // cmd_demux_005:src5_endofpacket -> cmd_mux_009:sink3_endofpacket
	wire          cmd_demux_005_src6_valid;                                                                // cmd_demux_005:src6_valid -> cmd_mux_010:sink3_valid
	wire  [138:0] cmd_demux_005_src6_data;                                                                 // cmd_demux_005:src6_data -> cmd_mux_010:sink3_data
	wire          cmd_demux_005_src6_ready;                                                                // cmd_mux_010:sink3_ready -> cmd_demux_005:src6_ready
	wire   [15:0] cmd_demux_005_src6_channel;                                                              // cmd_demux_005:src6_channel -> cmd_mux_010:sink3_channel
	wire          cmd_demux_005_src6_startofpacket;                                                        // cmd_demux_005:src6_startofpacket -> cmd_mux_010:sink3_startofpacket
	wire          cmd_demux_005_src6_endofpacket;                                                          // cmd_demux_005:src6_endofpacket -> cmd_mux_010:sink3_endofpacket
	wire          cmd_demux_005_src7_valid;                                                                // cmd_demux_005:src7_valid -> cmd_mux_011:sink3_valid
	wire  [138:0] cmd_demux_005_src7_data;                                                                 // cmd_demux_005:src7_data -> cmd_mux_011:sink3_data
	wire          cmd_demux_005_src7_ready;                                                                // cmd_mux_011:sink3_ready -> cmd_demux_005:src7_ready
	wire   [15:0] cmd_demux_005_src7_channel;                                                              // cmd_demux_005:src7_channel -> cmd_mux_011:sink3_channel
	wire          cmd_demux_005_src7_startofpacket;                                                        // cmd_demux_005:src7_startofpacket -> cmd_mux_011:sink3_startofpacket
	wire          cmd_demux_005_src7_endofpacket;                                                          // cmd_demux_005:src7_endofpacket -> cmd_mux_011:sink3_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                // rsp_demux_002:src0_valid -> rsp_mux_002:sink1_valid
	wire  [138:0] rsp_demux_002_src0_data;                                                                 // rsp_demux_002:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src0_ready;                                                                // rsp_mux_002:sink1_ready -> rsp_demux_002:src0_ready
	wire   [15:0] rsp_demux_002_src0_channel;                                                              // rsp_demux_002:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src0_startofpacket;                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                // rsp_demux_002:src1_valid -> rsp_mux_004:sink2_valid
	wire  [138:0] rsp_demux_002_src1_data;                                                                 // rsp_demux_002:src1_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                // rsp_mux_004:sink2_ready -> rsp_demux_002:src1_ready
	wire   [15:0] rsp_demux_002_src1_channel;                                                              // rsp_demux_002:src1_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                        // rsp_demux_002:src1_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                          // rsp_demux_002:src1_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                // rsp_demux_003:src0_valid -> rsp_mux_003:sink1_valid
	wire  [138:0] rsp_demux_003_src0_data;                                                                 // rsp_demux_003:src0_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_003_src0_ready;                                                                // rsp_mux_003:sink1_ready -> rsp_demux_003:src0_ready
	wire   [15:0] rsp_demux_003_src0_channel;                                                              // rsp_demux_003:src0_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src0_startofpacket;                                                        // rsp_demux_003:src0_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                          // rsp_demux_003:src0_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                // rsp_demux_003:src1_valid -> rsp_mux_004:sink3_valid
	wire  [138:0] rsp_demux_003_src1_data;                                                                 // rsp_demux_003:src1_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_003_src1_ready;                                                                // rsp_mux_004:sink3_ready -> rsp_demux_003:src1_ready
	wire   [15:0] rsp_demux_003_src1_channel;                                                              // rsp_demux_003:src1_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                        // rsp_demux_003:src1_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                          // rsp_demux_003:src1_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                // rsp_demux_004:src0_valid -> rsp_mux_002:sink2_valid
	wire  [138:0] rsp_demux_004_src0_data;                                                                 // rsp_demux_004:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_004_src0_ready;                                                                // rsp_mux_002:sink2_ready -> rsp_demux_004:src0_ready
	wire   [15:0] rsp_demux_004_src0_channel;                                                              // rsp_demux_004:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_004_src0_startofpacket;                                                        // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                          // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                // rsp_demux_004:src1_valid -> rsp_mux_003:sink2_valid
	wire  [138:0] rsp_demux_004_src1_data;                                                                 // rsp_demux_004:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_004_src1_ready;                                                                // rsp_mux_003:sink2_ready -> rsp_demux_004:src1_ready
	wire   [15:0] rsp_demux_004_src1_channel;                                                              // rsp_demux_004:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_004_src1_startofpacket;                                                        // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                          // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                // rsp_demux_004:src2_valid -> rsp_mux_004:sink4_valid
	wire  [138:0] rsp_demux_004_src2_data;                                                                 // rsp_demux_004:src2_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_004_src2_ready;                                                                // rsp_mux_004:sink4_ready -> rsp_demux_004:src2_ready
	wire   [15:0] rsp_demux_004_src2_channel;                                                              // rsp_demux_004:src2_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_004_src2_startofpacket;                                                        // rsp_demux_004:src2_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                          // rsp_demux_004:src2_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_004_src3_valid;                                                                // rsp_demux_004:src3_valid -> rsp_mux_005:sink0_valid
	wire  [138:0] rsp_demux_004_src3_data;                                                                 // rsp_demux_004:src3_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_004_src3_ready;                                                                // rsp_mux_005:sink0_ready -> rsp_demux_004:src3_ready
	wire   [15:0] rsp_demux_004_src3_channel;                                                              // rsp_demux_004:src3_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_004_src3_startofpacket;                                                        // rsp_demux_004:src3_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                                          // rsp_demux_004:src3_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                // rsp_demux_005:src0_valid -> rsp_mux_002:sink3_valid
	wire  [138:0] rsp_demux_005_src0_data;                                                                 // rsp_demux_005:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_005_src0_ready;                                                                // rsp_mux_002:sink3_ready -> rsp_demux_005:src0_ready
	wire   [15:0] rsp_demux_005_src0_channel;                                                              // rsp_demux_005:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_005_src0_startofpacket;                                                        // rsp_demux_005:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                          // rsp_demux_005:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                // rsp_demux_005:src1_valid -> rsp_mux_003:sink3_valid
	wire  [138:0] rsp_demux_005_src1_data;                                                                 // rsp_demux_005:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_005_src1_ready;                                                                // rsp_mux_003:sink3_ready -> rsp_demux_005:src1_ready
	wire   [15:0] rsp_demux_005_src1_channel;                                                              // rsp_demux_005:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_005_src1_startofpacket;                                                        // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                          // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                // rsp_demux_005:src2_valid -> rsp_mux_004:sink5_valid
	wire  [138:0] rsp_demux_005_src2_data;                                                                 // rsp_demux_005:src2_data -> rsp_mux_004:sink5_data
	wire          rsp_demux_005_src2_ready;                                                                // rsp_mux_004:sink5_ready -> rsp_demux_005:src2_ready
	wire   [15:0] rsp_demux_005_src2_channel;                                                              // rsp_demux_005:src2_channel -> rsp_mux_004:sink5_channel
	wire          rsp_demux_005_src2_startofpacket;                                                        // rsp_demux_005:src2_startofpacket -> rsp_mux_004:sink5_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                          // rsp_demux_005:src2_endofpacket -> rsp_mux_004:sink5_endofpacket
	wire          rsp_demux_005_src3_valid;                                                                // rsp_demux_005:src3_valid -> rsp_mux_005:sink1_valid
	wire  [138:0] rsp_demux_005_src3_data;                                                                 // rsp_demux_005:src3_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_005_src3_ready;                                                                // rsp_mux_005:sink1_ready -> rsp_demux_005:src3_ready
	wire   [15:0] rsp_demux_005_src3_channel;                                                              // rsp_demux_005:src3_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_005_src3_startofpacket;                                                        // rsp_demux_005:src3_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                                          // rsp_demux_005:src3_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                // rsp_demux_006:src0_valid -> rsp_mux_002:sink4_valid
	wire  [138:0] rsp_demux_006_src0_data;                                                                 // rsp_demux_006:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_006_src0_ready;                                                                // rsp_mux_002:sink4_ready -> rsp_demux_006:src0_ready
	wire   [15:0] rsp_demux_006_src0_channel;                                                              // rsp_demux_006:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_006_src0_startofpacket;                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                // rsp_demux_006:src1_valid -> rsp_mux_003:sink4_valid
	wire  [138:0] rsp_demux_006_src1_data;                                                                 // rsp_demux_006:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_006_src1_ready;                                                                // rsp_mux_003:sink4_ready -> rsp_demux_006:src1_ready
	wire   [15:0] rsp_demux_006_src1_channel;                                                              // rsp_demux_006:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_006_src1_startofpacket;                                                        // rsp_demux_006:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                          // rsp_demux_006:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                // rsp_demux_006:src2_valid -> rsp_mux_004:sink6_valid
	wire  [138:0] rsp_demux_006_src2_data;                                                                 // rsp_demux_006:src2_data -> rsp_mux_004:sink6_data
	wire          rsp_demux_006_src2_ready;                                                                // rsp_mux_004:sink6_ready -> rsp_demux_006:src2_ready
	wire   [15:0] rsp_demux_006_src2_channel;                                                              // rsp_demux_006:src2_channel -> rsp_mux_004:sink6_channel
	wire          rsp_demux_006_src2_startofpacket;                                                        // rsp_demux_006:src2_startofpacket -> rsp_mux_004:sink6_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                          // rsp_demux_006:src2_endofpacket -> rsp_mux_004:sink6_endofpacket
	wire          rsp_demux_006_src3_valid;                                                                // rsp_demux_006:src3_valid -> rsp_mux_005:sink2_valid
	wire  [138:0] rsp_demux_006_src3_data;                                                                 // rsp_demux_006:src3_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_006_src3_ready;                                                                // rsp_mux_005:sink2_ready -> rsp_demux_006:src3_ready
	wire   [15:0] rsp_demux_006_src3_channel;                                                              // rsp_demux_006:src3_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_006_src3_startofpacket;                                                        // rsp_demux_006:src3_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                                          // rsp_demux_006:src3_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                // rsp_demux_007:src0_valid -> rsp_mux_002:sink5_valid
	wire  [138:0] rsp_demux_007_src0_data;                                                                 // rsp_demux_007:src0_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_007_src0_ready;                                                                // rsp_mux_002:sink5_ready -> rsp_demux_007:src0_ready
	wire   [15:0] rsp_demux_007_src0_channel;                                                              // rsp_demux_007:src0_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_007_src0_startofpacket;                                                        // rsp_demux_007:src0_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                          // rsp_demux_007:src0_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                // rsp_demux_007:src1_valid -> rsp_mux_003:sink5_valid
	wire  [138:0] rsp_demux_007_src1_data;                                                                 // rsp_demux_007:src1_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_007_src1_ready;                                                                // rsp_mux_003:sink5_ready -> rsp_demux_007:src1_ready
	wire   [15:0] rsp_demux_007_src1_channel;                                                              // rsp_demux_007:src1_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_007_src1_startofpacket;                                                        // rsp_demux_007:src1_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                          // rsp_demux_007:src1_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_007_src2_valid;                                                                // rsp_demux_007:src2_valid -> rsp_mux_004:sink7_valid
	wire  [138:0] rsp_demux_007_src2_data;                                                                 // rsp_demux_007:src2_data -> rsp_mux_004:sink7_data
	wire          rsp_demux_007_src2_ready;                                                                // rsp_mux_004:sink7_ready -> rsp_demux_007:src2_ready
	wire   [15:0] rsp_demux_007_src2_channel;                                                              // rsp_demux_007:src2_channel -> rsp_mux_004:sink7_channel
	wire          rsp_demux_007_src2_startofpacket;                                                        // rsp_demux_007:src2_startofpacket -> rsp_mux_004:sink7_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                          // rsp_demux_007:src2_endofpacket -> rsp_mux_004:sink7_endofpacket
	wire          rsp_demux_007_src3_valid;                                                                // rsp_demux_007:src3_valid -> rsp_mux_005:sink3_valid
	wire  [138:0] rsp_demux_007_src3_data;                                                                 // rsp_demux_007:src3_data -> rsp_mux_005:sink3_data
	wire          rsp_demux_007_src3_ready;                                                                // rsp_mux_005:sink3_ready -> rsp_demux_007:src3_ready
	wire   [15:0] rsp_demux_007_src3_channel;                                                              // rsp_demux_007:src3_channel -> rsp_mux_005:sink3_channel
	wire          rsp_demux_007_src3_startofpacket;                                                        // rsp_demux_007:src3_startofpacket -> rsp_mux_005:sink3_startofpacket
	wire          rsp_demux_007_src3_endofpacket;                                                          // rsp_demux_007:src3_endofpacket -> rsp_mux_005:sink3_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                // rsp_demux_008:src0_valid -> rsp_mux_002:sink6_valid
	wire  [138:0] rsp_demux_008_src0_data;                                                                 // rsp_demux_008:src0_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_008_src0_ready;                                                                // rsp_mux_002:sink6_ready -> rsp_demux_008:src0_ready
	wire   [15:0] rsp_demux_008_src0_channel;                                                              // rsp_demux_008:src0_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_008_src0_startofpacket;                                                        // rsp_demux_008:src0_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                          // rsp_demux_008:src0_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                // rsp_demux_008:src1_valid -> rsp_mux_003:sink6_valid
	wire  [138:0] rsp_demux_008_src1_data;                                                                 // rsp_demux_008:src1_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_008_src1_ready;                                                                // rsp_mux_003:sink6_ready -> rsp_demux_008:src1_ready
	wire   [15:0] rsp_demux_008_src1_channel;                                                              // rsp_demux_008:src1_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_008_src1_startofpacket;                                                        // rsp_demux_008:src1_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                          // rsp_demux_008:src1_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_008_src2_valid;                                                                // rsp_demux_008:src2_valid -> rsp_mux_004:sink8_valid
	wire  [138:0] rsp_demux_008_src2_data;                                                                 // rsp_demux_008:src2_data -> rsp_mux_004:sink8_data
	wire          rsp_demux_008_src2_ready;                                                                // rsp_mux_004:sink8_ready -> rsp_demux_008:src2_ready
	wire   [15:0] rsp_demux_008_src2_channel;                                                              // rsp_demux_008:src2_channel -> rsp_mux_004:sink8_channel
	wire          rsp_demux_008_src2_startofpacket;                                                        // rsp_demux_008:src2_startofpacket -> rsp_mux_004:sink8_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                          // rsp_demux_008:src2_endofpacket -> rsp_mux_004:sink8_endofpacket
	wire          rsp_demux_008_src3_valid;                                                                // rsp_demux_008:src3_valid -> rsp_mux_005:sink4_valid
	wire  [138:0] rsp_demux_008_src3_data;                                                                 // rsp_demux_008:src3_data -> rsp_mux_005:sink4_data
	wire          rsp_demux_008_src3_ready;                                                                // rsp_mux_005:sink4_ready -> rsp_demux_008:src3_ready
	wire   [15:0] rsp_demux_008_src3_channel;                                                              // rsp_demux_008:src3_channel -> rsp_mux_005:sink4_channel
	wire          rsp_demux_008_src3_startofpacket;                                                        // rsp_demux_008:src3_startofpacket -> rsp_mux_005:sink4_startofpacket
	wire          rsp_demux_008_src3_endofpacket;                                                          // rsp_demux_008:src3_endofpacket -> rsp_mux_005:sink4_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                // rsp_demux_009:src0_valid -> rsp_mux_002:sink7_valid
	wire  [138:0] rsp_demux_009_src0_data;                                                                 // rsp_demux_009:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_009_src0_ready;                                                                // rsp_mux_002:sink7_ready -> rsp_demux_009:src0_ready
	wire   [15:0] rsp_demux_009_src0_channel;                                                              // rsp_demux_009:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_009_src0_startofpacket;                                                        // rsp_demux_009:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                          // rsp_demux_009:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                // rsp_demux_009:src1_valid -> rsp_mux_003:sink7_valid
	wire  [138:0] rsp_demux_009_src1_data;                                                                 // rsp_demux_009:src1_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_009_src1_ready;                                                                // rsp_mux_003:sink7_ready -> rsp_demux_009:src1_ready
	wire   [15:0] rsp_demux_009_src1_channel;                                                              // rsp_demux_009:src1_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_009_src1_startofpacket;                                                        // rsp_demux_009:src1_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                          // rsp_demux_009:src1_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_009_src2_valid;                                                                // rsp_demux_009:src2_valid -> rsp_mux_004:sink9_valid
	wire  [138:0] rsp_demux_009_src2_data;                                                                 // rsp_demux_009:src2_data -> rsp_mux_004:sink9_data
	wire          rsp_demux_009_src2_ready;                                                                // rsp_mux_004:sink9_ready -> rsp_demux_009:src2_ready
	wire   [15:0] rsp_demux_009_src2_channel;                                                              // rsp_demux_009:src2_channel -> rsp_mux_004:sink9_channel
	wire          rsp_demux_009_src2_startofpacket;                                                        // rsp_demux_009:src2_startofpacket -> rsp_mux_004:sink9_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                          // rsp_demux_009:src2_endofpacket -> rsp_mux_004:sink9_endofpacket
	wire          rsp_demux_009_src3_valid;                                                                // rsp_demux_009:src3_valid -> rsp_mux_005:sink5_valid
	wire  [138:0] rsp_demux_009_src3_data;                                                                 // rsp_demux_009:src3_data -> rsp_mux_005:sink5_data
	wire          rsp_demux_009_src3_ready;                                                                // rsp_mux_005:sink5_ready -> rsp_demux_009:src3_ready
	wire   [15:0] rsp_demux_009_src3_channel;                                                              // rsp_demux_009:src3_channel -> rsp_mux_005:sink5_channel
	wire          rsp_demux_009_src3_startofpacket;                                                        // rsp_demux_009:src3_startofpacket -> rsp_mux_005:sink5_startofpacket
	wire          rsp_demux_009_src3_endofpacket;                                                          // rsp_demux_009:src3_endofpacket -> rsp_mux_005:sink5_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                // rsp_demux_010:src0_valid -> rsp_mux_002:sink8_valid
	wire  [138:0] rsp_demux_010_src0_data;                                                                 // rsp_demux_010:src0_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_010_src0_ready;                                                                // rsp_mux_002:sink8_ready -> rsp_demux_010:src0_ready
	wire   [15:0] rsp_demux_010_src0_channel;                                                              // rsp_demux_010:src0_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_010_src0_startofpacket;                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                // rsp_demux_010:src1_valid -> rsp_mux_003:sink8_valid
	wire  [138:0] rsp_demux_010_src1_data;                                                                 // rsp_demux_010:src1_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_010_src1_ready;                                                                // rsp_mux_003:sink8_ready -> rsp_demux_010:src1_ready
	wire   [15:0] rsp_demux_010_src1_channel;                                                              // rsp_demux_010:src1_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_010_src1_startofpacket;                                                        // rsp_demux_010:src1_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                          // rsp_demux_010:src1_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_010_src2_valid;                                                                // rsp_demux_010:src2_valid -> rsp_mux_004:sink10_valid
	wire  [138:0] rsp_demux_010_src2_data;                                                                 // rsp_demux_010:src2_data -> rsp_mux_004:sink10_data
	wire          rsp_demux_010_src2_ready;                                                                // rsp_mux_004:sink10_ready -> rsp_demux_010:src2_ready
	wire   [15:0] rsp_demux_010_src2_channel;                                                              // rsp_demux_010:src2_channel -> rsp_mux_004:sink10_channel
	wire          rsp_demux_010_src2_startofpacket;                                                        // rsp_demux_010:src2_startofpacket -> rsp_mux_004:sink10_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                          // rsp_demux_010:src2_endofpacket -> rsp_mux_004:sink10_endofpacket
	wire          rsp_demux_010_src3_valid;                                                                // rsp_demux_010:src3_valid -> rsp_mux_005:sink6_valid
	wire  [138:0] rsp_demux_010_src3_data;                                                                 // rsp_demux_010:src3_data -> rsp_mux_005:sink6_data
	wire          rsp_demux_010_src3_ready;                                                                // rsp_mux_005:sink6_ready -> rsp_demux_010:src3_ready
	wire   [15:0] rsp_demux_010_src3_channel;                                                              // rsp_demux_010:src3_channel -> rsp_mux_005:sink6_channel
	wire          rsp_demux_010_src3_startofpacket;                                                        // rsp_demux_010:src3_startofpacket -> rsp_mux_005:sink6_startofpacket
	wire          rsp_demux_010_src3_endofpacket;                                                          // rsp_demux_010:src3_endofpacket -> rsp_mux_005:sink6_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                // rsp_demux_011:src0_valid -> rsp_mux_002:sink9_valid
	wire  [138:0] rsp_demux_011_src0_data;                                                                 // rsp_demux_011:src0_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_011_src0_ready;                                                                // rsp_mux_002:sink9_ready -> rsp_demux_011:src0_ready
	wire   [15:0] rsp_demux_011_src0_channel;                                                              // rsp_demux_011:src0_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_011_src0_startofpacket;                                                        // rsp_demux_011:src0_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                          // rsp_demux_011:src0_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                // rsp_demux_011:src1_valid -> rsp_mux_003:sink9_valid
	wire  [138:0] rsp_demux_011_src1_data;                                                                 // rsp_demux_011:src1_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_011_src1_ready;                                                                // rsp_mux_003:sink9_ready -> rsp_demux_011:src1_ready
	wire   [15:0] rsp_demux_011_src1_channel;                                                              // rsp_demux_011:src1_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_011_src1_startofpacket;                                                        // rsp_demux_011:src1_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                          // rsp_demux_011:src1_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_011_src2_valid;                                                                // rsp_demux_011:src2_valid -> rsp_mux_004:sink11_valid
	wire  [138:0] rsp_demux_011_src2_data;                                                                 // rsp_demux_011:src2_data -> rsp_mux_004:sink11_data
	wire          rsp_demux_011_src2_ready;                                                                // rsp_mux_004:sink11_ready -> rsp_demux_011:src2_ready
	wire   [15:0] rsp_demux_011_src2_channel;                                                              // rsp_demux_011:src2_channel -> rsp_mux_004:sink11_channel
	wire          rsp_demux_011_src2_startofpacket;                                                        // rsp_demux_011:src2_startofpacket -> rsp_mux_004:sink11_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                          // rsp_demux_011:src2_endofpacket -> rsp_mux_004:sink11_endofpacket
	wire          rsp_demux_011_src3_valid;                                                                // rsp_demux_011:src3_valid -> rsp_mux_005:sink7_valid
	wire  [138:0] rsp_demux_011_src3_data;                                                                 // rsp_demux_011:src3_data -> rsp_mux_005:sink7_data
	wire          rsp_demux_011_src3_ready;                                                                // rsp_mux_005:sink7_ready -> rsp_demux_011:src3_ready
	wire   [15:0] rsp_demux_011_src3_channel;                                                              // rsp_demux_011:src3_channel -> rsp_mux_005:sink7_channel
	wire          rsp_demux_011_src3_startofpacket;                                                        // rsp_demux_011:src3_startofpacket -> rsp_mux_005:sink7_startofpacket
	wire          rsp_demux_011_src3_endofpacket;                                                          // rsp_demux_011:src3_endofpacket -> rsp_mux_005:sink7_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                // rsp_demux_012:src0_valid -> rsp_mux_002:sink10_valid
	wire  [138:0] rsp_demux_012_src0_data;                                                                 // rsp_demux_012:src0_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_012_src0_ready;                                                                // rsp_mux_002:sink10_ready -> rsp_demux_012:src0_ready
	wire   [15:0] rsp_demux_012_src0_channel;                                                              // rsp_demux_012:src0_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_012_src0_startofpacket;                                                        // rsp_demux_012:src0_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                          // rsp_demux_012:src0_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                // rsp_demux_013:src0_valid -> rsp_mux_003:sink10_valid
	wire  [138:0] rsp_demux_013_src0_data;                                                                 // rsp_demux_013:src0_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_013_src0_ready;                                                                // rsp_mux_003:sink10_ready -> rsp_demux_013:src0_ready
	wire   [15:0] rsp_demux_013_src0_channel;                                                              // rsp_demux_013:src0_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_013_src0_startofpacket;                                                        // rsp_demux_013:src0_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                          // rsp_demux_013:src0_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:in_valid
	wire  [174:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                    // axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire   [15:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:in_endofpacket
	wire          axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_valid;           // axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [138:0] axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_data;            // axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_ready;           // cmd_mux:sink0_ready -> axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:out_ready
	wire   [15:0] axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_channel;         // axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_startofpacket;   // axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_endofpacket;     // axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                // cmd_demux_001:src0_valid -> axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:in_valid
	wire  [174:0] cmd_demux_001_src0_data;                                                                 // cmd_demux_001:src0_data -> axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                // axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [15:0] cmd_demux_001_src0_channel;                                                              // cmd_demux_001:src0_channel -> axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                        // cmd_demux_001:src0_startofpacket -> axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                          // cmd_demux_001:src0_endofpacket -> axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:in_endofpacket
	wire          axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_valid;           // axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [138:0] axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_data;            // axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_ready;           // cmd_mux_001:sink0_ready -> axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:out_ready
	wire   [15:0] axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_channel;         // axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_startofpacket;   // axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_endofpacket;     // axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src11_valid;                                                               // cmd_demux_002:src11_valid -> agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_valid
	wire  [138:0] cmd_demux_002_src11_data;                                                                // cmd_demux_002:src11_data -> agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_data
	wire          cmd_demux_002_src11_ready;                                                               // agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_ready -> cmd_demux_002:src11_ready
	wire   [15:0] cmd_demux_002_src11_channel;                                                             // cmd_demux_002:src11_channel -> agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src11_startofpacket;                                                       // cmd_demux_002:src11_startofpacket -> agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                         // cmd_demux_002:src11_endofpacket -> agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_003_src11_valid;                                                               // cmd_demux_003:src11_valid -> agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_valid
	wire  [138:0] cmd_demux_003_src11_data;                                                                // cmd_demux_003:src11_data -> agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_data
	wire          cmd_demux_003_src11_ready;                                                               // agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_ready -> cmd_demux_003:src11_ready
	wire   [15:0] cmd_demux_003_src11_channel;                                                             // cmd_demux_003:src11_channel -> agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src11_startofpacket;                                                       // cmd_demux_003:src11_startofpacket -> agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                         // cmd_demux_003:src11_endofpacket -> agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                // cmd_demux_006:src0_valid -> agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_valid
	wire  [138:0] cmd_demux_006_src0_data;                                                                 // cmd_demux_006:src0_data -> agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_data
	wire          cmd_demux_006_src0_ready;                                                                // agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_ready -> cmd_demux_006:src0_ready
	wire   [15:0] cmd_demux_006_src0_channel;                                                              // cmd_demux_006:src0_channel -> agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_channel
	wire          cmd_demux_006_src0_startofpacket;                                                        // cmd_demux_006:src0_startofpacket -> agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                          // cmd_demux_006:src0_endofpacket -> agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                // cmd_demux_007:src0_valid -> agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_valid
	wire  [138:0] cmd_demux_007_src0_data;                                                                 // cmd_demux_007:src0_data -> agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_data
	wire          cmd_demux_007_src0_ready;                                                                // agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_ready -> cmd_demux_007:src0_ready
	wire   [15:0] cmd_demux_007_src0_channel;                                                              // cmd_demux_007:src0_channel -> agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src0_startofpacket;                                                        // cmd_demux_007:src0_startofpacket -> agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                          // cmd_demux_007:src0_endofpacket -> agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:in_valid
	wire  [138:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                    // axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire   [15:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:in_endofpacket
	wire          axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_valid;           // axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [174:0] axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_data;            // axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_ready;           // rsp_mux:sink0_ready -> axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:out_ready
	wire   [15:0] axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_channel;         // axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_startofpacket;   // axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_endofpacket;     // axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:in_valid
	wire  [138:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                // axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire   [15:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:in_endofpacket
	wire          axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_valid;           // axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [174:0] axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_data;            // axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_ready;           // rsp_mux_001:sink0_ready -> axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:out_ready
	wire   [15:0] axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_channel;         // axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_startofpacket;   // axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_endofpacket;     // axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                // rsp_demux_014:src0_valid -> onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:in_valid
	wire  [174:0] rsp_demux_014_src0_data;                                                                 // rsp_demux_014:src0_data -> onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:in_data
	wire          rsp_demux_014_src0_ready;                                                                // onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:in_ready -> rsp_demux_014:src0_ready
	wire   [15:0] rsp_demux_014_src0_channel;                                                              // rsp_demux_014:src0_channel -> onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                        // rsp_demux_014:src0_startofpacket -> onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                          // rsp_demux_014:src0_endofpacket -> onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_014_src1_valid;                                                                // rsp_demux_014:src1_valid -> onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:in_valid
	wire  [174:0] rsp_demux_014_src1_data;                                                                 // rsp_demux_014:src1_data -> onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:in_data
	wire          rsp_demux_014_src1_ready;                                                                // onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:in_ready -> rsp_demux_014:src1_ready
	wire   [15:0] rsp_demux_014_src1_channel;                                                              // rsp_demux_014:src1_channel -> onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_014_src1_startofpacket;                                                        // rsp_demux_014:src1_startofpacket -> onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                          // rsp_demux_014:src1_endofpacket -> onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                // rsp_demux_015:src0_valid -> onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:in_valid
	wire  [174:0] rsp_demux_015_src0_data;                                                                 // rsp_demux_015:src0_data -> onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:in_data
	wire          rsp_demux_015_src0_ready;                                                                // onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:in_ready -> rsp_demux_015:src0_ready
	wire   [15:0] rsp_demux_015_src0_channel;                                                              // rsp_demux_015:src0_channel -> onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                        // rsp_demux_015:src0_startofpacket -> onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                          // rsp_demux_015:src0_endofpacket -> onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                // rsp_demux_015:src1_valid -> onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:in_valid
	wire  [174:0] rsp_demux_015_src1_data;                                                                 // rsp_demux_015:src1_data -> onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:in_data
	wire          rsp_demux_015_src1_ready;                                                                // onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:in_ready -> rsp_demux_015:src1_ready
	wire   [15:0] rsp_demux_015_src1_channel;                                                              // rsp_demux_015:src1_channel -> onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_015_src1_startofpacket;                                                        // rsp_demux_015:src1_startofpacket -> onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                          // rsp_demux_015:src1_endofpacket -> onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                // cmd_demux_002:src0_valid -> crosser:in_valid
	wire  [138:0] cmd_demux_002_src0_data;                                                                 // cmd_demux_002:src0_data -> crosser:in_data
	wire          cmd_demux_002_src0_ready;                                                                // crosser:in_ready -> cmd_demux_002:src0_ready
	wire   [15:0] cmd_demux_002_src0_channel;                                                              // cmd_demux_002:src0_channel -> crosser:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                        // cmd_demux_002:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                          // cmd_demux_002:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                       // crosser:out_valid -> cmd_mux:sink1_valid
	wire  [138:0] crosser_out_data;                                                                        // crosser:out_data -> cmd_mux:sink1_data
	wire          crosser_out_ready;                                                                       // cmd_mux:sink1_ready -> crosser:out_ready
	wire   [15:0] crosser_out_channel;                                                                     // crosser:out_channel -> cmd_mux:sink1_channel
	wire          crosser_out_startofpacket;                                                               // crosser:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_out_endofpacket;                                                                 // crosser:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                // cmd_demux_003:src0_valid -> crosser_001:in_valid
	wire  [138:0] cmd_demux_003_src0_data;                                                                 // cmd_demux_003:src0_data -> crosser_001:in_data
	wire          cmd_demux_003_src0_ready;                                                                // crosser_001:in_ready -> cmd_demux_003:src0_ready
	wire   [15:0] cmd_demux_003_src0_channel;                                                              // cmd_demux_003:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                        // cmd_demux_003:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                          // cmd_demux_003:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                   // crosser_001:out_valid -> cmd_mux_001:sink1_valid
	wire  [138:0] crosser_001_out_data;                                                                    // crosser_001:out_data -> cmd_mux_001:sink1_data
	wire          crosser_001_out_ready;                                                                   // cmd_mux_001:sink1_ready -> crosser_001:out_ready
	wire   [15:0] crosser_001_out_channel;                                                                 // crosser_001:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_001_out_startofpacket;                                                           // crosser_001:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                             // crosser_001:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                // cmd_demux_004:src0_valid -> crosser_002:in_valid
	wire  [138:0] cmd_demux_004_src0_data;                                                                 // cmd_demux_004:src0_data -> crosser_002:in_data
	wire          cmd_demux_004_src0_ready;                                                                // crosser_002:in_ready -> cmd_demux_004:src0_ready
	wire   [15:0] cmd_demux_004_src0_channel;                                                              // cmd_demux_004:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                        // cmd_demux_004:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                          // cmd_demux_004:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                   // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire  [138:0] crosser_002_out_data;                                                                    // crosser_002:out_data -> cmd_mux:sink2_data
	wire          crosser_002_out_ready;                                                                   // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire   [15:0] crosser_002_out_channel;                                                                 // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_startofpacket;                                                           // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                             // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                // cmd_demux_004:src1_valid -> crosser_003:in_valid
	wire  [138:0] cmd_demux_004_src1_data;                                                                 // cmd_demux_004:src1_data -> crosser_003:in_data
	wire          cmd_demux_004_src1_ready;                                                                // crosser_003:in_ready -> cmd_demux_004:src1_ready
	wire   [15:0] cmd_demux_004_src1_channel;                                                              // cmd_demux_004:src1_channel -> crosser_003:in_channel
	wire          cmd_demux_004_src1_startofpacket;                                                        // cmd_demux_004:src1_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                          // cmd_demux_004:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                   // crosser_003:out_valid -> cmd_mux_001:sink2_valid
	wire  [138:0] crosser_003_out_data;                                                                    // crosser_003:out_data -> cmd_mux_001:sink2_data
	wire          crosser_003_out_ready;                                                                   // cmd_mux_001:sink2_ready -> crosser_003:out_ready
	wire   [15:0] crosser_003_out_channel;                                                                 // crosser_003:out_channel -> cmd_mux_001:sink2_channel
	wire          crosser_003_out_startofpacket;                                                           // crosser_003:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                                             // crosser_003:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          rsp_demux_src1_valid;                                                                    // rsp_demux:src1_valid -> crosser_004:in_valid
	wire  [138:0] rsp_demux_src1_data;                                                                     // rsp_demux:src1_data -> crosser_004:in_data
	wire          rsp_demux_src1_ready;                                                                    // crosser_004:in_ready -> rsp_demux:src1_ready
	wire   [15:0] rsp_demux_src1_channel;                                                                  // rsp_demux:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_src1_startofpacket;                                                            // rsp_demux:src1_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                              // rsp_demux:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                   // crosser_004:out_valid -> rsp_mux_002:sink0_valid
	wire  [138:0] crosser_004_out_data;                                                                    // crosser_004:out_data -> rsp_mux_002:sink0_data
	wire          crosser_004_out_ready;                                                                   // rsp_mux_002:sink0_ready -> crosser_004:out_ready
	wire   [15:0] crosser_004_out_channel;                                                                 // crosser_004:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_004_out_startofpacket;                                                           // crosser_004:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                             // crosser_004:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                    // rsp_demux:src2_valid -> crosser_005:in_valid
	wire  [138:0] rsp_demux_src2_data;                                                                     // rsp_demux:src2_data -> crosser_005:in_data
	wire          rsp_demux_src2_ready;                                                                    // crosser_005:in_ready -> rsp_demux:src2_ready
	wire   [15:0] rsp_demux_src2_channel;                                                                  // rsp_demux:src2_channel -> crosser_005:in_channel
	wire          rsp_demux_src2_startofpacket;                                                            // rsp_demux:src2_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                              // rsp_demux:src2_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                   // crosser_005:out_valid -> rsp_mux_004:sink0_valid
	wire  [138:0] crosser_005_out_data;                                                                    // crosser_005:out_data -> rsp_mux_004:sink0_data
	wire          crosser_005_out_ready;                                                                   // rsp_mux_004:sink0_ready -> crosser_005:out_ready
	wire   [15:0] crosser_005_out_channel;                                                                 // crosser_005:out_channel -> rsp_mux_004:sink0_channel
	wire          crosser_005_out_startofpacket;                                                           // crosser_005:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                             // crosser_005:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                // rsp_demux_001:src1_valid -> crosser_006:in_valid
	wire  [138:0] rsp_demux_001_src1_data;                                                                 // rsp_demux_001:src1_data -> crosser_006:in_data
	wire          rsp_demux_001_src1_ready;                                                                // crosser_006:in_ready -> rsp_demux_001:src1_ready
	wire   [15:0] rsp_demux_001_src1_channel;                                                              // rsp_demux_001:src1_channel -> crosser_006:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                        // rsp_demux_001:src1_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                          // rsp_demux_001:src1_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                   // crosser_006:out_valid -> rsp_mux_003:sink0_valid
	wire  [138:0] crosser_006_out_data;                                                                    // crosser_006:out_data -> rsp_mux_003:sink0_data
	wire          crosser_006_out_ready;                                                                   // rsp_mux_003:sink0_ready -> crosser_006:out_ready
	wire   [15:0] crosser_006_out_channel;                                                                 // crosser_006:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_006_out_startofpacket;                                                           // crosser_006:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                             // crosser_006:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                // rsp_demux_001:src2_valid -> crosser_007:in_valid
	wire  [138:0] rsp_demux_001_src2_data;                                                                 // rsp_demux_001:src2_data -> crosser_007:in_data
	wire          rsp_demux_001_src2_ready;                                                                // crosser_007:in_ready -> rsp_demux_001:src2_ready
	wire   [15:0] rsp_demux_001_src2_channel;                                                              // rsp_demux_001:src2_channel -> crosser_007:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                                        // rsp_demux_001:src2_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                          // rsp_demux_001:src2_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                   // crosser_007:out_valid -> rsp_mux_004:sink1_valid
	wire  [138:0] crosser_007_out_data;                                                                    // crosser_007:out_data -> rsp_mux_004:sink1_data
	wire          crosser_007_out_ready;                                                                   // rsp_mux_004:sink1_ready -> crosser_007:out_ready
	wire   [15:0] crosser_007_out_channel;                                                                 // crosser_007:out_channel -> rsp_mux_004:sink1_channel
	wire          crosser_007_out_startofpacket;                                                           // crosser_007:out_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                             // crosser_007:out_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid;         // agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_valid -> crosser_008:in_valid
	wire  [174:0] agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_data;          // agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_data -> crosser_008:in_data
	wire          agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready;         // crosser_008:in_ready -> agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_ready
	wire   [15:0] agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel;       // agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_channel -> crosser_008:in_channel
	wire          agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket; // agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_startofpacket -> crosser_008:in_startofpacket
	wire          agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket;   // agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                   // crosser_008:out_valid -> cmd_mux_014:sink0_valid
	wire  [174:0] crosser_008_out_data;                                                                    // crosser_008:out_data -> cmd_mux_014:sink0_data
	wire          crosser_008_out_ready;                                                                   // cmd_mux_014:sink0_ready -> crosser_008:out_ready
	wire   [15:0] crosser_008_out_channel;                                                                 // crosser_008:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_008_out_startofpacket;                                                           // crosser_008:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                                             // crosser_008:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid;         // agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_valid -> crosser_009:in_valid
	wire  [174:0] agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_data;          // agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_data -> crosser_009:in_data
	wire          agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready;         // crosser_009:in_ready -> agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_ready
	wire   [15:0] agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel;       // agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_channel -> crosser_009:in_channel
	wire          agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket; // agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_startofpacket -> crosser_009:in_startofpacket
	wire          agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket;   // agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                   // crosser_009:out_valid -> cmd_mux_015:sink0_valid
	wire  [174:0] crosser_009_out_data;                                                                    // crosser_009:out_data -> cmd_mux_015:sink0_data
	wire          crosser_009_out_ready;                                                                   // cmd_mux_015:sink0_ready -> crosser_009:out_ready
	wire   [15:0] crosser_009_out_channel;                                                                 // crosser_009:out_channel -> cmd_mux_015:sink0_channel
	wire          crosser_009_out_startofpacket;                                                           // crosser_009:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                             // crosser_009:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid;           // agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_valid -> crosser_010:in_valid
	wire  [174:0] agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_data;            // agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_data -> crosser_010:in_data
	wire          agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready;           // crosser_010:in_ready -> agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_ready
	wire   [15:0] agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel;         // agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_channel -> crosser_010:in_channel
	wire          agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket;   // agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_startofpacket -> crosser_010:in_startofpacket
	wire          agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket;     // agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter:out_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                   // crosser_010:out_valid -> cmd_mux_014:sink1_valid
	wire  [174:0] crosser_010_out_data;                                                                    // crosser_010:out_data -> cmd_mux_014:sink1_data
	wire          crosser_010_out_ready;                                                                   // cmd_mux_014:sink1_ready -> crosser_010:out_ready
	wire   [15:0] crosser_010_out_channel;                                                                 // crosser_010:out_channel -> cmd_mux_014:sink1_channel
	wire          crosser_010_out_startofpacket;                                                           // crosser_010:out_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          crosser_010_out_endofpacket;                                                             // crosser_010:out_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid;           // agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_valid -> crosser_011:in_valid
	wire  [174:0] agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_data;            // agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_data -> crosser_011:in_data
	wire          agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready;           // crosser_011:in_ready -> agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_ready
	wire   [15:0] agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel;         // agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_channel -> crosser_011:in_channel
	wire          agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket;   // agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_startofpacket -> crosser_011:in_startofpacket
	wire          agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket;     // agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter:out_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                   // crosser_011:out_valid -> cmd_mux_015:sink1_valid
	wire  [174:0] crosser_011_out_data;                                                                    // crosser_011:out_data -> cmd_mux_015:sink1_data
	wire          crosser_011_out_ready;                                                                   // cmd_mux_015:sink1_ready -> crosser_011:out_ready
	wire   [15:0] crosser_011_out_channel;                                                                 // crosser_011:out_channel -> cmd_mux_015:sink1_channel
	wire          crosser_011_out_startofpacket;                                                           // crosser_011:out_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                                             // crosser_011:out_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_valid;         // onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:out_valid -> crosser_012:in_valid
	wire  [138:0] onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_data;          // onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:out_data -> crosser_012:in_data
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_ready;         // crosser_012:in_ready -> onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:out_ready
	wire   [15:0] onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_channel;       // onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:out_channel -> crosser_012:in_channel
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_startofpacket; // onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:out_startofpacket -> crosser_012:in_startofpacket
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_endofpacket;   // onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter:out_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                                   // crosser_012:out_valid -> rsp_mux_002:sink11_valid
	wire  [138:0] crosser_012_out_data;                                                                    // crosser_012:out_data -> rsp_mux_002:sink11_data
	wire          crosser_012_out_ready;                                                                   // rsp_mux_002:sink11_ready -> crosser_012:out_ready
	wire   [15:0] crosser_012_out_channel;                                                                 // crosser_012:out_channel -> rsp_mux_002:sink11_channel
	wire          crosser_012_out_startofpacket;                                                           // crosser_012:out_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          crosser_012_out_endofpacket;                                                             // crosser_012:out_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_valid;           // onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:out_valid -> crosser_013:in_valid
	wire  [138:0] onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_data;            // onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:out_data -> crosser_013:in_data
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_ready;           // crosser_013:in_ready -> onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:out_ready
	wire   [15:0] onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_channel;         // onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:out_channel -> crosser_013:in_channel
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_startofpacket;   // onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:out_startofpacket -> crosser_013:in_startofpacket
	wire          onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_endofpacket;     // onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter:out_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                                   // crosser_013:out_valid -> rsp_mux_006:sink0_valid
	wire  [138:0] crosser_013_out_data;                                                                    // crosser_013:out_data -> rsp_mux_006:sink0_data
	wire          crosser_013_out_ready;                                                                   // rsp_mux_006:sink0_ready -> crosser_013:out_ready
	wire   [15:0] crosser_013_out_channel;                                                                 // crosser_013:out_channel -> rsp_mux_006:sink0_channel
	wire          crosser_013_out_startofpacket;                                                           // crosser_013:out_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                             // crosser_013:out_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_valid;         // onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:out_valid -> crosser_014:in_valid
	wire  [138:0] onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_data;          // onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:out_data -> crosser_014:in_data
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_ready;         // crosser_014:in_ready -> onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:out_ready
	wire   [15:0] onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_channel;       // onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:out_channel -> crosser_014:in_channel
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_startofpacket; // onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:out_startofpacket -> crosser_014:in_startofpacket
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_endofpacket;   // onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter:out_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                                   // crosser_014:out_valid -> rsp_mux_003:sink11_valid
	wire  [138:0] crosser_014_out_data;                                                                    // crosser_014:out_data -> rsp_mux_003:sink11_data
	wire          crosser_014_out_ready;                                                                   // rsp_mux_003:sink11_ready -> crosser_014:out_ready
	wire   [15:0] crosser_014_out_channel;                                                                 // crosser_014:out_channel -> rsp_mux_003:sink11_channel
	wire          crosser_014_out_startofpacket;                                                           // crosser_014:out_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          crosser_014_out_endofpacket;                                                             // crosser_014:out_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_valid;           // onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:out_valid -> crosser_015:in_valid
	wire  [138:0] onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_data;            // onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:out_data -> crosser_015:in_data
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_ready;           // crosser_015:in_ready -> onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:out_ready
	wire   [15:0] onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_channel;         // onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:out_channel -> crosser_015:in_channel
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_startofpacket;   // onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:out_startofpacket -> crosser_015:in_startofpacket
	wire          onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_endofpacket;     // onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter:out_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                                   // crosser_015:out_valid -> rsp_mux_007:sink0_valid
	wire  [138:0] crosser_015_out_data;                                                                    // crosser_015:out_data -> rsp_mux_007:sink0_data
	wire          crosser_015_out_ready;                                                                   // rsp_mux_007:sink0_ready -> crosser_015:out_ready
	wire   [15:0] crosser_015_out_channel;                                                                 // crosser_015:out_channel -> rsp_mux_007:sink0_channel
	wire          crosser_015_out_startofpacket;                                                           // crosser_015:out_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          crosser_015_out_endofpacket;                                                             // crosser_015:out_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire   [15:0] hps_jtag_master_master_limiter_cmd_valid_data;                                           // hps_jtag_master_master_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire   [15:0] jtag_master_master_limiter_cmd_valid_data;                                               // jtag_master_master_limiter:cmd_src_valid -> cmd_demux_005:sink_valid

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) agilex_5_soc_hps2fpga_translator (
		.aclk        (clock_in_out_clk_clk),                                                    //   input,   width = 1,       clk.clk
		.aresetn     (~agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (agilex_5_soc_hps2fpga_translator_m0_awid),                                //  output,   width = 4,        m0.awid
		.m0_awaddr   (agilex_5_soc_hps2fpga_translator_m0_awaddr),                              //  output,  width = 32,          .awaddr
		.m0_awlen    (agilex_5_soc_hps2fpga_translator_m0_awlen),                               //  output,   width = 8,          .awlen
		.m0_awsize   (agilex_5_soc_hps2fpga_translator_m0_awsize),                              //  output,   width = 3,          .awsize
		.m0_awburst  (agilex_5_soc_hps2fpga_translator_m0_awburst),                             //  output,   width = 2,          .awburst
		.m0_awlock   (agilex_5_soc_hps2fpga_translator_m0_awlock),                              //  output,   width = 1,          .awlock
		.m0_awcache  (agilex_5_soc_hps2fpga_translator_m0_awcache),                             //  output,   width = 4,          .awcache
		.m0_awprot   (agilex_5_soc_hps2fpga_translator_m0_awprot),                              //  output,   width = 3,          .awprot
		.m0_awuser   (agilex_5_soc_hps2fpga_translator_m0_awuser),                              //  output,   width = 1,          .awuser
		.m0_awqos    (agilex_5_soc_hps2fpga_translator_m0_awqos),                               //  output,   width = 4,          .awqos
		.m0_awregion (agilex_5_soc_hps2fpga_translator_m0_awregion),                            //  output,   width = 4,          .awregion
		.m0_awvalid  (agilex_5_soc_hps2fpga_translator_m0_awvalid),                             //  output,   width = 1,          .awvalid
		.m0_awready  (agilex_5_soc_hps2fpga_translator_m0_awready),                             //   input,   width = 1,          .awready
		.m0_wdata    (agilex_5_soc_hps2fpga_translator_m0_wdata),                               //  output,  width = 32,          .wdata
		.m0_wstrb    (agilex_5_soc_hps2fpga_translator_m0_wstrb),                               //  output,   width = 4,          .wstrb
		.m0_wlast    (agilex_5_soc_hps2fpga_translator_m0_wlast),                               //  output,   width = 1,          .wlast
		.m0_wvalid   (agilex_5_soc_hps2fpga_translator_m0_wvalid),                              //  output,   width = 1,          .wvalid
		.m0_wuser    (agilex_5_soc_hps2fpga_translator_m0_wuser),                               //  output,   width = 1,          .wuser
		.m0_wready   (agilex_5_soc_hps2fpga_translator_m0_wready),                              //   input,   width = 1,          .wready
		.m0_bid      (agilex_5_soc_hps2fpga_translator_m0_bid),                                 //   input,   width = 4,          .bid
		.m0_bresp    (agilex_5_soc_hps2fpga_translator_m0_bresp),                               //   input,   width = 2,          .bresp
		.m0_buser    (agilex_5_soc_hps2fpga_translator_m0_buser),                               //   input,   width = 1,          .buser
		.m0_bvalid   (agilex_5_soc_hps2fpga_translator_m0_bvalid),                              //   input,   width = 1,          .bvalid
		.m0_bready   (agilex_5_soc_hps2fpga_translator_m0_bready),                              //  output,   width = 1,          .bready
		.m0_arid     (agilex_5_soc_hps2fpga_translator_m0_arid),                                //  output,   width = 4,          .arid
		.m0_araddr   (agilex_5_soc_hps2fpga_translator_m0_araddr),                              //  output,  width = 32,          .araddr
		.m0_arlen    (agilex_5_soc_hps2fpga_translator_m0_arlen),                               //  output,   width = 8,          .arlen
		.m0_arsize   (agilex_5_soc_hps2fpga_translator_m0_arsize),                              //  output,   width = 3,          .arsize
		.m0_arburst  (agilex_5_soc_hps2fpga_translator_m0_arburst),                             //  output,   width = 2,          .arburst
		.m0_arlock   (agilex_5_soc_hps2fpga_translator_m0_arlock),                              //  output,   width = 1,          .arlock
		.m0_arcache  (agilex_5_soc_hps2fpga_translator_m0_arcache),                             //  output,   width = 4,          .arcache
		.m0_arprot   (agilex_5_soc_hps2fpga_translator_m0_arprot),                              //  output,   width = 3,          .arprot
		.m0_aruser   (agilex_5_soc_hps2fpga_translator_m0_aruser),                              //  output,   width = 1,          .aruser
		.m0_arqos    (agilex_5_soc_hps2fpga_translator_m0_arqos),                               //  output,   width = 4,          .arqos
		.m0_arregion (agilex_5_soc_hps2fpga_translator_m0_arregion),                            //  output,   width = 4,          .arregion
		.m0_arvalid  (agilex_5_soc_hps2fpga_translator_m0_arvalid),                             //  output,   width = 1,          .arvalid
		.m0_arready  (agilex_5_soc_hps2fpga_translator_m0_arready),                             //   input,   width = 1,          .arready
		.m0_rid      (agilex_5_soc_hps2fpga_translator_m0_rid),                                 //   input,   width = 4,          .rid
		.m0_rdata    (agilex_5_soc_hps2fpga_translator_m0_rdata),                               //   input,  width = 32,          .rdata
		.m0_rresp    (agilex_5_soc_hps2fpga_translator_m0_rresp),                               //   input,   width = 2,          .rresp
		.m0_rlast    (agilex_5_soc_hps2fpga_translator_m0_rlast),                               //   input,   width = 1,          .rlast
		.m0_rvalid   (agilex_5_soc_hps2fpga_translator_m0_rvalid),                              //   input,   width = 1,          .rvalid
		.m0_rready   (agilex_5_soc_hps2fpga_translator_m0_rready),                              //  output,   width = 1,          .rready
		.m0_ruser    (agilex_5_soc_hps2fpga_translator_m0_ruser),                               //   input,   width = 1,          .ruser
		.s0_awid     (agilex_5_soc_hps2fpga_awid),                                              //   input,   width = 4,        s0.awid
		.s0_awaddr   (agilex_5_soc_hps2fpga_awaddr),                                            //   input,  width = 32,          .awaddr
		.s0_awlen    (agilex_5_soc_hps2fpga_awlen),                                             //   input,   width = 8,          .awlen
		.s0_awsize   (agilex_5_soc_hps2fpga_awsize),                                            //   input,   width = 3,          .awsize
		.s0_awburst  (agilex_5_soc_hps2fpga_awburst),                                           //   input,   width = 2,          .awburst
		.s0_awlock   (agilex_5_soc_hps2fpga_awlock),                                            //   input,   width = 1,          .awlock
		.s0_awcache  (agilex_5_soc_hps2fpga_awcache),                                           //   input,   width = 4,          .awcache
		.s0_awprot   (agilex_5_soc_hps2fpga_awprot),                                            //   input,   width = 3,          .awprot
		.s0_awvalid  (agilex_5_soc_hps2fpga_awvalid),                                           //   input,   width = 1,          .awvalid
		.s0_awready  (agilex_5_soc_hps2fpga_awready),                                           //  output,   width = 1,          .awready
		.s0_wdata    (agilex_5_soc_hps2fpga_wdata),                                             //   input,  width = 32,          .wdata
		.s0_wstrb    (agilex_5_soc_hps2fpga_wstrb),                                             //   input,   width = 4,          .wstrb
		.s0_wlast    (agilex_5_soc_hps2fpga_wlast),                                             //   input,   width = 1,          .wlast
		.s0_wvalid   (agilex_5_soc_hps2fpga_wvalid),                                            //   input,   width = 1,          .wvalid
		.s0_wready   (agilex_5_soc_hps2fpga_wready),                                            //  output,   width = 1,          .wready
		.s0_bid      (agilex_5_soc_hps2fpga_bid),                                               //  output,   width = 4,          .bid
		.s0_bresp    (agilex_5_soc_hps2fpga_bresp),                                             //  output,   width = 2,          .bresp
		.s0_bvalid   (agilex_5_soc_hps2fpga_bvalid),                                            //  output,   width = 1,          .bvalid
		.s0_bready   (agilex_5_soc_hps2fpga_bready),                                            //   input,   width = 1,          .bready
		.s0_arid     (agilex_5_soc_hps2fpga_arid),                                              //   input,   width = 4,          .arid
		.s0_araddr   (agilex_5_soc_hps2fpga_araddr),                                            //   input,  width = 32,          .araddr
		.s0_arlen    (agilex_5_soc_hps2fpga_arlen),                                             //   input,   width = 8,          .arlen
		.s0_arsize   (agilex_5_soc_hps2fpga_arsize),                                            //   input,   width = 3,          .arsize
		.s0_arburst  (agilex_5_soc_hps2fpga_arburst),                                           //   input,   width = 2,          .arburst
		.s0_arlock   (agilex_5_soc_hps2fpga_arlock),                                            //   input,   width = 1,          .arlock
		.s0_arcache  (agilex_5_soc_hps2fpga_arcache),                                           //   input,   width = 4,          .arcache
		.s0_arprot   (agilex_5_soc_hps2fpga_arprot),                                            //   input,   width = 3,          .arprot
		.s0_arvalid  (agilex_5_soc_hps2fpga_arvalid),                                           //   input,   width = 1,          .arvalid
		.s0_arready  (agilex_5_soc_hps2fpga_arready),                                           //  output,   width = 1,          .arready
		.s0_rid      (agilex_5_soc_hps2fpga_rid),                                               //  output,   width = 4,          .rid
		.s0_rdata    (agilex_5_soc_hps2fpga_rdata),                                             //  output,  width = 32,          .rdata
		.s0_rresp    (agilex_5_soc_hps2fpga_rresp),                                             //  output,   width = 2,          .rresp
		.s0_rlast    (agilex_5_soc_hps2fpga_rlast),                                             //  output,   width = 1,          .rlast
		.s0_rvalid   (agilex_5_soc_hps2fpga_rvalid),                                            //  output,   width = 1,          .rvalid
		.s0_rready   (agilex_5_soc_hps2fpga_rready),                                            //   input,   width = 1,          .rready
		.s0_awuser   (1'b0),                                                                    // (terminated),                        
		.s0_awqos    (4'b0000),                                                                 // (terminated),                        
		.s0_awregion (4'b0000),                                                                 // (terminated),                        
		.s0_wuser    (1'b0),                                                                    // (terminated),                        
		.s0_buser    (),                                                                        // (terminated),                        
		.s0_aruser   (1'b0),                                                                    // (terminated),                        
		.s0_arqos    (4'b0000),                                                                 // (terminated),                        
		.s0_arregion (4'b0000),                                                                 // (terminated),                        
		.s0_ruser    (),                                                                        // (terminated),                        
		.s0_wid      (4'b0000),                                                                 // (terminated),                        
		.s0_ardomain (2'b00),                                                                   // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                                 // (terminated),                        
		.s0_arbar    (2'b00),                                                                   // (terminated),                        
		.s0_awdomain (2'b00),                                                                   // (terminated),                        
		.s0_awsnoop  (3'b000),                                                                  // (terminated),                        
		.s0_awbar    (2'b00),                                                                   // (terminated),                        
		.s0_awunique (1'b0),                                                                    // (terminated),                        
		.m0_wid      (),                                                                        // (terminated),                        
		.m0_ardomain (),                                                                        // (terminated),                        
		.m0_arsnoop  (),                                                                        // (terminated),                        
		.m0_arbar    (),                                                                        // (terminated),                        
		.m0_awdomain (),                                                                        // (terminated),                        
		.m0_awsnoop  (),                                                                        // (terminated),                        
		.m0_awbar    (),                                                                        // (terminated),                        
		.m0_awunique ()                                                                         // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (29),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (29),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) agilex_5_soc_lwhps2fpga_translator (
		.aclk        (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,   width = 1,       clk.clk
		.aresetn     (~agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (agilex_5_soc_lwhps2fpga_translator_m0_awid),                                //  output,   width = 4,        m0.awid
		.m0_awaddr   (agilex_5_soc_lwhps2fpga_translator_m0_awaddr),                              //  output,  width = 29,          .awaddr
		.m0_awlen    (agilex_5_soc_lwhps2fpga_translator_m0_awlen),                               //  output,   width = 8,          .awlen
		.m0_awsize   (agilex_5_soc_lwhps2fpga_translator_m0_awsize),                              //  output,   width = 3,          .awsize
		.m0_awburst  (agilex_5_soc_lwhps2fpga_translator_m0_awburst),                             //  output,   width = 2,          .awburst
		.m0_awlock   (agilex_5_soc_lwhps2fpga_translator_m0_awlock),                              //  output,   width = 1,          .awlock
		.m0_awcache  (agilex_5_soc_lwhps2fpga_translator_m0_awcache),                             //  output,   width = 4,          .awcache
		.m0_awprot   (agilex_5_soc_lwhps2fpga_translator_m0_awprot),                              //  output,   width = 3,          .awprot
		.m0_awuser   (agilex_5_soc_lwhps2fpga_translator_m0_awuser),                              //  output,   width = 1,          .awuser
		.m0_awqos    (agilex_5_soc_lwhps2fpga_translator_m0_awqos),                               //  output,   width = 4,          .awqos
		.m0_awregion (agilex_5_soc_lwhps2fpga_translator_m0_awregion),                            //  output,   width = 4,          .awregion
		.m0_awvalid  (agilex_5_soc_lwhps2fpga_translator_m0_awvalid),                             //  output,   width = 1,          .awvalid
		.m0_awready  (agilex_5_soc_lwhps2fpga_translator_m0_awready),                             //   input,   width = 1,          .awready
		.m0_wdata    (agilex_5_soc_lwhps2fpga_translator_m0_wdata),                               //  output,  width = 32,          .wdata
		.m0_wstrb    (agilex_5_soc_lwhps2fpga_translator_m0_wstrb),                               //  output,   width = 4,          .wstrb
		.m0_wlast    (agilex_5_soc_lwhps2fpga_translator_m0_wlast),                               //  output,   width = 1,          .wlast
		.m0_wvalid   (agilex_5_soc_lwhps2fpga_translator_m0_wvalid),                              //  output,   width = 1,          .wvalid
		.m0_wuser    (agilex_5_soc_lwhps2fpga_translator_m0_wuser),                               //  output,   width = 1,          .wuser
		.m0_wready   (agilex_5_soc_lwhps2fpga_translator_m0_wready),                              //   input,   width = 1,          .wready
		.m0_bid      (agilex_5_soc_lwhps2fpga_translator_m0_bid),                                 //   input,   width = 4,          .bid
		.m0_bresp    (agilex_5_soc_lwhps2fpga_translator_m0_bresp),                               //   input,   width = 2,          .bresp
		.m0_buser    (agilex_5_soc_lwhps2fpga_translator_m0_buser),                               //   input,   width = 1,          .buser
		.m0_bvalid   (agilex_5_soc_lwhps2fpga_translator_m0_bvalid),                              //   input,   width = 1,          .bvalid
		.m0_bready   (agilex_5_soc_lwhps2fpga_translator_m0_bready),                              //  output,   width = 1,          .bready
		.m0_arid     (agilex_5_soc_lwhps2fpga_translator_m0_arid),                                //  output,   width = 4,          .arid
		.m0_araddr   (agilex_5_soc_lwhps2fpga_translator_m0_araddr),                              //  output,  width = 29,          .araddr
		.m0_arlen    (agilex_5_soc_lwhps2fpga_translator_m0_arlen),                               //  output,   width = 8,          .arlen
		.m0_arsize   (agilex_5_soc_lwhps2fpga_translator_m0_arsize),                              //  output,   width = 3,          .arsize
		.m0_arburst  (agilex_5_soc_lwhps2fpga_translator_m0_arburst),                             //  output,   width = 2,          .arburst
		.m0_arlock   (agilex_5_soc_lwhps2fpga_translator_m0_arlock),                              //  output,   width = 1,          .arlock
		.m0_arcache  (agilex_5_soc_lwhps2fpga_translator_m0_arcache),                             //  output,   width = 4,          .arcache
		.m0_arprot   (agilex_5_soc_lwhps2fpga_translator_m0_arprot),                              //  output,   width = 3,          .arprot
		.m0_aruser   (agilex_5_soc_lwhps2fpga_translator_m0_aruser),                              //  output,   width = 1,          .aruser
		.m0_arqos    (agilex_5_soc_lwhps2fpga_translator_m0_arqos),                               //  output,   width = 4,          .arqos
		.m0_arregion (agilex_5_soc_lwhps2fpga_translator_m0_arregion),                            //  output,   width = 4,          .arregion
		.m0_arvalid  (agilex_5_soc_lwhps2fpga_translator_m0_arvalid),                             //  output,   width = 1,          .arvalid
		.m0_arready  (agilex_5_soc_lwhps2fpga_translator_m0_arready),                             //   input,   width = 1,          .arready
		.m0_rid      (agilex_5_soc_lwhps2fpga_translator_m0_rid),                                 //   input,   width = 4,          .rid
		.m0_rdata    (agilex_5_soc_lwhps2fpga_translator_m0_rdata),                               //   input,  width = 32,          .rdata
		.m0_rresp    (agilex_5_soc_lwhps2fpga_translator_m0_rresp),                               //   input,   width = 2,          .rresp
		.m0_rlast    (agilex_5_soc_lwhps2fpga_translator_m0_rlast),                               //   input,   width = 1,          .rlast
		.m0_rvalid   (agilex_5_soc_lwhps2fpga_translator_m0_rvalid),                              //   input,   width = 1,          .rvalid
		.m0_rready   (agilex_5_soc_lwhps2fpga_translator_m0_rready),                              //  output,   width = 1,          .rready
		.m0_ruser    (agilex_5_soc_lwhps2fpga_translator_m0_ruser),                               //   input,   width = 1,          .ruser
		.s0_awid     (agilex_5_soc_lwhps2fpga_awid),                                              //   input,   width = 4,        s0.awid
		.s0_awaddr   (agilex_5_soc_lwhps2fpga_awaddr),                                            //   input,  width = 29,          .awaddr
		.s0_awlen    (agilex_5_soc_lwhps2fpga_awlen),                                             //   input,   width = 8,          .awlen
		.s0_awsize   (agilex_5_soc_lwhps2fpga_awsize),                                            //   input,   width = 3,          .awsize
		.s0_awburst  (agilex_5_soc_lwhps2fpga_awburst),                                           //   input,   width = 2,          .awburst
		.s0_awlock   (agilex_5_soc_lwhps2fpga_awlock),                                            //   input,   width = 1,          .awlock
		.s0_awcache  (agilex_5_soc_lwhps2fpga_awcache),                                           //   input,   width = 4,          .awcache
		.s0_awprot   (agilex_5_soc_lwhps2fpga_awprot),                                            //   input,   width = 3,          .awprot
		.s0_awvalid  (agilex_5_soc_lwhps2fpga_awvalid),                                           //   input,   width = 1,          .awvalid
		.s0_awready  (agilex_5_soc_lwhps2fpga_awready),                                           //  output,   width = 1,          .awready
		.s0_wdata    (agilex_5_soc_lwhps2fpga_wdata),                                             //   input,  width = 32,          .wdata
		.s0_wstrb    (agilex_5_soc_lwhps2fpga_wstrb),                                             //   input,   width = 4,          .wstrb
		.s0_wlast    (agilex_5_soc_lwhps2fpga_wlast),                                             //   input,   width = 1,          .wlast
		.s0_wvalid   (agilex_5_soc_lwhps2fpga_wvalid),                                            //   input,   width = 1,          .wvalid
		.s0_wready   (agilex_5_soc_lwhps2fpga_wready),                                            //  output,   width = 1,          .wready
		.s0_bid      (agilex_5_soc_lwhps2fpga_bid),                                               //  output,   width = 4,          .bid
		.s0_bresp    (agilex_5_soc_lwhps2fpga_bresp),                                             //  output,   width = 2,          .bresp
		.s0_bvalid   (agilex_5_soc_lwhps2fpga_bvalid),                                            //  output,   width = 1,          .bvalid
		.s0_bready   (agilex_5_soc_lwhps2fpga_bready),                                            //   input,   width = 1,          .bready
		.s0_arid     (agilex_5_soc_lwhps2fpga_arid),                                              //   input,   width = 4,          .arid
		.s0_araddr   (agilex_5_soc_lwhps2fpga_araddr),                                            //   input,  width = 29,          .araddr
		.s0_arlen    (agilex_5_soc_lwhps2fpga_arlen),                                             //   input,   width = 8,          .arlen
		.s0_arsize   (agilex_5_soc_lwhps2fpga_arsize),                                            //   input,   width = 3,          .arsize
		.s0_arburst  (agilex_5_soc_lwhps2fpga_arburst),                                           //   input,   width = 2,          .arburst
		.s0_arlock   (agilex_5_soc_lwhps2fpga_arlock),                                            //   input,   width = 1,          .arlock
		.s0_arcache  (agilex_5_soc_lwhps2fpga_arcache),                                           //   input,   width = 4,          .arcache
		.s0_arprot   (agilex_5_soc_lwhps2fpga_arprot),                                            //   input,   width = 3,          .arprot
		.s0_arvalid  (agilex_5_soc_lwhps2fpga_arvalid),                                           //   input,   width = 1,          .arvalid
		.s0_arready  (agilex_5_soc_lwhps2fpga_arready),                                           //  output,   width = 1,          .arready
		.s0_rid      (agilex_5_soc_lwhps2fpga_rid),                                               //  output,   width = 4,          .rid
		.s0_rdata    (agilex_5_soc_lwhps2fpga_rdata),                                             //  output,  width = 32,          .rdata
		.s0_rresp    (agilex_5_soc_lwhps2fpga_rresp),                                             //  output,   width = 2,          .rresp
		.s0_rlast    (agilex_5_soc_lwhps2fpga_rlast),                                             //  output,   width = 1,          .rlast
		.s0_rvalid   (agilex_5_soc_lwhps2fpga_rvalid),                                            //  output,   width = 1,          .rvalid
		.s0_rready   (agilex_5_soc_lwhps2fpga_rready),                                            //   input,   width = 1,          .rready
		.s0_awuser   (1'b0),                                                                      // (terminated),                        
		.s0_awqos    (4'b0000),                                                                   // (terminated),                        
		.s0_awregion (4'b0000),                                                                   // (terminated),                        
		.s0_wuser    (1'b0),                                                                      // (terminated),                        
		.s0_buser    (),                                                                          // (terminated),                        
		.s0_aruser   (1'b0),                                                                      // (terminated),                        
		.s0_arqos    (4'b0000),                                                                   // (terminated),                        
		.s0_arregion (4'b0000),                                                                   // (terminated),                        
		.s0_ruser    (),                                                                          // (terminated),                        
		.s0_wid      (4'b0000),                                                                   // (terminated),                        
		.s0_ardomain (2'b00),                                                                     // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                                   // (terminated),                        
		.s0_arbar    (2'b00),                                                                     // (terminated),                        
		.s0_awdomain (2'b00),                                                                     // (terminated),                        
		.s0_awsnoop  (3'b000),                                                                    // (terminated),                        
		.s0_awbar    (2'b00),                                                                     // (terminated),                        
		.s0_awunique (1'b0),                                                                      // (terminated),                        
		.m0_wid      (),                                                                          // (terminated),                        
		.m0_ardomain (),                                                                          // (terminated),                        
		.m0_arsnoop  (),                                                                          // (terminated),                        
		.m0_arbar    (),                                                                          // (terminated),                        
		.m0_awdomain (),                                                                          // (terminated),                        
		.m0_awsnoop  (),                                                                          // (terminated),                        
		.m0_awbar    (),                                                                          // (terminated),                        
		.m0_awunique ()                                                                           // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) hps_jtag_master_master_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,   width = 1,                       clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,   width = 1,                     reset.reset
		.uav_address            (hps_jtag_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (hps_jtag_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (hps_jtag_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (hps_jtag_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (hps_jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (hps_jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (hps_jtag_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (hps_jtag_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (hps_jtag_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (hps_jtag_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (hps_jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (hps_jtag_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (hps_jtag_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (hps_jtag_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (hps_jtag_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (hps_jtag_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (hps_jtag_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (hps_jtag_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (hps_jtag_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                      // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                                      // (terminated),                                        
		.av_lock                (1'b0),                                                                      // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                      // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                      // (terminated),                                        
		.uav_clken              (),                                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                                     // (terminated),                                        
		.av_response            (),                                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                                           // (terminated),                                        
	);

	ghrd_hps_system_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) jtag_master_master_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                        //   input,   width = 1,                       clk.clk
		.reset                  (jtag_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (jtag_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                  // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (0),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (0),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (0),
		.USE_M0_AWPROT                     (0),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (0),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (0),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (0),
		.USE_M0_ARCACHE                    (0),
		.USE_M0_ARQOS                      (0),
		.USE_M0_ARPROT                     (0),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (7),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (7),
		.M0_ADDR_WIDTH                     (13),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (13),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (0),
		.USE_M0_ARUSER                     (0),
		.USE_M0_WUSER                      (0),
		.USE_M0_RUSER                      (0),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) onchip_sram_axi_s1_translator (
		.aclk        (agilex_5_soc_h2f_user0_clk_clk),                                       //   input,   width = 1,       clk.clk
		.aresetn     (~onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (onchip_sram_axi_s1_awid),                                              //  output,   width = 7,        m0.awid
		.m0_awaddr   (onchip_sram_axi_s1_awaddr),                                            //  output,  width = 13,          .awaddr
		.m0_awlen    (onchip_sram_axi_s1_awlen),                                             //  output,   width = 8,          .awlen
		.m0_awsize   (onchip_sram_axi_s1_awsize),                                            //  output,   width = 3,          .awsize
		.m0_awburst  (onchip_sram_axi_s1_awburst),                                           //  output,   width = 2,          .awburst
		.m0_awvalid  (onchip_sram_axi_s1_awvalid),                                           //  output,   width = 1,          .awvalid
		.m0_awready  (onchip_sram_axi_s1_awready),                                           //   input,   width = 1,          .awready
		.m0_wdata    (onchip_sram_axi_s1_wdata),                                             //  output,  width = 64,          .wdata
		.m0_wstrb    (onchip_sram_axi_s1_wstrb),                                             //  output,   width = 8,          .wstrb
		.m0_wlast    (onchip_sram_axi_s1_wlast),                                             //  output,   width = 1,          .wlast
		.m0_wvalid   (onchip_sram_axi_s1_wvalid),                                            //  output,   width = 1,          .wvalid
		.m0_wready   (onchip_sram_axi_s1_wready),                                            //   input,   width = 1,          .wready
		.m0_bid      (onchip_sram_axi_s1_bid),                                               //   input,   width = 7,          .bid
		.m0_bresp    (onchip_sram_axi_s1_bresp),                                             //   input,   width = 2,          .bresp
		.m0_bvalid   (onchip_sram_axi_s1_bvalid),                                            //   input,   width = 1,          .bvalid
		.m0_bready   (onchip_sram_axi_s1_bready),                                            //  output,   width = 1,          .bready
		.m0_arid     (onchip_sram_axi_s1_arid),                                              //  output,   width = 7,          .arid
		.m0_araddr   (onchip_sram_axi_s1_araddr),                                            //  output,  width = 13,          .araddr
		.m0_arlen    (onchip_sram_axi_s1_arlen),                                             //  output,   width = 8,          .arlen
		.m0_arsize   (onchip_sram_axi_s1_arsize),                                            //  output,   width = 3,          .arsize
		.m0_arburst  (onchip_sram_axi_s1_arburst),                                           //  output,   width = 2,          .arburst
		.m0_arvalid  (onchip_sram_axi_s1_arvalid),                                           //  output,   width = 1,          .arvalid
		.m0_arready  (onchip_sram_axi_s1_arready),                                           //   input,   width = 1,          .arready
		.m0_rid      (onchip_sram_axi_s1_rid),                                               //   input,   width = 7,          .rid
		.m0_rdata    (onchip_sram_axi_s1_rdata),                                             //   input,  width = 64,          .rdata
		.m0_rresp    (onchip_sram_axi_s1_rresp),                                             //   input,   width = 2,          .rresp
		.m0_rlast    (onchip_sram_axi_s1_rlast),                                             //   input,   width = 1,          .rlast
		.m0_rvalid   (onchip_sram_axi_s1_rvalid),                                            //   input,   width = 1,          .rvalid
		.m0_rready   (onchip_sram_axi_s1_rready),                                            //  output,   width = 1,          .rready
		.s0_awid     (onchip_sram_axi_s1_agent_altera_axi_master_awid),                      //   input,   width = 7,        s0.awid
		.s0_awaddr   (onchip_sram_axi_s1_agent_altera_axi_master_awaddr),                    //   input,  width = 13,          .awaddr
		.s0_awlen    (onchip_sram_axi_s1_agent_altera_axi_master_awlen),                     //   input,   width = 8,          .awlen
		.s0_awsize   (onchip_sram_axi_s1_agent_altera_axi_master_awsize),                    //   input,   width = 3,          .awsize
		.s0_awburst  (onchip_sram_axi_s1_agent_altera_axi_master_awburst),                   //   input,   width = 2,          .awburst
		.s0_awlock   (onchip_sram_axi_s1_agent_altera_axi_master_awlock),                    //   input,   width = 1,          .awlock
		.s0_awcache  (onchip_sram_axi_s1_agent_altera_axi_master_awcache),                   //   input,   width = 4,          .awcache
		.s0_awprot   (onchip_sram_axi_s1_agent_altera_axi_master_awprot),                    //   input,   width = 3,          .awprot
		.s0_awuser   (onchip_sram_axi_s1_agent_altera_axi_master_awuser),                    //   input,   width = 1,          .awuser
		.s0_awqos    (onchip_sram_axi_s1_agent_altera_axi_master_awqos),                     //   input,   width = 4,          .awqos
		.s0_awregion (onchip_sram_axi_s1_agent_altera_axi_master_awregion),                  //   input,   width = 4,          .awregion
		.s0_awvalid  (onchip_sram_axi_s1_agent_altera_axi_master_awvalid),                   //   input,   width = 1,          .awvalid
		.s0_awready  (onchip_sram_axi_s1_agent_altera_axi_master_awready),                   //  output,   width = 1,          .awready
		.s0_wdata    (onchip_sram_axi_s1_agent_altera_axi_master_wdata),                     //   input,  width = 64,          .wdata
		.s0_wstrb    (onchip_sram_axi_s1_agent_altera_axi_master_wstrb),                     //   input,   width = 8,          .wstrb
		.s0_wlast    (onchip_sram_axi_s1_agent_altera_axi_master_wlast),                     //   input,   width = 1,          .wlast
		.s0_wvalid   (onchip_sram_axi_s1_agent_altera_axi_master_wvalid),                    //   input,   width = 1,          .wvalid
		.s0_wuser    (onchip_sram_axi_s1_agent_altera_axi_master_wuser),                     //   input,   width = 1,          .wuser
		.s0_wready   (onchip_sram_axi_s1_agent_altera_axi_master_wready),                    //  output,   width = 1,          .wready
		.s0_bid      (onchip_sram_axi_s1_agent_altera_axi_master_bid),                       //  output,   width = 7,          .bid
		.s0_bresp    (onchip_sram_axi_s1_agent_altera_axi_master_bresp),                     //  output,   width = 2,          .bresp
		.s0_buser    (onchip_sram_axi_s1_agent_altera_axi_master_buser),                     //  output,   width = 1,          .buser
		.s0_bvalid   (onchip_sram_axi_s1_agent_altera_axi_master_bvalid),                    //  output,   width = 1,          .bvalid
		.s0_bready   (onchip_sram_axi_s1_agent_altera_axi_master_bready),                    //   input,   width = 1,          .bready
		.s0_arid     (onchip_sram_axi_s1_agent_altera_axi_master_arid),                      //   input,   width = 7,          .arid
		.s0_araddr   (onchip_sram_axi_s1_agent_altera_axi_master_araddr),                    //   input,  width = 13,          .araddr
		.s0_arlen    (onchip_sram_axi_s1_agent_altera_axi_master_arlen),                     //   input,   width = 8,          .arlen
		.s0_arsize   (onchip_sram_axi_s1_agent_altera_axi_master_arsize),                    //   input,   width = 3,          .arsize
		.s0_arburst  (onchip_sram_axi_s1_agent_altera_axi_master_arburst),                   //   input,   width = 2,          .arburst
		.s0_arlock   (onchip_sram_axi_s1_agent_altera_axi_master_arlock),                    //   input,   width = 1,          .arlock
		.s0_arcache  (onchip_sram_axi_s1_agent_altera_axi_master_arcache),                   //   input,   width = 4,          .arcache
		.s0_arprot   (onchip_sram_axi_s1_agent_altera_axi_master_arprot),                    //   input,   width = 3,          .arprot
		.s0_aruser   (onchip_sram_axi_s1_agent_altera_axi_master_aruser),                    //   input,   width = 1,          .aruser
		.s0_arqos    (onchip_sram_axi_s1_agent_altera_axi_master_arqos),                     //   input,   width = 4,          .arqos
		.s0_arregion (onchip_sram_axi_s1_agent_altera_axi_master_arregion),                  //   input,   width = 4,          .arregion
		.s0_arvalid  (onchip_sram_axi_s1_agent_altera_axi_master_arvalid),                   //   input,   width = 1,          .arvalid
		.s0_arready  (onchip_sram_axi_s1_agent_altera_axi_master_arready),                   //  output,   width = 1,          .arready
		.s0_rid      (onchip_sram_axi_s1_agent_altera_axi_master_rid),                       //  output,   width = 7,          .rid
		.s0_rdata    (onchip_sram_axi_s1_agent_altera_axi_master_rdata),                     //  output,  width = 64,          .rdata
		.s0_rresp    (onchip_sram_axi_s1_agent_altera_axi_master_rresp),                     //  output,   width = 2,          .rresp
		.s0_rlast    (onchip_sram_axi_s1_agent_altera_axi_master_rlast),                     //  output,   width = 1,          .rlast
		.s0_rvalid   (onchip_sram_axi_s1_agent_altera_axi_master_rvalid),                    //  output,   width = 1,          .rvalid
		.s0_rready   (onchip_sram_axi_s1_agent_altera_axi_master_rready),                    //   input,   width = 1,          .rready
		.s0_ruser    (onchip_sram_axi_s1_agent_altera_axi_master_ruser),                     //  output,   width = 1,          .ruser
		.m0_awlock   (),                                                                     // (terminated),                        
		.m0_awcache  (),                                                                     // (terminated),                        
		.m0_awprot   (),                                                                     // (terminated),                        
		.m0_awuser   (),                                                                     // (terminated),                        
		.m0_awqos    (),                                                                     // (terminated),                        
		.m0_awregion (),                                                                     // (terminated),                        
		.m0_wuser    (),                                                                     // (terminated),                        
		.m0_buser    (1'b0),                                                                 // (terminated),                        
		.m0_arlock   (),                                                                     // (terminated),                        
		.m0_arcache  (),                                                                     // (terminated),                        
		.m0_arprot   (),                                                                     // (terminated),                        
		.m0_aruser   (),                                                                     // (terminated),                        
		.m0_arqos    (),                                                                     // (terminated),                        
		.m0_arregion (),                                                                     // (terminated),                        
		.m0_ruser    (1'b0),                                                                 // (terminated),                        
		.s0_wid      (7'b0000000),                                                           // (terminated),                        
		.s0_ardomain (2'b00),                                                                // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                              // (terminated),                        
		.s0_arbar    (2'b00),                                                                // (terminated),                        
		.s0_awdomain (2'b00),                                                                // (terminated),                        
		.s0_awsnoop  (3'b000),                                                               // (terminated),                        
		.s0_awbar    (2'b00),                                                                // (terminated),                        
		.s0_awunique (1'b0),                                                                 // (terminated),                        
		.m0_wid      (),                                                                     // (terminated),                        
		.m0_ardomain (),                                                                     // (terminated),                        
		.m0_arsnoop  (),                                                                     // (terminated),                        
		.m0_arbar    (),                                                                     // (terminated),                        
		.m0_awdomain (),                                                                     // (terminated),                        
		.m0_awsnoop  (),                                                                     // (terminated),                        
		.m0_awbar    (),                                                                     // (terminated),                        
		.m0_awunique ()                                                                      // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),                             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                          //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),                                //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),                               //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                            //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                           //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                         //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                                      //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                                        //  output,   width = 1,                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                                         //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                                     //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),                                    //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),                                  //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),                                   //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) sys_id_control_slave_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (sys_id_control_slave_agent_m0_address),                                    //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (sys_id_control_slave_agent_m0_burstcount),                                 //   input,   width = 3,                         .burstcount
		.uav_read               (sys_id_control_slave_agent_m0_read),                                       //   input,   width = 1,                         .read
		.uav_write              (sys_id_control_slave_agent_m0_write),                                      //   input,   width = 1,                         .write
		.uav_waitrequest        (sys_id_control_slave_agent_m0_waitrequest),                                //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sys_id_control_slave_agent_m0_readdatavalid),                              //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sys_id_control_slave_agent_m0_byteenable),                                 //   input,   width = 4,                         .byteenable
		.uav_readdata           (sys_id_control_slave_agent_m0_readdata),                                   //  output,  width = 32,                         .readdata
		.uav_writedata          (sys_id_control_slave_agent_m0_writedata),                                  //   input,  width = 32,                         .writedata
		.uav_lock               (sys_id_control_slave_agent_m0_lock),                                       //   input,   width = 1,                         .lock
		.uav_debugaccess        (sys_id_control_slave_agent_m0_debugaccess),                                //   input,   width = 1,                         .debugaccess
		.av_address             (sys_id_control_slave_address),                                             //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sys_id_control_slave_readdata),                                            //   input,  width = 32,                         .readdata
		.av_write               (),                                                                         // (terminated),                                       
		.av_read                (),                                                                         // (terminated),                                       
		.av_writedata           (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_chipselect          (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) pb_s1_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pb_s1_agent_m0_address),                                                   //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (pb_s1_agent_m0_burstcount),                                                //   input,   width = 3,                         .burstcount
		.uav_read               (pb_s1_agent_m0_read),                                                      //   input,   width = 1,                         .read
		.uav_write              (pb_s1_agent_m0_write),                                                     //   input,   width = 1,                         .write
		.uav_waitrequest        (pb_s1_agent_m0_waitrequest),                                               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pb_s1_agent_m0_readdatavalid),                                             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pb_s1_agent_m0_byteenable),                                                //   input,   width = 4,                         .byteenable
		.uav_readdata           (pb_s1_agent_m0_readdata),                                                  //  output,  width = 32,                         .readdata
		.uav_writedata          (pb_s1_agent_m0_writedata),                                                 //   input,  width = 32,                         .writedata
		.uav_lock               (pb_s1_agent_m0_lock),                                                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (pb_s1_agent_m0_debugaccess),                                               //   input,   width = 1,                         .debugaccess
		.av_address             (pb_s1_address),                                                            //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (pb_s1_write),                                                              //  output,   width = 1,                         .write
		.av_readdata            (pb_s1_readdata),                                                           //   input,  width = 32,                         .readdata
		.av_writedata           (pb_s1_writedata),                                                          //  output,  width = 32,                         .writedata
		.av_chipselect          (pb_s1_chipselect),                                                         //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) dipsw_s1_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (dipsw_s1_agent_m0_address),                                                //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_s1_agent_m0_burstcount),                                             //   input,   width = 3,                         .burstcount
		.uav_read               (dipsw_s1_agent_m0_read),                                                   //   input,   width = 1,                         .read
		.uav_write              (dipsw_s1_agent_m0_write),                                                  //   input,   width = 1,                         .write
		.uav_waitrequest        (dipsw_s1_agent_m0_waitrequest),                                            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (dipsw_s1_agent_m0_readdatavalid),                                          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (dipsw_s1_agent_m0_byteenable),                                             //   input,   width = 4,                         .byteenable
		.uav_readdata           (dipsw_s1_agent_m0_readdata),                                               //  output,  width = 32,                         .readdata
		.uav_writedata          (dipsw_s1_agent_m0_writedata),                                              //   input,  width = 32,                         .writedata
		.uav_lock               (dipsw_s1_agent_m0_lock),                                                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (dipsw_s1_agent_m0_debugaccess),                                            //   input,   width = 1,                         .debugaccess
		.av_address             (dipsw_s1_address),                                                         //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (dipsw_s1_write),                                                           //  output,   width = 1,                         .write
		.av_readdata            (dipsw_s1_readdata),                                                        //   input,  width = 32,                         .readdata
		.av_writedata           (dipsw_s1_writedata),                                                       //  output,  width = 32,                         .writedata
		.av_chipselect          (dipsw_s1_chipselect),                                                      //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) rgb_led0_s1_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (rgb_led0_s1_agent_m0_address),                                             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rgb_led0_s1_agent_m0_burstcount),                                          //   input,   width = 3,                         .burstcount
		.uav_read               (rgb_led0_s1_agent_m0_read),                                                //   input,   width = 1,                         .read
		.uav_write              (rgb_led0_s1_agent_m0_write),                                               //   input,   width = 1,                         .write
		.uav_waitrequest        (rgb_led0_s1_agent_m0_waitrequest),                                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rgb_led0_s1_agent_m0_readdatavalid),                                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rgb_led0_s1_agent_m0_byteenable),                                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (rgb_led0_s1_agent_m0_readdata),                                            //  output,  width = 32,                         .readdata
		.uav_writedata          (rgb_led0_s1_agent_m0_writedata),                                           //   input,  width = 32,                         .writedata
		.uav_lock               (rgb_led0_s1_agent_m0_lock),                                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (rgb_led0_s1_agent_m0_debugaccess),                                         //   input,   width = 1,                         .debugaccess
		.av_address             (rgb_led0_s1_address),                                                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (rgb_led0_s1_write),                                                        //  output,   width = 1,                         .write
		.av_readdata            (rgb_led0_s1_readdata),                                                     //   input,  width = 32,                         .readdata
		.av_writedata           (rgb_led0_s1_writedata),                                                    //  output,  width = 32,                         .writedata
		.av_chipselect          (rgb_led0_s1_chipselect),                                                   //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) rgb_led1_s1_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (rgb_led1_s1_agent_m0_address),                                             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rgb_led1_s1_agent_m0_burstcount),                                          //   input,   width = 3,                         .burstcount
		.uav_read               (rgb_led1_s1_agent_m0_read),                                                //   input,   width = 1,                         .read
		.uav_write              (rgb_led1_s1_agent_m0_write),                                               //   input,   width = 1,                         .write
		.uav_waitrequest        (rgb_led1_s1_agent_m0_waitrequest),                                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rgb_led1_s1_agent_m0_readdatavalid),                                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rgb_led1_s1_agent_m0_byteenable),                                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (rgb_led1_s1_agent_m0_readdata),                                            //  output,  width = 32,                         .readdata
		.uav_writedata          (rgb_led1_s1_agent_m0_writedata),                                           //   input,  width = 32,                         .writedata
		.uav_lock               (rgb_led1_s1_agent_m0_lock),                                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (rgb_led1_s1_agent_m0_debugaccess),                                         //   input,   width = 1,                         .debugaccess
		.av_address             (rgb_led1_s1_address),                                                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (rgb_led1_s1_write),                                                        //  output,   width = 1,                         .write
		.av_readdata            (rgb_led1_s1_readdata),                                                     //   input,  width = 32,                         .readdata
		.av_writedata           (rgb_led1_s1_writedata),                                                    //  output,  width = 32,                         .writedata
		.av_chipselect          (rgb_led1_s1_chipselect),                                                   //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) rgb_led2_s1_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (rgb_led2_s1_agent_m0_address),                                             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rgb_led2_s1_agent_m0_burstcount),                                          //   input,   width = 3,                         .burstcount
		.uav_read               (rgb_led2_s1_agent_m0_read),                                                //   input,   width = 1,                         .read
		.uav_write              (rgb_led2_s1_agent_m0_write),                                               //   input,   width = 1,                         .write
		.uav_waitrequest        (rgb_led2_s1_agent_m0_waitrequest),                                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rgb_led2_s1_agent_m0_readdatavalid),                                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rgb_led2_s1_agent_m0_byteenable),                                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (rgb_led2_s1_agent_m0_readdata),                                            //  output,  width = 32,                         .readdata
		.uav_writedata          (rgb_led2_s1_agent_m0_writedata),                                           //   input,  width = 32,                         .writedata
		.uav_lock               (rgb_led2_s1_agent_m0_lock),                                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (rgb_led2_s1_agent_m0_debugaccess),                                         //   input,   width = 1,                         .debugaccess
		.av_address             (rgb_led2_s1_address),                                                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (rgb_led2_s1_write),                                                        //  output,   width = 1,                         .write
		.av_readdata            (rgb_led2_s1_readdata),                                                     //   input,  width = 32,                         .readdata
		.av_writedata           (rgb_led2_s1_writedata),                                                    //  output,  width = 32,                         .writedata
		.av_chipselect          (rgb_led2_s1_chipselect),                                                   //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) rgb_led3_s1_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (rgb_led3_s1_agent_m0_address),                                             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rgb_led3_s1_agent_m0_burstcount),                                          //   input,   width = 3,                         .burstcount
		.uav_read               (rgb_led3_s1_agent_m0_read),                                                //   input,   width = 1,                         .read
		.uav_write              (rgb_led3_s1_agent_m0_write),                                               //   input,   width = 1,                         .write
		.uav_waitrequest        (rgb_led3_s1_agent_m0_waitrequest),                                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rgb_led3_s1_agent_m0_readdatavalid),                                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rgb_led3_s1_agent_m0_byteenable),                                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (rgb_led3_s1_agent_m0_readdata),                                            //  output,  width = 32,                         .readdata
		.uav_writedata          (rgb_led3_s1_agent_m0_writedata),                                           //   input,  width = 32,                         .writedata
		.uav_lock               (rgb_led3_s1_agent_m0_lock),                                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (rgb_led3_s1_agent_m0_debugaccess),                                         //   input,   width = 1,                         .debugaccess
		.av_address             (rgb_led3_s1_address),                                                      //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (rgb_led3_s1_write),                                                        //  output,   width = 1,                         .write
		.av_readdata            (rgb_led3_s1_readdata),                                                     //   input,  width = 32,                         .readdata
		.av_writedata           (rgb_led3_s1_writedata),                                                    //  output,  width = 32,                         .writedata
		.av_chipselect          (rgb_led3_s1_chipselect),                                                   //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_byteenable          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (137),
		.PKT_CACHE_H               (160),
		.PKT_CACHE_L               (157),
		.PKT_ADDR_SIDEBAND_H       (135),
		.PKT_ADDR_SIDEBAND_L       (135),
		.PKT_PROTECTION_H          (156),
		.PKT_PROTECTION_L          (154),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_RESPONSE_STATUS_L     (161),
		.PKT_RESPONSE_STATUS_H     (162),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (145),
		.PKT_SRC_ID_L              (142),
		.PKT_DEST_ID_H             (149),
		.PKT_DEST_ID_L             (146),
		.PKT_THREAD_ID_H           (153),
		.PKT_THREAD_ID_L           (150),
		.PKT_QOS_L                 (138),
		.PKT_QOS_H                 (141),
		.PKT_ORI_BURST_SIZE_L      (163),
		.PKT_ORI_BURST_SIZE_H      (165),
		.PKT_DATA_SIDEBAND_H       (136),
		.PKT_DATA_SIDEBAND_L       (136),
		.PKT_DOMAIN_H              (173),
		.PKT_DOMAIN_L              (172),
		.PKT_SNOOP_H               (171),
		.PKT_SNOOP_L               (168),
		.PKT_BARRIER_H             (167),
		.PKT_BARRIER_L             (166),
		.PKT_WUNIQUE               (174),
		.ST_DATA_W                 (175),
		.ST_CHANNEL_W              (16),
		.ID                        (2),
		.SYNC_RESET                (1)
	) axi_dmac_0_m_src_axi_agent (
		.aclk                   (hdmi_pll_outclk0_clk),                                              //   input,    width = 1,              clk.clk
		.aresetn                (~axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (axi_dmac_0_m_src_axi_agent_write_cp_valid),                         //  output,    width = 1,         write_cp.valid
		.write_cp_data          (axi_dmac_0_m_src_axi_agent_write_cp_data),                          //  output,  width = 175,                 .data
		.write_cp_startofpacket (axi_dmac_0_m_src_axi_agent_write_cp_startofpacket),                 //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (axi_dmac_0_m_src_axi_agent_write_cp_endofpacket),                   //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (axi_dmac_0_m_src_axi_agent_write_cp_ready),                         //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                 //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                  //   input,  width = 175,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                               //   input,   width = 16,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                         //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                           //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                 //  output,    width = 1,                 .ready
		.read_cp_valid          (axi_dmac_0_m_src_axi_agent_read_cp_valid),                          //  output,    width = 1,          read_cp.valid
		.read_cp_data           (axi_dmac_0_m_src_axi_agent_read_cp_data),                           //  output,  width = 175,                 .data
		.read_cp_startofpacket  (axi_dmac_0_m_src_axi_agent_read_cp_startofpacket),                  //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (axi_dmac_0_m_src_axi_agent_read_cp_endofpacket),                    //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (axi_dmac_0_m_src_axi_agent_read_cp_ready),                          //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                             //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                              //   input,  width = 175,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                           //   input,   width = 16,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                     //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                       //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                             //  output,    width = 1,                 .ready
		.awid                   (axi_dmac_0_m_src_axi_awid),                                         //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (axi_dmac_0_m_src_axi_awaddr),                                       //   input,   width = 32,                 .awaddr
		.awlen                  (axi_dmac_0_m_src_axi_awlen),                                        //   input,    width = 4,                 .awlen
		.awsize                 (axi_dmac_0_m_src_axi_awsize),                                       //   input,    width = 3,                 .awsize
		.awburst                (axi_dmac_0_m_src_axi_awburst),                                      //   input,    width = 2,                 .awburst
		.awlock                 (axi_dmac_0_m_src_axi_awlock),                                       //   input,    width = 2,                 .awlock
		.awcache                (axi_dmac_0_m_src_axi_awcache),                                      //   input,    width = 4,                 .awcache
		.awprot                 (axi_dmac_0_m_src_axi_awprot),                                       //   input,    width = 3,                 .awprot
		.awvalid                (axi_dmac_0_m_src_axi_awvalid),                                      //   input,    width = 1,                 .awvalid
		.awready                (axi_dmac_0_m_src_axi_awready),                                      //  output,    width = 1,                 .awready
		.wid                    (axi_dmac_0_m_src_axi_wid),                                          //   input,    width = 1,                 .wid
		.wdata                  (axi_dmac_0_m_src_axi_wdata),                                        //   input,   width = 64,                 .wdata
		.wstrb                  (axi_dmac_0_m_src_axi_wstrb),                                        //   input,    width = 8,                 .wstrb
		.wlast                  (axi_dmac_0_m_src_axi_wlast),                                        //   input,    width = 1,                 .wlast
		.wvalid                 (axi_dmac_0_m_src_axi_wvalid),                                       //   input,    width = 1,                 .wvalid
		.wready                 (axi_dmac_0_m_src_axi_wready),                                       //  output,    width = 1,                 .wready
		.bid                    (axi_dmac_0_m_src_axi_bid),                                          //  output,    width = 1,                 .bid
		.bresp                  (axi_dmac_0_m_src_axi_bresp),                                        //  output,    width = 2,                 .bresp
		.bvalid                 (axi_dmac_0_m_src_axi_bvalid),                                       //  output,    width = 1,                 .bvalid
		.bready                 (axi_dmac_0_m_src_axi_bready),                                       //   input,    width = 1,                 .bready
		.arid                   (axi_dmac_0_m_src_axi_arid),                                         //   input,    width = 1,                 .arid
		.araddr                 (axi_dmac_0_m_src_axi_araddr),                                       //   input,   width = 32,                 .araddr
		.arlen                  (axi_dmac_0_m_src_axi_arlen),                                        //   input,    width = 4,                 .arlen
		.arsize                 (axi_dmac_0_m_src_axi_arsize),                                       //   input,    width = 3,                 .arsize
		.arburst                (axi_dmac_0_m_src_axi_arburst),                                      //   input,    width = 2,                 .arburst
		.arlock                 (axi_dmac_0_m_src_axi_arlock),                                       //   input,    width = 2,                 .arlock
		.arcache                (axi_dmac_0_m_src_axi_arcache),                                      //   input,    width = 4,                 .arcache
		.arprot                 (axi_dmac_0_m_src_axi_arprot),                                       //   input,    width = 3,                 .arprot
		.arvalid                (axi_dmac_0_m_src_axi_arvalid),                                      //   input,    width = 1,                 .arvalid
		.arready                (axi_dmac_0_m_src_axi_arready),                                      //  output,    width = 1,                 .arready
		.rid                    (axi_dmac_0_m_src_axi_rid),                                          //  output,    width = 1,                 .rid
		.rdata                  (axi_dmac_0_m_src_axi_rdata),                                        //  output,   width = 64,                 .rdata
		.rresp                  (axi_dmac_0_m_src_axi_rresp),                                        //  output,    width = 2,                 .rresp
		.rlast                  (axi_dmac_0_m_src_axi_rlast),                                        //  output,    width = 1,                 .rlast
		.rvalid                 (axi_dmac_0_m_src_axi_rvalid),                                       //  output,    width = 1,                 .rvalid
		.rready                 (axi_dmac_0_m_src_axi_rready),                                       //   input,    width = 1,                 .rready
		.awuser                 (1'b0),                                                              // (terminated),                                
		.aruser                 (1'b0),                                                              // (terminated),                                
		.awqos                  (4'b0000),                                                           // (terminated),                                
		.arqos                  (4'b0000),                                                           // (terminated),                                
		.awregion               (4'b0000),                                                           // (terminated),                                
		.arregion               (4'b0000),                                                           // (terminated),                                
		.wuser                  (1'b0),                                                              // (terminated),                                
		.ruser                  (),                                                                  // (terminated),                                
		.buser                  (),                                                                  // (terminated),                                
		.arsnoop                (4'b0000),                                                           // (terminated),                                
		.ardomain               (2'b00),                                                             // (terminated),                                
		.arbar                  (2'b00),                                                             // (terminated),                                
		.awsnoop                (3'b000),                                                            // (terminated),                                
		.awdomain               (2'b00),                                                             // (terminated),                                
		.awbar                  (2'b00),                                                             // (terminated),                                
		.awunique               (1'b0)                                                               // (terminated),                                
	);

	ghrd_hps_system_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (29),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (101),
		.PKT_CACHE_H               (124),
		.PKT_CACHE_L               (121),
		.PKT_ADDR_SIDEBAND_H       (99),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_THREAD_ID_H           (117),
		.PKT_THREAD_ID_L           (114),
		.PKT_QOS_L                 (102),
		.PKT_QOS_H                 (105),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_DATA_SIDEBAND_H       (100),
		.PKT_DATA_SIDEBAND_L       (100),
		.PKT_DOMAIN_H              (137),
		.PKT_DOMAIN_L              (136),
		.PKT_SNOOP_H               (135),
		.PKT_SNOOP_L               (132),
		.PKT_BARRIER_H             (131),
		.PKT_BARRIER_L             (130),
		.PKT_WUNIQUE               (138),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.ID                        (1),
		.SYNC_RESET                (1)
	) agilex_5_soc_lwhps2fpga_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,    width = 1,              clk.clk
		.aresetn                (~agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (agilex_5_soc_lwhps2fpga_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (agilex_5_soc_lwhps2fpga_agent_write_cp_data),                               //  output,  width = 139,                 .data
		.write_cp_startofpacket (agilex_5_soc_lwhps2fpga_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (agilex_5_soc_lwhps2fpga_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (agilex_5_soc_lwhps2fpga_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_002_src_valid),                                                     //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_002_src_data),                                                      //   input,  width = 139,                 .data
		.write_rp_channel       (rsp_mux_002_src_channel),                                                   //   input,   width = 16,                 .channel
		.write_rp_startofpacket (rsp_mux_002_src_startofpacket),                                             //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_002_src_endofpacket),                                               //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_002_src_ready),                                                     //  output,    width = 1,                 .ready
		.read_cp_valid          (agilex_5_soc_lwhps2fpga_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (agilex_5_soc_lwhps2fpga_agent_read_cp_data),                                //  output,  width = 139,                 .data
		.read_cp_startofpacket  (agilex_5_soc_lwhps2fpga_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (agilex_5_soc_lwhps2fpga_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (agilex_5_soc_lwhps2fpga_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_003_src_valid),                                                     //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_003_src_data),                                                      //   input,  width = 139,                 .data
		.read_rp_channel        (rsp_mux_003_src_channel),                                                   //   input,   width = 16,                 .channel
		.read_rp_startofpacket  (rsp_mux_003_src_startofpacket),                                             //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_003_src_endofpacket),                                               //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_003_src_ready),                                                     //  output,    width = 1,                 .ready
		.awid                   (agilex_5_soc_lwhps2fpga_translator_m0_awid),                                //   input,    width = 4, altera_axi_slave.awid
		.awaddr                 (agilex_5_soc_lwhps2fpga_translator_m0_awaddr),                              //   input,   width = 29,                 .awaddr
		.awlen                  (agilex_5_soc_lwhps2fpga_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (agilex_5_soc_lwhps2fpga_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (agilex_5_soc_lwhps2fpga_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (agilex_5_soc_lwhps2fpga_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (agilex_5_soc_lwhps2fpga_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (agilex_5_soc_lwhps2fpga_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (agilex_5_soc_lwhps2fpga_translator_m0_awuser),                              //   input,    width = 1,                 .awuser
		.awqos                  (agilex_5_soc_lwhps2fpga_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (agilex_5_soc_lwhps2fpga_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (agilex_5_soc_lwhps2fpga_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (agilex_5_soc_lwhps2fpga_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (agilex_5_soc_lwhps2fpga_translator_m0_wdata),                               //   input,   width = 32,                 .wdata
		.wstrb                  (agilex_5_soc_lwhps2fpga_translator_m0_wstrb),                               //   input,    width = 4,                 .wstrb
		.wlast                  (agilex_5_soc_lwhps2fpga_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (agilex_5_soc_lwhps2fpga_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (agilex_5_soc_lwhps2fpga_translator_m0_wuser),                               //   input,    width = 1,                 .wuser
		.wready                 (agilex_5_soc_lwhps2fpga_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (agilex_5_soc_lwhps2fpga_translator_m0_bid),                                 //  output,    width = 4,                 .bid
		.bresp                  (agilex_5_soc_lwhps2fpga_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (agilex_5_soc_lwhps2fpga_translator_m0_buser),                               //  output,    width = 1,                 .buser
		.bvalid                 (agilex_5_soc_lwhps2fpga_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (agilex_5_soc_lwhps2fpga_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (agilex_5_soc_lwhps2fpga_translator_m0_arid),                                //   input,    width = 4,                 .arid
		.araddr                 (agilex_5_soc_lwhps2fpga_translator_m0_araddr),                              //   input,   width = 29,                 .araddr
		.arlen                  (agilex_5_soc_lwhps2fpga_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (agilex_5_soc_lwhps2fpga_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (agilex_5_soc_lwhps2fpga_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (agilex_5_soc_lwhps2fpga_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (agilex_5_soc_lwhps2fpga_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (agilex_5_soc_lwhps2fpga_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (agilex_5_soc_lwhps2fpga_translator_m0_aruser),                              //   input,    width = 1,                 .aruser
		.arqos                  (agilex_5_soc_lwhps2fpga_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (agilex_5_soc_lwhps2fpga_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (agilex_5_soc_lwhps2fpga_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (agilex_5_soc_lwhps2fpga_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (agilex_5_soc_lwhps2fpga_translator_m0_rid),                                 //  output,    width = 4,                 .rid
		.rdata                  (agilex_5_soc_lwhps2fpga_translator_m0_rdata),                               //  output,   width = 32,                 .rdata
		.rresp                  (agilex_5_soc_lwhps2fpga_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (agilex_5_soc_lwhps2fpga_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (agilex_5_soc_lwhps2fpga_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (agilex_5_soc_lwhps2fpga_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (agilex_5_soc_lwhps2fpga_translator_m0_ruser),                               //  output,    width = 1,                 .ruser
		.wid                    (4'b0000),                                                                   // (terminated),                                
		.arsnoop                (4'b0000),                                                                   // (terminated),                                
		.ardomain               (2'b00),                                                                     // (terminated),                                
		.arbar                  (2'b00),                                                                     // (terminated),                                
		.awsnoop                (3'b000),                                                                    // (terminated),                                
		.awdomain               (2'b00),                                                                     // (terminated),                                
		.awbar                  (2'b00),                                                                     // (terminated),                                
		.awunique               (1'b0)                                                                       // (terminated),                                
	);

	ghrd_hps_system_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (138),
		.PKT_DOMAIN_H              (137),
		.PKT_DOMAIN_L              (136),
		.PKT_SNOOP_H               (135),
		.PKT_SNOOP_L               (132),
		.PKT_BARRIER_H             (131),
		.PKT_BARRIER_L             (130),
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_QOS_H                 (105),
		.PKT_QOS_L                 (102),
		.PKT_DATA_SIDEBAND_H       (100),
		.PKT_DATA_SIDEBAND_L       (100),
		.PKT_ADDR_SIDEBAND_H       (99),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_CACHE_H               (124),
		.PKT_CACHE_L               (121),
		.PKT_THREAD_ID_H           (117),
		.PKT_THREAD_ID_L           (114),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) hps_jtag_master_master_agent (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.av_address            (hps_jtag_master_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (hps_jtag_master_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (hps_jtag_master_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (hps_jtag_master_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (hps_jtag_master_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (hps_jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (hps_jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (hps_jtag_master_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (hps_jtag_master_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (hps_jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (hps_jtag_master_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (hps_jtag_master_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (hps_jtag_master_master_agent_cp_data),                                      //  output,  width = 139,          .data
		.cp_startofpacket      (hps_jtag_master_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (hps_jtag_master_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (hps_jtag_master_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (hps_jtag_master_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (hps_jtag_master_master_limiter_rsp_src_data),                               //   input,  width = 139,          .data
		.rp_channel            (hps_jtag_master_master_limiter_rsp_src_channel),                            //   input,   width = 16,          .channel
		.rp_startofpacket      (hps_jtag_master_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (hps_jtag_master_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (hps_jtag_master_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (138),
		.PKT_DOMAIN_H              (137),
		.PKT_DOMAIN_L              (136),
		.PKT_SNOOP_H               (135),
		.PKT_SNOOP_L               (132),
		.PKT_BARRIER_H             (131),
		.PKT_BARRIER_L             (130),
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_QOS_H                 (105),
		.PKT_QOS_L                 (102),
		.PKT_DATA_SIDEBAND_H       (100),
		.PKT_DATA_SIDEBAND_L       (100),
		.PKT_ADDR_SIDEBAND_H       (99),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_CACHE_H               (124),
		.PKT_CACHE_L               (121),
		.PKT_THREAD_ID_H           (117),
		.PKT_THREAD_ID_L           (114),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) jtag_master_master_agent (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                 (jtag_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (jtag_master_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (jtag_master_master_agent_cp_data),                                      //  output,  width = 139,          .data
		.cp_startofpacket      (jtag_master_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (jtag_master_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (jtag_master_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (jtag_master_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (jtag_master_master_limiter_rsp_src_data),                               //   input,  width = 139,          .data
		.rp_channel            (jtag_master_master_limiter_rsp_src_channel),                            //   input,   width = 16,          .channel
		.rp_startofpacket      (jtag_master_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (jtag_master_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (jtag_master_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (101),
		.PKT_CACHE_H               (124),
		.PKT_CACHE_L               (121),
		.PKT_ADDR_SIDEBAND_H       (99),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_THREAD_ID_H           (117),
		.PKT_THREAD_ID_L           (114),
		.PKT_QOS_L                 (102),
		.PKT_QOS_H                 (105),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_DATA_SIDEBAND_H       (100),
		.PKT_DATA_SIDEBAND_L       (100),
		.PKT_DOMAIN_H              (137),
		.PKT_DOMAIN_L              (136),
		.PKT_SNOOP_H               (135),
		.PKT_SNOOP_L               (132),
		.PKT_BARRIER_H             (131),
		.PKT_BARRIER_L             (130),
		.PKT_WUNIQUE               (138),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.ID                        (0),
		.SYNC_RESET                (1)
	) agilex_5_soc_hps2fpga_agent (
		.aclk                   (clock_in_out_clk_clk),                                                    //   input,    width = 1,              clk.clk
		.aresetn                (~agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (agilex_5_soc_hps2fpga_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (agilex_5_soc_hps2fpga_agent_write_cp_data),                               //  output,  width = 139,                 .data
		.write_cp_startofpacket (agilex_5_soc_hps2fpga_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (agilex_5_soc_hps2fpga_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (agilex_5_soc_hps2fpga_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_006_src_valid),                                                   //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_006_src_data),                                                    //   input,  width = 139,                 .data
		.write_rp_channel       (rsp_mux_006_src_channel),                                                 //   input,   width = 16,                 .channel
		.write_rp_startofpacket (rsp_mux_006_src_startofpacket),                                           //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_006_src_endofpacket),                                             //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_006_src_ready),                                                   //  output,    width = 1,                 .ready
		.read_cp_valid          (agilex_5_soc_hps2fpga_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (agilex_5_soc_hps2fpga_agent_read_cp_data),                                //  output,  width = 139,                 .data
		.read_cp_startofpacket  (agilex_5_soc_hps2fpga_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (agilex_5_soc_hps2fpga_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (agilex_5_soc_hps2fpga_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_007_src_valid),                                                   //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_007_src_data),                                                    //   input,  width = 139,                 .data
		.read_rp_channel        (rsp_mux_007_src_channel),                                                 //   input,   width = 16,                 .channel
		.read_rp_startofpacket  (rsp_mux_007_src_startofpacket),                                           //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_007_src_endofpacket),                                             //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_007_src_ready),                                                   //  output,    width = 1,                 .ready
		.awid                   (agilex_5_soc_hps2fpga_translator_m0_awid),                                //   input,    width = 4, altera_axi_slave.awid
		.awaddr                 (agilex_5_soc_hps2fpga_translator_m0_awaddr),                              //   input,   width = 32,                 .awaddr
		.awlen                  (agilex_5_soc_hps2fpga_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (agilex_5_soc_hps2fpga_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (agilex_5_soc_hps2fpga_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (agilex_5_soc_hps2fpga_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (agilex_5_soc_hps2fpga_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (agilex_5_soc_hps2fpga_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (agilex_5_soc_hps2fpga_translator_m0_awuser),                              //   input,    width = 1,                 .awuser
		.awqos                  (agilex_5_soc_hps2fpga_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (agilex_5_soc_hps2fpga_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (agilex_5_soc_hps2fpga_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (agilex_5_soc_hps2fpga_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (agilex_5_soc_hps2fpga_translator_m0_wdata),                               //   input,   width = 32,                 .wdata
		.wstrb                  (agilex_5_soc_hps2fpga_translator_m0_wstrb),                               //   input,    width = 4,                 .wstrb
		.wlast                  (agilex_5_soc_hps2fpga_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (agilex_5_soc_hps2fpga_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (agilex_5_soc_hps2fpga_translator_m0_wuser),                               //   input,    width = 1,                 .wuser
		.wready                 (agilex_5_soc_hps2fpga_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (agilex_5_soc_hps2fpga_translator_m0_bid),                                 //  output,    width = 4,                 .bid
		.bresp                  (agilex_5_soc_hps2fpga_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (agilex_5_soc_hps2fpga_translator_m0_buser),                               //  output,    width = 1,                 .buser
		.bvalid                 (agilex_5_soc_hps2fpga_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (agilex_5_soc_hps2fpga_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (agilex_5_soc_hps2fpga_translator_m0_arid),                                //   input,    width = 4,                 .arid
		.araddr                 (agilex_5_soc_hps2fpga_translator_m0_araddr),                              //   input,   width = 32,                 .araddr
		.arlen                  (agilex_5_soc_hps2fpga_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (agilex_5_soc_hps2fpga_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (agilex_5_soc_hps2fpga_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (agilex_5_soc_hps2fpga_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (agilex_5_soc_hps2fpga_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (agilex_5_soc_hps2fpga_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (agilex_5_soc_hps2fpga_translator_m0_aruser),                              //   input,    width = 1,                 .aruser
		.arqos                  (agilex_5_soc_hps2fpga_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (agilex_5_soc_hps2fpga_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (agilex_5_soc_hps2fpga_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (agilex_5_soc_hps2fpga_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (agilex_5_soc_hps2fpga_translator_m0_rid),                                 //  output,    width = 4,                 .rid
		.rdata                  (agilex_5_soc_hps2fpga_translator_m0_rdata),                               //  output,   width = 32,                 .rdata
		.rresp                  (agilex_5_soc_hps2fpga_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (agilex_5_soc_hps2fpga_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (agilex_5_soc_hps2fpga_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (agilex_5_soc_hps2fpga_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (agilex_5_soc_hps2fpga_translator_m0_ruser),                               //  output,    width = 1,                 .ruser
		.wid                    (4'b0000),                                                                 // (terminated),                                
		.arsnoop                (4'b0000),                                                                 // (terminated),                                
		.ardomain               (2'b00),                                                                   // (terminated),                                
		.arbar                  (2'b00),                                                                   // (terminated),                                
		.awsnoop                (3'b000),                                                                  // (terminated),                                
		.awdomain               (2'b00),                                                                   // (terminated),                                
		.awbar                  (2'b00),                                                                   // (terminated),                                
		.awunique               (1'b0)                                                                     // (terminated),                                
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_tx2gnii #(
		.PKT_QOS_H                   (105),
		.PKT_QOS_L                   (102),
		.PKT_THREAD_ID_H             (117),
		.PKT_THREAD_ID_L             (114),
		.PKT_RESPONSE_STATUS_H       (126),
		.PKT_RESPONSE_STATUS_L       (125),
		.PKT_BEGIN_BURST             (101),
		.PKT_CACHE_H                 (124),
		.PKT_CACHE_L                 (121),
		.PKT_DATA_SIDEBAND_H         (100),
		.PKT_DATA_SIDEBAND_L         (100),
		.PKT_ADDR_SIDEBAND_H         (99),
		.PKT_ADDR_SIDEBAND_L         (99),
		.PKT_BURST_TYPE_H            (98),
		.PKT_BURST_TYPE_L            (97),
		.PKT_PROTECTION_H            (120),
		.PKT_PROTECTION_L            (118),
		.PKT_BURST_SIZE_H            (96),
		.PKT_BURST_SIZE_L            (94),
		.PKT_BURSTWRAP_H             (93),
		.PKT_BURSTWRAP_L             (86),
		.PKT_BYTE_CNT_H              (85),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (109),
		.PKT_SRC_ID_L                (106),
		.PKT_DEST_ID_H               (113),
		.PKT_DEST_ID_L               (110),
		.PKT_ORI_BURST_SIZE_L        (127),
		.PKT_ORI_BURST_SIZE_H        (129),
		.PKT_DOMAIN_L                (136),
		.PKT_DOMAIN_H                (137),
		.PKT_SNOOP_L                 (132),
		.PKT_SNOOP_H                 (135),
		.PKT_BARRIER_L               (130),
		.PKT_BARRIER_H               (131),
		.PKT_WUNIQUE                 (138),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (139),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (16),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) axi_hdmi_tx_0_s_axi_agent (
		.aclk                   (hdmi_pll_outclk0_clk),                                              //   input,    width = 1,        clock_sink.clk
		.aresetn                (~axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_valid),                //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_ready),                //  output,    width = 1,                  .ready
		.read_cp_data           (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_data),                 //   input,  width = 139,                  .data
		.read_cp_channel        (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_channel),              //   input,   width = 16,                  .channel
		.read_cp_startofpacket  (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_startofpacket),        //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_endofpacket),          //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_ready),                //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_valid),                //   input,    width = 1,                  .valid
		.write_cp_data          (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_data),                 //   input,  width = 139,                  .data
		.write_cp_channel       (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_channel),              //   input,   width = 16,                  .channel
		.write_cp_startofpacket (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_startofpacket),        //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_endofpacket),          //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (axi_hdmi_tx_0_s_axi_agent_read_rp_ready),                           //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (axi_hdmi_tx_0_s_axi_agent_read_rp_valid),                           //  output,    width = 1,                  .valid
		.read_rp_data           (axi_hdmi_tx_0_s_axi_agent_read_rp_data),                            //  output,  width = 139,                  .data
		.read_rp_startofpacket  (axi_hdmi_tx_0_s_axi_agent_read_rp_startofpacket),                   //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (axi_hdmi_tx_0_s_axi_agent_read_rp_endofpacket),                     //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (axi_hdmi_tx_0_s_axi_agent_write_rp_ready),                          //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (axi_hdmi_tx_0_s_axi_agent_write_rp_valid),                          //  output,    width = 1,                  .valid
		.write_rp_data          (axi_hdmi_tx_0_s_axi_agent_write_rp_data),                           //  output,  width = 139,                  .data
		.write_rp_startofpacket (axi_hdmi_tx_0_s_axi_agent_write_rp_startofpacket),                  //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (axi_hdmi_tx_0_s_axi_agent_write_rp_endofpacket),                    //  output,    width = 1,                  .endofpacket
		.awaddr                 (axi_hdmi_tx_0_s_axi_awaddr),                                        //  output,   width = 16, altera_axi_master.awaddr
		.awprot                 (axi_hdmi_tx_0_s_axi_awprot),                                        //  output,    width = 3,                  .awprot
		.awvalid                (axi_hdmi_tx_0_s_axi_awvalid),                                       //  output,    width = 1,                  .awvalid
		.awready                (axi_hdmi_tx_0_s_axi_awready),                                       //   input,    width = 1,                  .awready
		.wdata                  (axi_hdmi_tx_0_s_axi_wdata),                                         //  output,   width = 32,                  .wdata
		.wstrb                  (axi_hdmi_tx_0_s_axi_wstrb),                                         //  output,    width = 4,                  .wstrb
		.wvalid                 (axi_hdmi_tx_0_s_axi_wvalid),                                        //  output,    width = 1,                  .wvalid
		.wready                 (axi_hdmi_tx_0_s_axi_wready),                                        //   input,    width = 1,                  .wready
		.bresp                  (axi_hdmi_tx_0_s_axi_bresp),                                         //   input,    width = 2,                  .bresp
		.bvalid                 (axi_hdmi_tx_0_s_axi_bvalid),                                        //   input,    width = 1,                  .bvalid
		.bready                 (axi_hdmi_tx_0_s_axi_bready),                                        //  output,    width = 1,                  .bready
		.araddr                 (axi_hdmi_tx_0_s_axi_araddr),                                        //  output,   width = 16,                  .araddr
		.arprot                 (axi_hdmi_tx_0_s_axi_arprot),                                        //  output,    width = 3,                  .arprot
		.arvalid                (axi_hdmi_tx_0_s_axi_arvalid),                                       //  output,    width = 1,                  .arvalid
		.arready                (axi_hdmi_tx_0_s_axi_arready),                                       //   input,    width = 1,                  .arready
		.rdata                  (axi_hdmi_tx_0_s_axi_rdata),                                         //   input,   width = 32,                  .rdata
		.rresp                  (axi_hdmi_tx_0_s_axi_rresp),                                         //   input,    width = 2,                  .rresp
		.rvalid                 (axi_hdmi_tx_0_s_axi_rvalid),                                        //   input,    width = 1,                  .rvalid
		.rready                 (axi_hdmi_tx_0_s_axi_rready),                                        //  output,    width = 1,                  .rready
		.bid                    (1'b0),                                                              // (terminated),                                 
		.buser                  (1'b0),                                                              // (terminated),                                 
		.rid                    (1'b0),                                                              // (terminated),                                 
		.ruser                  (1'b0),                                                              // (terminated),                                 
		.rlast                  (1'b0),                                                              // (terminated),                                 
		.arid                   (),                                                                  // (terminated),                                 
		.arlen                  (),                                                                  // (terminated),                                 
		.arsize                 (),                                                                  // (terminated),                                 
		.arburst                (),                                                                  // (terminated),                                 
		.arlock                 (),                                                                  // (terminated),                                 
		.arcache                (),                                                                  // (terminated),                                 
		.aruser                 (),                                                                  // (terminated),                                 
		.wid                    (),                                                                  // (terminated),                                 
		.wuser                  (),                                                                  // (terminated),                                 
		.wlast                  (),                                                                  // (terminated),                                 
		.awid                   (),                                                                  // (terminated),                                 
		.awlen                  (),                                                                  // (terminated),                                 
		.awsize                 (),                                                                  // (terminated),                                 
		.awburst                (),                                                                  // (terminated),                                 
		.awlock                 (),                                                                  // (terminated),                                 
		.awcache                (),                                                                  // (terminated),                                 
		.awuser                 (),                                                                  // (terminated),                                 
		.awqos                  (),                                                                  // (terminated),                                 
		.awregion               (),                                                                  // (terminated),                                 
		.arqos                  (),                                                                  // (terminated),                                 
		.arregion               (),                                                                  // (terminated),                                 
		.arsnoop                (),                                                                  // (terminated),                                 
		.ardomain               (),                                                                  // (terminated),                                 
		.arbar                  (),                                                                  // (terminated),                                 
		.awsnoop                (),                                                                  // (terminated),                                 
		.awdomain               (),                                                                  // (terminated),                                 
		.awbar                  (),                                                                  // (terminated),                                 
		.awunique               ()                                                                   // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_4xna54q #(
		.PKT_QOS_H                   (105),
		.PKT_QOS_L                   (102),
		.PKT_THREAD_ID_H             (117),
		.PKT_THREAD_ID_L             (114),
		.PKT_RESPONSE_STATUS_H       (126),
		.PKT_RESPONSE_STATUS_L       (125),
		.PKT_BEGIN_BURST             (101),
		.PKT_CACHE_H                 (124),
		.PKT_CACHE_L                 (121),
		.PKT_DATA_SIDEBAND_H         (100),
		.PKT_DATA_SIDEBAND_L         (100),
		.PKT_ADDR_SIDEBAND_H         (99),
		.PKT_ADDR_SIDEBAND_L         (99),
		.PKT_BURST_TYPE_H            (98),
		.PKT_BURST_TYPE_L            (97),
		.PKT_PROTECTION_H            (120),
		.PKT_PROTECTION_L            (118),
		.PKT_BURST_SIZE_H            (96),
		.PKT_BURST_SIZE_L            (94),
		.PKT_BURSTWRAP_H             (93),
		.PKT_BURSTWRAP_L             (86),
		.PKT_BYTE_CNT_H              (85),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (109),
		.PKT_SRC_ID_L                (106),
		.PKT_DEST_ID_H               (113),
		.PKT_DEST_ID_L               (110),
		.PKT_ORI_BURST_SIZE_L        (127),
		.PKT_ORI_BURST_SIZE_H        (129),
		.PKT_DOMAIN_L                (136),
		.PKT_DOMAIN_H                (137),
		.PKT_SNOOP_L                 (132),
		.PKT_SNOOP_H                 (135),
		.PKT_BARRIER_L               (130),
		.PKT_BARRIER_H               (131),
		.PKT_WUNIQUE                 (138),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (139),
		.ADDR_WIDTH                  (11),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (16),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) axi_dmac_0_s_axi_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,    width = 1,        clock_sink.clk
		.aresetn                (~agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (axi_dmac_0_s_axi_rd_burst_adapter_source0_valid),                           //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (axi_dmac_0_s_axi_rd_burst_adapter_source0_ready),                           //  output,    width = 1,                  .ready
		.read_cp_data           (axi_dmac_0_s_axi_rd_burst_adapter_source0_data),                            //   input,  width = 139,                  .data
		.read_cp_channel        (axi_dmac_0_s_axi_rd_burst_adapter_source0_channel),                         //   input,   width = 16,                  .channel
		.read_cp_startofpacket  (axi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket),                   //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (axi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket),                     //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (axi_dmac_0_s_axi_wr_burst_adapter_source0_ready),                           //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (axi_dmac_0_s_axi_wr_burst_adapter_source0_valid),                           //   input,    width = 1,                  .valid
		.write_cp_data          (axi_dmac_0_s_axi_wr_burst_adapter_source0_data),                            //   input,  width = 139,                  .data
		.write_cp_channel       (axi_dmac_0_s_axi_wr_burst_adapter_source0_channel),                         //   input,   width = 16,                  .channel
		.write_cp_startofpacket (axi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket),                   //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (axi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket),                     //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (axi_dmac_0_s_axi_agent_read_rp_ready),                                      //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (axi_dmac_0_s_axi_agent_read_rp_valid),                                      //  output,    width = 1,                  .valid
		.read_rp_data           (axi_dmac_0_s_axi_agent_read_rp_data),                                       //  output,  width = 139,                  .data
		.read_rp_startofpacket  (axi_dmac_0_s_axi_agent_read_rp_startofpacket),                              //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (axi_dmac_0_s_axi_agent_read_rp_endofpacket),                                //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (axi_dmac_0_s_axi_agent_write_rp_ready),                                     //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (axi_dmac_0_s_axi_agent_write_rp_valid),                                     //  output,    width = 1,                  .valid
		.write_rp_data          (axi_dmac_0_s_axi_agent_write_rp_data),                                      //  output,  width = 139,                  .data
		.write_rp_startofpacket (axi_dmac_0_s_axi_agent_write_rp_startofpacket),                             //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (axi_dmac_0_s_axi_agent_write_rp_endofpacket),                               //  output,    width = 1,                  .endofpacket
		.awaddr                 (axi_dmac_0_s_axi_awaddr),                                                   //  output,   width = 11, altera_axi_master.awaddr
		.awprot                 (axi_dmac_0_s_axi_awprot),                                                   //  output,    width = 3,                  .awprot
		.awvalid                (axi_dmac_0_s_axi_awvalid),                                                  //  output,    width = 1,                  .awvalid
		.awready                (axi_dmac_0_s_axi_awready),                                                  //   input,    width = 1,                  .awready
		.wdata                  (axi_dmac_0_s_axi_wdata),                                                    //  output,   width = 32,                  .wdata
		.wstrb                  (axi_dmac_0_s_axi_wstrb),                                                    //  output,    width = 4,                  .wstrb
		.wvalid                 (axi_dmac_0_s_axi_wvalid),                                                   //  output,    width = 1,                  .wvalid
		.wready                 (axi_dmac_0_s_axi_wready),                                                   //   input,    width = 1,                  .wready
		.bresp                  (axi_dmac_0_s_axi_bresp),                                                    //   input,    width = 2,                  .bresp
		.bvalid                 (axi_dmac_0_s_axi_bvalid),                                                   //   input,    width = 1,                  .bvalid
		.bready                 (axi_dmac_0_s_axi_bready),                                                   //  output,    width = 1,                  .bready
		.araddr                 (axi_dmac_0_s_axi_araddr),                                                   //  output,   width = 11,                  .araddr
		.arprot                 (axi_dmac_0_s_axi_arprot),                                                   //  output,    width = 3,                  .arprot
		.arvalid                (axi_dmac_0_s_axi_arvalid),                                                  //  output,    width = 1,                  .arvalid
		.arready                (axi_dmac_0_s_axi_arready),                                                  //   input,    width = 1,                  .arready
		.rdata                  (axi_dmac_0_s_axi_rdata),                                                    //   input,   width = 32,                  .rdata
		.rresp                  (axi_dmac_0_s_axi_rresp),                                                    //   input,    width = 2,                  .rresp
		.rvalid                 (axi_dmac_0_s_axi_rvalid),                                                   //   input,    width = 1,                  .rvalid
		.rready                 (axi_dmac_0_s_axi_rready),                                                   //  output,    width = 1,                  .rready
		.bid                    (1'b0),                                                                      // (terminated),                                 
		.buser                  (1'b0),                                                                      // (terminated),                                 
		.rid                    (1'b0),                                                                      // (terminated),                                 
		.ruser                  (1'b0),                                                                      // (terminated),                                 
		.rlast                  (1'b0),                                                                      // (terminated),                                 
		.arid                   (),                                                                          // (terminated),                                 
		.arlen                  (),                                                                          // (terminated),                                 
		.arsize                 (),                                                                          // (terminated),                                 
		.arburst                (),                                                                          // (terminated),                                 
		.arlock                 (),                                                                          // (terminated),                                 
		.arcache                (),                                                                          // (terminated),                                 
		.aruser                 (),                                                                          // (terminated),                                 
		.wid                    (),                                                                          // (terminated),                                 
		.wuser                  (),                                                                          // (terminated),                                 
		.wlast                  (),                                                                          // (terminated),                                 
		.awid                   (),                                                                          // (terminated),                                 
		.awlen                  (),                                                                          // (terminated),                                 
		.awsize                 (),                                                                          // (terminated),                                 
		.awburst                (),                                                                          // (terminated),                                 
		.awlock                 (),                                                                          // (terminated),                                 
		.awcache                (),                                                                          // (terminated),                                 
		.awuser                 (),                                                                          // (terminated),                                 
		.awqos                  (),                                                                          // (terminated),                                 
		.awregion               (),                                                                          // (terminated),                                 
		.arqos                  (),                                                                          // (terminated),                                 
		.arregion               (),                                                                          // (terminated),                                 
		.arsnoop                (),                                                                          // (terminated),                                 
		.ardomain               (),                                                                          // (terminated),                                 
		.arbar                  (),                                                                          // (terminated),                                 
		.awsnoop                (),                                                                          // (terminated),                                 
		.awdomain               (),                                                                          // (terminated),                                 
		.awbar                  (),                                                                          // (terminated),                                 
		.awunique               ()                                                                           // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                             //  output,   width = 32,              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                           //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                                //  output,  width = 139,                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),                   //   input,  width = 139,                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),                //   input,   width = 16,                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),                      //   input,  width = 140,                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                         //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 140,        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 140,       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),            //   input,   width = 1, clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                  // (terminated),                        
		.csr_read          (1'b0),                                                   // (terminated),                        
		.csr_write         (1'b0),                                                   // (terminated),                        
		.csr_readdata      (),                                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                        
		.almost_full_data  (),                                                       // (terminated),                        
		.almost_empty_data (),                                                       // (terminated),                        
		.in_startofpacket  (1'b0),                                                   // (terminated),                        
		.in_endofpacket    (1'b0),                                                   // (terminated),                        
		.out_startofpacket (),                                                       // (terminated),                        
		.out_endofpacket   (),                                                       // (terminated),                        
		.in_empty          (1'b0),                                                   // (terminated),                        
		.out_empty         (),                                                       // (terminated),                        
		.in_error          (1'b0),                                                   // (terminated),                        
		.out_error         (),                                                       // (terminated),                        
		.in_channel        (1'b0),                                                   // (terminated),                        
		.out_channel       ()                                                        // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) sys_id_control_slave_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (sys_id_control_slave_agent_m0_address),                                    //  output,   width = 32,              m0.address
		.m0_burstcount           (sys_id_control_slave_agent_m0_burstcount),                                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (sys_id_control_slave_agent_m0_byteenable),                                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (sys_id_control_slave_agent_m0_debugaccess),                                //  output,    width = 1,                .debugaccess
		.m0_lock                 (sys_id_control_slave_agent_m0_lock),                                       //  output,    width = 1,                .lock
		.m0_readdata             (sys_id_control_slave_agent_m0_readdata),                                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (sys_id_control_slave_agent_m0_readdatavalid),                              //   input,    width = 1,                .readdatavalid
		.m0_read                 (sys_id_control_slave_agent_m0_read),                                       //  output,    width = 1,                .read
		.m0_waitrequest          (sys_id_control_slave_agent_m0_waitrequest),                                //   input,    width = 1,                .waitrequest
		.m0_writedata            (sys_id_control_slave_agent_m0_writedata),                                  //  output,   width = 32,                .writedata
		.m0_write                (sys_id_control_slave_agent_m0_write),                                      //  output,    width = 1,                .write
		.rp_endofpacket          (sys_id_control_slave_agent_rp_endofpacket),                                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sys_id_control_slave_agent_rp_ready),                                      //   input,    width = 1,                .ready
		.rp_valid                (sys_id_control_slave_agent_rp_valid),                                      //  output,    width = 1,                .valid
		.rp_data                 (sys_id_control_slave_agent_rp_data),                                       //  output,  width = 139,                .data
		.rp_startofpacket        (sys_id_control_slave_agent_rp_startofpacket),                              //  output,    width = 1,                .startofpacket
		.cp_ready                (sys_id_control_slave_burst_adapter_source0_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (sys_id_control_slave_burst_adapter_source0_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (sys_id_control_slave_burst_adapter_source0_data),                          //   input,  width = 139,                .data
		.cp_startofpacket        (sys_id_control_slave_burst_adapter_source0_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (sys_id_control_slave_burst_adapter_source0_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (sys_id_control_slave_burst_adapter_source0_channel),                       //   input,   width = 16,                .channel
		.rf_sink_ready           (sys_id_control_slave_agent_rsp_fifo_out_ready),                            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sys_id_control_slave_agent_rsp_fifo_out_valid),                            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sys_id_control_slave_agent_rsp_fifo_out_startofpacket),                    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sys_id_control_slave_agent_rsp_fifo_out_endofpacket),                      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sys_id_control_slave_agent_rsp_fifo_out_data),                             //   input,  width = 140,                .data
		.rf_source_ready         (sys_id_control_slave_agent_rf_source_ready),                               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sys_id_control_slave_agent_rf_source_valid),                               //  output,    width = 1,                .valid
		.rf_source_startofpacket (sys_id_control_slave_agent_rf_source_startofpacket),                       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sys_id_control_slave_agent_rf_source_endofpacket),                         //  output,    width = 1,                .endofpacket
		.rf_source_data          (sys_id_control_slave_agent_rf_source_data),                                //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (sys_id_control_slave_agent_rdata_fifo_out_ready),                          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sys_id_control_slave_agent_rdata_fifo_out_valid),                          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sys_id_control_slave_agent_rdata_fifo_out_data),                           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (sys_id_control_slave_agent_rdata_fifo_src_ready),                          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_id_control_slave_agent_rdata_fifo_src_valid),                          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sys_id_control_slave_agent_rdata_fifo_src_data),                           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sys_id_control_slave_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (sys_id_control_slave_agent_rf_source_data),             //   input,  width = 140,        in.data
		.in_valid          (sys_id_control_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (sys_id_control_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (sys_id_control_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sys_id_control_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (sys_id_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 140,       out.data
		.out_valid         (sys_id_control_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (sys_id_control_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (sys_id_control_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sys_id_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sys_id_control_slave_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                  //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),     //   input,   width = 1, clk_reset.reset
		.in_data           (sys_id_control_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (sys_id_control_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (sys_id_control_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (sys_id_control_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (sys_id_control_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (sys_id_control_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                           // (terminated),                        
		.csr_read          (1'b0),                                            // (terminated),                        
		.csr_write         (1'b0),                                            // (terminated),                        
		.csr_readdata      (),                                                // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated),                        
		.almost_full_data  (),                                                // (terminated),                        
		.almost_empty_data (),                                                // (terminated),                        
		.in_startofpacket  (1'b0),                                            // (terminated),                        
		.in_endofpacket    (1'b0),                                            // (terminated),                        
		.out_startofpacket (),                                                // (terminated),                        
		.out_endofpacket   (),                                                // (terminated),                        
		.in_empty          (1'b0),                                            // (terminated),                        
		.out_empty         (),                                                // (terminated),                        
		.in_error          (1'b0),                                            // (terminated),                        
		.out_error         (),                                                // (terminated),                        
		.in_channel        (1'b0),                                            // (terminated),                        
		.out_channel       ()                                                 // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) pb_s1_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pb_s1_agent_m0_address),                                                   //  output,   width = 32,              m0.address
		.m0_burstcount           (pb_s1_agent_m0_burstcount),                                                //  output,    width = 3,                .burstcount
		.m0_byteenable           (pb_s1_agent_m0_byteenable),                                                //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pb_s1_agent_m0_debugaccess),                                               //  output,    width = 1,                .debugaccess
		.m0_lock                 (pb_s1_agent_m0_lock),                                                      //  output,    width = 1,                .lock
		.m0_readdata             (pb_s1_agent_m0_readdata),                                                  //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pb_s1_agent_m0_readdatavalid),                                             //   input,    width = 1,                .readdatavalid
		.m0_read                 (pb_s1_agent_m0_read),                                                      //  output,    width = 1,                .read
		.m0_waitrequest          (pb_s1_agent_m0_waitrequest),                                               //   input,    width = 1,                .waitrequest
		.m0_writedata            (pb_s1_agent_m0_writedata),                                                 //  output,   width = 32,                .writedata
		.m0_write                (pb_s1_agent_m0_write),                                                     //  output,    width = 1,                .write
		.rp_endofpacket          (pb_s1_agent_rp_endofpacket),                                               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pb_s1_agent_rp_ready),                                                     //   input,    width = 1,                .ready
		.rp_valid                (pb_s1_agent_rp_valid),                                                     //  output,    width = 1,                .valid
		.rp_data                 (pb_s1_agent_rp_data),                                                      //  output,  width = 139,                .data
		.rp_startofpacket        (pb_s1_agent_rp_startofpacket),                                             //  output,    width = 1,                .startofpacket
		.cp_ready                (pb_s1_burst_adapter_source0_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (pb_s1_burst_adapter_source0_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (pb_s1_burst_adapter_source0_data),                                         //   input,  width = 139,                .data
		.cp_startofpacket        (pb_s1_burst_adapter_source0_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (pb_s1_burst_adapter_source0_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (pb_s1_burst_adapter_source0_channel),                                      //   input,   width = 16,                .channel
		.rf_sink_ready           (pb_s1_agent_rsp_fifo_out_ready),                                           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pb_s1_agent_rsp_fifo_out_valid),                                           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pb_s1_agent_rsp_fifo_out_startofpacket),                                   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pb_s1_agent_rsp_fifo_out_endofpacket),                                     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pb_s1_agent_rsp_fifo_out_data),                                            //   input,  width = 140,                .data
		.rf_source_ready         (pb_s1_agent_rf_source_ready),                                              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pb_s1_agent_rf_source_valid),                                              //  output,    width = 1,                .valid
		.rf_source_startofpacket (pb_s1_agent_rf_source_startofpacket),                                      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pb_s1_agent_rf_source_endofpacket),                                        //  output,    width = 1,                .endofpacket
		.rf_source_data          (pb_s1_agent_rf_source_data),                                               //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (pb_s1_agent_rdata_fifo_out_ready),                                         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pb_s1_agent_rdata_fifo_out_valid),                                         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pb_s1_agent_rdata_fifo_out_data),                                          //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pb_s1_agent_rdata_fifo_src_ready),                                         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pb_s1_agent_rdata_fifo_src_valid),                                         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pb_s1_agent_rdata_fifo_src_data),                                          //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) pb_s1_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),              //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pb_s1_agent_rf_source_data),                  //   input,  width = 140,        in.data
		.in_valid          (pb_s1_agent_rf_source_valid),                 //   input,    width = 1,          .valid
		.in_ready          (pb_s1_agent_rf_source_ready),                 //  output,    width = 1,          .ready
		.in_startofpacket  (pb_s1_agent_rf_source_startofpacket),         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pb_s1_agent_rf_source_endofpacket),           //   input,    width = 1,          .endofpacket
		.out_data          (pb_s1_agent_rsp_fifo_out_data),               //  output,  width = 140,       out.data
		.out_valid         (pb_s1_agent_rsp_fifo_out_valid),              //  output,    width = 1,          .valid
		.out_ready         (pb_s1_agent_rsp_fifo_out_ready),              //   input,    width = 1,          .ready
		.out_startofpacket (pb_s1_agent_rsp_fifo_out_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pb_s1_agent_rsp_fifo_out_endofpacket),        //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                       // (terminated),                         
		.csr_read          (1'b0),                                        // (terminated),                         
		.csr_write         (1'b0),                                        // (terminated),                         
		.csr_readdata      (),                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                         
		.almost_full_data  (),                                            // (terminated),                         
		.almost_empty_data (),                                            // (terminated),                         
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.in_error          (1'b0),                                        // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_channel        (1'b0),                                        // (terminated),                         
		.out_channel       ()                                             // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) pb_s1_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),              //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (pb_s1_agent_rdata_fifo_src_data),             //   input,  width = 34,        in.data
		.in_valid          (pb_s1_agent_rdata_fifo_src_valid),            //   input,   width = 1,          .valid
		.in_ready          (pb_s1_agent_rdata_fifo_src_ready),            //  output,   width = 1,          .ready
		.out_data          (pb_s1_agent_rdata_fifo_out_data),             //  output,  width = 34,       out.data
		.out_valid         (pb_s1_agent_rdata_fifo_out_valid),            //  output,   width = 1,          .valid
		.out_ready         (pb_s1_agent_rdata_fifo_out_ready),            //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                       // (terminated),                        
		.csr_read          (1'b0),                                        // (terminated),                        
		.csr_write         (1'b0),                                        // (terminated),                        
		.csr_readdata      (),                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                        
		.almost_full_data  (),                                            // (terminated),                        
		.almost_empty_data (),                                            // (terminated),                        
		.in_startofpacket  (1'b0),                                        // (terminated),                        
		.in_endofpacket    (1'b0),                                        // (terminated),                        
		.out_startofpacket (),                                            // (terminated),                        
		.out_endofpacket   (),                                            // (terminated),                        
		.in_empty          (1'b0),                                        // (terminated),                        
		.out_empty         (),                                            // (terminated),                        
		.in_error          (1'b0),                                        // (terminated),                        
		.out_error         (),                                            // (terminated),                        
		.in_channel        (1'b0),                                        // (terminated),                        
		.out_channel       ()                                             // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) dipsw_s1_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (dipsw_s1_agent_m0_address),                                                //  output,   width = 32,              m0.address
		.m0_burstcount           (dipsw_s1_agent_m0_burstcount),                                             //  output,    width = 3,                .burstcount
		.m0_byteenable           (dipsw_s1_agent_m0_byteenable),                                             //  output,    width = 4,                .byteenable
		.m0_debugaccess          (dipsw_s1_agent_m0_debugaccess),                                            //  output,    width = 1,                .debugaccess
		.m0_lock                 (dipsw_s1_agent_m0_lock),                                                   //  output,    width = 1,                .lock
		.m0_readdata             (dipsw_s1_agent_m0_readdata),                                               //   input,   width = 32,                .readdata
		.m0_readdatavalid        (dipsw_s1_agent_m0_readdatavalid),                                          //   input,    width = 1,                .readdatavalid
		.m0_read                 (dipsw_s1_agent_m0_read),                                                   //  output,    width = 1,                .read
		.m0_waitrequest          (dipsw_s1_agent_m0_waitrequest),                                            //   input,    width = 1,                .waitrequest
		.m0_writedata            (dipsw_s1_agent_m0_writedata),                                              //  output,   width = 32,                .writedata
		.m0_write                (dipsw_s1_agent_m0_write),                                                  //  output,    width = 1,                .write
		.rp_endofpacket          (dipsw_s1_agent_rp_endofpacket),                                            //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dipsw_s1_agent_rp_ready),                                                  //   input,    width = 1,                .ready
		.rp_valid                (dipsw_s1_agent_rp_valid),                                                  //  output,    width = 1,                .valid
		.rp_data                 (dipsw_s1_agent_rp_data),                                                   //  output,  width = 139,                .data
		.rp_startofpacket        (dipsw_s1_agent_rp_startofpacket),                                          //  output,    width = 1,                .startofpacket
		.cp_ready                (dipsw_s1_burst_adapter_source0_ready),                                     //  output,    width = 1,              cp.ready
		.cp_valid                (dipsw_s1_burst_adapter_source0_valid),                                     //   input,    width = 1,                .valid
		.cp_data                 (dipsw_s1_burst_adapter_source0_data),                                      //   input,  width = 139,                .data
		.cp_startofpacket        (dipsw_s1_burst_adapter_source0_startofpacket),                             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (dipsw_s1_burst_adapter_source0_endofpacket),                               //   input,    width = 1,                .endofpacket
		.cp_channel              (dipsw_s1_burst_adapter_source0_channel),                                   //   input,   width = 16,                .channel
		.rf_sink_ready           (dipsw_s1_agent_rsp_fifo_out_ready),                                        //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dipsw_s1_agent_rsp_fifo_out_valid),                                        //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dipsw_s1_agent_rsp_fifo_out_startofpacket),                                //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dipsw_s1_agent_rsp_fifo_out_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dipsw_s1_agent_rsp_fifo_out_data),                                         //   input,  width = 140,                .data
		.rf_source_ready         (dipsw_s1_agent_rf_source_ready),                                           //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dipsw_s1_agent_rf_source_valid),                                           //  output,    width = 1,                .valid
		.rf_source_startofpacket (dipsw_s1_agent_rf_source_startofpacket),                                   //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dipsw_s1_agent_rf_source_endofpacket),                                     //  output,    width = 1,                .endofpacket
		.rf_source_data          (dipsw_s1_agent_rf_source_data),                                            //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (dipsw_s1_agent_rdata_fifo_out_ready),                                      //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dipsw_s1_agent_rdata_fifo_out_valid),                                      //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dipsw_s1_agent_rdata_fifo_out_data),                                       //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (dipsw_s1_agent_rdata_fifo_src_ready),                                      //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_s1_agent_rdata_fifo_src_valid),                                      //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dipsw_s1_agent_rdata_fifo_src_data),                                       //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) dipsw_s1_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),              //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (dipsw_s1_agent_rf_source_data),               //   input,  width = 140,        in.data
		.in_valid          (dipsw_s1_agent_rf_source_valid),              //   input,    width = 1,          .valid
		.in_ready          (dipsw_s1_agent_rf_source_ready),              //  output,    width = 1,          .ready
		.in_startofpacket  (dipsw_s1_agent_rf_source_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dipsw_s1_agent_rf_source_endofpacket),        //   input,    width = 1,          .endofpacket
		.out_data          (dipsw_s1_agent_rsp_fifo_out_data),            //  output,  width = 140,       out.data
		.out_valid         (dipsw_s1_agent_rsp_fifo_out_valid),           //  output,    width = 1,          .valid
		.out_ready         (dipsw_s1_agent_rsp_fifo_out_ready),           //   input,    width = 1,          .ready
		.out_startofpacket (dipsw_s1_agent_rsp_fifo_out_startofpacket),   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dipsw_s1_agent_rsp_fifo_out_endofpacket),     //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                       // (terminated),                         
		.csr_read          (1'b0),                                        // (terminated),                         
		.csr_write         (1'b0),                                        // (terminated),                         
		.csr_readdata      (),                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                         
		.almost_full_data  (),                                            // (terminated),                         
		.almost_empty_data (),                                            // (terminated),                         
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.in_error          (1'b0),                                        // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_channel        (1'b0),                                        // (terminated),                         
		.out_channel       ()                                             // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) dipsw_s1_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),              //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (dipsw_s1_agent_rdata_fifo_src_data),          //   input,  width = 34,        in.data
		.in_valid          (dipsw_s1_agent_rdata_fifo_src_valid),         //   input,   width = 1,          .valid
		.in_ready          (dipsw_s1_agent_rdata_fifo_src_ready),         //  output,   width = 1,          .ready
		.out_data          (dipsw_s1_agent_rdata_fifo_out_data),          //  output,  width = 34,       out.data
		.out_valid         (dipsw_s1_agent_rdata_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (dipsw_s1_agent_rdata_fifo_out_ready),         //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                       // (terminated),                        
		.csr_read          (1'b0),                                        // (terminated),                        
		.csr_write         (1'b0),                                        // (terminated),                        
		.csr_readdata      (),                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                        
		.almost_full_data  (),                                            // (terminated),                        
		.almost_empty_data (),                                            // (terminated),                        
		.in_startofpacket  (1'b0),                                        // (terminated),                        
		.in_endofpacket    (1'b0),                                        // (terminated),                        
		.out_startofpacket (),                                            // (terminated),                        
		.out_endofpacket   (),                                            // (terminated),                        
		.in_empty          (1'b0),                                        // (terminated),                        
		.out_empty         (),                                            // (terminated),                        
		.in_error          (1'b0),                                        // (terminated),                        
		.out_error         (),                                            // (terminated),                        
		.in_channel        (1'b0),                                        // (terminated),                        
		.out_channel       ()                                             // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) rgb_led0_s1_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (rgb_led0_s1_agent_m0_address),                                             //  output,   width = 32,              m0.address
		.m0_burstcount           (rgb_led0_s1_agent_m0_burstcount),                                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (rgb_led0_s1_agent_m0_byteenable),                                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rgb_led0_s1_agent_m0_debugaccess),                                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (rgb_led0_s1_agent_m0_lock),                                                //  output,    width = 1,                .lock
		.m0_readdata             (rgb_led0_s1_agent_m0_readdata),                                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rgb_led0_s1_agent_m0_readdatavalid),                                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (rgb_led0_s1_agent_m0_read),                                                //  output,    width = 1,                .read
		.m0_waitrequest          (rgb_led0_s1_agent_m0_waitrequest),                                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (rgb_led0_s1_agent_m0_writedata),                                           //  output,   width = 32,                .writedata
		.m0_write                (rgb_led0_s1_agent_m0_write),                                               //  output,    width = 1,                .write
		.rp_endofpacket          (rgb_led0_s1_agent_rp_endofpacket),                                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rgb_led0_s1_agent_rp_ready),                                               //   input,    width = 1,                .ready
		.rp_valid                (rgb_led0_s1_agent_rp_valid),                                               //  output,    width = 1,                .valid
		.rp_data                 (rgb_led0_s1_agent_rp_data),                                                //  output,  width = 139,                .data
		.rp_startofpacket        (rgb_led0_s1_agent_rp_startofpacket),                                       //  output,    width = 1,                .startofpacket
		.cp_ready                (rgb_led0_s1_burst_adapter_source0_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (rgb_led0_s1_burst_adapter_source0_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (rgb_led0_s1_burst_adapter_source0_data),                                   //   input,  width = 139,                .data
		.cp_startofpacket        (rgb_led0_s1_burst_adapter_source0_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rgb_led0_s1_burst_adapter_source0_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (rgb_led0_s1_burst_adapter_source0_channel),                                //   input,   width = 16,                .channel
		.rf_sink_ready           (rgb_led0_s1_agent_rsp_fifo_out_ready),                                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rgb_led0_s1_agent_rsp_fifo_out_valid),                                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rgb_led0_s1_agent_rsp_fifo_out_startofpacket),                             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rgb_led0_s1_agent_rsp_fifo_out_endofpacket),                               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rgb_led0_s1_agent_rsp_fifo_out_data),                                      //   input,  width = 140,                .data
		.rf_source_ready         (rgb_led0_s1_agent_rf_source_ready),                                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rgb_led0_s1_agent_rf_source_valid),                                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (rgb_led0_s1_agent_rf_source_startofpacket),                                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rgb_led0_s1_agent_rf_source_endofpacket),                                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (rgb_led0_s1_agent_rf_source_data),                                         //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (rgb_led0_s1_agent_rdata_fifo_out_ready),                                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rgb_led0_s1_agent_rdata_fifo_out_valid),                                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rgb_led0_s1_agent_rdata_fifo_out_data),                                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rgb_led0_s1_agent_rdata_fifo_src_ready),                                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_led0_s1_agent_rdata_fifo_src_valid),                                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rgb_led0_s1_agent_rdata_fifo_src_data),                                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led0_s1_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (rgb_led0_s1_agent_rf_source_data),                   //   input,  width = 140,        in.data
		.in_valid          (rgb_led0_s1_agent_rf_source_valid),                  //   input,    width = 1,          .valid
		.in_ready          (rgb_led0_s1_agent_rf_source_ready),                  //  output,    width = 1,          .ready
		.in_startofpacket  (rgb_led0_s1_agent_rf_source_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rgb_led0_s1_agent_rf_source_endofpacket),            //   input,    width = 1,          .endofpacket
		.out_data          (rgb_led0_s1_agent_rsp_fifo_out_data),                //  output,  width = 140,       out.data
		.out_valid         (rgb_led0_s1_agent_rsp_fifo_out_valid),               //  output,    width = 1,          .valid
		.out_ready         (rgb_led0_s1_agent_rsp_fifo_out_ready),               //   input,    width = 1,          .ready
		.out_startofpacket (rgb_led0_s1_agent_rsp_fifo_out_startofpacket),       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rgb_led0_s1_agent_rsp_fifo_out_endofpacket),         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led0_s1_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,   width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (rgb_led0_s1_agent_rdata_fifo_src_data),              //   input,  width = 34,        in.data
		.in_valid          (rgb_led0_s1_agent_rdata_fifo_src_valid),             //   input,   width = 1,          .valid
		.in_ready          (rgb_led0_s1_agent_rdata_fifo_src_ready),             //  output,   width = 1,          .ready
		.out_data          (rgb_led0_s1_agent_rdata_fifo_out_data),              //  output,  width = 34,       out.data
		.out_valid         (rgb_led0_s1_agent_rdata_fifo_out_valid),             //  output,   width = 1,          .valid
		.out_ready         (rgb_led0_s1_agent_rdata_fifo_out_ready),             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                              // (terminated),                        
		.csr_read          (1'b0),                                               // (terminated),                        
		.csr_write         (1'b0),                                               // (terminated),                        
		.csr_readdata      (),                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                        
		.almost_full_data  (),                                                   // (terminated),                        
		.almost_empty_data (),                                                   // (terminated),                        
		.in_startofpacket  (1'b0),                                               // (terminated),                        
		.in_endofpacket    (1'b0),                                               // (terminated),                        
		.out_startofpacket (),                                                   // (terminated),                        
		.out_endofpacket   (),                                                   // (terminated),                        
		.in_empty          (1'b0),                                               // (terminated),                        
		.out_empty         (),                                                   // (terminated),                        
		.in_error          (1'b0),                                               // (terminated),                        
		.out_error         (),                                                   // (terminated),                        
		.in_channel        (1'b0),                                               // (terminated),                        
		.out_channel       ()                                                    // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) rgb_led1_s1_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (rgb_led1_s1_agent_m0_address),                                             //  output,   width = 32,              m0.address
		.m0_burstcount           (rgb_led1_s1_agent_m0_burstcount),                                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (rgb_led1_s1_agent_m0_byteenable),                                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rgb_led1_s1_agent_m0_debugaccess),                                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (rgb_led1_s1_agent_m0_lock),                                                //  output,    width = 1,                .lock
		.m0_readdata             (rgb_led1_s1_agent_m0_readdata),                                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rgb_led1_s1_agent_m0_readdatavalid),                                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (rgb_led1_s1_agent_m0_read),                                                //  output,    width = 1,                .read
		.m0_waitrequest          (rgb_led1_s1_agent_m0_waitrequest),                                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (rgb_led1_s1_agent_m0_writedata),                                           //  output,   width = 32,                .writedata
		.m0_write                (rgb_led1_s1_agent_m0_write),                                               //  output,    width = 1,                .write
		.rp_endofpacket          (rgb_led1_s1_agent_rp_endofpacket),                                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rgb_led1_s1_agent_rp_ready),                                               //   input,    width = 1,                .ready
		.rp_valid                (rgb_led1_s1_agent_rp_valid),                                               //  output,    width = 1,                .valid
		.rp_data                 (rgb_led1_s1_agent_rp_data),                                                //  output,  width = 139,                .data
		.rp_startofpacket        (rgb_led1_s1_agent_rp_startofpacket),                                       //  output,    width = 1,                .startofpacket
		.cp_ready                (rgb_led1_s1_burst_adapter_source0_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (rgb_led1_s1_burst_adapter_source0_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (rgb_led1_s1_burst_adapter_source0_data),                                   //   input,  width = 139,                .data
		.cp_startofpacket        (rgb_led1_s1_burst_adapter_source0_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rgb_led1_s1_burst_adapter_source0_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (rgb_led1_s1_burst_adapter_source0_channel),                                //   input,   width = 16,                .channel
		.rf_sink_ready           (rgb_led1_s1_agent_rsp_fifo_out_ready),                                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rgb_led1_s1_agent_rsp_fifo_out_valid),                                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rgb_led1_s1_agent_rsp_fifo_out_startofpacket),                             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rgb_led1_s1_agent_rsp_fifo_out_endofpacket),                               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rgb_led1_s1_agent_rsp_fifo_out_data),                                      //   input,  width = 140,                .data
		.rf_source_ready         (rgb_led1_s1_agent_rf_source_ready),                                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rgb_led1_s1_agent_rf_source_valid),                                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (rgb_led1_s1_agent_rf_source_startofpacket),                                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rgb_led1_s1_agent_rf_source_endofpacket),                                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (rgb_led1_s1_agent_rf_source_data),                                         //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (rgb_led1_s1_agent_rdata_fifo_out_ready),                                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rgb_led1_s1_agent_rdata_fifo_out_valid),                                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rgb_led1_s1_agent_rdata_fifo_out_data),                                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rgb_led1_s1_agent_rdata_fifo_src_ready),                                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_led1_s1_agent_rdata_fifo_src_valid),                                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rgb_led1_s1_agent_rdata_fifo_src_data),                                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led1_s1_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (rgb_led1_s1_agent_rf_source_data),                   //   input,  width = 140,        in.data
		.in_valid          (rgb_led1_s1_agent_rf_source_valid),                  //   input,    width = 1,          .valid
		.in_ready          (rgb_led1_s1_agent_rf_source_ready),                  //  output,    width = 1,          .ready
		.in_startofpacket  (rgb_led1_s1_agent_rf_source_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rgb_led1_s1_agent_rf_source_endofpacket),            //   input,    width = 1,          .endofpacket
		.out_data          (rgb_led1_s1_agent_rsp_fifo_out_data),                //  output,  width = 140,       out.data
		.out_valid         (rgb_led1_s1_agent_rsp_fifo_out_valid),               //  output,    width = 1,          .valid
		.out_ready         (rgb_led1_s1_agent_rsp_fifo_out_ready),               //   input,    width = 1,          .ready
		.out_startofpacket (rgb_led1_s1_agent_rsp_fifo_out_startofpacket),       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rgb_led1_s1_agent_rsp_fifo_out_endofpacket),         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led1_s1_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,   width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (rgb_led1_s1_agent_rdata_fifo_src_data),              //   input,  width = 34,        in.data
		.in_valid          (rgb_led1_s1_agent_rdata_fifo_src_valid),             //   input,   width = 1,          .valid
		.in_ready          (rgb_led1_s1_agent_rdata_fifo_src_ready),             //  output,   width = 1,          .ready
		.out_data          (rgb_led1_s1_agent_rdata_fifo_out_data),              //  output,  width = 34,       out.data
		.out_valid         (rgb_led1_s1_agent_rdata_fifo_out_valid),             //  output,   width = 1,          .valid
		.out_ready         (rgb_led1_s1_agent_rdata_fifo_out_ready),             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                              // (terminated),                        
		.csr_read          (1'b0),                                               // (terminated),                        
		.csr_write         (1'b0),                                               // (terminated),                        
		.csr_readdata      (),                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                        
		.almost_full_data  (),                                                   // (terminated),                        
		.almost_empty_data (),                                                   // (terminated),                        
		.in_startofpacket  (1'b0),                                               // (terminated),                        
		.in_endofpacket    (1'b0),                                               // (terminated),                        
		.out_startofpacket (),                                                   // (terminated),                        
		.out_endofpacket   (),                                                   // (terminated),                        
		.in_empty          (1'b0),                                               // (terminated),                        
		.out_empty         (),                                                   // (terminated),                        
		.in_error          (1'b0),                                               // (terminated),                        
		.out_error         (),                                                   // (terminated),                        
		.in_channel        (1'b0),                                               // (terminated),                        
		.out_channel       ()                                                    // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) rgb_led2_s1_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (rgb_led2_s1_agent_m0_address),                                             //  output,   width = 32,              m0.address
		.m0_burstcount           (rgb_led2_s1_agent_m0_burstcount),                                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (rgb_led2_s1_agent_m0_byteenable),                                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rgb_led2_s1_agent_m0_debugaccess),                                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (rgb_led2_s1_agent_m0_lock),                                                //  output,    width = 1,                .lock
		.m0_readdata             (rgb_led2_s1_agent_m0_readdata),                                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rgb_led2_s1_agent_m0_readdatavalid),                                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (rgb_led2_s1_agent_m0_read),                                                //  output,    width = 1,                .read
		.m0_waitrequest          (rgb_led2_s1_agent_m0_waitrequest),                                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (rgb_led2_s1_agent_m0_writedata),                                           //  output,   width = 32,                .writedata
		.m0_write                (rgb_led2_s1_agent_m0_write),                                               //  output,    width = 1,                .write
		.rp_endofpacket          (rgb_led2_s1_agent_rp_endofpacket),                                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rgb_led2_s1_agent_rp_ready),                                               //   input,    width = 1,                .ready
		.rp_valid                (rgb_led2_s1_agent_rp_valid),                                               //  output,    width = 1,                .valid
		.rp_data                 (rgb_led2_s1_agent_rp_data),                                                //  output,  width = 139,                .data
		.rp_startofpacket        (rgb_led2_s1_agent_rp_startofpacket),                                       //  output,    width = 1,                .startofpacket
		.cp_ready                (rgb_led2_s1_burst_adapter_source0_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (rgb_led2_s1_burst_adapter_source0_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (rgb_led2_s1_burst_adapter_source0_data),                                   //   input,  width = 139,                .data
		.cp_startofpacket        (rgb_led2_s1_burst_adapter_source0_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rgb_led2_s1_burst_adapter_source0_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (rgb_led2_s1_burst_adapter_source0_channel),                                //   input,   width = 16,                .channel
		.rf_sink_ready           (rgb_led2_s1_agent_rsp_fifo_out_ready),                                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rgb_led2_s1_agent_rsp_fifo_out_valid),                                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rgb_led2_s1_agent_rsp_fifo_out_startofpacket),                             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rgb_led2_s1_agent_rsp_fifo_out_endofpacket),                               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rgb_led2_s1_agent_rsp_fifo_out_data),                                      //   input,  width = 140,                .data
		.rf_source_ready         (rgb_led2_s1_agent_rf_source_ready),                                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rgb_led2_s1_agent_rf_source_valid),                                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (rgb_led2_s1_agent_rf_source_startofpacket),                                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rgb_led2_s1_agent_rf_source_endofpacket),                                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (rgb_led2_s1_agent_rf_source_data),                                         //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (rgb_led2_s1_agent_rdata_fifo_out_ready),                                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rgb_led2_s1_agent_rdata_fifo_out_valid),                                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rgb_led2_s1_agent_rdata_fifo_out_data),                                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rgb_led2_s1_agent_rdata_fifo_src_ready),                                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_led2_s1_agent_rdata_fifo_src_valid),                                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rgb_led2_s1_agent_rdata_fifo_src_data),                                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led2_s1_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (rgb_led2_s1_agent_rf_source_data),                   //   input,  width = 140,        in.data
		.in_valid          (rgb_led2_s1_agent_rf_source_valid),                  //   input,    width = 1,          .valid
		.in_ready          (rgb_led2_s1_agent_rf_source_ready),                  //  output,    width = 1,          .ready
		.in_startofpacket  (rgb_led2_s1_agent_rf_source_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rgb_led2_s1_agent_rf_source_endofpacket),            //   input,    width = 1,          .endofpacket
		.out_data          (rgb_led2_s1_agent_rsp_fifo_out_data),                //  output,  width = 140,       out.data
		.out_valid         (rgb_led2_s1_agent_rsp_fifo_out_valid),               //  output,    width = 1,          .valid
		.out_ready         (rgb_led2_s1_agent_rsp_fifo_out_ready),               //   input,    width = 1,          .ready
		.out_startofpacket (rgb_led2_s1_agent_rsp_fifo_out_startofpacket),       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rgb_led2_s1_agent_rsp_fifo_out_endofpacket),         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led2_s1_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,   width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (rgb_led2_s1_agent_rdata_fifo_src_data),              //   input,  width = 34,        in.data
		.in_valid          (rgb_led2_s1_agent_rdata_fifo_src_valid),             //   input,   width = 1,          .valid
		.in_ready          (rgb_led2_s1_agent_rdata_fifo_src_ready),             //  output,   width = 1,          .ready
		.out_data          (rgb_led2_s1_agent_rdata_fifo_out_data),              //  output,  width = 34,       out.data
		.out_valid         (rgb_led2_s1_agent_rdata_fifo_out_valid),             //  output,   width = 1,          .valid
		.out_ready         (rgb_led2_s1_agent_rdata_fifo_out_ready),             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                              // (terminated),                        
		.csr_read          (1'b0),                                               // (terminated),                        
		.csr_write         (1'b0),                                               // (terminated),                        
		.csr_readdata      (),                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                        
		.almost_full_data  (),                                                   // (terminated),                        
		.almost_empty_data (),                                                   // (terminated),                        
		.in_startofpacket  (1'b0),                                               // (terminated),                        
		.in_endofpacket    (1'b0),                                               // (terminated),                        
		.out_startofpacket (),                                                   // (terminated),                        
		.out_endofpacket   (),                                                   // (terminated),                        
		.in_empty          (1'b0),                                               // (terminated),                        
		.out_empty         (),                                                   // (terminated),                        
		.in_error          (1'b0),                                               // (terminated),                        
		.out_error         (),                                                   // (terminated),                        
		.in_channel        (1'b0),                                               // (terminated),                        
		.out_channel       ()                                                    // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (129),
		.PKT_ORI_BURST_SIZE_L      (127),
		.PKT_RESPONSE_STATUS_H     (126),
		.PKT_RESPONSE_STATUS_L     (125),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (120),
		.PKT_PROTECTION_L          (118),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (109),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (113),
		.PKT_DEST_ID_L             (110),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (139),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) rgb_led3_s1_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (rgb_led3_s1_agent_m0_address),                                             //  output,   width = 32,              m0.address
		.m0_burstcount           (rgb_led3_s1_agent_m0_burstcount),                                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (rgb_led3_s1_agent_m0_byteenable),                                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rgb_led3_s1_agent_m0_debugaccess),                                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (rgb_led3_s1_agent_m0_lock),                                                //  output,    width = 1,                .lock
		.m0_readdata             (rgb_led3_s1_agent_m0_readdata),                                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rgb_led3_s1_agent_m0_readdatavalid),                                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (rgb_led3_s1_agent_m0_read),                                                //  output,    width = 1,                .read
		.m0_waitrequest          (rgb_led3_s1_agent_m0_waitrequest),                                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (rgb_led3_s1_agent_m0_writedata),                                           //  output,   width = 32,                .writedata
		.m0_write                (rgb_led3_s1_agent_m0_write),                                               //  output,    width = 1,                .write
		.rp_endofpacket          (rgb_led3_s1_agent_rp_endofpacket),                                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rgb_led3_s1_agent_rp_ready),                                               //   input,    width = 1,                .ready
		.rp_valid                (rgb_led3_s1_agent_rp_valid),                                               //  output,    width = 1,                .valid
		.rp_data                 (rgb_led3_s1_agent_rp_data),                                                //  output,  width = 139,                .data
		.rp_startofpacket        (rgb_led3_s1_agent_rp_startofpacket),                                       //  output,    width = 1,                .startofpacket
		.cp_ready                (rgb_led3_s1_burst_adapter_source0_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (rgb_led3_s1_burst_adapter_source0_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (rgb_led3_s1_burst_adapter_source0_data),                                   //   input,  width = 139,                .data
		.cp_startofpacket        (rgb_led3_s1_burst_adapter_source0_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rgb_led3_s1_burst_adapter_source0_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (rgb_led3_s1_burst_adapter_source0_channel),                                //   input,   width = 16,                .channel
		.rf_sink_ready           (rgb_led3_s1_agent_rsp_fifo_out_ready),                                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rgb_led3_s1_agent_rsp_fifo_out_valid),                                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rgb_led3_s1_agent_rsp_fifo_out_startofpacket),                             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rgb_led3_s1_agent_rsp_fifo_out_endofpacket),                               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rgb_led3_s1_agent_rsp_fifo_out_data),                                      //   input,  width = 140,                .data
		.rf_source_ready         (rgb_led3_s1_agent_rf_source_ready),                                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rgb_led3_s1_agent_rf_source_valid),                                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (rgb_led3_s1_agent_rf_source_startofpacket),                                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rgb_led3_s1_agent_rf_source_endofpacket),                                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (rgb_led3_s1_agent_rf_source_data),                                         //  output,  width = 140,                .data
		.rdata_fifo_sink_ready   (rgb_led3_s1_agent_rdata_fifo_out_ready),                                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rgb_led3_s1_agent_rdata_fifo_out_valid),                                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rgb_led3_s1_agent_rdata_fifo_out_data),                                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rgb_led3_s1_agent_rdata_fifo_src_ready),                                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_led3_s1_agent_rdata_fifo_src_valid),                                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rgb_led3_s1_agent_rdata_fifo_src_data),                                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (140),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led3_s1_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (rgb_led3_s1_agent_rf_source_data),                   //   input,  width = 140,        in.data
		.in_valid          (rgb_led3_s1_agent_rf_source_valid),                  //   input,    width = 1,          .valid
		.in_ready          (rgb_led3_s1_agent_rf_source_ready),                  //  output,    width = 1,          .ready
		.in_startofpacket  (rgb_led3_s1_agent_rf_source_startofpacket),          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rgb_led3_s1_agent_rf_source_endofpacket),            //   input,    width = 1,          .endofpacket
		.out_data          (rgb_led3_s1_agent_rsp_fifo_out_data),                //  output,  width = 140,       out.data
		.out_valid         (rgb_led3_s1_agent_rsp_fifo_out_valid),               //  output,    width = 1,          .valid
		.out_ready         (rgb_led3_s1_agent_rsp_fifo_out_ready),               //   input,    width = 1,          .ready
		.out_startofpacket (rgb_led3_s1_agent_rsp_fifo_out_startofpacket),       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rgb_led3_s1_agent_rsp_fifo_out_endofpacket),         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) rgb_led3_s1_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                     //   input,   width = 1,       clk.clk
		.reset             (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (rgb_led3_s1_agent_rdata_fifo_src_data),              //   input,  width = 34,        in.data
		.in_valid          (rgb_led3_s1_agent_rdata_fifo_src_valid),             //   input,   width = 1,          .valid
		.in_ready          (rgb_led3_s1_agent_rdata_fifo_src_ready),             //  output,   width = 1,          .ready
		.out_data          (rgb_led3_s1_agent_rdata_fifo_out_data),              //  output,  width = 34,       out.data
		.out_valid         (rgb_led3_s1_agent_rdata_fifo_out_valid),             //  output,   width = 1,          .valid
		.out_ready         (rgb_led3_s1_agent_rdata_fifo_out_ready),             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                              // (terminated),                        
		.csr_read          (1'b0),                                               // (terminated),                        
		.csr_write         (1'b0),                                               // (terminated),                        
		.csr_readdata      (),                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                        
		.almost_full_data  (),                                                   // (terminated),                        
		.almost_empty_data (),                                                   // (terminated),                        
		.in_startofpacket  (1'b0),                                               // (terminated),                        
		.in_endofpacket    (1'b0),                                               // (terminated),                        
		.out_startofpacket (),                                                   // (terminated),                        
		.out_endofpacket   (),                                                   // (terminated),                        
		.in_empty          (1'b0),                                               // (terminated),                        
		.out_empty         (),                                                   // (terminated),                        
		.in_error          (1'b0),                                               // (terminated),                        
		.out_error         (),                                                   // (terminated),                        
		.in_channel        (1'b0),                                               // (terminated),                        
		.out_channel       ()                                                    // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_hvsco3y #(
		.PKT_QOS_H                   (105),
		.PKT_QOS_L                   (102),
		.PKT_THREAD_ID_H             (117),
		.PKT_THREAD_ID_L             (114),
		.PKT_RESPONSE_STATUS_H       (126),
		.PKT_RESPONSE_STATUS_L       (125),
		.PKT_BEGIN_BURST             (101),
		.PKT_CACHE_H                 (124),
		.PKT_CACHE_L                 (121),
		.PKT_DATA_SIDEBAND_H         (100),
		.PKT_DATA_SIDEBAND_L         (100),
		.PKT_ADDR_SIDEBAND_H         (99),
		.PKT_ADDR_SIDEBAND_L         (99),
		.PKT_BURST_TYPE_H            (98),
		.PKT_BURST_TYPE_L            (97),
		.PKT_PROTECTION_H            (120),
		.PKT_PROTECTION_L            (118),
		.PKT_BURST_SIZE_H            (96),
		.PKT_BURST_SIZE_L            (94),
		.PKT_BURSTWRAP_H             (93),
		.PKT_BURSTWRAP_L             (86),
		.PKT_BYTE_CNT_H              (85),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (109),
		.PKT_SRC_ID_L                (106),
		.PKT_DEST_ID_H               (113),
		.PKT_DEST_ID_L               (110),
		.PKT_ORI_BURST_SIZE_L        (127),
		.PKT_ORI_BURST_SIZE_H        (129),
		.PKT_DOMAIN_L                (136),
		.PKT_DOMAIN_H                (137),
		.PKT_SNOOP_L                 (132),
		.PKT_SNOOP_H                 (135),
		.PKT_BARRIER_L               (130),
		.PKT_BARRIER_H               (131),
		.PKT_WUNIQUE                 (138),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (139),
		.ADDR_WIDTH                  (27),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (16),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) emif_ph2_0_s0_axil_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,        clock_sink.clk
		.aresetn                (~emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (emif_ph2_0_s0_axil_rd_burst_adapter_source0_valid),                //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (emif_ph2_0_s0_axil_rd_burst_adapter_source0_ready),                //  output,    width = 1,                  .ready
		.read_cp_data           (emif_ph2_0_s0_axil_rd_burst_adapter_source0_data),                 //   input,  width = 139,                  .data
		.read_cp_channel        (emif_ph2_0_s0_axil_rd_burst_adapter_source0_channel),              //   input,   width = 16,                  .channel
		.read_cp_startofpacket  (emif_ph2_0_s0_axil_rd_burst_adapter_source0_startofpacket),        //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (emif_ph2_0_s0_axil_rd_burst_adapter_source0_endofpacket),          //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (emif_ph2_0_s0_axil_wr_burst_adapter_source0_ready),                //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (emif_ph2_0_s0_axil_wr_burst_adapter_source0_valid),                //   input,    width = 1,                  .valid
		.write_cp_data          (emif_ph2_0_s0_axil_wr_burst_adapter_source0_data),                 //   input,  width = 139,                  .data
		.write_cp_channel       (emif_ph2_0_s0_axil_wr_burst_adapter_source0_channel),              //   input,   width = 16,                  .channel
		.write_cp_startofpacket (emif_ph2_0_s0_axil_wr_burst_adapter_source0_startofpacket),        //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (emif_ph2_0_s0_axil_wr_burst_adapter_source0_endofpacket),          //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (emif_ph2_0_s0_axil_agent_read_rp_ready),                           //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (emif_ph2_0_s0_axil_agent_read_rp_valid),                           //  output,    width = 1,                  .valid
		.read_rp_data           (emif_ph2_0_s0_axil_agent_read_rp_data),                            //  output,  width = 139,                  .data
		.read_rp_startofpacket  (emif_ph2_0_s0_axil_agent_read_rp_startofpacket),                   //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (emif_ph2_0_s0_axil_agent_read_rp_endofpacket),                     //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (emif_ph2_0_s0_axil_agent_write_rp_ready),                          //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (emif_ph2_0_s0_axil_agent_write_rp_valid),                          //  output,    width = 1,                  .valid
		.write_rp_data          (emif_ph2_0_s0_axil_agent_write_rp_data),                           //  output,  width = 139,                  .data
		.write_rp_startofpacket (emif_ph2_0_s0_axil_agent_write_rp_startofpacket),                  //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (emif_ph2_0_s0_axil_agent_write_rp_endofpacket),                    //  output,    width = 1,                  .endofpacket
		.awaddr                 (emif_ph2_0_s0_axil_awaddr),                                        //  output,   width = 27, altera_axi_master.awaddr
		.awprot                 (emif_ph2_0_s0_axil_awprot),                                        //  output,    width = 3,                  .awprot
		.awvalid                (emif_ph2_0_s0_axil_awvalid),                                       //  output,    width = 1,                  .awvalid
		.awready                (emif_ph2_0_s0_axil_awready),                                       //   input,    width = 1,                  .awready
		.wdata                  (emif_ph2_0_s0_axil_wdata),                                         //  output,   width = 32,                  .wdata
		.wstrb                  (emif_ph2_0_s0_axil_wstrb),                                         //  output,    width = 4,                  .wstrb
		.wvalid                 (emif_ph2_0_s0_axil_wvalid),                                        //  output,    width = 1,                  .wvalid
		.wready                 (emif_ph2_0_s0_axil_wready),                                        //   input,    width = 1,                  .wready
		.bresp                  (emif_ph2_0_s0_axil_bresp),                                         //   input,    width = 2,                  .bresp
		.bvalid                 (emif_ph2_0_s0_axil_bvalid),                                        //   input,    width = 1,                  .bvalid
		.bready                 (emif_ph2_0_s0_axil_bready),                                        //  output,    width = 1,                  .bready
		.araddr                 (emif_ph2_0_s0_axil_araddr),                                        //  output,   width = 27,                  .araddr
		.arprot                 (emif_ph2_0_s0_axil_arprot),                                        //  output,    width = 3,                  .arprot
		.arvalid                (emif_ph2_0_s0_axil_arvalid),                                       //  output,    width = 1,                  .arvalid
		.arready                (emif_ph2_0_s0_axil_arready),                                       //   input,    width = 1,                  .arready
		.rdata                  (emif_ph2_0_s0_axil_rdata),                                         //   input,   width = 32,                  .rdata
		.rresp                  (emif_ph2_0_s0_axil_rresp),                                         //   input,    width = 2,                  .rresp
		.rvalid                 (emif_ph2_0_s0_axil_rvalid),                                        //   input,    width = 1,                  .rvalid
		.rready                 (emif_ph2_0_s0_axil_rready),                                        //  output,    width = 1,                  .rready
		.bid                    (1'b0),                                                             // (terminated),                                 
		.buser                  (1'b0),                                                             // (terminated),                                 
		.rid                    (1'b0),                                                             // (terminated),                                 
		.ruser                  (1'b0),                                                             // (terminated),                                 
		.rlast                  (1'b0),                                                             // (terminated),                                 
		.arid                   (),                                                                 // (terminated),                                 
		.arlen                  (),                                                                 // (terminated),                                 
		.arsize                 (),                                                                 // (terminated),                                 
		.arburst                (),                                                                 // (terminated),                                 
		.arlock                 (),                                                                 // (terminated),                                 
		.arcache                (),                                                                 // (terminated),                                 
		.aruser                 (),                                                                 // (terminated),                                 
		.wid                    (),                                                                 // (terminated),                                 
		.wuser                  (),                                                                 // (terminated),                                 
		.wlast                  (),                                                                 // (terminated),                                 
		.awid                   (),                                                                 // (terminated),                                 
		.awlen                  (),                                                                 // (terminated),                                 
		.awsize                 (),                                                                 // (terminated),                                 
		.awburst                (),                                                                 // (terminated),                                 
		.awlock                 (),                                                                 // (terminated),                                 
		.awcache                (),                                                                 // (terminated),                                 
		.awuser                 (),                                                                 // (terminated),                                 
		.awqos                  (),                                                                 // (terminated),                                 
		.awregion               (),                                                                 // (terminated),                                 
		.arqos                  (),                                                                 // (terminated),                                 
		.arregion               (),                                                                 // (terminated),                                 
		.arsnoop                (),                                                                 // (terminated),                                 
		.ardomain               (),                                                                 // (terminated),                                 
		.arbar                  (),                                                                 // (terminated),                                 
		.awsnoop                (),                                                                 // (terminated),                                 
		.awdomain               (),                                                                 // (terminated),                                 
		.awbar                  (),                                                                 // (terminated),                                 
		.awunique               ()                                                                  // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_mrsqola #(
		.PKT_QOS_H                   (141),
		.PKT_QOS_L                   (138),
		.PKT_THREAD_ID_H             (153),
		.PKT_THREAD_ID_L             (150),
		.PKT_RESPONSE_STATUS_H       (162),
		.PKT_RESPONSE_STATUS_L       (161),
		.PKT_BEGIN_BURST             (137),
		.PKT_CACHE_H                 (160),
		.PKT_CACHE_L                 (157),
		.PKT_DATA_SIDEBAND_H         (136),
		.PKT_DATA_SIDEBAND_L         (136),
		.PKT_ADDR_SIDEBAND_H         (135),
		.PKT_ADDR_SIDEBAND_L         (135),
		.PKT_BURST_TYPE_H            (134),
		.PKT_BURST_TYPE_L            (133),
		.PKT_PROTECTION_H            (156),
		.PKT_PROTECTION_L            (154),
		.PKT_BURST_SIZE_H            (132),
		.PKT_BURST_SIZE_L            (130),
		.PKT_BURSTWRAP_H             (129),
		.PKT_BURSTWRAP_L             (122),
		.PKT_BYTE_CNT_H              (121),
		.PKT_BYTE_CNT_L              (110),
		.PKT_ADDR_H                  (103),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (109),
		.PKT_TRANS_LOCK              (108),
		.PKT_TRANS_COMPRESSED_READ   (104),
		.PKT_TRANS_POSTED            (105),
		.PKT_TRANS_WRITE             (106),
		.PKT_TRANS_READ              (107),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (145),
		.PKT_SRC_ID_L                (142),
		.PKT_DEST_ID_H               (149),
		.PKT_DEST_ID_L               (146),
		.PKT_ORI_BURST_SIZE_L        (163),
		.PKT_ORI_BURST_SIZE_H        (165),
		.PKT_DOMAIN_L                (172),
		.PKT_DOMAIN_H                (173),
		.PKT_SNOOP_L                 (168),
		.PKT_SNOOP_H                 (171),
		.PKT_BARRIER_L               (166),
		.PKT_BARRIER_H               (167),
		.PKT_WUNIQUE                 (174),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (175),
		.ADDR_WIDTH                  (13),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (16),
		.AXI_SLAVE_ID_W              (7),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) onchip_sram_axi_s1_agent (
		.aclk                   (agilex_5_soc_h2f_user0_clk_clk),                                       //   input,    width = 1,        clock_sink.clk
		.aresetn                (~onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_015_src_valid),                                                //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_015_src_ready),                                                //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_015_src_data),                                                 //   input,  width = 175,                  .data
		.read_cp_channel        (cmd_mux_015_src_channel),                                              //   input,   width = 16,                  .channel
		.read_cp_startofpacket  (cmd_mux_015_src_startofpacket),                                        //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_015_src_endofpacket),                                          //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_014_src_ready),                                                //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_014_src_valid),                                                //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_014_src_data),                                                 //   input,  width = 175,                  .data
		.write_cp_channel       (cmd_mux_014_src_channel),                                              //   input,   width = 16,                  .channel
		.write_cp_startofpacket (cmd_mux_014_src_startofpacket),                                        //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_014_src_endofpacket),                                          //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (onchip_sram_axi_s1_agent_read_rp_ready),                               //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (onchip_sram_axi_s1_agent_read_rp_valid),                               //  output,    width = 1,                  .valid
		.read_rp_data           (onchip_sram_axi_s1_agent_read_rp_data),                                //  output,  width = 175,                  .data
		.read_rp_startofpacket  (onchip_sram_axi_s1_agent_read_rp_startofpacket),                       //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (onchip_sram_axi_s1_agent_read_rp_endofpacket),                         //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (onchip_sram_axi_s1_agent_write_rp_ready),                              //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (onchip_sram_axi_s1_agent_write_rp_valid),                              //  output,    width = 1,                  .valid
		.write_rp_data          (onchip_sram_axi_s1_agent_write_rp_data),                               //  output,  width = 175,                  .data
		.write_rp_startofpacket (onchip_sram_axi_s1_agent_write_rp_startofpacket),                      //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (onchip_sram_axi_s1_agent_write_rp_endofpacket),                        //  output,    width = 1,                  .endofpacket
		.awid                   (onchip_sram_axi_s1_agent_altera_axi_master_awid),                      //  output,    width = 7, altera_axi_master.awid
		.awaddr                 (onchip_sram_axi_s1_agent_altera_axi_master_awaddr),                    //  output,   width = 13,                  .awaddr
		.awlen                  (onchip_sram_axi_s1_agent_altera_axi_master_awlen),                     //  output,    width = 8,                  .awlen
		.awsize                 (onchip_sram_axi_s1_agent_altera_axi_master_awsize),                    //  output,    width = 3,                  .awsize
		.awburst                (onchip_sram_axi_s1_agent_altera_axi_master_awburst),                   //  output,    width = 2,                  .awburst
		.awlock                 (onchip_sram_axi_s1_agent_altera_axi_master_awlock),                    //  output,    width = 1,                  .awlock
		.awcache                (onchip_sram_axi_s1_agent_altera_axi_master_awcache),                   //  output,    width = 4,                  .awcache
		.awprot                 (onchip_sram_axi_s1_agent_altera_axi_master_awprot),                    //  output,    width = 3,                  .awprot
		.awuser                 (onchip_sram_axi_s1_agent_altera_axi_master_awuser),                    //  output,    width = 1,                  .awuser
		.awvalid                (onchip_sram_axi_s1_agent_altera_axi_master_awvalid),                   //  output,    width = 1,                  .awvalid
		.awready                (onchip_sram_axi_s1_agent_altera_axi_master_awready),                   //   input,    width = 1,                  .awready
		.wdata                  (onchip_sram_axi_s1_agent_altera_axi_master_wdata),                     //  output,   width = 64,                  .wdata
		.wstrb                  (onchip_sram_axi_s1_agent_altera_axi_master_wstrb),                     //  output,    width = 8,                  .wstrb
		.wlast                  (onchip_sram_axi_s1_agent_altera_axi_master_wlast),                     //  output,    width = 1,                  .wlast
		.wvalid                 (onchip_sram_axi_s1_agent_altera_axi_master_wvalid),                    //  output,    width = 1,                  .wvalid
		.wready                 (onchip_sram_axi_s1_agent_altera_axi_master_wready),                    //   input,    width = 1,                  .wready
		.bid                    (onchip_sram_axi_s1_agent_altera_axi_master_bid),                       //   input,    width = 7,                  .bid
		.bresp                  (onchip_sram_axi_s1_agent_altera_axi_master_bresp),                     //   input,    width = 2,                  .bresp
		.bvalid                 (onchip_sram_axi_s1_agent_altera_axi_master_bvalid),                    //   input,    width = 1,                  .bvalid
		.bready                 (onchip_sram_axi_s1_agent_altera_axi_master_bready),                    //  output,    width = 1,                  .bready
		.arid                   (onchip_sram_axi_s1_agent_altera_axi_master_arid),                      //  output,    width = 7,                  .arid
		.araddr                 (onchip_sram_axi_s1_agent_altera_axi_master_araddr),                    //  output,   width = 13,                  .araddr
		.arlen                  (onchip_sram_axi_s1_agent_altera_axi_master_arlen),                     //  output,    width = 8,                  .arlen
		.arsize                 (onchip_sram_axi_s1_agent_altera_axi_master_arsize),                    //  output,    width = 3,                  .arsize
		.arburst                (onchip_sram_axi_s1_agent_altera_axi_master_arburst),                   //  output,    width = 2,                  .arburst
		.arlock                 (onchip_sram_axi_s1_agent_altera_axi_master_arlock),                    //  output,    width = 1,                  .arlock
		.arcache                (onchip_sram_axi_s1_agent_altera_axi_master_arcache),                   //  output,    width = 4,                  .arcache
		.arprot                 (onchip_sram_axi_s1_agent_altera_axi_master_arprot),                    //  output,    width = 3,                  .arprot
		.aruser                 (onchip_sram_axi_s1_agent_altera_axi_master_aruser),                    //  output,    width = 1,                  .aruser
		.arvalid                (onchip_sram_axi_s1_agent_altera_axi_master_arvalid),                   //  output,    width = 1,                  .arvalid
		.arready                (onchip_sram_axi_s1_agent_altera_axi_master_arready),                   //   input,    width = 1,                  .arready
		.rid                    (onchip_sram_axi_s1_agent_altera_axi_master_rid),                       //   input,    width = 7,                  .rid
		.rdata                  (onchip_sram_axi_s1_agent_altera_axi_master_rdata),                     //   input,   width = 64,                  .rdata
		.rresp                  (onchip_sram_axi_s1_agent_altera_axi_master_rresp),                     //   input,    width = 2,                  .rresp
		.rlast                  (onchip_sram_axi_s1_agent_altera_axi_master_rlast),                     //   input,    width = 1,                  .rlast
		.rvalid                 (onchip_sram_axi_s1_agent_altera_axi_master_rvalid),                    //   input,    width = 1,                  .rvalid
		.rready                 (onchip_sram_axi_s1_agent_altera_axi_master_rready),                    //  output,    width = 1,                  .rready
		.wuser                  (onchip_sram_axi_s1_agent_altera_axi_master_wuser),                     //  output,    width = 1,                  .wuser
		.awqos                  (onchip_sram_axi_s1_agent_altera_axi_master_awqos),                     //  output,    width = 4,                  .awqos
		.awregion               (onchip_sram_axi_s1_agent_altera_axi_master_awregion),                  //  output,    width = 4,                  .awregion
		.ruser                  (onchip_sram_axi_s1_agent_altera_axi_master_ruser),                     //   input,    width = 1,                  .ruser
		.buser                  (onchip_sram_axi_s1_agent_altera_axi_master_buser),                     //   input,    width = 1,                  .buser
		.arqos                  (onchip_sram_axi_s1_agent_altera_axi_master_arqos),                     //  output,    width = 4,                  .arqos
		.arregion               (onchip_sram_axi_s1_agent_altera_axi_master_arregion),                  //  output,    width = 4,                  .arregion
		.wid                    (),                                                                     // (terminated),                                 
		.arsnoop                (),                                                                     // (terminated),                                 
		.ardomain               (),                                                                     // (terminated),                                 
		.arbar                  (),                                                                     // (terminated),                                 
		.awsnoop                (),                                                                     // (terminated),                                 
		.awdomain               (),                                                                     // (terminated),                                 
		.awbar                  (),                                                                     // (terminated),                                 
		.awunique               ()                                                                      // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_router_1921_tcb7a5i router (
		.sink_ready         (axi_dmac_0_m_src_axi_agent_write_cp_ready),                        //  output,    width = 1,      sink.ready
		.sink_valid         (axi_dmac_0_m_src_axi_agent_write_cp_valid),                        //   input,    width = 1,          .valid
		.sink_data          (axi_dmac_0_m_src_axi_agent_write_cp_data),                         //   input,  width = 175,          .data
		.sink_startofpacket (axi_dmac_0_m_src_axi_agent_write_cp_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_dmac_0_m_src_axi_agent_write_cp_endofpacket),                  //   input,    width = 1,          .endofpacket
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                  //  output,  width = 175,          .data
		.src_channel        (router_src_channel),                                               //  output,   width = 16,          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_kag6gsy router_001 (
		.sink_ready         (axi_dmac_0_m_src_axi_agent_read_cp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (axi_dmac_0_m_src_axi_agent_read_cp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (axi_dmac_0_m_src_axi_agent_read_cp_data),                          //   input,  width = 175,          .data
		.sink_startofpacket (axi_dmac_0_m_src_axi_agent_read_cp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_dmac_0_m_src_axi_agent_read_cp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                              //  output,  width = 175,          .data
		.src_channel        (router_001_src_channel),                                           //  output,   width = 16,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_bapzo6a router_002 (
		.sink_ready         (agilex_5_soc_lwhps2fpga_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_lwhps2fpga_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_lwhps2fpga_agent_write_cp_data),                              //   input,  width = 139,          .data
		.sink_startofpacket (agilex_5_soc_lwhps2fpga_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_lwhps2fpga_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_002_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_2fsbbfy router_003 (
		.sink_ready         (agilex_5_soc_lwhps2fpga_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_lwhps2fpga_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_lwhps2fpga_agent_read_cp_data),                               //   input,  width = 139,          .data
		.sink_startofpacket (agilex_5_soc_lwhps2fpga_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_lwhps2fpga_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_003_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_vamv4uq router_004 (
		.sink_ready         (hps_jtag_master_master_agent_cp_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (hps_jtag_master_master_agent_cp_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (hps_jtag_master_master_agent_cp_data),                                     //   input,  width = 139,          .data
		.sink_startofpacket (hps_jtag_master_master_agent_cp_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (hps_jtag_master_master_agent_cp_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_004_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_wjy5meq router_005 (
		.sink_ready         (jtag_master_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_master_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (jtag_master_master_agent_cp_data),                                //   input,  width = 139,          .data
		.sink_startofpacket (jtag_master_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_master_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                             //  output,  width = 139,          .data
		.src_channel        (router_005_src_channel),                                          //  output,   width = 16,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gjgcptq router_006 (
		.sink_ready         (agilex_5_soc_hps2fpga_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_hps2fpga_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_hps2fpga_agent_write_cp_data),                              //   input,  width = 139,          .data
		.sink_startofpacket (agilex_5_soc_hps2fpga_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_hps2fpga_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                                    //  output,  width = 139,          .data
		.src_channel        (router_006_src_channel),                                                 //  output,   width = 16,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_xt54pdy router_007 (
		.sink_ready         (agilex_5_soc_hps2fpga_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_hps2fpga_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_hps2fpga_agent_read_cp_data),                               //   input,  width = 139,          .data
		.sink_startofpacket (agilex_5_soc_hps2fpga_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_hps2fpga_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                                    //  output,  width = 139,          .data
		.src_channel        (router_007_src_channel),                                                 //  output,   width = 16,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_7o3zu2i router_008 (
		.sink_ready         (axi_hdmi_tx_0_s_axi_agent_write_rp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (axi_hdmi_tx_0_s_axi_agent_write_rp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (axi_hdmi_tx_0_s_axi_agent_write_rp_data),                          //   input,  width = 139,          .data
		.sink_startofpacket (axi_hdmi_tx_0_s_axi_agent_write_rp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_hdmi_tx_0_s_axi_agent_write_rp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                              //  output,  width = 139,          .data
		.src_channel        (router_008_src_channel),                                           //  output,   width = 16,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_xm434qa router_009 (
		.sink_ready         (axi_hdmi_tx_0_s_axi_agent_read_rp_ready),                          //  output,    width = 1,      sink.ready
		.sink_valid         (axi_hdmi_tx_0_s_axi_agent_read_rp_valid),                          //   input,    width = 1,          .valid
		.sink_data          (axi_hdmi_tx_0_s_axi_agent_read_rp_data),                           //   input,  width = 139,          .data
		.sink_startofpacket (axi_hdmi_tx_0_s_axi_agent_read_rp_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_hdmi_tx_0_s_axi_agent_read_rp_endofpacket),                    //   input,    width = 1,          .endofpacket
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                                              //  output,  width = 139,          .data
		.src_channel        (router_009_src_channel),                                           //  output,   width = 16,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_tyh2gdi router_010 (
		.sink_ready         (axi_dmac_0_s_axi_agent_write_rp_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (axi_dmac_0_s_axi_agent_write_rp_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (axi_dmac_0_s_axi_agent_write_rp_data),                                     //   input,  width = 139,          .data
		.sink_startofpacket (axi_dmac_0_s_axi_agent_write_rp_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_dmac_0_s_axi_agent_write_rp_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_010_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_qsuf4ta router_011 (
		.sink_ready         (axi_dmac_0_s_axi_agent_read_rp_ready),                                     //  output,    width = 1,      sink.ready
		.sink_valid         (axi_dmac_0_s_axi_agent_read_rp_valid),                                     //   input,    width = 1,          .valid
		.sink_data          (axi_dmac_0_s_axi_agent_read_rp_data),                                      //   input,  width = 139,          .data
		.sink_startofpacket (axi_dmac_0_s_axi_agent_read_rp_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_dmac_0_s_axi_agent_read_rp_endofpacket),                               //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_011_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_011_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_011_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_011_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_012 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),                                //   input,  width = 139,          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_012_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_012_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_012_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_012_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_013 (
		.sink_ready         (sys_id_control_slave_agent_rp_ready),                                      //  output,    width = 1,      sink.ready
		.sink_valid         (sys_id_control_slave_agent_rp_valid),                                      //   input,    width = 1,          .valid
		.sink_data          (sys_id_control_slave_agent_rp_data),                                       //   input,  width = 139,          .data
		.sink_startofpacket (sys_id_control_slave_agent_rp_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sys_id_control_slave_agent_rp_endofpacket),                                //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_013_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_013_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_013_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_013_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_014 (
		.sink_ready         (pb_s1_agent_rp_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_valid         (pb_s1_agent_rp_valid),                                                     //   input,    width = 1,          .valid
		.sink_data          (pb_s1_agent_rp_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (pb_s1_agent_rp_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pb_s1_agent_rp_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_014_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_014_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_014_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_014_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_015 (
		.sink_ready         (dipsw_s1_agent_rp_ready),                                                  //  output,    width = 1,      sink.ready
		.sink_valid         (dipsw_s1_agent_rp_valid),                                                  //   input,    width = 1,          .valid
		.sink_data          (dipsw_s1_agent_rp_data),                                                   //   input,  width = 139,          .data
		.sink_startofpacket (dipsw_s1_agent_rp_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dipsw_s1_agent_rp_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_015_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_015_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_015_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_015_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_016 (
		.sink_ready         (rgb_led0_s1_agent_rp_ready),                                               //  output,    width = 1,      sink.ready
		.sink_valid         (rgb_led0_s1_agent_rp_valid),                                               //   input,    width = 1,          .valid
		.sink_data          (rgb_led0_s1_agent_rp_data),                                                //   input,  width = 139,          .data
		.sink_startofpacket (rgb_led0_s1_agent_rp_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rgb_led0_s1_agent_rp_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_016_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_016_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_016_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_016_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_017 (
		.sink_ready         (rgb_led1_s1_agent_rp_ready),                                               //  output,    width = 1,      sink.ready
		.sink_valid         (rgb_led1_s1_agent_rp_valid),                                               //   input,    width = 1,          .valid
		.sink_data          (rgb_led1_s1_agent_rp_data),                                                //   input,  width = 139,          .data
		.sink_startofpacket (rgb_led1_s1_agent_rp_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rgb_led1_s1_agent_rp_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_017_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_017_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_017_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_017_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_018 (
		.sink_ready         (rgb_led2_s1_agent_rp_ready),                                               //  output,    width = 1,      sink.ready
		.sink_valid         (rgb_led2_s1_agent_rp_valid),                                               //   input,    width = 1,          .valid
		.sink_data          (rgb_led2_s1_agent_rp_data),                                                //   input,  width = 139,          .data
		.sink_startofpacket (rgb_led2_s1_agent_rp_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rgb_led2_s1_agent_rp_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_018_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_018_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_018_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_018_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqrde4i router_019 (
		.sink_ready         (rgb_led3_s1_agent_rp_ready),                                               //  output,    width = 1,      sink.ready
		.sink_valid         (rgb_led3_s1_agent_rp_valid),                                               //   input,    width = 1,          .valid
		.sink_data          (rgb_led3_s1_agent_rp_data),                                                //   input,  width = 139,          .data
		.sink_startofpacket (rgb_led3_s1_agent_rp_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rgb_led3_s1_agent_rp_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_019_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_019_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_019_src_data),                                                      //  output,  width = 139,          .data
		.src_channel        (router_019_src_channel),                                                   //  output,   width = 16,          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_mqgulua router_020 (
		.sink_ready         (emif_ph2_0_s0_axil_agent_write_rp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (emif_ph2_0_s0_axil_agent_write_rp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (emif_ph2_0_s0_axil_agent_write_rp_data),                          //   input,  width = 139,          .data
		.sink_startofpacket (emif_ph2_0_s0_axil_agent_write_rp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_ph2_0_s0_axil_agent_write_rp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_020_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_020_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_020_src_data),                                             //  output,  width = 139,          .data
		.src_channel        (router_020_src_channel),                                          //  output,   width = 16,          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_dlfrdty router_021 (
		.sink_ready         (emif_ph2_0_s0_axil_agent_read_rp_ready),                          //  output,    width = 1,      sink.ready
		.sink_valid         (emif_ph2_0_s0_axil_agent_read_rp_valid),                          //   input,    width = 1,          .valid
		.sink_data          (emif_ph2_0_s0_axil_agent_read_rp_data),                           //   input,  width = 139,          .data
		.sink_startofpacket (emif_ph2_0_s0_axil_agent_read_rp_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_ph2_0_s0_axil_agent_read_rp_endofpacket),                    //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_021_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_021_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_021_src_data),                                             //  output,  width = 139,          .data
		.src_channel        (router_021_src_channel),                                          //  output,   width = 16,          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_5n7q2zq router_022 (
		.sink_ready         (onchip_sram_axi_s1_agent_write_rp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_sram_axi_s1_agent_write_rp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (onchip_sram_axi_s1_agent_write_rp_data),                              //   input,  width = 175,          .data
		.sink_startofpacket (onchip_sram_axi_s1_agent_write_rp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_sram_axi_s1_agent_write_rp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_022_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_022_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_022_src_data),                                                 //  output,  width = 175,          .data
		.src_channel        (router_022_src_channel),                                              //  output,   width = 16,          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_i4a3aky router_023 (
		.sink_ready         (onchip_sram_axi_s1_agent_read_rp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_sram_axi_s1_agent_read_rp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (onchip_sram_axi_s1_agent_read_rp_data),                               //   input,  width = 175,          .data
		.sink_startofpacket (onchip_sram_axi_s1_agent_read_rp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_sram_axi_s1_agent_read_rp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_023_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_023_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_023_src_data),                                                 //  output,  width = 175,          .data
		.src_channel        (router_023_src_channel),                                              //  output,   width = 16,          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (113),
		.PKT_DEST_ID_L                        (110),
		.PKT_SRC_ID_H                         (109),
		.PKT_SRC_ID_L                         (106),
		.PKT_BYTE_CNT_H                       (85),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.MAX_OUTSTANDING_RESPONSES            (8),
		.PIPELINED                            (0),
		.ST_DATA_W                            (139),
		.ST_CHANNEL_W                         (16),
		.VALID_WIDTH                          (16),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) hps_jtag_master_master_limiter (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                                     //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                                     //   input,    width = 1,          .valid
		.cmd_sink_data          (router_004_src_data),                                                      //   input,  width = 139,          .data
		.cmd_sink_channel       (router_004_src_channel),                                                   //   input,   width = 16,          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (hps_jtag_master_master_limiter_cmd_src_ready),                             //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (hps_jtag_master_master_limiter_cmd_src_data),                              //  output,  width = 139,          .data
		.cmd_src_channel        (hps_jtag_master_master_limiter_cmd_src_channel),                           //  output,   width = 16,          .channel
		.cmd_src_startofpacket  (hps_jtag_master_master_limiter_cmd_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (hps_jtag_master_master_limiter_cmd_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                                    //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                                    //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                                  //   input,   width = 16,          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                                     //   input,  width = 139,          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (hps_jtag_master_master_limiter_rsp_src_ready),                             //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (hps_jtag_master_master_limiter_rsp_src_valid),                             //  output,    width = 1,          .valid
		.rsp_src_data           (hps_jtag_master_master_limiter_rsp_src_data),                              //  output,  width = 139,          .data
		.rsp_src_channel        (hps_jtag_master_master_limiter_rsp_src_channel),                           //  output,   width = 16,          .channel
		.rsp_src_startofpacket  (hps_jtag_master_master_limiter_rsp_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (hps_jtag_master_master_limiter_rsp_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (hps_jtag_master_master_limiter_cmd_valid_data)                             //  output,   width = 16, cmd_valid.data
	);

	ghrd_hps_system_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (113),
		.PKT_DEST_ID_L                        (110),
		.PKT_SRC_ID_H                         (109),
		.PKT_SRC_ID_L                         (106),
		.PKT_BYTE_CNT_H                       (85),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.MAX_OUTSTANDING_RESPONSES            (4),
		.PIPELINED                            (0),
		.ST_DATA_W                            (139),
		.ST_CHANNEL_W                         (16),
		.VALID_WIDTH                          (16),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) jtag_master_master_limiter (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset                  (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                            //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                            //   input,    width = 1,          .valid
		.cmd_sink_data          (router_005_src_data),                                             //   input,  width = 139,          .data
		.cmd_sink_channel       (router_005_src_channel),                                          //   input,   width = 16,          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (jtag_master_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (jtag_master_master_limiter_cmd_src_data),                         //  output,  width = 139,          .data
		.cmd_src_channel        (jtag_master_master_limiter_cmd_src_channel),                      //  output,   width = 16,          .channel
		.cmd_src_startofpacket  (jtag_master_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (jtag_master_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                           //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                           //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                         //   input,   width = 16,          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                            //   input,  width = 139,          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (jtag_master_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (jtag_master_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (jtag_master_master_limiter_rsp_src_data),                         //  output,  width = 139,          .data
		.rsp_src_channel        (jtag_master_master_limiter_rsp_src_channel),                      //  output,   width = 16,          .channel
		.rsp_src_startofpacket  (jtag_master_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (jtag_master_master_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (jtag_master_master_limiter_cmd_valid_data)                        //  output,   width = 16, cmd_valid.data
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) axi_hdmi_tx_0_s_axi_wr_burst_adapter (
		.clk                   (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       cr0.clk
		.reset                 (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                 //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_src_channel),                                              //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                //  output,    width = 1,          .ready
		.source0_valid         (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_data),                //  output,  width = 139,          .data
		.source0_channel       (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_channel),             //  output,   width = 16,          .channel
		.source0_startofpacket (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (axi_hdmi_tx_0_s_axi_wr_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) axi_hdmi_tx_0_s_axi_rd_burst_adapter (
		.clk                   (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       cr0.clk
		.reset                 (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                            //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                             //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                          //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                            //  output,    width = 1,          .ready
		.source0_valid         (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_data),                //  output,  width = 139,          .data
		.source0_channel       (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_channel),             //  output,   width = 16,          .channel
		.source0_startofpacket (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (axi_hdmi_tx_0_s_axi_rd_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) axi_dmac_0_s_axi_wr_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (axi_dmac_0_s_axi_wr_burst_adapter_source0_valid),                          //  output,    width = 1,   source0.valid
		.source0_data          (axi_dmac_0_s_axi_wr_burst_adapter_source0_data),                           //  output,  width = 139,          .data
		.source0_channel       (axi_dmac_0_s_axi_wr_burst_adapter_source0_channel),                        //  output,   width = 16,          .channel
		.source0_startofpacket (axi_dmac_0_s_axi_wr_burst_adapter_source0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (axi_dmac_0_s_axi_wr_burst_adapter_source0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.source0_ready         (axi_dmac_0_s_axi_wr_burst_adapter_source0_ready)                           //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) axi_dmac_0_s_axi_rd_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (axi_dmac_0_s_axi_rd_burst_adapter_source0_valid),                          //  output,    width = 1,   source0.valid
		.source0_data          (axi_dmac_0_s_axi_rd_burst_adapter_source0_data),                           //  output,  width = 139,          .data
		.source0_channel       (axi_dmac_0_s_axi_rd_burst_adapter_source0_channel),                        //  output,   width = 16,          .channel
		.source0_startofpacket (axi_dmac_0_s_axi_rd_burst_adapter_source0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (axi_dmac_0_s_axi_rd_burst_adapter_source0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.source0_ready         (axi_dmac_0_s_axi_rd_burst_adapter_source0_ready)                           //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),                  //  output,    width = 1,   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),                   //  output,  width = 139,          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),                //  output,   width = 16,          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)                   //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) sys_id_control_slave_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (sys_id_control_slave_burst_adapter_source0_valid),                         //  output,    width = 1,   source0.valid
		.source0_data          (sys_id_control_slave_burst_adapter_source0_data),                          //  output,  width = 139,          .data
		.source0_channel       (sys_id_control_slave_burst_adapter_source0_channel),                       //  output,   width = 16,          .channel
		.source0_startofpacket (sys_id_control_slave_burst_adapter_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (sys_id_control_slave_burst_adapter_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.source0_ready         (sys_id_control_slave_burst_adapter_source0_ready)                          //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) pb_s1_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (pb_s1_burst_adapter_source0_valid),                                        //  output,    width = 1,   source0.valid
		.source0_data          (pb_s1_burst_adapter_source0_data),                                         //  output,  width = 139,          .data
		.source0_channel       (pb_s1_burst_adapter_source0_channel),                                      //  output,   width = 16,          .channel
		.source0_startofpacket (pb_s1_burst_adapter_source0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (pb_s1_burst_adapter_source0_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.source0_ready         (pb_s1_burst_adapter_source0_ready)                                         //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) dipsw_s1_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (dipsw_s1_burst_adapter_source0_valid),                                     //  output,    width = 1,   source0.valid
		.source0_data          (dipsw_s1_burst_adapter_source0_data),                                      //  output,  width = 139,          .data
		.source0_channel       (dipsw_s1_burst_adapter_source0_channel),                                   //  output,   width = 16,          .channel
		.source0_startofpacket (dipsw_s1_burst_adapter_source0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (dipsw_s1_burst_adapter_source0_endofpacket),                               //  output,    width = 1,          .endofpacket
		.source0_ready         (dipsw_s1_burst_adapter_source0_ready)                                      //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) rgb_led0_s1_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (rgb_led0_s1_burst_adapter_source0_valid),                                  //  output,    width = 1,   source0.valid
		.source0_data          (rgb_led0_s1_burst_adapter_source0_data),                                   //  output,  width = 139,          .data
		.source0_channel       (rgb_led0_s1_burst_adapter_source0_channel),                                //  output,   width = 16,          .channel
		.source0_startofpacket (rgb_led0_s1_burst_adapter_source0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rgb_led0_s1_burst_adapter_source0_endofpacket),                            //  output,    width = 1,          .endofpacket
		.source0_ready         (rgb_led0_s1_burst_adapter_source0_ready)                                   //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) rgb_led1_s1_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (rgb_led1_s1_burst_adapter_source0_valid),                                  //  output,    width = 1,   source0.valid
		.source0_data          (rgb_led1_s1_burst_adapter_source0_data),                                   //  output,  width = 139,          .data
		.source0_channel       (rgb_led1_s1_burst_adapter_source0_channel),                                //  output,   width = 16,          .channel
		.source0_startofpacket (rgb_led1_s1_burst_adapter_source0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rgb_led1_s1_burst_adapter_source0_endofpacket),                            //  output,    width = 1,          .endofpacket
		.source0_ready         (rgb_led1_s1_burst_adapter_source0_ready)                                   //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) rgb_led2_s1_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (rgb_led2_s1_burst_adapter_source0_valid),                                  //  output,    width = 1,   source0.valid
		.source0_data          (rgb_led2_s1_burst_adapter_source0_data),                                   //  output,  width = 139,          .data
		.source0_channel       (rgb_led2_s1_burst_adapter_source0_channel),                                //  output,   width = 16,          .channel
		.source0_startofpacket (rgb_led2_s1_burst_adapter_source0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rgb_led2_s1_burst_adapter_source0_endofpacket),                            //  output,    width = 1,          .endofpacket
		.source0_ready         (rgb_led2_s1_burst_adapter_source0_ready)                                   //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) rgb_led3_s1_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                                     //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                                  //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (rgb_led3_s1_burst_adapter_source0_valid),                                  //  output,    width = 1,   source0.valid
		.source0_data          (rgb_led3_s1_burst_adapter_source0_data),                                   //  output,  width = 139,          .data
		.source0_channel       (rgb_led3_s1_burst_adapter_source0_channel),                                //  output,   width = 16,          .channel
		.source0_startofpacket (rgb_led3_s1_burst_adapter_source0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rgb_led3_s1_burst_adapter_source0_endofpacket),                            //  output,    width = 1,          .endofpacket
		.source0_ready         (rgb_led3_s1_burst_adapter_source0_ready)                                   //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) emif_ph2_0_s0_axil_wr_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                           //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                            //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                         //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                           //  output,    width = 1,          .ready
		.source0_valid         (emif_ph2_0_s0_axil_wr_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (emif_ph2_0_s0_axil_wr_burst_adapter_source0_data),                //  output,  width = 139,          .data
		.source0_channel       (emif_ph2_0_s0_axil_wr_burst_adapter_source0_channel),             //  output,   width = 16,          .channel
		.source0_startofpacket (emif_ph2_0_s0_axil_wr_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_ph2_0_s0_axil_wr_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_ph2_0_s0_axil_wr_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_qgfu2fa #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (101),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (139),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (93),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) emif_ph2_0_s0_axil_rd_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                           //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                            //   input,  width = 139,          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                         //   input,   width = 16,          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                           //  output,    width = 1,          .ready
		.source0_valid         (emif_ph2_0_s0_axil_rd_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (emif_ph2_0_s0_axil_rd_burst_adapter_source0_data),                //  output,  width = 139,          .data
		.source0_channel       (emif_ph2_0_s0_axil_rd_burst_adapter_source0_channel),             //  output,   width = 16,          .channel
		.source0_startofpacket (emif_ph2_0_s0_axil_rd_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_ph2_0_s0_axil_rd_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_ph2_0_s0_axil_rd_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_glnihsi cmd_demux (
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                 //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                               //   input,   width = 16,          .channel
		.sink_data          (router_src_data),                                                  //   input,  width = 175,          .data
		.sink_startofpacket (router_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                 //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                              //  output,  width = 175,          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //  output,   width = 16,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_glnihsi cmd_demux_001 (
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                           //   input,   width = 16,          .channel
		.sink_data          (router_001_src_data),                                              //   input,  width = 175,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //  output,  width = 175,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //  output,   width = 16,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_3mp4uuy cmd_demux_002 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready          (router_002_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel        (router_002_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data           (router_002_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket  (router_002_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket    (router_002_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid          (router_002_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready          (cmd_demux_002_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data           (cmd_demux_002_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel        (cmd_demux_002_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data           (cmd_demux_002_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel        (cmd_demux_002_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data           (cmd_demux_002_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel        (cmd_demux_002_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data           (cmd_demux_002_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel        (cmd_demux_002_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                                                 //   input,    width = 1,      src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                                                 //  output,    width = 1,          .valid
		.src4_data           (cmd_demux_002_src4_data),                                                  //  output,  width = 139,          .data
		.src4_channel        (cmd_demux_002_src4_channel),                                               //  output,   width = 16,          .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                                                 //   input,    width = 1,      src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                                                 //  output,    width = 1,          .valid
		.src5_data           (cmd_demux_002_src5_data),                                                  //  output,  width = 139,          .data
		.src5_channel        (cmd_demux_002_src5_channel),                                               //  output,   width = 16,          .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                                                 //   input,    width = 1,      src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                                                 //  output,    width = 1,          .valid
		.src6_data           (cmd_demux_002_src6_data),                                                  //  output,  width = 139,          .data
		.src6_channel        (cmd_demux_002_src6_channel),                                               //  output,   width = 16,          .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                                                 //   input,    width = 1,      src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                                                 //  output,    width = 1,          .valid
		.src7_data           (cmd_demux_002_src7_data),                                                  //  output,  width = 139,          .data
		.src7_channel        (cmd_demux_002_src7_channel),                                               //  output,   width = 16,          .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                                                 //   input,    width = 1,      src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                                                 //  output,    width = 1,          .valid
		.src8_data           (cmd_demux_002_src8_data),                                                  //  output,  width = 139,          .data
		.src8_channel        (cmd_demux_002_src8_channel),                                               //  output,   width = 16,          .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                                                 //   input,    width = 1,      src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                                                 //  output,    width = 1,          .valid
		.src9_data           (cmd_demux_002_src9_data),                                                  //  output,  width = 139,          .data
		.src9_channel        (cmd_demux_002_src9_channel),                                               //  output,   width = 16,          .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                                                //   input,    width = 1,     src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                                                //  output,    width = 1,          .valid
		.src10_data          (cmd_demux_002_src10_data),                                                 //  output,  width = 139,          .data
		.src10_channel       (cmd_demux_002_src10_channel),                                              //  output,   width = 16,          .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),                                                //   input,    width = 1,     src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),                                                //  output,    width = 1,          .valid
		.src11_data          (cmd_demux_002_src11_data),                                                 //  output,  width = 139,          .data
		.src11_channel       (cmd_demux_002_src11_channel),                                              //  output,   width = 16,          .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_3mp4uuy cmd_demux_003 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready          (router_003_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel        (router_003_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data           (router_003_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket  (router_003_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket    (router_003_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid          (router_003_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready          (cmd_demux_003_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data           (cmd_demux_003_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel        (cmd_demux_003_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data           (cmd_demux_003_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel        (cmd_demux_003_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data           (cmd_demux_003_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel        (cmd_demux_003_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data           (cmd_demux_003_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel        (cmd_demux_003_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                                                 //   input,    width = 1,      src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                                                 //  output,    width = 1,          .valid
		.src4_data           (cmd_demux_003_src4_data),                                                  //  output,  width = 139,          .data
		.src4_channel        (cmd_demux_003_src4_channel),                                               //  output,   width = 16,          .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                                                 //   input,    width = 1,      src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                                                 //  output,    width = 1,          .valid
		.src5_data           (cmd_demux_003_src5_data),                                                  //  output,  width = 139,          .data
		.src5_channel        (cmd_demux_003_src5_channel),                                               //  output,   width = 16,          .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                                                 //   input,    width = 1,      src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                                                 //  output,    width = 1,          .valid
		.src6_data           (cmd_demux_003_src6_data),                                                  //  output,  width = 139,          .data
		.src6_channel        (cmd_demux_003_src6_channel),                                               //  output,   width = 16,          .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                                                 //   input,    width = 1,      src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                                                 //  output,    width = 1,          .valid
		.src7_data           (cmd_demux_003_src7_data),                                                  //  output,  width = 139,          .data
		.src7_channel        (cmd_demux_003_src7_channel),                                               //  output,   width = 16,          .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                                                 //   input,    width = 1,      src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                                                 //  output,    width = 1,          .valid
		.src8_data           (cmd_demux_003_src8_data),                                                  //  output,  width = 139,          .data
		.src8_channel        (cmd_demux_003_src8_channel),                                               //  output,   width = 16,          .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                                                 //   input,    width = 1,      src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                                                 //  output,    width = 1,          .valid
		.src9_data           (cmd_demux_003_src9_data),                                                  //  output,  width = 139,          .data
		.src9_channel        (cmd_demux_003_src9_channel),                                               //  output,   width = 16,          .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                                                //   input,    width = 1,     src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                                                //  output,    width = 1,          .valid
		.src10_data          (cmd_demux_003_src10_data),                                                 //  output,  width = 139,          .data
		.src10_channel       (cmd_demux_003_src10_channel),                                              //  output,   width = 16,          .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                                                //   input,    width = 1,     src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                                                //  output,    width = 1,          .valid
		.src11_data          (cmd_demux_003_src11_data),                                                 //  output,  width = 139,          .data
		.src11_channel       (cmd_demux_003_src11_channel),                                              //  output,   width = 16,          .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_xvse3oy cmd_demux_004 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,        clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready          (hps_jtag_master_master_limiter_cmd_src_ready),                             //  output,    width = 1,       sink.ready
		.sink_channel        (hps_jtag_master_master_limiter_cmd_src_channel),                           //   input,   width = 16,           .channel
		.sink_data           (hps_jtag_master_master_limiter_cmd_src_data),                              //   input,  width = 139,           .data
		.sink_startofpacket  (hps_jtag_master_master_limiter_cmd_src_startofpacket),                     //   input,    width = 1,           .startofpacket
		.sink_endofpacket    (hps_jtag_master_master_limiter_cmd_src_endofpacket),                       //   input,    width = 1,           .endofpacket
		.sink_valid          (hps_jtag_master_master_limiter_cmd_valid_data),                            //   input,   width = 16, sink_valid.data
		.src0_ready          (cmd_demux_004_src0_ready),                                                 //   input,    width = 1,       src0.ready
		.src0_valid          (cmd_demux_004_src0_valid),                                                 //  output,    width = 1,           .valid
		.src0_data           (cmd_demux_004_src0_data),                                                  //  output,  width = 139,           .data
		.src0_channel        (cmd_demux_004_src0_channel),                                               //  output,   width = 16,           .channel
		.src0_startofpacket  (cmd_demux_004_src0_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src0_endofpacket    (cmd_demux_004_src0_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src1_ready          (cmd_demux_004_src1_ready),                                                 //   input,    width = 1,       src1.ready
		.src1_valid          (cmd_demux_004_src1_valid),                                                 //  output,    width = 1,           .valid
		.src1_data           (cmd_demux_004_src1_data),                                                  //  output,  width = 139,           .data
		.src1_channel        (cmd_demux_004_src1_channel),                                               //  output,   width = 16,           .channel
		.src1_startofpacket  (cmd_demux_004_src1_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src1_endofpacket    (cmd_demux_004_src1_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src2_ready          (cmd_demux_004_src2_ready),                                                 //   input,    width = 1,       src2.ready
		.src2_valid          (cmd_demux_004_src2_valid),                                                 //  output,    width = 1,           .valid
		.src2_data           (cmd_demux_004_src2_data),                                                  //  output,  width = 139,           .data
		.src2_channel        (cmd_demux_004_src2_channel),                                               //  output,   width = 16,           .channel
		.src2_startofpacket  (cmd_demux_004_src2_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src2_endofpacket    (cmd_demux_004_src2_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src3_ready          (cmd_demux_004_src3_ready),                                                 //   input,    width = 1,       src3.ready
		.src3_valid          (cmd_demux_004_src3_valid),                                                 //  output,    width = 1,           .valid
		.src3_data           (cmd_demux_004_src3_data),                                                  //  output,  width = 139,           .data
		.src3_channel        (cmd_demux_004_src3_channel),                                               //  output,   width = 16,           .channel
		.src3_startofpacket  (cmd_demux_004_src3_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src3_endofpacket    (cmd_demux_004_src3_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src4_ready          (cmd_demux_004_src4_ready),                                                 //   input,    width = 1,       src4.ready
		.src4_valid          (cmd_demux_004_src4_valid),                                                 //  output,    width = 1,           .valid
		.src4_data           (cmd_demux_004_src4_data),                                                  //  output,  width = 139,           .data
		.src4_channel        (cmd_demux_004_src4_channel),                                               //  output,   width = 16,           .channel
		.src4_startofpacket  (cmd_demux_004_src4_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src4_endofpacket    (cmd_demux_004_src4_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src5_ready          (cmd_demux_004_src5_ready),                                                 //   input,    width = 1,       src5.ready
		.src5_valid          (cmd_demux_004_src5_valid),                                                 //  output,    width = 1,           .valid
		.src5_data           (cmd_demux_004_src5_data),                                                  //  output,  width = 139,           .data
		.src5_channel        (cmd_demux_004_src5_channel),                                               //  output,   width = 16,           .channel
		.src5_startofpacket  (cmd_demux_004_src5_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src5_endofpacket    (cmd_demux_004_src5_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src6_ready          (cmd_demux_004_src6_ready),                                                 //   input,    width = 1,       src6.ready
		.src6_valid          (cmd_demux_004_src6_valid),                                                 //  output,    width = 1,           .valid
		.src6_data           (cmd_demux_004_src6_data),                                                  //  output,  width = 139,           .data
		.src6_channel        (cmd_demux_004_src6_channel),                                               //  output,   width = 16,           .channel
		.src6_startofpacket  (cmd_demux_004_src6_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src6_endofpacket    (cmd_demux_004_src6_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src7_ready          (cmd_demux_004_src7_ready),                                                 //   input,    width = 1,       src7.ready
		.src7_valid          (cmd_demux_004_src7_valid),                                                 //  output,    width = 1,           .valid
		.src7_data           (cmd_demux_004_src7_data),                                                  //  output,  width = 139,           .data
		.src7_channel        (cmd_demux_004_src7_channel),                                               //  output,   width = 16,           .channel
		.src7_startofpacket  (cmd_demux_004_src7_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src7_endofpacket    (cmd_demux_004_src7_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src8_ready          (cmd_demux_004_src8_ready),                                                 //   input,    width = 1,       src8.ready
		.src8_valid          (cmd_demux_004_src8_valid),                                                 //  output,    width = 1,           .valid
		.src8_data           (cmd_demux_004_src8_data),                                                  //  output,  width = 139,           .data
		.src8_channel        (cmd_demux_004_src8_channel),                                               //  output,   width = 16,           .channel
		.src8_startofpacket  (cmd_demux_004_src8_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src8_endofpacket    (cmd_demux_004_src8_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src9_ready          (cmd_demux_004_src9_ready),                                                 //   input,    width = 1,       src9.ready
		.src9_valid          (cmd_demux_004_src9_valid),                                                 //  output,    width = 1,           .valid
		.src9_data           (cmd_demux_004_src9_data),                                                  //  output,  width = 139,           .data
		.src9_channel        (cmd_demux_004_src9_channel),                                               //  output,   width = 16,           .channel
		.src9_startofpacket  (cmd_demux_004_src9_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src9_endofpacket    (cmd_demux_004_src9_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src10_ready         (cmd_demux_004_src10_ready),                                                //   input,    width = 1,      src10.ready
		.src10_valid         (cmd_demux_004_src10_valid),                                                //  output,    width = 1,           .valid
		.src10_data          (cmd_demux_004_src10_data),                                                 //  output,  width = 139,           .data
		.src10_channel       (cmd_demux_004_src10_channel),                                              //  output,   width = 16,           .channel
		.src10_startofpacket (cmd_demux_004_src10_startofpacket),                                        //  output,    width = 1,           .startofpacket
		.src10_endofpacket   (cmd_demux_004_src10_endofpacket),                                          //  output,    width = 1,           .endofpacket
		.src11_ready         (cmd_demux_004_src11_ready),                                                //   input,    width = 1,      src11.ready
		.src11_valid         (cmd_demux_004_src11_valid),                                                //  output,    width = 1,           .valid
		.src11_data          (cmd_demux_004_src11_data),                                                 //  output,  width = 139,           .data
		.src11_channel       (cmd_demux_004_src11_channel),                                              //  output,   width = 16,           .channel
		.src11_startofpacket (cmd_demux_004_src11_startofpacket),                                        //  output,    width = 1,           .startofpacket
		.src11_endofpacket   (cmd_demux_004_src11_endofpacket)                                           //  output,    width = 1,           .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_pwrbqhq cmd_demux_005 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,        clk.clk
		.reset              (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (jtag_master_master_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (jtag_master_master_limiter_cmd_src_channel),                      //   input,   width = 16,           .channel
		.sink_data          (jtag_master_master_limiter_cmd_src_data),                         //   input,  width = 139,           .data
		.sink_startofpacket (jtag_master_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (jtag_master_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (jtag_master_master_limiter_cmd_valid_data),                       //   input,   width = 16, sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                        //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                        //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_005_src0_data),                                         //  output,  width = 139,           .data
		.src0_channel       (cmd_demux_005_src0_channel),                                      //  output,   width = 16,           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                        //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                        //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_005_src1_data),                                         //  output,  width = 139,           .data
		.src1_channel       (cmd_demux_005_src1_channel),                                      //  output,   width = 16,           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                                        //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                                        //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_005_src2_data),                                         //  output,  width = 139,           .data
		.src2_channel       (cmd_demux_005_src2_channel),                                      //  output,   width = 16,           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_005_src3_ready),                                        //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_005_src3_valid),                                        //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_005_src3_data),                                         //  output,  width = 139,           .data
		.src3_channel       (cmd_demux_005_src3_channel),                                      //  output,   width = 16,           .channel
		.src3_startofpacket (cmd_demux_005_src3_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_005_src3_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_005_src4_ready),                                        //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_005_src4_valid),                                        //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_005_src4_data),                                         //  output,  width = 139,           .data
		.src4_channel       (cmd_demux_005_src4_channel),                                      //  output,   width = 16,           .channel
		.src4_startofpacket (cmd_demux_005_src4_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_005_src4_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_005_src5_ready),                                        //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_005_src5_valid),                                        //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_005_src5_data),                                         //  output,  width = 139,           .data
		.src5_channel       (cmd_demux_005_src5_channel),                                      //  output,   width = 16,           .channel
		.src5_startofpacket (cmd_demux_005_src5_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_005_src5_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src6_ready         (cmd_demux_005_src6_ready),                                        //   input,    width = 1,       src6.ready
		.src6_valid         (cmd_demux_005_src6_valid),                                        //  output,    width = 1,           .valid
		.src6_data          (cmd_demux_005_src6_data),                                         //  output,  width = 139,           .data
		.src6_channel       (cmd_demux_005_src6_channel),                                      //  output,   width = 16,           .channel
		.src6_startofpacket (cmd_demux_005_src6_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src6_endofpacket   (cmd_demux_005_src6_endofpacket),                                  //  output,    width = 1,           .endofpacket
		.src7_ready         (cmd_demux_005_src7_ready),                                        //   input,    width = 1,       src7.ready
		.src7_valid         (cmd_demux_005_src7_valid),                                        //  output,    width = 1,           .valid
		.src7_data          (cmd_demux_005_src7_data),                                         //  output,  width = 139,           .data
		.src7_channel       (cmd_demux_005_src7_channel),                                      //  output,   width = 16,           .channel
		.src7_startofpacket (cmd_demux_005_src7_startofpacket),                                //  output,    width = 1,           .startofpacket
		.src7_endofpacket   (cmd_demux_005_src7_endofpacket)                                   //  output,    width = 1,           .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_ej7tc2q cmd_demux_006 (
		.clk                (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                                 //   input,   width = 16,          .channel
		.sink_data          (router_006_src_data),                                                    //   input,  width = 139,          .data
		.sink_startofpacket (router_006_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                                   //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                                               //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                                               //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_006_src0_data),                                                //  output,  width = 139,          .data
		.src0_channel       (cmd_demux_006_src0_channel),                                             //  output,   width = 16,          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_ej7tc2q cmd_demux_007 (
		.clk                (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                                                 //   input,   width = 16,          .channel
		.sink_data          (router_007_src_data),                                                    //   input,  width = 139,          .data
		.sink_startofpacket (router_007_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                                   //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                                               //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                               //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_007_src0_data),                                                //  output,  width = 139,          .data
		.src0_channel       (cmd_demux_007_src0_channel),                                             //  output,   width = 16,          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_wrnsk3i cmd_mux (
		.clk                 (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset               (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                     //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                     //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                                      //  output,  width = 139,          .data
		.src_channel         (cmd_mux_src_channel),                                                                   //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                               //  output,    width = 1,          .endofpacket
		.sink0_ready         (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_channel),       //   input,   width = 16,          .channel
		.sink0_data          (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_data),          //   input,  width = 139,          .data
		.sink0_startofpacket (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_out_ready),                                                                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_out_valid),                                                                     //   input,    width = 1,          .valid
		.sink1_channel       (crosser_out_channel),                                                                   //   input,   width = 16,          .channel
		.sink1_data          (crosser_out_data),                                                                      //   input,  width = 139,          .data
		.sink1_startofpacket (crosser_out_startofpacket),                                                             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_out_endofpacket),                                                               //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                                                                 //   input,    width = 1,          .valid
		.sink2_channel       (crosser_002_out_channel),                                                               //   input,   width = 16,          .channel
		.sink2_data          (crosser_002_out_data),                                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket)                                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_wrnsk3i cmd_mux_001 (
		.clk                 (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset               (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                                  //  output,  width = 139,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                               //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_channel),       //   input,   width = 16,          .channel
		.sink0_data          (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_data),          //   input,  width = 139,          .data
		.sink0_startofpacket (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                                                 //   input,    width = 1,          .valid
		.sink1_channel       (crosser_001_out_channel),                                                               //   input,   width = 16,          .channel
		.sink1_data          (crosser_001_out_data),                                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                                                                 //   input,    width = 1,          .valid
		.sink2_channel       (crosser_003_out_channel),                                                               //   input,   width = 16,          .channel
		.sink2_data          (crosser_003_out_data),                                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket)                                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_mypufva cmd_mux_002 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src1_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_004_src2_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_004_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_004_src2_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_004_src2_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_004_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src2_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_mypufva cmd_mux_003 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_003_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_003_src1_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_003_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_003_src1_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_003_src1_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_003_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_004_src3_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_004_src3_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_004_src3_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_004_src3_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_004_src3_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src3_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_004 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_004_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src2_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src2_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src4_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src4_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src4_channel),                                               //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src4_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src4_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src4_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src0_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src0_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src0_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src0_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_005 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_005_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src3_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src3_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src5_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src5_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src5_channel),                                               //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src5_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src5_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src5_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src1_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src1_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src1_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src1_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_006 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_006_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src4_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src4_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src6_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src6_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src6_channel),                                               //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src6_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src6_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src6_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src2_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src2_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src2_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src2_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_007 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_007_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src5_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src5_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src5_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src5_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src5_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src5_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src5_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src5_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src5_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src5_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src5_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src5_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src7_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src7_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src7_channel),                                               //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src7_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src7_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src7_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src3_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src3_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src3_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src3_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src3_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src3_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_008 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_008_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src6_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src6_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src6_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src6_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src6_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src6_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src6_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src6_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src6_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src6_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src6_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src6_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src8_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src8_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src8_channel),                                               //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src8_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src8_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src8_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src4_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src4_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src4_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src4_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src4_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src4_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_009 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_009_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_009_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src7_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src7_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src7_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src7_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src7_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src7_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src7_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src9_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src9_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src9_channel),                                               //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src9_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src9_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src9_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src5_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src5_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src5_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src5_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src5_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src5_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_010 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_010_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_010_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src8_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src8_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src8_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src8_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src8_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src8_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src8_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src8_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src8_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src8_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src8_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src8_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src10_ready),                                                //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src10_valid),                                                //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src10_channel),                                              //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src10_data),                                                 //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src10_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src10_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src6_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src6_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src6_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src6_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src6_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src6_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_k7jlv7i cmd_mux_011 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_011_src_data),                                                     //  output,  width = 139,          .data
		.src_channel         (cmd_mux_011_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src9_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src9_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src9_channel),                                               //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src9_data),                                                  //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src9_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src9_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_003_src9_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_003_src9_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_003_src9_channel),                                               //   input,   width = 16,          .channel
		.sink1_data          (cmd_demux_003_src9_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket (cmd_demux_003_src9_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src9_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_004_src11_ready),                                                //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_004_src11_valid),                                                //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_004_src11_channel),                                              //   input,   width = 16,          .channel
		.sink2_data          (cmd_demux_004_src11_data),                                                 //   input,  width = 139,          .data
		.sink2_startofpacket (cmd_demux_004_src11_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src11_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_005_src7_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_005_src7_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_005_src7_channel),                                               //   input,   width = 16,          .channel
		.sink3_data          (cmd_demux_005_src7_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket (cmd_demux_005_src7_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src7_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_6mapbpi cmd_mux_012 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_012_src_data),                                            //  output,  width = 139,          .data
		.src_channel         (cmd_mux_012_src_channel),                                         //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_002_src10_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_002_src10_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_002_src10_channel),                                     //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_002_src10_data),                                        //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_002_src10_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src10_endofpacket)                                  //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_6mapbpi cmd_mux_013 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_013_src_data),                                            //  output,  width = 139,          .data
		.src_channel         (cmd_mux_013_src_channel),                                         //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_003_src10_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_003_src10_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_003_src10_channel),                                     //   input,   width = 16,          .channel
		.sink0_data          (cmd_demux_003_src10_data),                                        //   input,  width = 139,          .data
		.sink0_startofpacket (cmd_demux_003_src10_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src10_endofpacket)                                  //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_vbgoo7i cmd_mux_014 (
		.clk                 (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_014_src_data),                                                //  output,  width = 175,          .data
		.src_channel         (cmd_mux_014_src_channel),                                             //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                                               //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                                               //   input,    width = 1,          .valid
		.sink0_channel       (crosser_008_out_channel),                                             //   input,   width = 16,          .channel
		.sink0_data          (crosser_008_out_data),                                                //   input,  width = 175,          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_010_out_ready),                                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_010_out_valid),                                               //   input,    width = 1,          .valid
		.sink1_channel       (crosser_010_out_channel),                                             //   input,   width = 16,          .channel
		.sink1_data          (crosser_010_out_data),                                                //   input,  width = 175,          .data
		.sink1_startofpacket (crosser_010_out_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_010_out_endofpacket)                                          //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_vbgoo7i cmd_mux_015 (
		.clk                 (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_015_src_data),                                                //  output,  width = 175,          .data
		.src_channel         (cmd_mux_015_src_channel),                                             //  output,   width = 16,          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                                               //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                                               //   input,    width = 1,          .valid
		.sink0_channel       (crosser_009_out_channel),                                             //   input,   width = 16,          .channel
		.sink0_data          (crosser_009_out_data),                                                //   input,  width = 175,          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_011_out_ready),                                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_011_out_valid),                                               //   input,    width = 1,          .valid
		.sink1_channel       (crosser_011_out_channel),                                             //   input,   width = 16,          .channel
		.sink1_data          (crosser_011_out_data),                                                //   input,  width = 175,          .data
		.sink1_startofpacket (crosser_011_out_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_011_out_endofpacket)                                          //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_ch3w2ey rsp_demux (
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                                           //   input,   width = 16,          .channel
		.sink_data          (router_008_src_data),                                              //   input,  width = 139,          .data
		.sink_startofpacket (router_008_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                              //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                             //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                             //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                              //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_src1_channel),                                           //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                             //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                             //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_src2_data),                                              //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_src2_channel),                                           //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_ch3w2ey rsp_demux_001 (
		.clk                (hdmi_pll_outclk0_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                                           //   input,   width = 16,          .channel
		.sink_data          (router_009_src_data),                                              //   input,  width = 139,          .data
		.sink_startofpacket (router_009_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                   //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                         //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                         //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                                          //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                       //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                                   //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                                         //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                                         //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_001_src2_data),                                          //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_001_src2_channel),                                       //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_gx4yjuq rsp_demux_002 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_010_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_010_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_gx4yjuq rsp_demux_003 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_011_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_011_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_011_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_011_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_011_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_004 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_012_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_012_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_012_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_012_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_012_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_004_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_004_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_004_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_004_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_004_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_005 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_013_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_013_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_013_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_013_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_013_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_005_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_005_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_005_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_005_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_005_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_006 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_014_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_014_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_014_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_014_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_014_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_006_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_006_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_006_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_006_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_006_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_007 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_avalon_jtag_slave_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_015_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_015_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_015_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_015_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_015_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_007_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_007_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_007_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_007_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_007_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_007_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_007_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_007_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_007_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_008 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_016_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_016_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_016_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_016_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_016_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_008_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_008_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_008_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_008_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_008_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_008_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_008_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_008_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_008_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_009 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_017_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_017_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_017_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_017_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_017_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_009_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_009_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_009_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_009_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_009_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_009_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_009_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_009_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_009_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_009_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_009_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_010 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_018_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_018_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_018_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_018_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_018_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_010_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_010_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_010_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_010_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_010_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_010_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_010_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_010_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_010_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_010_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_010_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_sagkhpy rsp_demux_011 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_019_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_019_src_channel),                                                   //   input,   width = 16,          .channel
		.sink_data          (router_019_src_data),                                                      //   input,  width = 139,          .data
		.sink_startofpacket (router_019_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_019_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_011_src0_data),                                                  //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                               //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_011_src1_data),                                                  //  output,  width = 139,          .data
		.src1_channel       (rsp_demux_011_src1_channel),                                               //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_011_src2_data),                                                  //  output,  width = 139,          .data
		.src2_channel       (rsp_demux_011_src2_channel),                                               //  output,   width = 16,          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_011_src3_ready),                                                 //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_011_src3_valid),                                                 //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_011_src3_data),                                                  //  output,  width = 139,          .data
		.src3_channel       (rsp_demux_011_src3_channel),                                               //  output,   width = 16,          .channel
		.src3_startofpacket (rsp_demux_011_src3_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_011_src3_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_ej7tc2q rsp_demux_012 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_020_src_ready),                                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_020_src_channel),                                          //   input,   width = 16,          .channel
		.sink_data          (router_020_src_data),                                             //   input,  width = 139,          .data
		.sink_startofpacket (router_020_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_020_src_valid),                                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_012_src0_data),                                         //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                      //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_ej7tc2q rsp_demux_013 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (emif_ph2_0_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_021_src_ready),                                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_021_src_channel),                                          //   input,   width = 16,          .channel
		.sink_data          (router_021_src_data),                                             //   input,  width = 139,          .data
		.sink_startofpacket (router_021_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_021_src_valid),                                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_013_src0_data),                                         //  output,  width = 139,          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                      //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_nsp5yqi rsp_demux_014 (
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_022_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_022_src_channel),                                              //   input,   width = 16,          .channel
		.sink_data          (router_022_src_data),                                                 //   input,  width = 175,          .data
		.sink_startofpacket (router_022_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_022_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_014_src0_data),                                             //  output,  width = 175,          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                          //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                            //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                            //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_014_src1_data),                                             //  output,  width = 175,          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                          //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_nsp5yqi rsp_demux_015 (
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_023_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_023_src_channel),                                              //   input,   width = 16,          .channel
		.sink_data          (router_023_src_data),                                                 //   input,  width = 175,          .data
		.sink_startofpacket (router_023_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_023_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_015_src0_data),                                             //  output,  width = 175,          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                          //  output,   width = 16,          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                                            //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                                            //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_015_src1_data),                                             //  output,  width = 175,          .data
		.src1_channel       (rsp_demux_015_src1_channel),                                          //  output,   width = 16,          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_yrqgiya rsp_mux (
		.clk                 (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset               (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                     //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                     //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                                      //  output,  width = 175,          .data
		.src_channel         (rsp_mux_src_channel),                                                                   //  output,   width = 16,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                               //  output,    width = 1,          .endofpacket
		.sink0_ready         (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_channel),       //   input,   width = 16,          .channel
		.sink0_data          (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_data),          //   input,  width = 175,          .data
		.sink0_startofpacket (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_yrqgiya rsp_mux_001 (
		.clk                 (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset               (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                                  //  output,  width = 175,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                               //  output,   width = 16,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_channel),       //   input,   width = 16,          .channel
		.sink0_data          (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_data),          //   input,  width = 175,          .data
		.sink0_startofpacket (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_dkmpjta rsp_mux_002 (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data             (rsp_mux_002_src_data),                                                     //  output,  width = 139,          .data
		.src_channel          (rsp_mux_002_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready          (crosser_004_out_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid          (crosser_004_out_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel        (crosser_004_out_channel),                                                  //   input,   width = 16,          .channel
		.sink0_data           (crosser_004_out_data),                                                     //   input,  width = 139,          .data
		.sink0_startofpacket  (crosser_004_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket    (crosser_004_out_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink1_ready          (rsp_demux_002_src0_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid          (rsp_demux_002_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel        (rsp_demux_002_src0_channel),                                               //   input,   width = 16,          .channel
		.sink1_data           (rsp_demux_002_src0_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket  (rsp_demux_002_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready          (rsp_demux_004_src0_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid          (rsp_demux_004_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel        (rsp_demux_004_src0_channel),                                               //   input,   width = 16,          .channel
		.sink2_data           (rsp_demux_004_src0_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready          (rsp_demux_005_src0_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid          (rsp_demux_005_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel        (rsp_demux_005_src0_channel),                                               //   input,   width = 16,          .channel
		.sink3_data           (rsp_demux_005_src0_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink4_ready          (rsp_demux_006_src0_ready),                                                 //  output,    width = 1,     sink4.ready
		.sink4_valid          (rsp_demux_006_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink4_channel        (rsp_demux_006_src0_channel),                                               //   input,   width = 16,          .channel
		.sink4_data           (rsp_demux_006_src0_data),                                                  //   input,  width = 139,          .data
		.sink4_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink5_ready          (rsp_demux_007_src0_ready),                                                 //  output,    width = 1,     sink5.ready
		.sink5_valid          (rsp_demux_007_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink5_channel        (rsp_demux_007_src0_channel),                                               //   input,   width = 16,          .channel
		.sink5_data           (rsp_demux_007_src0_data),                                                  //   input,  width = 139,          .data
		.sink5_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink6_ready          (rsp_demux_008_src0_ready),                                                 //  output,    width = 1,     sink6.ready
		.sink6_valid          (rsp_demux_008_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink6_channel        (rsp_demux_008_src0_channel),                                               //   input,   width = 16,          .channel
		.sink6_data           (rsp_demux_008_src0_data),                                                  //   input,  width = 139,          .data
		.sink6_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink7_ready          (rsp_demux_009_src0_ready),                                                 //  output,    width = 1,     sink7.ready
		.sink7_valid          (rsp_demux_009_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink7_channel        (rsp_demux_009_src0_channel),                                               //   input,   width = 16,          .channel
		.sink7_data           (rsp_demux_009_src0_data),                                                  //   input,  width = 139,          .data
		.sink7_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink8_ready          (rsp_demux_010_src0_ready),                                                 //  output,    width = 1,     sink8.ready
		.sink8_valid          (rsp_demux_010_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink8_channel        (rsp_demux_010_src0_channel),                                               //   input,   width = 16,          .channel
		.sink8_data           (rsp_demux_010_src0_data),                                                  //   input,  width = 139,          .data
		.sink8_startofpacket  (rsp_demux_010_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink9_ready          (rsp_demux_011_src0_ready),                                                 //  output,    width = 1,     sink9.ready
		.sink9_valid          (rsp_demux_011_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink9_channel        (rsp_demux_011_src0_channel),                                               //   input,   width = 16,          .channel
		.sink9_data           (rsp_demux_011_src0_data),                                                  //   input,  width = 139,          .data
		.sink9_startofpacket  (rsp_demux_011_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink10_ready         (rsp_demux_012_src0_ready),                                                 //  output,    width = 1,    sink10.ready
		.sink10_valid         (rsp_demux_012_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink10_channel       (rsp_demux_012_src0_channel),                                               //   input,   width = 16,          .channel
		.sink10_data          (rsp_demux_012_src0_data),                                                  //   input,  width = 139,          .data
		.sink10_startofpacket (rsp_demux_012_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink10_endofpacket   (rsp_demux_012_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink11_ready         (crosser_012_out_ready),                                                    //  output,    width = 1,    sink11.ready
		.sink11_valid         (crosser_012_out_valid),                                                    //   input,    width = 1,          .valid
		.sink11_channel       (crosser_012_out_channel),                                                  //   input,   width = 16,          .channel
		.sink11_data          (crosser_012_out_data),                                                     //   input,  width = 139,          .data
		.sink11_startofpacket (crosser_012_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink11_endofpacket   (crosser_012_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_dkmpjta rsp_mux_003 (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data             (rsp_mux_003_src_data),                                                     //  output,  width = 139,          .data
		.src_channel          (rsp_mux_003_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready          (crosser_006_out_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid          (crosser_006_out_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel        (crosser_006_out_channel),                                                  //   input,   width = 16,          .channel
		.sink0_data           (crosser_006_out_data),                                                     //   input,  width = 139,          .data
		.sink0_startofpacket  (crosser_006_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket    (crosser_006_out_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink1_ready          (rsp_demux_003_src0_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid          (rsp_demux_003_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel        (rsp_demux_003_src0_channel),                                               //   input,   width = 16,          .channel
		.sink1_data           (rsp_demux_003_src0_data),                                                  //   input,  width = 139,          .data
		.sink1_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready          (rsp_demux_004_src1_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid          (rsp_demux_004_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel        (rsp_demux_004_src1_channel),                                               //   input,   width = 16,          .channel
		.sink2_data           (rsp_demux_004_src1_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready          (rsp_demux_005_src1_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid          (rsp_demux_005_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel        (rsp_demux_005_src1_channel),                                               //   input,   width = 16,          .channel
		.sink3_data           (rsp_demux_005_src1_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket  (rsp_demux_005_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink4_ready          (rsp_demux_006_src1_ready),                                                 //  output,    width = 1,     sink4.ready
		.sink4_valid          (rsp_demux_006_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink4_channel        (rsp_demux_006_src1_channel),                                               //   input,   width = 16,          .channel
		.sink4_data           (rsp_demux_006_src1_data),                                                  //   input,  width = 139,          .data
		.sink4_startofpacket  (rsp_demux_006_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink5_ready          (rsp_demux_007_src1_ready),                                                 //  output,    width = 1,     sink5.ready
		.sink5_valid          (rsp_demux_007_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink5_channel        (rsp_demux_007_src1_channel),                                               //   input,   width = 16,          .channel
		.sink5_data           (rsp_demux_007_src1_data),                                                  //   input,  width = 139,          .data
		.sink5_startofpacket  (rsp_demux_007_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink6_ready          (rsp_demux_008_src1_ready),                                                 //  output,    width = 1,     sink6.ready
		.sink6_valid          (rsp_demux_008_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink6_channel        (rsp_demux_008_src1_channel),                                               //   input,   width = 16,          .channel
		.sink6_data           (rsp_demux_008_src1_data),                                                  //   input,  width = 139,          .data
		.sink6_startofpacket  (rsp_demux_008_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink7_ready          (rsp_demux_009_src1_ready),                                                 //  output,    width = 1,     sink7.ready
		.sink7_valid          (rsp_demux_009_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink7_channel        (rsp_demux_009_src1_channel),                                               //   input,   width = 16,          .channel
		.sink7_data           (rsp_demux_009_src1_data),                                                  //   input,  width = 139,          .data
		.sink7_startofpacket  (rsp_demux_009_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink8_ready          (rsp_demux_010_src1_ready),                                                 //  output,    width = 1,     sink8.ready
		.sink8_valid          (rsp_demux_010_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink8_channel        (rsp_demux_010_src1_channel),                                               //   input,   width = 16,          .channel
		.sink8_data           (rsp_demux_010_src1_data),                                                  //   input,  width = 139,          .data
		.sink8_startofpacket  (rsp_demux_010_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink9_ready          (rsp_demux_011_src1_ready),                                                 //  output,    width = 1,     sink9.ready
		.sink9_valid          (rsp_demux_011_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink9_channel        (rsp_demux_011_src1_channel),                                               //   input,   width = 16,          .channel
		.sink9_data           (rsp_demux_011_src1_data),                                                  //   input,  width = 139,          .data
		.sink9_startofpacket  (rsp_demux_011_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink10_ready         (rsp_demux_013_src0_ready),                                                 //  output,    width = 1,    sink10.ready
		.sink10_valid         (rsp_demux_013_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink10_channel       (rsp_demux_013_src0_channel),                                               //   input,   width = 16,          .channel
		.sink10_data          (rsp_demux_013_src0_data),                                                  //   input,  width = 139,          .data
		.sink10_startofpacket (rsp_demux_013_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink10_endofpacket   (rsp_demux_013_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink11_ready         (crosser_014_out_ready),                                                    //  output,    width = 1,    sink11.ready
		.sink11_valid         (crosser_014_out_valid),                                                    //   input,    width = 1,          .valid
		.sink11_channel       (crosser_014_out_channel),                                                  //   input,   width = 16,          .channel
		.sink11_data          (crosser_014_out_data),                                                     //   input,  width = 139,          .data
		.sink11_startofpacket (crosser_014_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink11_endofpacket   (crosser_014_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_dkmpjta rsp_mux_004 (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready            (rsp_mux_004_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid            (rsp_mux_004_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data             (rsp_mux_004_src_data),                                                     //  output,  width = 139,          .data
		.src_channel          (rsp_mux_004_src_channel),                                                  //  output,   width = 16,          .channel
		.src_startofpacket    (rsp_mux_004_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket      (rsp_mux_004_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready          (crosser_005_out_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid          (crosser_005_out_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel        (crosser_005_out_channel),                                                  //   input,   width = 16,          .channel
		.sink0_data           (crosser_005_out_data),                                                     //   input,  width = 139,          .data
		.sink0_startofpacket  (crosser_005_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket    (crosser_005_out_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink1_ready          (crosser_007_out_ready),                                                    //  output,    width = 1,     sink1.ready
		.sink1_valid          (crosser_007_out_valid),                                                    //   input,    width = 1,          .valid
		.sink1_channel        (crosser_007_out_channel),                                                  //   input,   width = 16,          .channel
		.sink1_data           (crosser_007_out_data),                                                     //   input,  width = 139,          .data
		.sink1_startofpacket  (crosser_007_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket    (crosser_007_out_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                 //  output,    width = 1,     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                               //   input,   width = 16,          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                  //   input,  width = 139,          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                 //  output,    width = 1,     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                               //   input,   width = 16,          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                  //   input,  width = 139,          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink4_ready          (rsp_demux_004_src2_ready),                                                 //  output,    width = 1,     sink4.ready
		.sink4_valid          (rsp_demux_004_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink4_channel        (rsp_demux_004_src2_channel),                                               //   input,   width = 16,          .channel
		.sink4_data           (rsp_demux_004_src2_data),                                                  //   input,  width = 139,          .data
		.sink4_startofpacket  (rsp_demux_004_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink5_ready          (rsp_demux_005_src2_ready),                                                 //  output,    width = 1,     sink5.ready
		.sink5_valid          (rsp_demux_005_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink5_channel        (rsp_demux_005_src2_channel),                                               //   input,   width = 16,          .channel
		.sink5_data           (rsp_demux_005_src2_data),                                                  //   input,  width = 139,          .data
		.sink5_startofpacket  (rsp_demux_005_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink6_ready          (rsp_demux_006_src2_ready),                                                 //  output,    width = 1,     sink6.ready
		.sink6_valid          (rsp_demux_006_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink6_channel        (rsp_demux_006_src2_channel),                                               //   input,   width = 16,          .channel
		.sink6_data           (rsp_demux_006_src2_data),                                                  //   input,  width = 139,          .data
		.sink6_startofpacket  (rsp_demux_006_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink7_ready          (rsp_demux_007_src2_ready),                                                 //  output,    width = 1,     sink7.ready
		.sink7_valid          (rsp_demux_007_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink7_channel        (rsp_demux_007_src2_channel),                                               //   input,   width = 16,          .channel
		.sink7_data           (rsp_demux_007_src2_data),                                                  //   input,  width = 139,          .data
		.sink7_startofpacket  (rsp_demux_007_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink8_ready          (rsp_demux_008_src2_ready),                                                 //  output,    width = 1,     sink8.ready
		.sink8_valid          (rsp_demux_008_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink8_channel        (rsp_demux_008_src2_channel),                                               //   input,   width = 16,          .channel
		.sink8_data           (rsp_demux_008_src2_data),                                                  //   input,  width = 139,          .data
		.sink8_startofpacket  (rsp_demux_008_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink9_ready          (rsp_demux_009_src2_ready),                                                 //  output,    width = 1,     sink9.ready
		.sink9_valid          (rsp_demux_009_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink9_channel        (rsp_demux_009_src2_channel),                                               //   input,   width = 16,          .channel
		.sink9_data           (rsp_demux_009_src2_data),                                                  //   input,  width = 139,          .data
		.sink9_startofpacket  (rsp_demux_009_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink10_ready         (rsp_demux_010_src2_ready),                                                 //  output,    width = 1,    sink10.ready
		.sink10_valid         (rsp_demux_010_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink10_channel       (rsp_demux_010_src2_channel),                                               //   input,   width = 16,          .channel
		.sink10_data          (rsp_demux_010_src2_data),                                                  //   input,  width = 139,          .data
		.sink10_startofpacket (rsp_demux_010_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src2_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink11_ready         (rsp_demux_011_src2_ready),                                                 //  output,    width = 1,    sink11.ready
		.sink11_valid         (rsp_demux_011_src2_valid),                                                 //   input,    width = 1,          .valid
		.sink11_channel       (rsp_demux_011_src2_channel),                                               //   input,   width = 16,          .channel
		.sink11_data          (rsp_demux_011_src2_data),                                                  //   input,  width = 139,          .data
		.sink11_startofpacket (rsp_demux_011_src2_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src2_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_o6h3r3i rsp_mux_005 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (jtag_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (rsp_mux_005_src_data),                                            //  output,  width = 139,          .data
		.src_channel         (rsp_mux_005_src_channel),                                         //  output,   width = 16,          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_004_src3_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_004_src3_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_004_src3_channel),                                      //   input,   width = 16,          .channel
		.sink0_data          (rsp_demux_004_src3_data),                                         //   input,  width = 139,          .data
		.sink0_startofpacket (rsp_demux_004_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_005_src3_ready),                                        //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_005_src3_valid),                                        //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_005_src3_channel),                                      //   input,   width = 16,          .channel
		.sink1_data          (rsp_demux_005_src3_data),                                         //   input,  width = 139,          .data
		.sink1_startofpacket (rsp_demux_005_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_006_src3_ready),                                        //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_006_src3_valid),                                        //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_006_src3_channel),                                      //   input,   width = 16,          .channel
		.sink2_data          (rsp_demux_006_src3_data),                                         //   input,  width = 139,          .data
		.sink2_startofpacket (rsp_demux_006_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_007_src3_ready),                                        //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_007_src3_valid),                                        //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_007_src3_channel),                                      //   input,   width = 16,          .channel
		.sink3_data          (rsp_demux_007_src3_data),                                         //   input,  width = 139,          .data
		.sink3_startofpacket (rsp_demux_007_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_007_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_008_src3_ready),                                        //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_008_src3_valid),                                        //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_008_src3_channel),                                      //   input,   width = 16,          .channel
		.sink4_data          (rsp_demux_008_src3_data),                                         //   input,  width = 139,          .data
		.sink4_startofpacket (rsp_demux_008_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_008_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_009_src3_ready),                                        //  output,    width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_009_src3_valid),                                        //   input,    width = 1,          .valid
		.sink5_channel       (rsp_demux_009_src3_channel),                                      //   input,   width = 16,          .channel
		.sink5_data          (rsp_demux_009_src3_data),                                         //   input,  width = 139,          .data
		.sink5_startofpacket (rsp_demux_009_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_009_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink6_ready         (rsp_demux_010_src3_ready),                                        //  output,    width = 1,     sink6.ready
		.sink6_valid         (rsp_demux_010_src3_valid),                                        //   input,    width = 1,          .valid
		.sink6_channel       (rsp_demux_010_src3_channel),                                      //   input,   width = 16,          .channel
		.sink6_data          (rsp_demux_010_src3_data),                                         //   input,  width = 139,          .data
		.sink6_startofpacket (rsp_demux_010_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink6_endofpacket   (rsp_demux_010_src3_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink7_ready         (rsp_demux_011_src3_ready),                                        //  output,    width = 1,     sink7.ready
		.sink7_valid         (rsp_demux_011_src3_valid),                                        //   input,    width = 1,          .valid
		.sink7_channel       (rsp_demux_011_src3_channel),                                      //   input,   width = 16,          .channel
		.sink7_data          (rsp_demux_011_src3_data),                                         //   input,  width = 139,          .data
		.sink7_startofpacket (rsp_demux_011_src3_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink7_endofpacket   (rsp_demux_011_src3_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_2fbewcq rsp_mux_006 (
		.clk                 (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data            (rsp_mux_006_src_data),                                                   //  output,  width = 139,          .data
		.src_channel         (rsp_mux_006_src_channel),                                                //  output,   width = 16,          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                                                  //   input,    width = 1,          .valid
		.sink0_channel       (crosser_013_out_channel),                                                //   input,   width = 16,          .channel
		.sink0_data          (crosser_013_out_data),                                                   //   input,  width = 139,          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket)                                             //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_2fbewcq rsp_mux_007 (
		.clk                 (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data            (rsp_mux_007_src_data),                                                   //  output,  width = 139,          .data
		.src_channel         (rsp_mux_007_src_channel),                                                //  output,   width = 16,          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                                                  //   input,    width = 1,          .valid
		.sink0_channel       (crosser_015_out_channel),                                                //   input,   width = 16,          .channel
		.sink0_data          (crosser_015_out_data),                                                   //   input,  width = 139,          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket)                                             //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_4yy72li #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (162),
		.IN_PKT_RESPONSE_STATUS_L      (161),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (163),
		.IN_PKT_ORI_BURST_SIZE_H       (165),
		.IN_ST_DATA_W                  (175),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (126),
		.OUT_PKT_RESPONSE_STATUS_L     (125),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (127),
		.OUT_PKT_ORI_BURST_SIZE_H      (129),
		.OUT_ST_DATA_W                 (139),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter (
		.clk                  (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                                  //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                                //   input,   width = 16,          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                            //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                                  //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src0_data),                                                                   //   input,  width = 175,          .data
		.out_endofpacket      (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_data),          //  output,  width = 139,          .data
		.out_channel          (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (axi_dmac_0_m_src_axi_wr_to_axi_hdmi_tx_0_s_axi_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_4yy72li #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (162),
		.IN_PKT_RESPONSE_STATUS_L      (161),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (163),
		.IN_PKT_ORI_BURST_SIZE_H       (165),
		.IN_ST_DATA_W                  (175),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (126),
		.OUT_PKT_RESPONSE_STATUS_L     (125),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (127),
		.OUT_PKT_ORI_BURST_SIZE_H      (129),
		.OUT_ST_DATA_W                 (139),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter (
		.clk                  (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                (axi_dmac_0_m_src_axi_agent_clk_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                            //   input,   width = 16,          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                              //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src0_data),                                                               //   input,  width = 175,          .data
		.out_endofpacket      (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_data),          //  output,  width = 139,          .data
		.out_channel          (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (axi_dmac_0_m_src_axi_rd_to_axi_hdmi_tx_0_s_axi_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_66xctfa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (126),
		.IN_PKT_RESPONSE_STATUS_L      (125),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (127),
		.IN_PKT_ORI_BURST_SIZE_H       (129),
		.IN_ST_DATA_W                  (139),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (162),
		.OUT_PKT_RESPONSE_STATUS_L     (161),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (163),
		.OUT_PKT_ORI_BURST_SIZE_H      (165),
		.OUT_ST_DATA_W                 (175),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                                          //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src11_valid),                                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src11_channel),                                                             //   input,   width = 16,          .channel
		.in_startofpacket     (cmd_demux_002_src11_startofpacket),                                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src11_endofpacket),                                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src11_ready),                                                               //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src11_data),                                                                //   input,  width = 139,          .data
		.out_endofpacket      (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_data),          //  output,  width = 175,          .data
		.out_channel          (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_66xctfa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (126),
		.IN_PKT_RESPONSE_STATUS_L      (125),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (127),
		.IN_PKT_ORI_BURST_SIZE_H       (129),
		.IN_ST_DATA_W                  (139),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (162),
		.OUT_PKT_RESPONSE_STATUS_L     (161),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (163),
		.OUT_PKT_ORI_BURST_SIZE_H      (165),
		.OUT_ST_DATA_W                 (175),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                                          //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_003_src11_valid),                                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_003_src11_channel),                                                             //   input,   width = 16,          .channel
		.in_startofpacket     (cmd_demux_003_src11_startofpacket),                                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_003_src11_endofpacket),                                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_003_src11_ready),                                                               //  output,    width = 1,          .ready
		.in_data              (cmd_demux_003_src11_data),                                                                //   input,  width = 139,          .data
		.out_endofpacket      (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_data),          //  output,  width = 175,          .data
		.out_channel          (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_66xctfa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (126),
		.IN_PKT_RESPONSE_STATUS_L      (125),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (127),
		.IN_PKT_ORI_BURST_SIZE_H       (129),
		.IN_ST_DATA_W                  (139),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (162),
		.OUT_PKT_RESPONSE_STATUS_L     (161),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (163),
		.OUT_PKT_ORI_BURST_SIZE_H      (165),
		.OUT_ST_DATA_W                 (175),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_006_src0_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_006_src0_channel),                                                            //   input,   width = 16,          .channel
		.in_startofpacket     (cmd_demux_006_src0_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_006_src0_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_006_src0_ready),                                                              //  output,    width = 1,          .ready
		.in_data              (cmd_demux_006_src0_data),                                                               //   input,  width = 139,          .data
		.out_endofpacket      (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_data),          //  output,  width = 175,          .data
		.out_channel          (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_66xctfa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (126),
		.IN_PKT_RESPONSE_STATUS_L      (125),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (127),
		.IN_PKT_ORI_BURST_SIZE_H       (129),
		.IN_ST_DATA_W                  (139),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (162),
		.OUT_PKT_RESPONSE_STATUS_L     (161),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (163),
		.OUT_PKT_ORI_BURST_SIZE_H      (165),
		.OUT_ST_DATA_W                 (175),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                (agilex_5_soc_hps2fpga_translator_clk_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_007_src0_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_007_src0_channel),                                                            //   input,   width = 16,          .channel
		.in_startofpacket     (cmd_demux_007_src0_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_007_src0_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_007_src0_ready),                                                              //  output,    width = 1,          .ready
		.in_data              (cmd_demux_007_src0_data),                                                               //   input,  width = 139,          .data
		.out_endofpacket      (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_data),          //  output,  width = 175,          .data
		.out_channel          (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_66xctfa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (126),
		.IN_PKT_RESPONSE_STATUS_L      (125),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (127),
		.IN_PKT_ORI_BURST_SIZE_H       (129),
		.IN_ST_DATA_W                  (139),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (162),
		.OUT_PKT_RESPONSE_STATUS_L     (161),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (163),
		.OUT_PKT_ORI_BURST_SIZE_H      (165),
		.OUT_ST_DATA_W                 (175),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter (
		.clk                  (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                                  //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                                //   input,   width = 16,          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                            //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                                  //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src0_data),                                                                   //   input,  width = 139,          .data
		.out_endofpacket      (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_data),          //  output,  width = 175,          .data
		.out_channel          (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (axi_hdmi_tx_0_s_axi_wr_to_axi_dmac_0_m_src_axi_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_66xctfa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (126),
		.IN_PKT_RESPONSE_STATUS_L      (125),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (127),
		.IN_PKT_ORI_BURST_SIZE_H       (129),
		.IN_ST_DATA_W                  (139),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (162),
		.OUT_PKT_RESPONSE_STATUS_L     (161),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (163),
		.OUT_PKT_ORI_BURST_SIZE_H      (165),
		.OUT_ST_DATA_W                 (175),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter (
		.clk                  (hdmi_pll_outclk0_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset                (axi_hdmi_tx_0_s_axi_agent_reset_sink_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                            //   input,   width = 16,          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                              //  output,    width = 1,          .ready
		.in_data              (rsp_demux_001_src0_data),                                                               //   input,  width = 139,          .data
		.out_endofpacket      (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_data),          //  output,  width = 175,          .data
		.out_channel          (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (axi_hdmi_tx_0_s_axi_rd_to_axi_dmac_0_m_src_axi_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_4yy72li #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (162),
		.IN_PKT_RESPONSE_STATUS_L      (161),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (163),
		.IN_PKT_ORI_BURST_SIZE_H       (165),
		.IN_ST_DATA_W                  (175),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (126),
		.OUT_PKT_RESPONSE_STATUS_L     (125),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (127),
		.OUT_PKT_ORI_BURST_SIZE_H      (129),
		.OUT_ST_DATA_W                 (139),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                                          //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_014_src0_valid),                                                                //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_014_src0_channel),                                                              //   input,   width = 16,          .channel
		.in_startofpacket     (rsp_demux_014_src0_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_014_src0_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_014_src0_ready),                                                                //  output,    width = 1,          .ready
		.in_data              (rsp_demux_014_src0_data),                                                                 //   input,  width = 175,          .data
		.out_endofpacket      (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_data),          //  output,  width = 139,          .data
		.out_channel          (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_4yy72li #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (162),
		.IN_PKT_RESPONSE_STATUS_L      (161),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (163),
		.IN_PKT_ORI_BURST_SIZE_H       (165),
		.IN_ST_DATA_W                  (175),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (126),
		.OUT_PKT_RESPONSE_STATUS_L     (125),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (127),
		.OUT_PKT_ORI_BURST_SIZE_H      (129),
		.OUT_ST_DATA_W                 (139),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_014_src1_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_014_src1_channel),                                                            //   input,   width = 16,          .channel
		.in_startofpacket     (rsp_demux_014_src1_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_014_src1_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_014_src1_ready),                                                              //  output,    width = 1,          .ready
		.in_data              (rsp_demux_014_src1_data),                                                               //   input,  width = 175,          .data
		.out_endofpacket      (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_data),          //  output,  width = 139,          .data
		.out_channel          (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_4yy72li #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (162),
		.IN_PKT_RESPONSE_STATUS_L      (161),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (163),
		.IN_PKT_ORI_BURST_SIZE_H       (165),
		.IN_ST_DATA_W                  (175),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (126),
		.OUT_PKT_RESPONSE_STATUS_L     (125),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (127),
		.OUT_PKT_ORI_BURST_SIZE_H      (129),
		.OUT_ST_DATA_W                 (139),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                                          //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_015_src0_valid),                                                                //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_015_src0_channel),                                                              //   input,   width = 16,          .channel
		.in_startofpacket     (rsp_demux_015_src0_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_015_src0_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_015_src0_ready),                                                                //  output,    width = 1,          .ready
		.in_data              (rsp_demux_015_src0_data),                                                                 //   input,  width = 175,          .data
		.out_endofpacket      (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_data),          //  output,  width = 139,          .data
		.out_channel          (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_4yy72li #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (162),
		.IN_PKT_RESPONSE_STATUS_L      (161),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (163),
		.IN_PKT_ORI_BURST_SIZE_H       (165),
		.IN_ST_DATA_W                  (175),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (126),
		.OUT_PKT_RESPONSE_STATUS_L     (125),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (127),
		.OUT_PKT_ORI_BURST_SIZE_H      (129),
		.OUT_ST_DATA_W                 (139),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_015_src1_valid),                                                              //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_015_src1_channel),                                                            //   input,   width = 16,          .channel
		.in_startofpacket     (rsp_demux_015_src1_startofpacket),                                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_015_src1_endofpacket),                                                        //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_015_src1_ready),                                                              //  output,    width = 1,          .ready
		.in_data              (rsp_demux_015_src1_data),                                                               //   input,  width = 175,          .data
		.out_endofpacket      (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_data),          //  output,  width = 139,          .data
		.out_channel          (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_channel),       //  output,   width = 16,          .channel
		.out_valid            (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated),                         
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                            //   input,   width = 16,              .channel
		.in_data           (cmd_demux_002_src0_data),                               //   input,  width = 139,              .data
		.out_ready         (crosser_out_ready),                                     //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                     //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                             //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                               //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                   //  output,   width = 16,              .channel
		.out_data          (crosser_out_data),                                      //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_001 (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                            //   input,   width = 16,              .channel
		.in_data           (cmd_demux_003_src0_data),                               //   input,  width = 139,              .data
		.out_ready         (crosser_001_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_001_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_002 (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_004_src0_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_004_src0_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_004_src0_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_004_src0_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_004_src0_channel),                            //   input,   width = 16,              .channel
		.in_data           (cmd_demux_004_src0_data),                               //   input,  width = 139,              .data
		.out_ready         (crosser_002_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_002_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_003 (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_004_src1_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_004_src1_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_004_src1_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_004_src1_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_004_src1_channel),                            //   input,   width = 16,              .channel
		.in_data           (cmd_demux_004_src1_data),                               //   input,  width = 139,              .data
		.out_ready         (crosser_003_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_003_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_004 (
		.in_clk            (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                  //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src1_valid),                                  //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                          //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                            //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                //   input,   width = 16,              .channel
		.in_data           (rsp_demux_src1_data),                                   //   input,  width = 139,              .data
		.out_ready         (crosser_004_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_004_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_004_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_004_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_005 (
		.in_clk            (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                  //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src2_valid),                                  //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                          //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                            //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                //   input,   width = 16,              .channel
		.in_data           (rsp_demux_src2_data),                                   //   input,  width = 139,              .data
		.out_ready         (crosser_005_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_005_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_005_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_005_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_006 (
		.in_clk            (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                            //   input,   width = 16,              .channel
		.in_data           (rsp_demux_001_src1_data),                               //   input,  width = 139,              .data
		.out_ready         (crosser_006_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_006_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_006_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_006_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_007 (
		.in_clk            (hdmi_pll_outclk0_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_hdmi_tx_0_s_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                        //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src2_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src2_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src2_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src2_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src2_channel),                            //   input,   width = 16,              .channel
		.in_data           (rsp_demux_001_src2_data),                               //   input,  width = 139,              .data
		.out_ready         (crosser_007_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_007_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_007_out_channel),                               //  output,   width = 16,              .channel
		.out_data          (crosser_007_out_data),                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_fnp2xpq #(
		.DATA_WIDTH          (175),
		.BITS_PER_SYMBOL     (175),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_008 (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                                                          //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user0_clk_clk),                                                          //   input,    width = 1,       out_clk.clk
		.out_reset         (onchip_sram_reset1_reset_bridge_in_reset_reset),                                          //   input,    width = 1, out_clk_reset.reset
		.in_ready          (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (agilex_5_soc_lwhps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_data),          //   input,  width = 175,              .data
		.out_ready         (crosser_008_out_ready),                                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_008_out_valid),                                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_008_out_channel),                                                                 //  output,   width = 16,              .channel
		.out_data          (crosser_008_out_data),                                                                    //  output,  width = 175,              .data
		.in_empty          (1'b0),                                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                                    // (terminated),                             
		.out_empty         (),                                                                                        // (terminated),                             
		.out_error         ()                                                                                         // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_fnp2xpq #(
		.DATA_WIDTH          (175),
		.BITS_PER_SYMBOL     (175),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_009 (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                                                          //   input,    width = 1,        in_clk.clk
		.in_reset          (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user0_clk_clk),                                                          //   input,    width = 1,       out_clk.clk
		.out_reset         (onchip_sram_reset1_reset_bridge_in_reset_reset),                                          //   input,    width = 1, out_clk_reset.reset
		.in_ready          (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (agilex_5_soc_lwhps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_data),          //   input,  width = 175,              .data
		.out_ready         (crosser_009_out_ready),                                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_009_out_valid),                                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_009_out_channel),                                                                 //  output,   width = 16,              .channel
		.out_data          (crosser_009_out_data),                                                                    //  output,  width = 175,              .data
		.in_empty          (1'b0),                                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                                    // (terminated),                             
		.out_empty         (),                                                                                        // (terminated),                             
		.out_error         ()                                                                                         // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_fnp2xpq #(
		.DATA_WIDTH          (175),
		.BITS_PER_SYMBOL     (175),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_010 (
		.in_clk            (clock_in_out_clk_clk),                                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (crosser_010_in_clk_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user0_clk_clk),                                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (onchip_sram_reset1_reset_bridge_in_reset_reset),                                        //   input,    width = 1, out_clk_reset.reset
		.in_ready          (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (agilex_5_soc_hps2fpga_wr_to_onchip_sram_axi_s1_wr_cmd_width_adapter_src_data),          //   input,  width = 175,              .data
		.out_ready         (crosser_010_out_ready),                                                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_010_out_valid),                                                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_010_out_channel),                                                               //  output,   width = 16,              .channel
		.out_data          (crosser_010_out_data),                                                                  //  output,  width = 175,              .data
		.in_empty          (1'b0),                                                                                  // (terminated),                             
		.in_error          (1'b0),                                                                                  // (terminated),                             
		.out_empty         (),                                                                                      // (terminated),                             
		.out_error         ()                                                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_fnp2xpq #(
		.DATA_WIDTH          (175),
		.BITS_PER_SYMBOL     (175),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_011 (
		.in_clk            (clock_in_out_clk_clk),                                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (crosser_010_in_clk_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user0_clk_clk),                                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (onchip_sram_reset1_reset_bridge_in_reset_reset),                                        //   input,    width = 1, out_clk_reset.reset
		.in_ready          (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (agilex_5_soc_hps2fpga_rd_to_onchip_sram_axi_s1_rd_cmd_width_adapter_src_data),          //   input,  width = 175,              .data
		.out_ready         (crosser_011_out_ready),                                                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_011_out_valid),                                                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_011_out_channel),                                                               //  output,   width = 16,              .channel
		.out_data          (crosser_011_out_data),                                                                  //  output,  width = 175,              .data
		.in_empty          (1'b0),                                                                                  // (terminated),                             
		.in_error          (1'b0),                                                                                  // (terminated),                             
		.out_empty         (),                                                                                      // (terminated),                             
		.out_error         ()                                                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_012 (
		.in_clk            (agilex_5_soc_h2f_user0_clk_clk),                                                          //   input,    width = 1,        in_clk.clk
		.in_reset          (onchip_sram_reset1_reset_bridge_in_reset_reset),                                          //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                                                          //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1, out_clk_reset.reset
		.in_ready          (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (onchip_sram_axi_s1_wr_to_agilex_5_soc_lwhps2fpga_wr_rsp_width_adapter_src_data),          //   input,  width = 139,              .data
		.out_ready         (crosser_012_out_ready),                                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_012_out_valid),                                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_012_out_channel),                                                                 //  output,   width = 16,              .channel
		.out_data          (crosser_012_out_data),                                                                    //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                                    // (terminated),                             
		.out_empty         (),                                                                                        // (terminated),                             
		.out_error         ()                                                                                         // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_013 (
		.in_clk            (agilex_5_soc_h2f_user0_clk_clk),                                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (onchip_sram_reset1_reset_bridge_in_reset_reset),                                        //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (crosser_010_in_clk_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1, out_clk_reset.reset
		.in_ready          (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (onchip_sram_axi_s1_wr_to_agilex_5_soc_hps2fpga_wr_rsp_width_adapter_src_data),          //   input,  width = 139,              .data
		.out_ready         (crosser_013_out_ready),                                                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_013_out_valid),                                                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_013_out_channel),                                                               //  output,   width = 16,              .channel
		.out_data          (crosser_013_out_data),                                                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                                                  // (terminated),                             
		.in_error          (1'b0),                                                                                  // (terminated),                             
		.out_empty         (),                                                                                      // (terminated),                             
		.out_error         ()                                                                                       // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_014 (
		.in_clk            (agilex_5_soc_h2f_user0_clk_clk),                                                          //   input,    width = 1,        in_clk.clk
		.in_reset          (onchip_sram_reset1_reset_bridge_in_reset_reset),                                          //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                                                          //   input,    width = 1,       out_clk.clk
		.out_reset         (axi_dmac_0_s_axi_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1, out_clk_reset.reset
		.in_ready          (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (onchip_sram_axi_s1_rd_to_agilex_5_soc_lwhps2fpga_rd_rsp_width_adapter_src_data),          //   input,  width = 139,              .data
		.out_ready         (crosser_014_out_ready),                                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_014_out_valid),                                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_014_out_channel),                                                                 //  output,   width = 16,              .channel
		.out_data          (crosser_014_out_data),                                                                    //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                                    // (terminated),                             
		.out_empty         (),                                                                                        // (terminated),                             
		.out_error         ()                                                                                         // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_siciloa #(
		.DATA_WIDTH          (139),
		.BITS_PER_SYMBOL     (139),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (16),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_015 (
		.in_clk            (agilex_5_soc_h2f_user0_clk_clk),                                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (onchip_sram_reset1_reset_bridge_in_reset_reset),                                        //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (crosser_010_in_clk_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1, out_clk_reset.reset
		.in_ready          (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,            in.ready
		.in_valid          (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,              .valid
		.in_startofpacket  (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,              .startofpacket
		.in_endofpacket    (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,              .endofpacket
		.in_channel        (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_channel),       //   input,   width = 16,              .channel
		.in_data           (onchip_sram_axi_s1_rd_to_agilex_5_soc_hps2fpga_rd_rsp_width_adapter_src_data),          //   input,  width = 139,              .data
		.out_ready         (crosser_015_out_ready),                                                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_015_out_valid),                                                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_015_out_channel),                                                               //  output,   width = 16,              .channel
		.out_data          (crosser_015_out_data),                                                                  //  output,  width = 139,              .data
		.in_empty          (1'b0),                                                                                  // (terminated),                             
		.in_error          (1'b0),                                                                                  // (terminated),                             
		.out_empty         (),                                                                                      // (terminated),                             
		.out_error         ()                                                                                       // (terminated),                             
	);

endmodule
