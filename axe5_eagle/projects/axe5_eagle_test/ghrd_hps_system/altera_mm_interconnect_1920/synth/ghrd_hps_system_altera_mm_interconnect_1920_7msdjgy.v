// ghrd_hps_system_altera_mm_interconnect_1920_7msdjgy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module ghrd_hps_system_altera_mm_interconnect_1920_7msdjgy (
		input  wire [4:0]   niosv_sys_0_axi_bridge_m0_awid,                                             //                                            niosv_sys_0_axi_bridge_m0.awid
		input  wire [30:0]  niosv_sys_0_axi_bridge_m0_awaddr,                                           //                                                                     .awaddr
		input  wire [7:0]   niosv_sys_0_axi_bridge_m0_awlen,                                            //                                                                     .awlen
		input  wire [2:0]   niosv_sys_0_axi_bridge_m0_awsize,                                           //                                                                     .awsize
		input  wire [1:0]   niosv_sys_0_axi_bridge_m0_awburst,                                          //                                                                     .awburst
		input  wire [0:0]   niosv_sys_0_axi_bridge_m0_awlock,                                           //                                                                     .awlock
		input  wire [3:0]   niosv_sys_0_axi_bridge_m0_awcache,                                          //                                                                     .awcache
		input  wire [2:0]   niosv_sys_0_axi_bridge_m0_awprot,                                           //                                                                     .awprot
		input  wire         niosv_sys_0_axi_bridge_m0_awvalid,                                          //                                                                     .awvalid
		output wire         niosv_sys_0_axi_bridge_m0_awready,                                          //                                                                     .awready
		input  wire [31:0]  niosv_sys_0_axi_bridge_m0_wdata,                                            //                                                                     .wdata
		input  wire [3:0]   niosv_sys_0_axi_bridge_m0_wstrb,                                            //                                                                     .wstrb
		input  wire         niosv_sys_0_axi_bridge_m0_wlast,                                            //                                                                     .wlast
		input  wire         niosv_sys_0_axi_bridge_m0_wvalid,                                           //                                                                     .wvalid
		output wire         niosv_sys_0_axi_bridge_m0_wready,                                           //                                                                     .wready
		output wire [4:0]   niosv_sys_0_axi_bridge_m0_bid,                                              //                                                                     .bid
		output wire [1:0]   niosv_sys_0_axi_bridge_m0_bresp,                                            //                                                                     .bresp
		output wire         niosv_sys_0_axi_bridge_m0_bvalid,                                           //                                                                     .bvalid
		input  wire         niosv_sys_0_axi_bridge_m0_bready,                                           //                                                                     .bready
		input  wire [4:0]   niosv_sys_0_axi_bridge_m0_arid,                                             //                                                                     .arid
		input  wire [30:0]  niosv_sys_0_axi_bridge_m0_araddr,                                           //                                                                     .araddr
		input  wire [7:0]   niosv_sys_0_axi_bridge_m0_arlen,                                            //                                                                     .arlen
		input  wire [2:0]   niosv_sys_0_axi_bridge_m0_arsize,                                           //                                                                     .arsize
		input  wire [1:0]   niosv_sys_0_axi_bridge_m0_arburst,                                          //                                                                     .arburst
		input  wire [0:0]   niosv_sys_0_axi_bridge_m0_arlock,                                           //                                                                     .arlock
		input  wire [3:0]   niosv_sys_0_axi_bridge_m0_arcache,                                          //                                                                     .arcache
		input  wire [2:0]   niosv_sys_0_axi_bridge_m0_arprot,                                           //                                                                     .arprot
		input  wire         niosv_sys_0_axi_bridge_m0_arvalid,                                          //                                                                     .arvalid
		output wire         niosv_sys_0_axi_bridge_m0_arready,                                          //                                                                     .arready
		output wire [4:0]   niosv_sys_0_axi_bridge_m0_rid,                                              //                                                                     .rid
		output wire [31:0]  niosv_sys_0_axi_bridge_m0_rdata,                                            //                                                                     .rdata
		output wire [1:0]   niosv_sys_0_axi_bridge_m0_rresp,                                            //                                                                     .rresp
		output wire         niosv_sys_0_axi_bridge_m0_rlast,                                            //                                                                     .rlast
		output wire         niosv_sys_0_axi_bridge_m0_rvalid,                                           //                                                                     .rvalid
		input  wire         niosv_sys_0_axi_bridge_m0_rready,                                           //                                                                     .rready
		output wire [4:0]   agilex_5_soc_fpga2hps_awid,                                                 //                                                agilex_5_soc_fpga2hps.awid
		output wire [30:0]  agilex_5_soc_fpga2hps_awaddr,                                               //                                                                     .awaddr
		output wire [7:0]   agilex_5_soc_fpga2hps_awlen,                                                //                                                                     .awlen
		output wire [2:0]   agilex_5_soc_fpga2hps_awsize,                                               //                                                                     .awsize
		output wire [1:0]   agilex_5_soc_fpga2hps_awburst,                                              //                                                                     .awburst
		output wire [0:0]   agilex_5_soc_fpga2hps_awlock,                                               //                                                                     .awlock
		output wire [3:0]   agilex_5_soc_fpga2hps_awcache,                                              //                                                                     .awcache
		output wire [2:0]   agilex_5_soc_fpga2hps_awprot,                                               //                                                                     .awprot
		output wire [7:0]   agilex_5_soc_fpga2hps_awuser,                                               //                                                                     .awuser
		output wire [3:0]   agilex_5_soc_fpga2hps_awqos,                                                //                                                                     .awqos
		output wire [3:0]   agilex_5_soc_fpga2hps_awregion,                                             //                                                                     .awregion
		output wire         agilex_5_soc_fpga2hps_awvalid,                                              //                                                                     .awvalid
		input  wire         agilex_5_soc_fpga2hps_awready,                                              //                                                                     .awready
		output wire [255:0] agilex_5_soc_fpga2hps_wdata,                                                //                                                                     .wdata
		output wire [31:0]  agilex_5_soc_fpga2hps_wstrb,                                                //                                                                     .wstrb
		output wire         agilex_5_soc_fpga2hps_wlast,                                                //                                                                     .wlast
		output wire         agilex_5_soc_fpga2hps_wvalid,                                               //                                                                     .wvalid
		output wire [7:0]   agilex_5_soc_fpga2hps_wuser,                                                //                                                                     .wuser
		input  wire         agilex_5_soc_fpga2hps_wready,                                               //                                                                     .wready
		input  wire [4:0]   agilex_5_soc_fpga2hps_bid,                                                  //                                                                     .bid
		input  wire [1:0]   agilex_5_soc_fpga2hps_bresp,                                                //                                                                     .bresp
		input  wire [7:0]   agilex_5_soc_fpga2hps_buser,                                                //                                                                     .buser
		input  wire         agilex_5_soc_fpga2hps_bvalid,                                               //                                                                     .bvalid
		output wire         agilex_5_soc_fpga2hps_bready,                                               //                                                                     .bready
		output wire [4:0]   agilex_5_soc_fpga2hps_arid,                                                 //                                                                     .arid
		output wire [30:0]  agilex_5_soc_fpga2hps_araddr,                                               //                                                                     .araddr
		output wire [7:0]   agilex_5_soc_fpga2hps_arlen,                                                //                                                                     .arlen
		output wire [2:0]   agilex_5_soc_fpga2hps_arsize,                                               //                                                                     .arsize
		output wire [1:0]   agilex_5_soc_fpga2hps_arburst,                                              //                                                                     .arburst
		output wire [0:0]   agilex_5_soc_fpga2hps_arlock,                                               //                                                                     .arlock
		output wire [3:0]   agilex_5_soc_fpga2hps_arcache,                                              //                                                                     .arcache
		output wire [2:0]   agilex_5_soc_fpga2hps_arprot,                                               //                                                                     .arprot
		output wire [7:0]   agilex_5_soc_fpga2hps_aruser,                                               //                                                                     .aruser
		output wire [3:0]   agilex_5_soc_fpga2hps_arqos,                                                //                                                                     .arqos
		output wire [3:0]   agilex_5_soc_fpga2hps_arregion,                                             //                                                                     .arregion
		output wire         agilex_5_soc_fpga2hps_arvalid,                                              //                                                                     .arvalid
		input  wire         agilex_5_soc_fpga2hps_arready,                                              //                                                                     .arready
		input  wire [4:0]   agilex_5_soc_fpga2hps_rid,                                                  //                                                                     .rid
		input  wire [255:0] agilex_5_soc_fpga2hps_rdata,                                                //                                                                     .rdata
		input  wire [1:0]   agilex_5_soc_fpga2hps_rresp,                                                //                                                                     .rresp
		input  wire         agilex_5_soc_fpga2hps_rlast,                                                //                                                                     .rlast
		input  wire         agilex_5_soc_fpga2hps_rvalid,                                               //                                                                     .rvalid
		output wire         agilex_5_soc_fpga2hps_rready,                                               //                                                                     .rready
		input  wire [7:0]   agilex_5_soc_fpga2hps_ruser,                                                //                                                                     .ruser
		input  wire         niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset, // niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire         agilex_5_soc_h2f_user1_clk_clk                                              //                                           agilex_5_soc_h2f_user1_clk.clk
	);

	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_ruser;                // niosv_sys_0_axi_bridge_m0_agent:ruser -> niosv_sys_0_axi_bridge_m0_translator:m0_ruser
	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_wuser;                // niosv_sys_0_axi_bridge_m0_translator:m0_wuser -> niosv_sys_0_axi_bridge_m0_agent:wuser
	wire    [1:0] niosv_sys_0_axi_bridge_m0_translator_m0_awburst;              // niosv_sys_0_axi_bridge_m0_translator:m0_awburst -> niosv_sys_0_axi_bridge_m0_agent:awburst
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_arregion;             // niosv_sys_0_axi_bridge_m0_translator:m0_arregion -> niosv_sys_0_axi_bridge_m0_agent:arregion
	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_awuser;               // niosv_sys_0_axi_bridge_m0_translator:m0_awuser -> niosv_sys_0_axi_bridge_m0_agent:awuser
	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_arlen;                // niosv_sys_0_axi_bridge_m0_translator:m0_arlen -> niosv_sys_0_axi_bridge_m0_agent:arlen
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_arqos;                // niosv_sys_0_axi_bridge_m0_translator:m0_arqos -> niosv_sys_0_axi_bridge_m0_agent:arqos
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_wstrb;                // niosv_sys_0_axi_bridge_m0_translator:m0_wstrb -> niosv_sys_0_axi_bridge_m0_agent:wstrb
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_wready;               // niosv_sys_0_axi_bridge_m0_agent:wready -> niosv_sys_0_axi_bridge_m0_translator:m0_wready
	wire    [4:0] niosv_sys_0_axi_bridge_m0_translator_m0_rid;                  // niosv_sys_0_axi_bridge_m0_agent:rid -> niosv_sys_0_axi_bridge_m0_translator:m0_rid
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_rready;               // niosv_sys_0_axi_bridge_m0_translator:m0_rready -> niosv_sys_0_axi_bridge_m0_agent:rready
	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_awlen;                // niosv_sys_0_axi_bridge_m0_translator:m0_awlen -> niosv_sys_0_axi_bridge_m0_agent:awlen
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_awqos;                // niosv_sys_0_axi_bridge_m0_translator:m0_awqos -> niosv_sys_0_axi_bridge_m0_agent:awqos
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_arcache;              // niosv_sys_0_axi_bridge_m0_translator:m0_arcache -> niosv_sys_0_axi_bridge_m0_agent:arcache
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_wvalid;               // niosv_sys_0_axi_bridge_m0_translator:m0_wvalid -> niosv_sys_0_axi_bridge_m0_agent:wvalid
	wire   [30:0] niosv_sys_0_axi_bridge_m0_translator_m0_araddr;               // niosv_sys_0_axi_bridge_m0_translator:m0_araddr -> niosv_sys_0_axi_bridge_m0_agent:araddr
	wire    [2:0] niosv_sys_0_axi_bridge_m0_translator_m0_arprot;               // niosv_sys_0_axi_bridge_m0_translator:m0_arprot -> niosv_sys_0_axi_bridge_m0_agent:arprot
	wire    [2:0] niosv_sys_0_axi_bridge_m0_translator_m0_awprot;               // niosv_sys_0_axi_bridge_m0_translator:m0_awprot -> niosv_sys_0_axi_bridge_m0_agent:awprot
	wire   [31:0] niosv_sys_0_axi_bridge_m0_translator_m0_wdata;                // niosv_sys_0_axi_bridge_m0_translator:m0_wdata -> niosv_sys_0_axi_bridge_m0_agent:wdata
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_arvalid;              // niosv_sys_0_axi_bridge_m0_translator:m0_arvalid -> niosv_sys_0_axi_bridge_m0_agent:arvalid
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_awcache;              // niosv_sys_0_axi_bridge_m0_translator:m0_awcache -> niosv_sys_0_axi_bridge_m0_agent:awcache
	wire    [4:0] niosv_sys_0_axi_bridge_m0_translator_m0_arid;                 // niosv_sys_0_axi_bridge_m0_translator:m0_arid -> niosv_sys_0_axi_bridge_m0_agent:arid
	wire    [0:0] niosv_sys_0_axi_bridge_m0_translator_m0_arlock;               // niosv_sys_0_axi_bridge_m0_translator:m0_arlock -> niosv_sys_0_axi_bridge_m0_agent:arlock
	wire    [0:0] niosv_sys_0_axi_bridge_m0_translator_m0_awlock;               // niosv_sys_0_axi_bridge_m0_translator:m0_awlock -> niosv_sys_0_axi_bridge_m0_agent:awlock
	wire   [30:0] niosv_sys_0_axi_bridge_m0_translator_m0_awaddr;               // niosv_sys_0_axi_bridge_m0_translator:m0_awaddr -> niosv_sys_0_axi_bridge_m0_agent:awaddr
	wire    [1:0] niosv_sys_0_axi_bridge_m0_translator_m0_bresp;                // niosv_sys_0_axi_bridge_m0_agent:bresp -> niosv_sys_0_axi_bridge_m0_translator:m0_bresp
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_arready;              // niosv_sys_0_axi_bridge_m0_agent:arready -> niosv_sys_0_axi_bridge_m0_translator:m0_arready
	wire   [31:0] niosv_sys_0_axi_bridge_m0_translator_m0_rdata;                // niosv_sys_0_axi_bridge_m0_agent:rdata -> niosv_sys_0_axi_bridge_m0_translator:m0_rdata
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_awready;              // niosv_sys_0_axi_bridge_m0_agent:awready -> niosv_sys_0_axi_bridge_m0_translator:m0_awready
	wire    [1:0] niosv_sys_0_axi_bridge_m0_translator_m0_arburst;              // niosv_sys_0_axi_bridge_m0_translator:m0_arburst -> niosv_sys_0_axi_bridge_m0_agent:arburst
	wire    [2:0] niosv_sys_0_axi_bridge_m0_translator_m0_arsize;               // niosv_sys_0_axi_bridge_m0_translator:m0_arsize -> niosv_sys_0_axi_bridge_m0_agent:arsize
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_bready;               // niosv_sys_0_axi_bridge_m0_translator:m0_bready -> niosv_sys_0_axi_bridge_m0_agent:bready
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_rlast;                // niosv_sys_0_axi_bridge_m0_agent:rlast -> niosv_sys_0_axi_bridge_m0_translator:m0_rlast
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_wlast;                // niosv_sys_0_axi_bridge_m0_translator:m0_wlast -> niosv_sys_0_axi_bridge_m0_agent:wlast
	wire    [3:0] niosv_sys_0_axi_bridge_m0_translator_m0_awregion;             // niosv_sys_0_axi_bridge_m0_translator:m0_awregion -> niosv_sys_0_axi_bridge_m0_agent:awregion
	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_buser;                // niosv_sys_0_axi_bridge_m0_agent:buser -> niosv_sys_0_axi_bridge_m0_translator:m0_buser
	wire    [1:0] niosv_sys_0_axi_bridge_m0_translator_m0_rresp;                // niosv_sys_0_axi_bridge_m0_agent:rresp -> niosv_sys_0_axi_bridge_m0_translator:m0_rresp
	wire    [4:0] niosv_sys_0_axi_bridge_m0_translator_m0_awid;                 // niosv_sys_0_axi_bridge_m0_translator:m0_awid -> niosv_sys_0_axi_bridge_m0_agent:awid
	wire    [4:0] niosv_sys_0_axi_bridge_m0_translator_m0_bid;                  // niosv_sys_0_axi_bridge_m0_agent:bid -> niosv_sys_0_axi_bridge_m0_translator:m0_bid
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_bvalid;               // niosv_sys_0_axi_bridge_m0_agent:bvalid -> niosv_sys_0_axi_bridge_m0_translator:m0_bvalid
	wire    [2:0] niosv_sys_0_axi_bridge_m0_translator_m0_awsize;               // niosv_sys_0_axi_bridge_m0_translator:m0_awsize -> niosv_sys_0_axi_bridge_m0_agent:awsize
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_awvalid;              // niosv_sys_0_axi_bridge_m0_translator:m0_awvalid -> niosv_sys_0_axi_bridge_m0_agent:awvalid
	wire    [7:0] niosv_sys_0_axi_bridge_m0_translator_m0_aruser;               // niosv_sys_0_axi_bridge_m0_translator:m0_aruser -> niosv_sys_0_axi_bridge_m0_agent:aruser
	wire          niosv_sys_0_axi_bridge_m0_translator_m0_rvalid;               // niosv_sys_0_axi_bridge_m0_agent:rvalid -> niosv_sys_0_axi_bridge_m0_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                            // rsp_mux:src_valid -> niosv_sys_0_axi_bridge_m0_agent:write_rp_valid
	wire  [150:0] rsp_mux_src_data;                                             // rsp_mux:src_data -> niosv_sys_0_axi_bridge_m0_agent:write_rp_data
	wire          rsp_mux_src_ready;                                            // niosv_sys_0_axi_bridge_m0_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                          // rsp_mux:src_channel -> niosv_sys_0_axi_bridge_m0_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                    // rsp_mux:src_startofpacket -> niosv_sys_0_axi_bridge_m0_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                      // rsp_mux:src_endofpacket -> niosv_sys_0_axi_bridge_m0_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                        // rsp_mux_001:src_valid -> niosv_sys_0_axi_bridge_m0_agent:read_rp_valid
	wire  [150:0] rsp_mux_001_src_data;                                         // rsp_mux_001:src_data -> niosv_sys_0_axi_bridge_m0_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                        // niosv_sys_0_axi_bridge_m0_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                      // rsp_mux_001:src_channel -> niosv_sys_0_axi_bridge_m0_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                // rsp_mux_001:src_startofpacket -> niosv_sys_0_axi_bridge_m0_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                  // rsp_mux_001:src_endofpacket -> niosv_sys_0_axi_bridge_m0_agent:read_rp_endofpacket
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_ruser;          // agilex_5_soc_fpga2hps_translator:s0_ruser -> agilex_5_soc_fpga2hps_agent:ruser
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_wuser;          // agilex_5_soc_fpga2hps_agent:wuser -> agilex_5_soc_fpga2hps_translator:s0_wuser
	wire    [1:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awburst;        // agilex_5_soc_fpga2hps_agent:awburst -> agilex_5_soc_fpga2hps_translator:s0_awburst
	wire    [3:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arregion;       // agilex_5_soc_fpga2hps_agent:arregion -> agilex_5_soc_fpga2hps_translator:s0_arregion
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awuser;         // agilex_5_soc_fpga2hps_agent:awuser -> agilex_5_soc_fpga2hps_translator:s0_awuser
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arlen;          // agilex_5_soc_fpga2hps_agent:arlen -> agilex_5_soc_fpga2hps_translator:s0_arlen
	wire    [3:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arqos;          // agilex_5_soc_fpga2hps_agent:arqos -> agilex_5_soc_fpga2hps_translator:s0_arqos
	wire   [31:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_wstrb;          // agilex_5_soc_fpga2hps_agent:wstrb -> agilex_5_soc_fpga2hps_translator:s0_wstrb
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_wready;         // agilex_5_soc_fpga2hps_translator:s0_wready -> agilex_5_soc_fpga2hps_agent:wready
	wire    [4:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_rid;            // agilex_5_soc_fpga2hps_translator:s0_rid -> agilex_5_soc_fpga2hps_agent:rid
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_rready;         // agilex_5_soc_fpga2hps_agent:rready -> agilex_5_soc_fpga2hps_translator:s0_rready
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awlen;          // agilex_5_soc_fpga2hps_agent:awlen -> agilex_5_soc_fpga2hps_translator:s0_awlen
	wire    [3:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awqos;          // agilex_5_soc_fpga2hps_agent:awqos -> agilex_5_soc_fpga2hps_translator:s0_awqos
	wire    [3:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arcache;        // agilex_5_soc_fpga2hps_agent:arcache -> agilex_5_soc_fpga2hps_translator:s0_arcache
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_wvalid;         // agilex_5_soc_fpga2hps_agent:wvalid -> agilex_5_soc_fpga2hps_translator:s0_wvalid
	wire   [30:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_araddr;         // agilex_5_soc_fpga2hps_agent:araddr -> agilex_5_soc_fpga2hps_translator:s0_araddr
	wire    [2:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arprot;         // agilex_5_soc_fpga2hps_agent:arprot -> agilex_5_soc_fpga2hps_translator:s0_arprot
	wire    [2:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awprot;         // agilex_5_soc_fpga2hps_agent:awprot -> agilex_5_soc_fpga2hps_translator:s0_awprot
	wire  [255:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_wdata;          // agilex_5_soc_fpga2hps_agent:wdata -> agilex_5_soc_fpga2hps_translator:s0_wdata
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_arvalid;        // agilex_5_soc_fpga2hps_agent:arvalid -> agilex_5_soc_fpga2hps_translator:s0_arvalid
	wire    [3:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awcache;        // agilex_5_soc_fpga2hps_agent:awcache -> agilex_5_soc_fpga2hps_translator:s0_awcache
	wire    [4:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arid;           // agilex_5_soc_fpga2hps_agent:arid -> agilex_5_soc_fpga2hps_translator:s0_arid
	wire    [0:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arlock;         // agilex_5_soc_fpga2hps_agent:arlock -> agilex_5_soc_fpga2hps_translator:s0_arlock
	wire    [0:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awlock;         // agilex_5_soc_fpga2hps_agent:awlock -> agilex_5_soc_fpga2hps_translator:s0_awlock
	wire   [30:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awaddr;         // agilex_5_soc_fpga2hps_agent:awaddr -> agilex_5_soc_fpga2hps_translator:s0_awaddr
	wire    [1:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_bresp;          // agilex_5_soc_fpga2hps_translator:s0_bresp -> agilex_5_soc_fpga2hps_agent:bresp
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_arready;        // agilex_5_soc_fpga2hps_translator:s0_arready -> agilex_5_soc_fpga2hps_agent:arready
	wire  [255:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_rdata;          // agilex_5_soc_fpga2hps_translator:s0_rdata -> agilex_5_soc_fpga2hps_agent:rdata
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_awready;        // agilex_5_soc_fpga2hps_translator:s0_awready -> agilex_5_soc_fpga2hps_agent:awready
	wire    [1:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arburst;        // agilex_5_soc_fpga2hps_agent:arburst -> agilex_5_soc_fpga2hps_translator:s0_arburst
	wire    [2:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_arsize;         // agilex_5_soc_fpga2hps_agent:arsize -> agilex_5_soc_fpga2hps_translator:s0_arsize
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_bready;         // agilex_5_soc_fpga2hps_agent:bready -> agilex_5_soc_fpga2hps_translator:s0_bready
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_rlast;          // agilex_5_soc_fpga2hps_translator:s0_rlast -> agilex_5_soc_fpga2hps_agent:rlast
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_wlast;          // agilex_5_soc_fpga2hps_agent:wlast -> agilex_5_soc_fpga2hps_translator:s0_wlast
	wire    [3:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awregion;       // agilex_5_soc_fpga2hps_agent:awregion -> agilex_5_soc_fpga2hps_translator:s0_awregion
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_buser;          // agilex_5_soc_fpga2hps_translator:s0_buser -> agilex_5_soc_fpga2hps_agent:buser
	wire    [1:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_rresp;          // agilex_5_soc_fpga2hps_translator:s0_rresp -> agilex_5_soc_fpga2hps_agent:rresp
	wire    [4:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awid;           // agilex_5_soc_fpga2hps_agent:awid -> agilex_5_soc_fpga2hps_translator:s0_awid
	wire    [4:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_bid;            // agilex_5_soc_fpga2hps_translator:s0_bid -> agilex_5_soc_fpga2hps_agent:bid
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_bvalid;         // agilex_5_soc_fpga2hps_translator:s0_bvalid -> agilex_5_soc_fpga2hps_agent:bvalid
	wire    [2:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_awsize;         // agilex_5_soc_fpga2hps_agent:awsize -> agilex_5_soc_fpga2hps_translator:s0_awsize
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_awvalid;        // agilex_5_soc_fpga2hps_agent:awvalid -> agilex_5_soc_fpga2hps_translator:s0_awvalid
	wire    [7:0] agilex_5_soc_fpga2hps_agent_altera_axi_master_aruser;         // agilex_5_soc_fpga2hps_agent:aruser -> agilex_5_soc_fpga2hps_translator:s0_aruser
	wire          agilex_5_soc_fpga2hps_agent_altera_axi_master_rvalid;         // agilex_5_soc_fpga2hps_translator:s0_rvalid -> agilex_5_soc_fpga2hps_agent:rvalid
	wire          niosv_sys_0_axi_bridge_m0_agent_write_cp_valid;               // niosv_sys_0_axi_bridge_m0_agent:write_cp_valid -> router:sink_valid
	wire  [150:0] niosv_sys_0_axi_bridge_m0_agent_write_cp_data;                // niosv_sys_0_axi_bridge_m0_agent:write_cp_data -> router:sink_data
	wire          niosv_sys_0_axi_bridge_m0_agent_write_cp_ready;               // router:sink_ready -> niosv_sys_0_axi_bridge_m0_agent:write_cp_ready
	wire          niosv_sys_0_axi_bridge_m0_agent_write_cp_startofpacket;       // niosv_sys_0_axi_bridge_m0_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          niosv_sys_0_axi_bridge_m0_agent_write_cp_endofpacket;         // niosv_sys_0_axi_bridge_m0_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                             // router:src_valid -> cmd_demux:sink_valid
	wire  [150:0] router_src_data;                                              // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                             // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                           // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                     // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                       // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          niosv_sys_0_axi_bridge_m0_agent_read_cp_valid;                // niosv_sys_0_axi_bridge_m0_agent:read_cp_valid -> router_001:sink_valid
	wire  [150:0] niosv_sys_0_axi_bridge_m0_agent_read_cp_data;                 // niosv_sys_0_axi_bridge_m0_agent:read_cp_data -> router_001:sink_data
	wire          niosv_sys_0_axi_bridge_m0_agent_read_cp_ready;                // router_001:sink_ready -> niosv_sys_0_axi_bridge_m0_agent:read_cp_ready
	wire          niosv_sys_0_axi_bridge_m0_agent_read_cp_startofpacket;        // niosv_sys_0_axi_bridge_m0_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          niosv_sys_0_axi_bridge_m0_agent_read_cp_endofpacket;          // niosv_sys_0_axi_bridge_m0_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [150:0] router_001_src_data;                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          agilex_5_soc_fpga2hps_agent_write_rp_valid;                   // agilex_5_soc_fpga2hps_agent:write_rp_valid -> router_002:sink_valid
	wire  [402:0] agilex_5_soc_fpga2hps_agent_write_rp_data;                    // agilex_5_soc_fpga2hps_agent:write_rp_data -> router_002:sink_data
	wire          agilex_5_soc_fpga2hps_agent_write_rp_ready;                   // router_002:sink_ready -> agilex_5_soc_fpga2hps_agent:write_rp_ready
	wire          agilex_5_soc_fpga2hps_agent_write_rp_startofpacket;           // agilex_5_soc_fpga2hps_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          agilex_5_soc_fpga2hps_agent_write_rp_endofpacket;             // agilex_5_soc_fpga2hps_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          agilex_5_soc_fpga2hps_agent_read_rp_valid;                    // agilex_5_soc_fpga2hps_agent:read_rp_valid -> router_003:sink_valid
	wire  [402:0] agilex_5_soc_fpga2hps_agent_read_rp_data;                     // agilex_5_soc_fpga2hps_agent:read_rp_data -> router_003:sink_data
	wire          agilex_5_soc_fpga2hps_agent_read_rp_ready;                    // router_003:sink_ready -> agilex_5_soc_fpga2hps_agent:read_rp_ready
	wire          agilex_5_soc_fpga2hps_agent_read_rp_startofpacket;            // agilex_5_soc_fpga2hps_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          agilex_5_soc_fpga2hps_agent_read_rp_endofpacket;              // agilex_5_soc_fpga2hps_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [150:0] cmd_demux_src0_data;                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                     // cmd_demux_001:src0_valid -> cmd_mux_001:sink0_valid
	wire  [150:0] cmd_demux_001_src0_data;                                      // cmd_demux_001:src0_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src0_ready;                                     // cmd_mux_001:sink0_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                   // cmd_demux_001:src0_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_startofpacket;                             // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                               // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [150:0] rsp_demux_src0_data;                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                     // rsp_demux_001:src0_valid -> rsp_mux_001:sink0_valid
	wire  [150:0] rsp_demux_001_src0_data;                                      // rsp_demux_001:src0_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src0_ready;                                     // rsp_mux_001:sink0_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                   // rsp_demux_001:src0_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_startofpacket;                             // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                               // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          cmd_mux_src_valid;                                            // cmd_mux:src_valid -> agilex_5_soc_fpga2hps_wr_cmd_width_adapter:in_valid
	wire  [150:0] cmd_mux_src_data;                                             // cmd_mux:src_data -> agilex_5_soc_fpga2hps_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                            // agilex_5_soc_fpga2hps_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                          // cmd_mux:src_channel -> agilex_5_soc_fpga2hps_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                    // cmd_mux:src_startofpacket -> agilex_5_soc_fpga2hps_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                      // cmd_mux:src_endofpacket -> agilex_5_soc_fpga2hps_wr_cmd_width_adapter:in_endofpacket
	wire          agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_valid;         // agilex_5_soc_fpga2hps_wr_cmd_width_adapter:out_valid -> agilex_5_soc_fpga2hps_agent:write_cp_valid
	wire  [402:0] agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_data;          // agilex_5_soc_fpga2hps_wr_cmd_width_adapter:out_data -> agilex_5_soc_fpga2hps_agent:write_cp_data
	wire          agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_ready;         // agilex_5_soc_fpga2hps_agent:write_cp_ready -> agilex_5_soc_fpga2hps_wr_cmd_width_adapter:out_ready
	wire    [1:0] agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_channel;       // agilex_5_soc_fpga2hps_wr_cmd_width_adapter:out_channel -> agilex_5_soc_fpga2hps_agent:write_cp_channel
	wire          agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_startofpacket; // agilex_5_soc_fpga2hps_wr_cmd_width_adapter:out_startofpacket -> agilex_5_soc_fpga2hps_agent:write_cp_startofpacket
	wire          agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_endofpacket;   // agilex_5_soc_fpga2hps_wr_cmd_width_adapter:out_endofpacket -> agilex_5_soc_fpga2hps_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                        // cmd_mux_001:src_valid -> agilex_5_soc_fpga2hps_rd_cmd_width_adapter:in_valid
	wire  [150:0] cmd_mux_001_src_data;                                         // cmd_mux_001:src_data -> agilex_5_soc_fpga2hps_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                        // agilex_5_soc_fpga2hps_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                      // cmd_mux_001:src_channel -> agilex_5_soc_fpga2hps_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                // cmd_mux_001:src_startofpacket -> agilex_5_soc_fpga2hps_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                  // cmd_mux_001:src_endofpacket -> agilex_5_soc_fpga2hps_rd_cmd_width_adapter:in_endofpacket
	wire          agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_valid;         // agilex_5_soc_fpga2hps_rd_cmd_width_adapter:out_valid -> agilex_5_soc_fpga2hps_agent:read_cp_valid
	wire  [402:0] agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_data;          // agilex_5_soc_fpga2hps_rd_cmd_width_adapter:out_data -> agilex_5_soc_fpga2hps_agent:read_cp_data
	wire          agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_ready;         // agilex_5_soc_fpga2hps_agent:read_cp_ready -> agilex_5_soc_fpga2hps_rd_cmd_width_adapter:out_ready
	wire    [1:0] agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_channel;       // agilex_5_soc_fpga2hps_rd_cmd_width_adapter:out_channel -> agilex_5_soc_fpga2hps_agent:read_cp_channel
	wire          agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_startofpacket; // agilex_5_soc_fpga2hps_rd_cmd_width_adapter:out_startofpacket -> agilex_5_soc_fpga2hps_agent:read_cp_startofpacket
	wire          agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_endofpacket;   // agilex_5_soc_fpga2hps_rd_cmd_width_adapter:out_endofpacket -> agilex_5_soc_fpga2hps_agent:read_cp_endofpacket
	wire          router_002_src_valid;                                         // router_002:src_valid -> agilex_5_soc_fpga2hps_wr_rsp_width_adapter:in_valid
	wire  [402:0] router_002_src_data;                                          // router_002:src_data -> agilex_5_soc_fpga2hps_wr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                         // agilex_5_soc_fpga2hps_wr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                       // router_002:src_channel -> agilex_5_soc_fpga2hps_wr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                 // router_002:src_startofpacket -> agilex_5_soc_fpga2hps_wr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                   // router_002:src_endofpacket -> agilex_5_soc_fpga2hps_wr_rsp_width_adapter:in_endofpacket
	wire          agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_valid;         // agilex_5_soc_fpga2hps_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [150:0] agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_data;          // agilex_5_soc_fpga2hps_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> agilex_5_soc_fpga2hps_wr_rsp_width_adapter:out_ready
	wire    [1:0] agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_channel;       // agilex_5_soc_fpga2hps_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_startofpacket; // agilex_5_soc_fpga2hps_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_endofpacket;   // agilex_5_soc_fpga2hps_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                         // router_003:src_valid -> agilex_5_soc_fpga2hps_rd_rsp_width_adapter:in_valid
	wire  [402:0] router_003_src_data;                                          // router_003:src_data -> agilex_5_soc_fpga2hps_rd_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                         // agilex_5_soc_fpga2hps_rd_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                       // router_003:src_channel -> agilex_5_soc_fpga2hps_rd_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                 // router_003:src_startofpacket -> agilex_5_soc_fpga2hps_rd_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                   // router_003:src_endofpacket -> agilex_5_soc_fpga2hps_rd_rsp_width_adapter:in_endofpacket
	wire          agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_valid;         // agilex_5_soc_fpga2hps_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [150:0] agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_data;          // agilex_5_soc_fpga2hps_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_ready;         // rsp_demux_001:sink_ready -> agilex_5_soc_fpga2hps_rd_rsp_width_adapter:out_ready
	wire    [1:0] agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_channel;       // agilex_5_soc_fpga2hps_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_startofpacket; // agilex_5_soc_fpga2hps_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_endofpacket;   // agilex_5_soc_fpga2hps_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (5),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (5),
		.M0_ADDR_WIDTH                     (31),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (8),
		.M0_READ_ADDR_USER_WIDTH           (8),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (8),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (8),
		.M0_READ_DATA_USER_WIDTH           (8),
		.S0_ADDR_WIDTH                     (31),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) niosv_sys_0_axi_bridge_m0_translator (
		.aclk        (agilex_5_soc_h2f_user1_clk_clk),                                              //   input,   width = 1,       clk.clk
		.aresetn     (~niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (niosv_sys_0_axi_bridge_m0_translator_m0_awid),                                //  output,   width = 5,        m0.awid
		.m0_awaddr   (niosv_sys_0_axi_bridge_m0_translator_m0_awaddr),                              //  output,  width = 31,          .awaddr
		.m0_awlen    (niosv_sys_0_axi_bridge_m0_translator_m0_awlen),                               //  output,   width = 8,          .awlen
		.m0_awsize   (niosv_sys_0_axi_bridge_m0_translator_m0_awsize),                              //  output,   width = 3,          .awsize
		.m0_awburst  (niosv_sys_0_axi_bridge_m0_translator_m0_awburst),                             //  output,   width = 2,          .awburst
		.m0_awlock   (niosv_sys_0_axi_bridge_m0_translator_m0_awlock),                              //  output,   width = 1,          .awlock
		.m0_awcache  (niosv_sys_0_axi_bridge_m0_translator_m0_awcache),                             //  output,   width = 4,          .awcache
		.m0_awprot   (niosv_sys_0_axi_bridge_m0_translator_m0_awprot),                              //  output,   width = 3,          .awprot
		.m0_awuser   (niosv_sys_0_axi_bridge_m0_translator_m0_awuser),                              //  output,   width = 8,          .awuser
		.m0_awqos    (niosv_sys_0_axi_bridge_m0_translator_m0_awqos),                               //  output,   width = 4,          .awqos
		.m0_awregion (niosv_sys_0_axi_bridge_m0_translator_m0_awregion),                            //  output,   width = 4,          .awregion
		.m0_awvalid  (niosv_sys_0_axi_bridge_m0_translator_m0_awvalid),                             //  output,   width = 1,          .awvalid
		.m0_awready  (niosv_sys_0_axi_bridge_m0_translator_m0_awready),                             //   input,   width = 1,          .awready
		.m0_wdata    (niosv_sys_0_axi_bridge_m0_translator_m0_wdata),                               //  output,  width = 32,          .wdata
		.m0_wstrb    (niosv_sys_0_axi_bridge_m0_translator_m0_wstrb),                               //  output,   width = 4,          .wstrb
		.m0_wlast    (niosv_sys_0_axi_bridge_m0_translator_m0_wlast),                               //  output,   width = 1,          .wlast
		.m0_wvalid   (niosv_sys_0_axi_bridge_m0_translator_m0_wvalid),                              //  output,   width = 1,          .wvalid
		.m0_wuser    (niosv_sys_0_axi_bridge_m0_translator_m0_wuser),                               //  output,   width = 8,          .wuser
		.m0_wready   (niosv_sys_0_axi_bridge_m0_translator_m0_wready),                              //   input,   width = 1,          .wready
		.m0_bid      (niosv_sys_0_axi_bridge_m0_translator_m0_bid),                                 //   input,   width = 5,          .bid
		.m0_bresp    (niosv_sys_0_axi_bridge_m0_translator_m0_bresp),                               //   input,   width = 2,          .bresp
		.m0_buser    (niosv_sys_0_axi_bridge_m0_translator_m0_buser),                               //   input,   width = 8,          .buser
		.m0_bvalid   (niosv_sys_0_axi_bridge_m0_translator_m0_bvalid),                              //   input,   width = 1,          .bvalid
		.m0_bready   (niosv_sys_0_axi_bridge_m0_translator_m0_bready),                              //  output,   width = 1,          .bready
		.m0_arid     (niosv_sys_0_axi_bridge_m0_translator_m0_arid),                                //  output,   width = 5,          .arid
		.m0_araddr   (niosv_sys_0_axi_bridge_m0_translator_m0_araddr),                              //  output,  width = 31,          .araddr
		.m0_arlen    (niosv_sys_0_axi_bridge_m0_translator_m0_arlen),                               //  output,   width = 8,          .arlen
		.m0_arsize   (niosv_sys_0_axi_bridge_m0_translator_m0_arsize),                              //  output,   width = 3,          .arsize
		.m0_arburst  (niosv_sys_0_axi_bridge_m0_translator_m0_arburst),                             //  output,   width = 2,          .arburst
		.m0_arlock   (niosv_sys_0_axi_bridge_m0_translator_m0_arlock),                              //  output,   width = 1,          .arlock
		.m0_arcache  (niosv_sys_0_axi_bridge_m0_translator_m0_arcache),                             //  output,   width = 4,          .arcache
		.m0_arprot   (niosv_sys_0_axi_bridge_m0_translator_m0_arprot),                              //  output,   width = 3,          .arprot
		.m0_aruser   (niosv_sys_0_axi_bridge_m0_translator_m0_aruser),                              //  output,   width = 8,          .aruser
		.m0_arqos    (niosv_sys_0_axi_bridge_m0_translator_m0_arqos),                               //  output,   width = 4,          .arqos
		.m0_arregion (niosv_sys_0_axi_bridge_m0_translator_m0_arregion),                            //  output,   width = 4,          .arregion
		.m0_arvalid  (niosv_sys_0_axi_bridge_m0_translator_m0_arvalid),                             //  output,   width = 1,          .arvalid
		.m0_arready  (niosv_sys_0_axi_bridge_m0_translator_m0_arready),                             //   input,   width = 1,          .arready
		.m0_rid      (niosv_sys_0_axi_bridge_m0_translator_m0_rid),                                 //   input,   width = 5,          .rid
		.m0_rdata    (niosv_sys_0_axi_bridge_m0_translator_m0_rdata),                               //   input,  width = 32,          .rdata
		.m0_rresp    (niosv_sys_0_axi_bridge_m0_translator_m0_rresp),                               //   input,   width = 2,          .rresp
		.m0_rlast    (niosv_sys_0_axi_bridge_m0_translator_m0_rlast),                               //   input,   width = 1,          .rlast
		.m0_rvalid   (niosv_sys_0_axi_bridge_m0_translator_m0_rvalid),                              //   input,   width = 1,          .rvalid
		.m0_rready   (niosv_sys_0_axi_bridge_m0_translator_m0_rready),                              //  output,   width = 1,          .rready
		.m0_ruser    (niosv_sys_0_axi_bridge_m0_translator_m0_ruser),                               //   input,   width = 8,          .ruser
		.s0_awid     (niosv_sys_0_axi_bridge_m0_awid),                                              //   input,   width = 5,        s0.awid
		.s0_awaddr   (niosv_sys_0_axi_bridge_m0_awaddr),                                            //   input,  width = 31,          .awaddr
		.s0_awlen    (niosv_sys_0_axi_bridge_m0_awlen),                                             //   input,   width = 8,          .awlen
		.s0_awsize   (niosv_sys_0_axi_bridge_m0_awsize),                                            //   input,   width = 3,          .awsize
		.s0_awburst  (niosv_sys_0_axi_bridge_m0_awburst),                                           //   input,   width = 2,          .awburst
		.s0_awlock   (niosv_sys_0_axi_bridge_m0_awlock),                                            //   input,   width = 1,          .awlock
		.s0_awcache  (niosv_sys_0_axi_bridge_m0_awcache),                                           //   input,   width = 4,          .awcache
		.s0_awprot   (niosv_sys_0_axi_bridge_m0_awprot),                                            //   input,   width = 3,          .awprot
		.s0_awvalid  (niosv_sys_0_axi_bridge_m0_awvalid),                                           //   input,   width = 1,          .awvalid
		.s0_awready  (niosv_sys_0_axi_bridge_m0_awready),                                           //  output,   width = 1,          .awready
		.s0_wdata    (niosv_sys_0_axi_bridge_m0_wdata),                                             //   input,  width = 32,          .wdata
		.s0_wstrb    (niosv_sys_0_axi_bridge_m0_wstrb),                                             //   input,   width = 4,          .wstrb
		.s0_wlast    (niosv_sys_0_axi_bridge_m0_wlast),                                             //   input,   width = 1,          .wlast
		.s0_wvalid   (niosv_sys_0_axi_bridge_m0_wvalid),                                            //   input,   width = 1,          .wvalid
		.s0_wready   (niosv_sys_0_axi_bridge_m0_wready),                                            //  output,   width = 1,          .wready
		.s0_bid      (niosv_sys_0_axi_bridge_m0_bid),                                               //  output,   width = 5,          .bid
		.s0_bresp    (niosv_sys_0_axi_bridge_m0_bresp),                                             //  output,   width = 2,          .bresp
		.s0_bvalid   (niosv_sys_0_axi_bridge_m0_bvalid),                                            //  output,   width = 1,          .bvalid
		.s0_bready   (niosv_sys_0_axi_bridge_m0_bready),                                            //   input,   width = 1,          .bready
		.s0_arid     (niosv_sys_0_axi_bridge_m0_arid),                                              //   input,   width = 5,          .arid
		.s0_araddr   (niosv_sys_0_axi_bridge_m0_araddr),                                            //   input,  width = 31,          .araddr
		.s0_arlen    (niosv_sys_0_axi_bridge_m0_arlen),                                             //   input,   width = 8,          .arlen
		.s0_arsize   (niosv_sys_0_axi_bridge_m0_arsize),                                            //   input,   width = 3,          .arsize
		.s0_arburst  (niosv_sys_0_axi_bridge_m0_arburst),                                           //   input,   width = 2,          .arburst
		.s0_arlock   (niosv_sys_0_axi_bridge_m0_arlock),                                            //   input,   width = 1,          .arlock
		.s0_arcache  (niosv_sys_0_axi_bridge_m0_arcache),                                           //   input,   width = 4,          .arcache
		.s0_arprot   (niosv_sys_0_axi_bridge_m0_arprot),                                            //   input,   width = 3,          .arprot
		.s0_arvalid  (niosv_sys_0_axi_bridge_m0_arvalid),                                           //   input,   width = 1,          .arvalid
		.s0_arready  (niosv_sys_0_axi_bridge_m0_arready),                                           //  output,   width = 1,          .arready
		.s0_rid      (niosv_sys_0_axi_bridge_m0_rid),                                               //  output,   width = 5,          .rid
		.s0_rdata    (niosv_sys_0_axi_bridge_m0_rdata),                                             //  output,  width = 32,          .rdata
		.s0_rresp    (niosv_sys_0_axi_bridge_m0_rresp),                                             //  output,   width = 2,          .rresp
		.s0_rlast    (niosv_sys_0_axi_bridge_m0_rlast),                                             //  output,   width = 1,          .rlast
		.s0_rvalid   (niosv_sys_0_axi_bridge_m0_rvalid),                                            //  output,   width = 1,          .rvalid
		.s0_rready   (niosv_sys_0_axi_bridge_m0_rready),                                            //   input,   width = 1,          .rready
		.s0_awuser   (1'b0),                                                                        // (terminated),                        
		.s0_awqos    (4'b0000),                                                                     // (terminated),                        
		.s0_awregion (4'b0000),                                                                     // (terminated),                        
		.s0_wuser    (1'b0),                                                                        // (terminated),                        
		.s0_buser    (),                                                                            // (terminated),                        
		.s0_aruser   (1'b0),                                                                        // (terminated),                        
		.s0_arqos    (4'b0000),                                                                     // (terminated),                        
		.s0_arregion (4'b0000),                                                                     // (terminated),                        
		.s0_ruser    (),                                                                            // (terminated),                        
		.s0_wid      (5'b00000),                                                                    // (terminated),                        
		.s0_ardomain (2'b00),                                                                       // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                                     // (terminated),                        
		.s0_arbar    (2'b00),                                                                       // (terminated),                        
		.s0_awdomain (2'b00),                                                                       // (terminated),                        
		.s0_awsnoop  (3'b000),                                                                      // (terminated),                        
		.s0_awbar    (2'b00),                                                                       // (terminated),                        
		.s0_awunique (1'b0),                                                                        // (terminated),                        
		.m0_wid      (),                                                                            // (terminated),                        
		.m0_ardomain (),                                                                            // (terminated),                        
		.m0_arsnoop  (),                                                                            // (terminated),                        
		.m0_arbar    (),                                                                            // (terminated),                        
		.m0_awdomain (),                                                                            // (terminated),                        
		.m0_awsnoop  (),                                                                            // (terminated),                        
		.m0_awbar    (),                                                                            // (terminated),                        
		.m0_awunique ()                                                                             // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (5),
		.DATA_WIDTH                        (256),
		.S0_ID_WIDTH                       (5),
		.M0_ADDR_WIDTH                     (31),
		.S0_WRITE_ADDR_USER_WIDTH          (8),
		.S0_READ_ADDR_USER_WIDTH           (8),
		.M0_WRITE_ADDR_USER_WIDTH          (8),
		.M0_READ_ADDR_USER_WIDTH           (8),
		.S0_WRITE_DATA_USER_WIDTH          (8),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (8),
		.S0_READ_DATA_USER_WIDTH           (8),
		.M0_WRITE_DATA_USER_WIDTH          (8),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (8),
		.M0_READ_DATA_USER_WIDTH           (8),
		.S0_ADDR_WIDTH                     (31),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) agilex_5_soc_fpga2hps_translator (
		.aclk        (agilex_5_soc_h2f_user1_clk_clk),                                              //   input,    width = 1,       clk.clk
		.aresetn     (~niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid     (agilex_5_soc_fpga2hps_awid),                                                  //  output,    width = 5,        m0.awid
		.m0_awaddr   (agilex_5_soc_fpga2hps_awaddr),                                                //  output,   width = 31,          .awaddr
		.m0_awlen    (agilex_5_soc_fpga2hps_awlen),                                                 //  output,    width = 8,          .awlen
		.m0_awsize   (agilex_5_soc_fpga2hps_awsize),                                                //  output,    width = 3,          .awsize
		.m0_awburst  (agilex_5_soc_fpga2hps_awburst),                                               //  output,    width = 2,          .awburst
		.m0_awlock   (agilex_5_soc_fpga2hps_awlock),                                                //  output,    width = 1,          .awlock
		.m0_awcache  (agilex_5_soc_fpga2hps_awcache),                                               //  output,    width = 4,          .awcache
		.m0_awprot   (agilex_5_soc_fpga2hps_awprot),                                                //  output,    width = 3,          .awprot
		.m0_awuser   (agilex_5_soc_fpga2hps_awuser),                                                //  output,    width = 8,          .awuser
		.m0_awqos    (agilex_5_soc_fpga2hps_awqos),                                                 //  output,    width = 4,          .awqos
		.m0_awregion (agilex_5_soc_fpga2hps_awregion),                                              //  output,    width = 4,          .awregion
		.m0_awvalid  (agilex_5_soc_fpga2hps_awvalid),                                               //  output,    width = 1,          .awvalid
		.m0_awready  (agilex_5_soc_fpga2hps_awready),                                               //   input,    width = 1,          .awready
		.m0_wdata    (agilex_5_soc_fpga2hps_wdata),                                                 //  output,  width = 256,          .wdata
		.m0_wstrb    (agilex_5_soc_fpga2hps_wstrb),                                                 //  output,   width = 32,          .wstrb
		.m0_wlast    (agilex_5_soc_fpga2hps_wlast),                                                 //  output,    width = 1,          .wlast
		.m0_wvalid   (agilex_5_soc_fpga2hps_wvalid),                                                //  output,    width = 1,          .wvalid
		.m0_wuser    (agilex_5_soc_fpga2hps_wuser),                                                 //  output,    width = 8,          .wuser
		.m0_wready   (agilex_5_soc_fpga2hps_wready),                                                //   input,    width = 1,          .wready
		.m0_bid      (agilex_5_soc_fpga2hps_bid),                                                   //   input,    width = 5,          .bid
		.m0_bresp    (agilex_5_soc_fpga2hps_bresp),                                                 //   input,    width = 2,          .bresp
		.m0_buser    (agilex_5_soc_fpga2hps_buser),                                                 //   input,    width = 8,          .buser
		.m0_bvalid   (agilex_5_soc_fpga2hps_bvalid),                                                //   input,    width = 1,          .bvalid
		.m0_bready   (agilex_5_soc_fpga2hps_bready),                                                //  output,    width = 1,          .bready
		.m0_arid     (agilex_5_soc_fpga2hps_arid),                                                  //  output,    width = 5,          .arid
		.m0_araddr   (agilex_5_soc_fpga2hps_araddr),                                                //  output,   width = 31,          .araddr
		.m0_arlen    (agilex_5_soc_fpga2hps_arlen),                                                 //  output,    width = 8,          .arlen
		.m0_arsize   (agilex_5_soc_fpga2hps_arsize),                                                //  output,    width = 3,          .arsize
		.m0_arburst  (agilex_5_soc_fpga2hps_arburst),                                               //  output,    width = 2,          .arburst
		.m0_arlock   (agilex_5_soc_fpga2hps_arlock),                                                //  output,    width = 1,          .arlock
		.m0_arcache  (agilex_5_soc_fpga2hps_arcache),                                               //  output,    width = 4,          .arcache
		.m0_arprot   (agilex_5_soc_fpga2hps_arprot),                                                //  output,    width = 3,          .arprot
		.m0_aruser   (agilex_5_soc_fpga2hps_aruser),                                                //  output,    width = 8,          .aruser
		.m0_arqos    (agilex_5_soc_fpga2hps_arqos),                                                 //  output,    width = 4,          .arqos
		.m0_arregion (agilex_5_soc_fpga2hps_arregion),                                              //  output,    width = 4,          .arregion
		.m0_arvalid  (agilex_5_soc_fpga2hps_arvalid),                                               //  output,    width = 1,          .arvalid
		.m0_arready  (agilex_5_soc_fpga2hps_arready),                                               //   input,    width = 1,          .arready
		.m0_rid      (agilex_5_soc_fpga2hps_rid),                                                   //   input,    width = 5,          .rid
		.m0_rdata    (agilex_5_soc_fpga2hps_rdata),                                                 //   input,  width = 256,          .rdata
		.m0_rresp    (agilex_5_soc_fpga2hps_rresp),                                                 //   input,    width = 2,          .rresp
		.m0_rlast    (agilex_5_soc_fpga2hps_rlast),                                                 //   input,    width = 1,          .rlast
		.m0_rvalid   (agilex_5_soc_fpga2hps_rvalid),                                                //   input,    width = 1,          .rvalid
		.m0_rready   (agilex_5_soc_fpga2hps_rready),                                                //  output,    width = 1,          .rready
		.m0_ruser    (agilex_5_soc_fpga2hps_ruser),                                                 //   input,    width = 8,          .ruser
		.s0_awid     (agilex_5_soc_fpga2hps_agent_altera_axi_master_awid),                          //   input,    width = 5,        s0.awid
		.s0_awaddr   (agilex_5_soc_fpga2hps_agent_altera_axi_master_awaddr),                        //   input,   width = 31,          .awaddr
		.s0_awlen    (agilex_5_soc_fpga2hps_agent_altera_axi_master_awlen),                         //   input,    width = 8,          .awlen
		.s0_awsize   (agilex_5_soc_fpga2hps_agent_altera_axi_master_awsize),                        //   input,    width = 3,          .awsize
		.s0_awburst  (agilex_5_soc_fpga2hps_agent_altera_axi_master_awburst),                       //   input,    width = 2,          .awburst
		.s0_awlock   (agilex_5_soc_fpga2hps_agent_altera_axi_master_awlock),                        //   input,    width = 1,          .awlock
		.s0_awcache  (agilex_5_soc_fpga2hps_agent_altera_axi_master_awcache),                       //   input,    width = 4,          .awcache
		.s0_awprot   (agilex_5_soc_fpga2hps_agent_altera_axi_master_awprot),                        //   input,    width = 3,          .awprot
		.s0_awuser   (agilex_5_soc_fpga2hps_agent_altera_axi_master_awuser),                        //   input,    width = 8,          .awuser
		.s0_awqos    (agilex_5_soc_fpga2hps_agent_altera_axi_master_awqos),                         //   input,    width = 4,          .awqos
		.s0_awregion (agilex_5_soc_fpga2hps_agent_altera_axi_master_awregion),                      //   input,    width = 4,          .awregion
		.s0_awvalid  (agilex_5_soc_fpga2hps_agent_altera_axi_master_awvalid),                       //   input,    width = 1,          .awvalid
		.s0_awready  (agilex_5_soc_fpga2hps_agent_altera_axi_master_awready),                       //  output,    width = 1,          .awready
		.s0_wdata    (agilex_5_soc_fpga2hps_agent_altera_axi_master_wdata),                         //   input,  width = 256,          .wdata
		.s0_wstrb    (agilex_5_soc_fpga2hps_agent_altera_axi_master_wstrb),                         //   input,   width = 32,          .wstrb
		.s0_wlast    (agilex_5_soc_fpga2hps_agent_altera_axi_master_wlast),                         //   input,    width = 1,          .wlast
		.s0_wvalid   (agilex_5_soc_fpga2hps_agent_altera_axi_master_wvalid),                        //   input,    width = 1,          .wvalid
		.s0_wuser    (agilex_5_soc_fpga2hps_agent_altera_axi_master_wuser),                         //   input,    width = 8,          .wuser
		.s0_wready   (agilex_5_soc_fpga2hps_agent_altera_axi_master_wready),                        //  output,    width = 1,          .wready
		.s0_bid      (agilex_5_soc_fpga2hps_agent_altera_axi_master_bid),                           //  output,    width = 5,          .bid
		.s0_bresp    (agilex_5_soc_fpga2hps_agent_altera_axi_master_bresp),                         //  output,    width = 2,          .bresp
		.s0_buser    (agilex_5_soc_fpga2hps_agent_altera_axi_master_buser),                         //  output,    width = 8,          .buser
		.s0_bvalid   (agilex_5_soc_fpga2hps_agent_altera_axi_master_bvalid),                        //  output,    width = 1,          .bvalid
		.s0_bready   (agilex_5_soc_fpga2hps_agent_altera_axi_master_bready),                        //   input,    width = 1,          .bready
		.s0_arid     (agilex_5_soc_fpga2hps_agent_altera_axi_master_arid),                          //   input,    width = 5,          .arid
		.s0_araddr   (agilex_5_soc_fpga2hps_agent_altera_axi_master_araddr),                        //   input,   width = 31,          .araddr
		.s0_arlen    (agilex_5_soc_fpga2hps_agent_altera_axi_master_arlen),                         //   input,    width = 8,          .arlen
		.s0_arsize   (agilex_5_soc_fpga2hps_agent_altera_axi_master_arsize),                        //   input,    width = 3,          .arsize
		.s0_arburst  (agilex_5_soc_fpga2hps_agent_altera_axi_master_arburst),                       //   input,    width = 2,          .arburst
		.s0_arlock   (agilex_5_soc_fpga2hps_agent_altera_axi_master_arlock),                        //   input,    width = 1,          .arlock
		.s0_arcache  (agilex_5_soc_fpga2hps_agent_altera_axi_master_arcache),                       //   input,    width = 4,          .arcache
		.s0_arprot   (agilex_5_soc_fpga2hps_agent_altera_axi_master_arprot),                        //   input,    width = 3,          .arprot
		.s0_aruser   (agilex_5_soc_fpga2hps_agent_altera_axi_master_aruser),                        //   input,    width = 8,          .aruser
		.s0_arqos    (agilex_5_soc_fpga2hps_agent_altera_axi_master_arqos),                         //   input,    width = 4,          .arqos
		.s0_arregion (agilex_5_soc_fpga2hps_agent_altera_axi_master_arregion),                      //   input,    width = 4,          .arregion
		.s0_arvalid  (agilex_5_soc_fpga2hps_agent_altera_axi_master_arvalid),                       //   input,    width = 1,          .arvalid
		.s0_arready  (agilex_5_soc_fpga2hps_agent_altera_axi_master_arready),                       //  output,    width = 1,          .arready
		.s0_rid      (agilex_5_soc_fpga2hps_agent_altera_axi_master_rid),                           //  output,    width = 5,          .rid
		.s0_rdata    (agilex_5_soc_fpga2hps_agent_altera_axi_master_rdata),                         //  output,  width = 256,          .rdata
		.s0_rresp    (agilex_5_soc_fpga2hps_agent_altera_axi_master_rresp),                         //  output,    width = 2,          .rresp
		.s0_rlast    (agilex_5_soc_fpga2hps_agent_altera_axi_master_rlast),                         //  output,    width = 1,          .rlast
		.s0_rvalid   (agilex_5_soc_fpga2hps_agent_altera_axi_master_rvalid),                        //  output,    width = 1,          .rvalid
		.s0_rready   (agilex_5_soc_fpga2hps_agent_altera_axi_master_rready),                        //   input,    width = 1,          .rready
		.s0_ruser    (agilex_5_soc_fpga2hps_agent_altera_axi_master_ruser),                         //  output,    width = 8,          .ruser
		.s0_wid      (5'b00000),                                                                    // (terminated),                         
		.s0_ardomain (2'b00),                                                                       // (terminated),                         
		.s0_arsnoop  (4'b0000),                                                                     // (terminated),                         
		.s0_arbar    (2'b00),                                                                       // (terminated),                         
		.s0_awdomain (2'b00),                                                                       // (terminated),                         
		.s0_awsnoop  (3'b000),                                                                      // (terminated),                         
		.s0_awbar    (2'b00),                                                                       // (terminated),                         
		.s0_awunique (1'b0),                                                                        // (terminated),                         
		.m0_wid      (),                                                                            // (terminated),                         
		.m0_ardomain (),                                                                            // (terminated),                         
		.m0_arsnoop  (),                                                                            // (terminated),                         
		.m0_arbar    (),                                                                            // (terminated),                         
		.m0_awdomain (),                                                                            // (terminated),                         
		.m0_awsnoop  (),                                                                            // (terminated),                         
		.m0_awbar    (),                                                                            // (terminated),                         
		.m0_awunique ()                                                                             // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (5),
		.ADDR_WIDTH                (31),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (8),
		.DATA_USER_WIDTH           (8),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (118),
		.PKT_CACHE_H               (136),
		.PKT_CACHE_L               (133),
		.PKT_ADDR_SIDEBAND_H       (109),
		.PKT_ADDR_SIDEBAND_L       (102),
		.PKT_PROTECTION_H          (132),
		.PKT_PROTECTION_L          (130),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_BURST_TYPE_H          (101),
		.PKT_BURST_TYPE_L          (100),
		.PKT_RESPONSE_STATUS_L     (137),
		.PKT_RESPONSE_STATUS_H     (138),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (72),
		.PKT_TRANS_LOCK            (71),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (123),
		.PKT_SRC_ID_L              (123),
		.PKT_DEST_ID_H             (124),
		.PKT_DEST_ID_L             (124),
		.PKT_THREAD_ID_H           (129),
		.PKT_THREAD_ID_L           (125),
		.PKT_QOS_L                 (119),
		.PKT_QOS_H                 (122),
		.PKT_ORI_BURST_SIZE_L      (139),
		.PKT_ORI_BURST_SIZE_H      (141),
		.PKT_DATA_SIDEBAND_H       (117),
		.PKT_DATA_SIDEBAND_L       (110),
		.PKT_DOMAIN_H              (149),
		.PKT_DOMAIN_L              (148),
		.PKT_SNOOP_H               (147),
		.PKT_SNOOP_L               (144),
		.PKT_BARRIER_H             (143),
		.PKT_BARRIER_L             (142),
		.PKT_WUNIQUE               (150),
		.ST_DATA_W                 (151),
		.ST_CHANNEL_W              (2),
		.ID                        (0),
		.SYNC_RESET                (1)
	) niosv_sys_0_axi_bridge_m0_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                              //   input,    width = 1,              clk.clk
		.aresetn                (~niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (niosv_sys_0_axi_bridge_m0_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (niosv_sys_0_axi_bridge_m0_agent_write_cp_data),                               //  output,  width = 151,                 .data
		.write_cp_startofpacket (niosv_sys_0_axi_bridge_m0_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (niosv_sys_0_axi_bridge_m0_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (niosv_sys_0_axi_bridge_m0_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                           //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                            //   input,  width = 151,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                         //   input,    width = 2,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                   //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                     //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                           //  output,    width = 1,                 .ready
		.read_cp_valid          (niosv_sys_0_axi_bridge_m0_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (niosv_sys_0_axi_bridge_m0_agent_read_cp_data),                                //  output,  width = 151,                 .data
		.read_cp_startofpacket  (niosv_sys_0_axi_bridge_m0_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (niosv_sys_0_axi_bridge_m0_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (niosv_sys_0_axi_bridge_m0_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                       //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                        //   input,  width = 151,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                     //   input,    width = 2,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                               //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                                 //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                       //  output,    width = 1,                 .ready
		.awid                   (niosv_sys_0_axi_bridge_m0_translator_m0_awid),                                //   input,    width = 5, altera_axi_slave.awid
		.awaddr                 (niosv_sys_0_axi_bridge_m0_translator_m0_awaddr),                              //   input,   width = 31,                 .awaddr
		.awlen                  (niosv_sys_0_axi_bridge_m0_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (niosv_sys_0_axi_bridge_m0_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (niosv_sys_0_axi_bridge_m0_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (niosv_sys_0_axi_bridge_m0_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (niosv_sys_0_axi_bridge_m0_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (niosv_sys_0_axi_bridge_m0_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (niosv_sys_0_axi_bridge_m0_translator_m0_awuser),                              //   input,    width = 8,                 .awuser
		.awqos                  (niosv_sys_0_axi_bridge_m0_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (niosv_sys_0_axi_bridge_m0_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (niosv_sys_0_axi_bridge_m0_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (niosv_sys_0_axi_bridge_m0_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (niosv_sys_0_axi_bridge_m0_translator_m0_wdata),                               //   input,   width = 32,                 .wdata
		.wstrb                  (niosv_sys_0_axi_bridge_m0_translator_m0_wstrb),                               //   input,    width = 4,                 .wstrb
		.wlast                  (niosv_sys_0_axi_bridge_m0_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (niosv_sys_0_axi_bridge_m0_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (niosv_sys_0_axi_bridge_m0_translator_m0_wuser),                               //   input,    width = 8,                 .wuser
		.wready                 (niosv_sys_0_axi_bridge_m0_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (niosv_sys_0_axi_bridge_m0_translator_m0_bid),                                 //  output,    width = 5,                 .bid
		.bresp                  (niosv_sys_0_axi_bridge_m0_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (niosv_sys_0_axi_bridge_m0_translator_m0_buser),                               //  output,    width = 8,                 .buser
		.bvalid                 (niosv_sys_0_axi_bridge_m0_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (niosv_sys_0_axi_bridge_m0_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (niosv_sys_0_axi_bridge_m0_translator_m0_arid),                                //   input,    width = 5,                 .arid
		.araddr                 (niosv_sys_0_axi_bridge_m0_translator_m0_araddr),                              //   input,   width = 31,                 .araddr
		.arlen                  (niosv_sys_0_axi_bridge_m0_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (niosv_sys_0_axi_bridge_m0_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (niosv_sys_0_axi_bridge_m0_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (niosv_sys_0_axi_bridge_m0_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (niosv_sys_0_axi_bridge_m0_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (niosv_sys_0_axi_bridge_m0_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (niosv_sys_0_axi_bridge_m0_translator_m0_aruser),                              //   input,    width = 8,                 .aruser
		.arqos                  (niosv_sys_0_axi_bridge_m0_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (niosv_sys_0_axi_bridge_m0_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (niosv_sys_0_axi_bridge_m0_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (niosv_sys_0_axi_bridge_m0_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (niosv_sys_0_axi_bridge_m0_translator_m0_rid),                                 //  output,    width = 5,                 .rid
		.rdata                  (niosv_sys_0_axi_bridge_m0_translator_m0_rdata),                               //  output,   width = 32,                 .rdata
		.rresp                  (niosv_sys_0_axi_bridge_m0_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (niosv_sys_0_axi_bridge_m0_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (niosv_sys_0_axi_bridge_m0_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (niosv_sys_0_axi_bridge_m0_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (niosv_sys_0_axi_bridge_m0_translator_m0_ruser),                               //  output,    width = 8,                 .ruser
		.wid                    (5'b00000),                                                                    // (terminated),                                
		.arsnoop                (4'b0000),                                                                     // (terminated),                                
		.ardomain               (2'b00),                                                                       // (terminated),                                
		.arbar                  (2'b00),                                                                       // (terminated),                                
		.awsnoop                (3'b000),                                                                      // (terminated),                                
		.awdomain               (2'b00),                                                                       // (terminated),                                
		.awbar                  (2'b00),                                                                       // (terminated),                                
		.awunique               (1'b0)                                                                         // (terminated),                                
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_3jo62qq #(
		.PKT_QOS_H                   (374),
		.PKT_QOS_L                   (371),
		.PKT_THREAD_ID_H             (381),
		.PKT_THREAD_ID_L             (377),
		.PKT_RESPONSE_STATUS_H       (390),
		.PKT_RESPONSE_STATUS_L       (389),
		.PKT_BEGIN_BURST             (370),
		.PKT_CACHE_H                 (388),
		.PKT_CACHE_L                 (385),
		.PKT_DATA_SIDEBAND_H         (369),
		.PKT_DATA_SIDEBAND_L         (362),
		.PKT_ADDR_SIDEBAND_H         (361),
		.PKT_ADDR_SIDEBAND_L         (354),
		.PKT_BURST_TYPE_H            (353),
		.PKT_BURST_TYPE_L            (352),
		.PKT_PROTECTION_H            (384),
		.PKT_PROTECTION_L            (382),
		.PKT_BURST_SIZE_H            (351),
		.PKT_BURST_SIZE_L            (349),
		.PKT_BURSTWRAP_H             (348),
		.PKT_BURSTWRAP_L             (339),
		.PKT_BYTE_CNT_H              (338),
		.PKT_BYTE_CNT_L              (325),
		.PKT_ADDR_H                  (318),
		.PKT_ADDR_L                  (288),
		.PKT_TRANS_EXCLUSIVE         (324),
		.PKT_TRANS_LOCK              (323),
		.PKT_TRANS_COMPRESSED_READ   (319),
		.PKT_TRANS_POSTED            (320),
		.PKT_TRANS_WRITE             (321),
		.PKT_TRANS_READ              (322),
		.PKT_DATA_H                  (255),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (287),
		.PKT_BYTEEN_L                (256),
		.PKT_SRC_ID_H                (375),
		.PKT_SRC_ID_L                (375),
		.PKT_DEST_ID_H               (376),
		.PKT_DEST_ID_L               (376),
		.PKT_ORI_BURST_SIZE_L        (391),
		.PKT_ORI_BURST_SIZE_H        (393),
		.PKT_DOMAIN_L                (400),
		.PKT_DOMAIN_H                (401),
		.PKT_SNOOP_L                 (396),
		.PKT_SNOOP_H                 (399),
		.PKT_BARRIER_L               (394),
		.PKT_BARRIER_H               (395),
		.PKT_WUNIQUE                 (402),
		.ADDR_USER_WIDTH             (8),
		.DATA_USER_WIDTH             (8),
		.ST_DATA_W                   (403),
		.ADDR_WIDTH                  (31),
		.RDATA_WIDTH                 (256),
		.WDATA_WIDTH                 (256),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (5),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) agilex_5_soc_fpga2hps_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                              //   input,    width = 1,        clock_sink.clk
		.aresetn                (~niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_valid),                        //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_ready),                        //  output,    width = 1,                  .ready
		.read_cp_data           (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_data),                         //   input,  width = 403,                  .data
		.read_cp_channel        (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_channel),                      //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_startofpacket),                //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_endofpacket),                  //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_ready),                        //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_valid),                        //   input,    width = 1,                  .valid
		.write_cp_data          (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_data),                         //   input,  width = 403,                  .data
		.write_cp_channel       (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_channel),                      //   input,    width = 2,                  .channel
		.write_cp_startofpacket (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_startofpacket),                //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_endofpacket),                  //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (agilex_5_soc_fpga2hps_agent_read_rp_ready),                                   //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (agilex_5_soc_fpga2hps_agent_read_rp_valid),                                   //  output,    width = 1,                  .valid
		.read_rp_data           (agilex_5_soc_fpga2hps_agent_read_rp_data),                                    //  output,  width = 403,                  .data
		.read_rp_startofpacket  (agilex_5_soc_fpga2hps_agent_read_rp_startofpacket),                           //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (agilex_5_soc_fpga2hps_agent_read_rp_endofpacket),                             //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (agilex_5_soc_fpga2hps_agent_write_rp_ready),                                  //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (agilex_5_soc_fpga2hps_agent_write_rp_valid),                                  //  output,    width = 1,                  .valid
		.write_rp_data          (agilex_5_soc_fpga2hps_agent_write_rp_data),                                   //  output,  width = 403,                  .data
		.write_rp_startofpacket (agilex_5_soc_fpga2hps_agent_write_rp_startofpacket),                          //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (agilex_5_soc_fpga2hps_agent_write_rp_endofpacket),                            //  output,    width = 1,                  .endofpacket
		.awid                   (agilex_5_soc_fpga2hps_agent_altera_axi_master_awid),                          //  output,    width = 5, altera_axi_master.awid
		.awaddr                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_awaddr),                        //  output,   width = 31,                  .awaddr
		.awlen                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_awlen),                         //  output,    width = 8,                  .awlen
		.awsize                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_awsize),                        //  output,    width = 3,                  .awsize
		.awburst                (agilex_5_soc_fpga2hps_agent_altera_axi_master_awburst),                       //  output,    width = 2,                  .awburst
		.awlock                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_awlock),                        //  output,    width = 1,                  .awlock
		.awcache                (agilex_5_soc_fpga2hps_agent_altera_axi_master_awcache),                       //  output,    width = 4,                  .awcache
		.awprot                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_awprot),                        //  output,    width = 3,                  .awprot
		.awuser                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_awuser),                        //  output,    width = 8,                  .awuser
		.awvalid                (agilex_5_soc_fpga2hps_agent_altera_axi_master_awvalid),                       //  output,    width = 1,                  .awvalid
		.awready                (agilex_5_soc_fpga2hps_agent_altera_axi_master_awready),                       //   input,    width = 1,                  .awready
		.wdata                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_wdata),                         //  output,  width = 256,                  .wdata
		.wstrb                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_wstrb),                         //  output,   width = 32,                  .wstrb
		.wlast                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_wlast),                         //  output,    width = 1,                  .wlast
		.wvalid                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_wvalid),                        //  output,    width = 1,                  .wvalid
		.wready                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_wready),                        //   input,    width = 1,                  .wready
		.bid                    (agilex_5_soc_fpga2hps_agent_altera_axi_master_bid),                           //   input,    width = 5,                  .bid
		.bresp                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_bresp),                         //   input,    width = 2,                  .bresp
		.bvalid                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_bvalid),                        //   input,    width = 1,                  .bvalid
		.bready                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_bready),                        //  output,    width = 1,                  .bready
		.arid                   (agilex_5_soc_fpga2hps_agent_altera_axi_master_arid),                          //  output,    width = 5,                  .arid
		.araddr                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_araddr),                        //  output,   width = 31,                  .araddr
		.arlen                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_arlen),                         //  output,    width = 8,                  .arlen
		.arsize                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_arsize),                        //  output,    width = 3,                  .arsize
		.arburst                (agilex_5_soc_fpga2hps_agent_altera_axi_master_arburst),                       //  output,    width = 2,                  .arburst
		.arlock                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_arlock),                        //  output,    width = 1,                  .arlock
		.arcache                (agilex_5_soc_fpga2hps_agent_altera_axi_master_arcache),                       //  output,    width = 4,                  .arcache
		.arprot                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_arprot),                        //  output,    width = 3,                  .arprot
		.aruser                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_aruser),                        //  output,    width = 8,                  .aruser
		.arvalid                (agilex_5_soc_fpga2hps_agent_altera_axi_master_arvalid),                       //  output,    width = 1,                  .arvalid
		.arready                (agilex_5_soc_fpga2hps_agent_altera_axi_master_arready),                       //   input,    width = 1,                  .arready
		.rid                    (agilex_5_soc_fpga2hps_agent_altera_axi_master_rid),                           //   input,    width = 5,                  .rid
		.rdata                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_rdata),                         //   input,  width = 256,                  .rdata
		.rresp                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_rresp),                         //   input,    width = 2,                  .rresp
		.rlast                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_rlast),                         //   input,    width = 1,                  .rlast
		.rvalid                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_rvalid),                        //   input,    width = 1,                  .rvalid
		.rready                 (agilex_5_soc_fpga2hps_agent_altera_axi_master_rready),                        //  output,    width = 1,                  .rready
		.wuser                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_wuser),                         //  output,    width = 8,                  .wuser
		.awqos                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_awqos),                         //  output,    width = 4,                  .awqos
		.awregion               (agilex_5_soc_fpga2hps_agent_altera_axi_master_awregion),                      //  output,    width = 4,                  .awregion
		.ruser                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_ruser),                         //   input,    width = 8,                  .ruser
		.buser                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_buser),                         //   input,    width = 8,                  .buser
		.arqos                  (agilex_5_soc_fpga2hps_agent_altera_axi_master_arqos),                         //  output,    width = 4,                  .arqos
		.arregion               (agilex_5_soc_fpga2hps_agent_altera_axi_master_arregion),                      //  output,    width = 4,                  .arregion
		.wid                    (),                                                                            // (terminated),                                 
		.arsnoop                (),                                                                            // (terminated),                                 
		.ardomain               (),                                                                            // (terminated),                                 
		.arbar                  (),                                                                            // (terminated),                                 
		.awsnoop                (),                                                                            // (terminated),                                 
		.awdomain               (),                                                                            // (terminated),                                 
		.awbar                  (),                                                                            // (terminated),                                 
		.awunique               ()                                                                             // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_router_1921_xac4fta router (
		.sink_ready         (niosv_sys_0_axi_bridge_m0_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (niosv_sys_0_axi_bridge_m0_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (niosv_sys_0_axi_bridge_m0_agent_write_cp_data),                              //   input,  width = 151,          .data
		.sink_startofpacket (niosv_sys_0_axi_bridge_m0_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (niosv_sys_0_axi_bridge_m0_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                            //  output,  width = 151,          .data
		.src_channel        (router_src_channel),                                                         //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                      //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_gqscfma router_001 (
		.sink_ready         (niosv_sys_0_axi_bridge_m0_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (niosv_sys_0_axi_bridge_m0_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (niosv_sys_0_axi_bridge_m0_agent_read_cp_data),                               //   input,  width = 151,          .data
		.sink_startofpacket (niosv_sys_0_axi_bridge_m0_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (niosv_sys_0_axi_bridge_m0_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                        //  output,  width = 151,          .data
		.src_channel        (router_001_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_jkztiga router_002 (
		.sink_ready         (agilex_5_soc_fpga2hps_agent_write_rp_ready),                                 //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_fpga2hps_agent_write_rp_valid),                                 //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_fpga2hps_agent_write_rp_data),                                  //   input,  width = 403,          .data
		.sink_startofpacket (agilex_5_soc_fpga2hps_agent_write_rp_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_fpga2hps_agent_write_rp_endofpacket),                           //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                        //  output,  width = 403,          .data
		.src_channel        (router_002_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_i2voh3i router_003 (
		.sink_ready         (agilex_5_soc_fpga2hps_agent_read_rp_ready),                                  //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_fpga2hps_agent_read_rp_valid),                                  //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_fpga2hps_agent_read_rp_data),                                   //   input,  width = 403,          .data
		.sink_startofpacket (agilex_5_soc_fpga2hps_agent_read_rp_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_fpga2hps_agent_read_rp_endofpacket),                            //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                        //  output,  width = 403,          .data
		.src_channel        (router_003_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_zrmyr3y cmd_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                         //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                                            //   input,  width = 151,          .data
		.sink_startofpacket (router_src_startofpacket),                                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                        //  output,  width = 151,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                     //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_zrmyr3y cmd_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                       //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                     //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                                        //   input,  width = 151,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                       //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                   //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                   //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                    //  output,  width = 151,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                 //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_7pzltty cmd_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                           //  output,  width = 151,          .data
		.src_channel         (cmd_mux_src_channel),                                                        //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                     //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                        //   input,  width = 151,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                                  //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_7pzltty cmd_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                      //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                      //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                       //  output,  width = 151,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                    //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_001_src0_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_001_src0_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_001_src0_channel),                                                 //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_001_src0_data),                                                    //   input,  width = 151,          .data
		.sink0_startofpacket (cmd_demux_001_src0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src0_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_zrmyr3y rsp_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_ready),                       //  output,    width = 1,      sink.ready
		.sink_channel       (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_channel),                     //   input,    width = 2,          .channel
		.sink_data          (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_data),                        //   input,  width = 151,          .data
		.sink_startofpacket (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink_valid         (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_valid),                       //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                        //  output,  width = 151,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                     //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_zrmyr3y rsp_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_ready),                       //  output,    width = 1,      sink.ready
		.sink_channel       (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_channel),                     //   input,    width = 2,          .channel
		.sink_data          (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_data),                        //   input,  width = 151,          .data
		.sink_startofpacket (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink_valid         (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_valid),                       //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                   //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                   //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                    //  output,  width = 151,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                 //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_fmofpey rsp_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                           //  output,  width = 151,          .data
		.src_channel         (rsp_mux_src_channel),                                                        //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                     //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                        //   input,  width = 151,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                                  //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_fmofpey rsp_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                       //  output,  width = 151,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                    //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_001_src0_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_001_src0_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_001_src0_channel),                                                 //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_001_src0_data),                                                    //   input,  width = 151,          .data
		.sink0_startofpacket (rsp_demux_001_src0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src0_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_dd4hbji #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (138),
		.IN_PKT_RESPONSE_STATUS_L      (137),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (139),
		.IN_PKT_ORI_BURST_SIZE_H       (141),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (318),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (325),
		.OUT_PKT_TRANS_COMPRESSED_READ (319),
		.OUT_PKT_BURST_SIZE_H          (351),
		.OUT_PKT_BURST_SIZE_L          (349),
		.OUT_PKT_RESPONSE_STATUS_H     (390),
		.OUT_PKT_RESPONSE_STATUS_L     (389),
		.OUT_PKT_TRANS_EXCLUSIVE       (324),
		.OUT_PKT_BURST_TYPE_H          (353),
		.OUT_PKT_BURST_TYPE_L          (352),
		.OUT_PKT_ORI_BURST_SIZE_L      (391),
		.OUT_PKT_ORI_BURST_SIZE_H      (393),
		.OUT_ST_DATA_W                 (403),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_fpga2hps_wr_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                          //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                        //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                    //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                          //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                           //   input,  width = 151,          .data
		.out_endofpacket      (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_endofpacket),                 //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_data),                        //  output,  width = 403,          .data
		.out_channel          (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_channel),                     //  output,    width = 2,          .channel
		.out_valid            (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_valid),                       //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_ready),                       //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_fpga2hps_wr_cmd_width_adapter_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_dd4hbji #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (138),
		.IN_PKT_RESPONSE_STATUS_L      (137),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (139),
		.IN_PKT_ORI_BURST_SIZE_H       (141),
		.IN_ST_DATA_W                  (151),
		.OUT_PKT_ADDR_H                (318),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (325),
		.OUT_PKT_TRANS_COMPRESSED_READ (319),
		.OUT_PKT_BURST_SIZE_H          (351),
		.OUT_PKT_BURST_SIZE_L          (349),
		.OUT_PKT_RESPONSE_STATUS_H     (390),
		.OUT_PKT_RESPONSE_STATUS_L     (389),
		.OUT_PKT_TRANS_EXCLUSIVE       (324),
		.OUT_PKT_BURST_TYPE_H          (353),
		.OUT_PKT_BURST_TYPE_L          (352),
		.OUT_PKT_ORI_BURST_SIZE_L      (391),
		.OUT_PKT_ORI_BURST_SIZE_H      (393),
		.OUT_ST_DATA_W                 (403),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_fpga2hps_rd_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                      //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                    //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                      //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                       //   input,  width = 151,          .data
		.out_endofpacket      (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_endofpacket),                 //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_data),                        //  output,  width = 403,          .data
		.out_channel          (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_channel),                     //  output,    width = 2,          .channel
		.out_valid            (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_valid),                       //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_ready),                       //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_fpga2hps_rd_cmd_width_adapter_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_ypyk5bi #(
		.IN_PKT_ADDR_H                 (318),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (325),
		.IN_PKT_TRANS_COMPRESSED_READ  (319),
		.IN_PKT_TRANS_WRITE            (321),
		.IN_PKT_BURSTWRAP_H            (348),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (351),
		.IN_PKT_BURST_SIZE_L           (349),
		.IN_PKT_RESPONSE_STATUS_H      (390),
		.IN_PKT_RESPONSE_STATUS_L      (389),
		.IN_PKT_TRANS_EXCLUSIVE        (324),
		.IN_PKT_BURST_TYPE_H           (353),
		.IN_PKT_BURST_TYPE_L           (352),
		.IN_PKT_ORI_BURST_SIZE_L       (391),
		.IN_PKT_ORI_BURST_SIZE_H       (393),
		.IN_ST_DATA_W                  (403),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (138),
		.OUT_PKT_RESPONSE_STATUS_L     (137),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (139),
		.OUT_PKT_ORI_BURST_SIZE_H      (141),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_fpga2hps_wr_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                                     //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                        //   input,  width = 403,          .data
		.out_endofpacket      (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_endofpacket),                 //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_data),                        //  output,  width = 151,          .data
		.out_channel          (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_channel),                     //  output,    width = 2,          .channel
		.out_valid            (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_valid),                       //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_ready),                       //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_fpga2hps_wr_rsp_width_adapter_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_ypyk5bi #(
		.IN_PKT_ADDR_H                 (318),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (325),
		.IN_PKT_TRANS_COMPRESSED_READ  (319),
		.IN_PKT_TRANS_WRITE            (321),
		.IN_PKT_BURSTWRAP_H            (348),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (351),
		.IN_PKT_BURST_SIZE_L           (349),
		.IN_PKT_RESPONSE_STATUS_H      (390),
		.IN_PKT_RESPONSE_STATUS_L      (389),
		.IN_PKT_TRANS_EXCLUSIVE        (324),
		.IN_PKT_BURST_TYPE_H           (353),
		.IN_PKT_BURST_TYPE_L           (352),
		.IN_PKT_ORI_BURST_SIZE_L       (391),
		.IN_PKT_ORI_BURST_SIZE_H       (393),
		.IN_ST_DATA_W                  (403),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (138),
		.OUT_PKT_RESPONSE_STATUS_L     (137),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (139),
		.OUT_PKT_ORI_BURST_SIZE_H      (141),
		.OUT_ST_DATA_W                 (151),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) agilex_5_soc_fpga2hps_rd_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (niosv_sys_0_axi_bridge_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                                                     //   input,    width = 2,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                                                        //   input,  width = 403,          .data
		.out_endofpacket      (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_endofpacket),                 //  output,    width = 1,       src.endofpacket
		.out_data             (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_data),                        //  output,  width = 151,          .data
		.out_channel          (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_channel),                     //  output,    width = 2,          .channel
		.out_valid            (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_valid),                       //  output,    width = 1,          .valid
		.out_ready            (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_ready),                       //   input,    width = 1,          .ready
		.out_startofpacket    (agilex_5_soc_fpga2hps_rd_rsp_width_adapter_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

endmodule
