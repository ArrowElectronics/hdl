// niosv_sys.v

// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module niosv_sys (
		output wire [4:0]  axi_bridge_m0_awid,    // axi_bridge_m0.awid
		output wire [30:0] axi_bridge_m0_awaddr,  //              .awaddr
		output wire [7:0]  axi_bridge_m0_awlen,   //              .awlen
		output wire [2:0]  axi_bridge_m0_awsize,  //              .awsize
		output wire [1:0]  axi_bridge_m0_awburst, //              .awburst
		output wire [0:0]  axi_bridge_m0_awlock,  //              .awlock
		output wire [3:0]  axi_bridge_m0_awcache, //              .awcache
		output wire [2:0]  axi_bridge_m0_awprot,  //              .awprot
		output wire        axi_bridge_m0_awvalid, //              .awvalid
		input  wire        axi_bridge_m0_awready, //              .awready
		output wire [31:0] axi_bridge_m0_wdata,   //              .wdata
		output wire [3:0]  axi_bridge_m0_wstrb,   //              .wstrb
		output wire        axi_bridge_m0_wlast,   //              .wlast
		output wire        axi_bridge_m0_wvalid,  //              .wvalid
		input  wire        axi_bridge_m0_wready,  //              .wready
		input  wire [4:0]  axi_bridge_m0_bid,     //              .bid
		input  wire [1:0]  axi_bridge_m0_bresp,   //              .bresp
		input  wire        axi_bridge_m0_bvalid,  //              .bvalid
		output wire        axi_bridge_m0_bready,  //              .bready
		output wire [4:0]  axi_bridge_m0_arid,    //              .arid
		output wire [30:0] axi_bridge_m0_araddr,  //              .araddr
		output wire [7:0]  axi_bridge_m0_arlen,   //              .arlen
		output wire [2:0]  axi_bridge_m0_arsize,  //              .arsize
		output wire [1:0]  axi_bridge_m0_arburst, //              .arburst
		output wire [0:0]  axi_bridge_m0_arlock,  //              .arlock
		output wire [3:0]  axi_bridge_m0_arcache, //              .arcache
		output wire [2:0]  axi_bridge_m0_arprot,  //              .arprot
		output wire        axi_bridge_m0_arvalid, //              .arvalid
		input  wire        axi_bridge_m0_arready, //              .arready
		input  wire [4:0]  axi_bridge_m0_rid,     //              .rid
		input  wire [31:0] axi_bridge_m0_rdata,   //              .rdata
		input  wire [1:0]  axi_bridge_m0_rresp,   //              .rresp
		input  wire        axi_bridge_m0_rlast,   //              .rlast
		input  wire        axi_bridge_m0_rvalid,  //              .rvalid
		output wire        axi_bridge_m0_rready,  //              .rready
		input  wire        clk_100m_clk,          //      clk_100m.clk
		input  wire [7:0]  cruvi_ls_0_in_port,    //    cruvi_ls_0.in_port
		output wire [7:0]  cruvi_ls_0_out_port,   //              .out_port
		input  wire [7:0]  cruvi_ls_1_in_port,    //    cruvi_ls_1.in_port
		output wire [7:0]  cruvi_ls_1_out_port,   //              .out_port
		input  wire [1:0]  fpga_dipsw_export,     //    fpga_dipsw.export
		input  wire [1:0]  fpga_pb_export,        //       fpga_pb.export
		input  wire        hdmi_i2c_sda_in,       //      hdmi_i2c.sda_in
		input  wire        hdmi_i2c_scl_in,       //              .scl_in
		output wire        hdmi_i2c_sda_oe,       //              .sda_oe
		output wire        hdmi_i2c_scl_oe,       //              .scl_oe
		input  wire        dbg_uart_RXD,          //      dbg_uart.RXD
		output wire        dbg_uart_TXD,          //              .TXD
		input  wire        reset_in_reset,        //      reset_in.reset
		output wire [2:0]  rgb_led0_export,       //      rgb_led0.export
		output wire [2:0]  rgb_led1_export,       //      rgb_led1.export
		output wire [2:0]  rgb_led2_export,       //      rgb_led2.export
		output wire [2:0]  rgb_led3_export        //      rgb_led3.export
	);

	wire         clock_in_out_clk_clk;                                           // clock_in:out_clk -> [axi_bridge_0:aclk, cruvi_ls_0:clk, cruvi_ls_1:clk, fpga_dipsw:clk, fpga_pb:clk, hdmi_i2c:clk, intel_niosv_g_0:clk, intel_onchip_memory_0:clk, irq_mapper:clk, mm_interconnect_0:clock_in_out_clk_clk, niosv_dbg_uart:clk, niosv_jtag_master:clk_clk, reset_in:clk, rgb_led0:clk, rgb_led1:clk, rgb_led2:clk, rgb_led3:clk, rst_controller:clk, rst_controller_002:clk, rst_controller_003:clk]
	wire         reset_in_out_reset_reset;                                       // reset_in:out_reset -> [niosv_dbg_uart:reset, rst_controller:reset_in1, rst_controller_001:reset_in1, rst_controller_002:reset_in1, rst_controller_003:reset_in0]
	wire   [7:0] intel_niosv_g_0_data_manager_arlen;                             // intel_niosv_g_0:data_manager_arlen -> mm_interconnect_0:intel_niosv_g_0_data_manager_arlen
	wire   [3:0] intel_niosv_g_0_data_manager_wstrb;                             // intel_niosv_g_0:data_manager_wstrb -> mm_interconnect_0:intel_niosv_g_0_data_manager_wstrb
	wire         intel_niosv_g_0_data_manager_wready;                            // mm_interconnect_0:intel_niosv_g_0_data_manager_wready -> intel_niosv_g_0:data_manager_wready
	wire         intel_niosv_g_0_data_manager_rready;                            // intel_niosv_g_0:data_manager_rready -> mm_interconnect_0:intel_niosv_g_0_data_manager_rready
	wire   [7:0] intel_niosv_g_0_data_manager_awlen;                             // intel_niosv_g_0:data_manager_awlen -> mm_interconnect_0:intel_niosv_g_0_data_manager_awlen
	wire         intel_niosv_g_0_data_manager_wvalid;                            // intel_niosv_g_0:data_manager_wvalid -> mm_interconnect_0:intel_niosv_g_0_data_manager_wvalid
	wire  [31:0] intel_niosv_g_0_data_manager_araddr;                            // intel_niosv_g_0:data_manager_araddr -> mm_interconnect_0:intel_niosv_g_0_data_manager_araddr
	wire   [2:0] intel_niosv_g_0_data_manager_arprot;                            // intel_niosv_g_0:data_manager_arprot -> mm_interconnect_0:intel_niosv_g_0_data_manager_arprot
	wire   [2:0] intel_niosv_g_0_data_manager_awprot;                            // intel_niosv_g_0:data_manager_awprot -> mm_interconnect_0:intel_niosv_g_0_data_manager_awprot
	wire  [31:0] intel_niosv_g_0_data_manager_wdata;                             // intel_niosv_g_0:data_manager_wdata -> mm_interconnect_0:intel_niosv_g_0_data_manager_wdata
	wire         intel_niosv_g_0_data_manager_arvalid;                           // intel_niosv_g_0:data_manager_arvalid -> mm_interconnect_0:intel_niosv_g_0_data_manager_arvalid
	wire  [31:0] intel_niosv_g_0_data_manager_awaddr;                            // intel_niosv_g_0:data_manager_awaddr -> mm_interconnect_0:intel_niosv_g_0_data_manager_awaddr
	wire   [1:0] intel_niosv_g_0_data_manager_bresp;                             // mm_interconnect_0:intel_niosv_g_0_data_manager_bresp -> intel_niosv_g_0:data_manager_bresp
	wire         intel_niosv_g_0_data_manager_arready;                           // mm_interconnect_0:intel_niosv_g_0_data_manager_arready -> intel_niosv_g_0:data_manager_arready
	wire  [31:0] intel_niosv_g_0_data_manager_rdata;                             // mm_interconnect_0:intel_niosv_g_0_data_manager_rdata -> intel_niosv_g_0:data_manager_rdata
	wire         intel_niosv_g_0_data_manager_awready;                           // mm_interconnect_0:intel_niosv_g_0_data_manager_awready -> intel_niosv_g_0:data_manager_awready
	wire   [2:0] intel_niosv_g_0_data_manager_arsize;                            // intel_niosv_g_0:data_manager_arsize -> mm_interconnect_0:intel_niosv_g_0_data_manager_arsize
	wire         intel_niosv_g_0_data_manager_bready;                            // intel_niosv_g_0:data_manager_bready -> mm_interconnect_0:intel_niosv_g_0_data_manager_bready
	wire         intel_niosv_g_0_data_manager_rlast;                             // mm_interconnect_0:intel_niosv_g_0_data_manager_rlast -> intel_niosv_g_0:data_manager_rlast
	wire         intel_niosv_g_0_data_manager_wlast;                             // intel_niosv_g_0:data_manager_wlast -> mm_interconnect_0:intel_niosv_g_0_data_manager_wlast
	wire   [1:0] intel_niosv_g_0_data_manager_rresp;                             // mm_interconnect_0:intel_niosv_g_0_data_manager_rresp -> intel_niosv_g_0:data_manager_rresp
	wire         intel_niosv_g_0_data_manager_bvalid;                            // mm_interconnect_0:intel_niosv_g_0_data_manager_bvalid -> intel_niosv_g_0:data_manager_bvalid
	wire   [2:0] intel_niosv_g_0_data_manager_awsize;                            // intel_niosv_g_0:data_manager_awsize -> mm_interconnect_0:intel_niosv_g_0_data_manager_awsize
	wire         intel_niosv_g_0_data_manager_awvalid;                           // intel_niosv_g_0:data_manager_awvalid -> mm_interconnect_0:intel_niosv_g_0_data_manager_awvalid
	wire         intel_niosv_g_0_data_manager_rvalid;                            // mm_interconnect_0:intel_niosv_g_0_data_manager_rvalid -> intel_niosv_g_0:data_manager_rvalid
	wire  [31:0] niosv_jtag_master_master_readdata;                              // mm_interconnect_0:niosv_jtag_master_master_readdata -> niosv_jtag_master:master_readdata
	wire         niosv_jtag_master_master_waitrequest;                           // mm_interconnect_0:niosv_jtag_master_master_waitrequest -> niosv_jtag_master:master_waitrequest
	wire  [31:0] niosv_jtag_master_master_address;                               // niosv_jtag_master:master_address -> mm_interconnect_0:niosv_jtag_master_master_address
	wire         niosv_jtag_master_master_read;                                  // niosv_jtag_master:master_read -> mm_interconnect_0:niosv_jtag_master_master_read
	wire   [3:0] niosv_jtag_master_master_byteenable;                            // niosv_jtag_master:master_byteenable -> mm_interconnect_0:niosv_jtag_master_master_byteenable
	wire         niosv_jtag_master_master_readdatavalid;                         // mm_interconnect_0:niosv_jtag_master_master_readdatavalid -> niosv_jtag_master:master_readdatavalid
	wire         niosv_jtag_master_master_write;                                 // niosv_jtag_master:master_write -> mm_interconnect_0:niosv_jtag_master_master_write
	wire  [31:0] niosv_jtag_master_master_writedata;                             // niosv_jtag_master:master_writedata -> mm_interconnect_0:niosv_jtag_master_master_writedata
	wire   [1:0] intel_niosv_g_0_instruction_manager_awburst;                    // intel_niosv_g_0:instruction_manager_awburst -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_awburst
	wire   [7:0] intel_niosv_g_0_instruction_manager_arlen;                      // intel_niosv_g_0:instruction_manager_arlen -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_arlen
	wire   [3:0] intel_niosv_g_0_instruction_manager_wstrb;                      // intel_niosv_g_0:instruction_manager_wstrb -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_wstrb
	wire         intel_niosv_g_0_instruction_manager_wready;                     // mm_interconnect_0:intel_niosv_g_0_instruction_manager_wready -> intel_niosv_g_0:instruction_manager_wready
	wire         intel_niosv_g_0_instruction_manager_rready;                     // intel_niosv_g_0:instruction_manager_rready -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_rready
	wire   [7:0] intel_niosv_g_0_instruction_manager_awlen;                      // intel_niosv_g_0:instruction_manager_awlen -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_awlen
	wire         intel_niosv_g_0_instruction_manager_wvalid;                     // intel_niosv_g_0:instruction_manager_wvalid -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_wvalid
	wire  [31:0] intel_niosv_g_0_instruction_manager_araddr;                     // intel_niosv_g_0:instruction_manager_araddr -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_araddr
	wire   [2:0] intel_niosv_g_0_instruction_manager_arprot;                     // intel_niosv_g_0:instruction_manager_arprot -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_arprot
	wire   [2:0] intel_niosv_g_0_instruction_manager_awprot;                     // intel_niosv_g_0:instruction_manager_awprot -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_awprot
	wire  [31:0] intel_niosv_g_0_instruction_manager_wdata;                      // intel_niosv_g_0:instruction_manager_wdata -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_wdata
	wire         intel_niosv_g_0_instruction_manager_arvalid;                    // intel_niosv_g_0:instruction_manager_arvalid -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_arvalid
	wire  [31:0] intel_niosv_g_0_instruction_manager_awaddr;                     // intel_niosv_g_0:instruction_manager_awaddr -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_awaddr
	wire   [1:0] intel_niosv_g_0_instruction_manager_bresp;                      // mm_interconnect_0:intel_niosv_g_0_instruction_manager_bresp -> intel_niosv_g_0:instruction_manager_bresp
	wire         intel_niosv_g_0_instruction_manager_arready;                    // mm_interconnect_0:intel_niosv_g_0_instruction_manager_arready -> intel_niosv_g_0:instruction_manager_arready
	wire  [31:0] intel_niosv_g_0_instruction_manager_rdata;                      // mm_interconnect_0:intel_niosv_g_0_instruction_manager_rdata -> intel_niosv_g_0:instruction_manager_rdata
	wire         intel_niosv_g_0_instruction_manager_awready;                    // mm_interconnect_0:intel_niosv_g_0_instruction_manager_awready -> intel_niosv_g_0:instruction_manager_awready
	wire   [1:0] intel_niosv_g_0_instruction_manager_arburst;                    // intel_niosv_g_0:instruction_manager_arburst -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_arburst
	wire   [2:0] intel_niosv_g_0_instruction_manager_arsize;                     // intel_niosv_g_0:instruction_manager_arsize -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_arsize
	wire         intel_niosv_g_0_instruction_manager_bready;                     // intel_niosv_g_0:instruction_manager_bready -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_bready
	wire         intel_niosv_g_0_instruction_manager_wlast;                      // intel_niosv_g_0:instruction_manager_wlast -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_wlast
	wire   [1:0] intel_niosv_g_0_instruction_manager_rresp;                      // mm_interconnect_0:intel_niosv_g_0_instruction_manager_rresp -> intel_niosv_g_0:instruction_manager_rresp
	wire         intel_niosv_g_0_instruction_manager_bvalid;                     // mm_interconnect_0:intel_niosv_g_0_instruction_manager_bvalid -> intel_niosv_g_0:instruction_manager_bvalid
	wire   [2:0] intel_niosv_g_0_instruction_manager_awsize;                     // intel_niosv_g_0:instruction_manager_awsize -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_awsize
	wire         intel_niosv_g_0_instruction_manager_awvalid;                    // intel_niosv_g_0:instruction_manager_awvalid -> mm_interconnect_0:intel_niosv_g_0_instruction_manager_awvalid
	wire         intel_niosv_g_0_instruction_manager_rvalid;                     // mm_interconnect_0:intel_niosv_g_0_instruction_manager_rvalid -> intel_niosv_g_0:instruction_manager_rvalid
	wire         mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_chipselect; // mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_chipselect -> niosv_dbg_uart:chipselect
	wire  [31:0] mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_readdata;   // niosv_dbg_uart:readdata -> mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_readdata
	wire   [0:0] mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_address;    // mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_address -> niosv_dbg_uart:address
	wire         mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_read;       // mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_read -> niosv_dbg_uart:read
	wire   [3:0] mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_byteenable; // mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_byteenable -> niosv_dbg_uart:byteenable
	wire         mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_write;      // mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_write -> niosv_dbg_uart:write
	wire  [31:0] mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_writedata;  // mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_writedata -> niosv_dbg_uart:writedata
	wire  [31:0] mm_interconnect_0_hdmi_i2c_csr_readdata;                        // hdmi_i2c:readdata -> mm_interconnect_0:hdmi_i2c_csr_readdata
	wire   [3:0] mm_interconnect_0_hdmi_i2c_csr_address;                         // mm_interconnect_0:hdmi_i2c_csr_address -> hdmi_i2c:addr
	wire         mm_interconnect_0_hdmi_i2c_csr_read;                            // mm_interconnect_0:hdmi_i2c_csr_read -> hdmi_i2c:read
	wire         mm_interconnect_0_hdmi_i2c_csr_write;                           // mm_interconnect_0:hdmi_i2c_csr_write -> hdmi_i2c:write
	wire  [31:0] mm_interconnect_0_hdmi_i2c_csr_writedata;                       // mm_interconnect_0:hdmi_i2c_csr_writedata -> hdmi_i2c:writedata
	wire   [1:0] mm_interconnect_0_axi_bridge_0_s0_awburst;                      // mm_interconnect_0:axi_bridge_0_s0_awburst -> axi_bridge_0:s0_awburst
	wire   [7:0] mm_interconnect_0_axi_bridge_0_s0_arlen;                        // mm_interconnect_0:axi_bridge_0_s0_arlen -> axi_bridge_0:s0_arlen
	wire   [3:0] mm_interconnect_0_axi_bridge_0_s0_wstrb;                        // mm_interconnect_0:axi_bridge_0_s0_wstrb -> axi_bridge_0:s0_wstrb
	wire         mm_interconnect_0_axi_bridge_0_s0_wready;                       // axi_bridge_0:s0_wready -> mm_interconnect_0:axi_bridge_0_s0_wready
	wire   [4:0] mm_interconnect_0_axi_bridge_0_s0_rid;                          // axi_bridge_0:s0_rid -> mm_interconnect_0:axi_bridge_0_s0_rid
	wire         mm_interconnect_0_axi_bridge_0_s0_rready;                       // mm_interconnect_0:axi_bridge_0_s0_rready -> axi_bridge_0:s0_rready
	wire   [7:0] mm_interconnect_0_axi_bridge_0_s0_awlen;                        // mm_interconnect_0:axi_bridge_0_s0_awlen -> axi_bridge_0:s0_awlen
	wire   [3:0] mm_interconnect_0_axi_bridge_0_s0_arcache;                      // mm_interconnect_0:axi_bridge_0_s0_arcache -> axi_bridge_0:s0_arcache
	wire         mm_interconnect_0_axi_bridge_0_s0_wvalid;                       // mm_interconnect_0:axi_bridge_0_s0_wvalid -> axi_bridge_0:s0_wvalid
	wire  [30:0] mm_interconnect_0_axi_bridge_0_s0_araddr;                       // mm_interconnect_0:axi_bridge_0_s0_araddr -> axi_bridge_0:s0_araddr
	wire   [2:0] mm_interconnect_0_axi_bridge_0_s0_arprot;                       // mm_interconnect_0:axi_bridge_0_s0_arprot -> axi_bridge_0:s0_arprot
	wire   [2:0] mm_interconnect_0_axi_bridge_0_s0_awprot;                       // mm_interconnect_0:axi_bridge_0_s0_awprot -> axi_bridge_0:s0_awprot
	wire  [31:0] mm_interconnect_0_axi_bridge_0_s0_wdata;                        // mm_interconnect_0:axi_bridge_0_s0_wdata -> axi_bridge_0:s0_wdata
	wire         mm_interconnect_0_axi_bridge_0_s0_arvalid;                      // mm_interconnect_0:axi_bridge_0_s0_arvalid -> axi_bridge_0:s0_arvalid
	wire   [3:0] mm_interconnect_0_axi_bridge_0_s0_awcache;                      // mm_interconnect_0:axi_bridge_0_s0_awcache -> axi_bridge_0:s0_awcache
	wire   [4:0] mm_interconnect_0_axi_bridge_0_s0_arid;                         // mm_interconnect_0:axi_bridge_0_s0_arid -> axi_bridge_0:s0_arid
	wire   [0:0] mm_interconnect_0_axi_bridge_0_s0_arlock;                       // mm_interconnect_0:axi_bridge_0_s0_arlock -> axi_bridge_0:s0_arlock
	wire   [0:0] mm_interconnect_0_axi_bridge_0_s0_awlock;                       // mm_interconnect_0:axi_bridge_0_s0_awlock -> axi_bridge_0:s0_awlock
	wire  [30:0] mm_interconnect_0_axi_bridge_0_s0_awaddr;                       // mm_interconnect_0:axi_bridge_0_s0_awaddr -> axi_bridge_0:s0_awaddr
	wire   [1:0] mm_interconnect_0_axi_bridge_0_s0_bresp;                        // axi_bridge_0:s0_bresp -> mm_interconnect_0:axi_bridge_0_s0_bresp
	wire         mm_interconnect_0_axi_bridge_0_s0_arready;                      // axi_bridge_0:s0_arready -> mm_interconnect_0:axi_bridge_0_s0_arready
	wire  [31:0] mm_interconnect_0_axi_bridge_0_s0_rdata;                        // axi_bridge_0:s0_rdata -> mm_interconnect_0:axi_bridge_0_s0_rdata
	wire         mm_interconnect_0_axi_bridge_0_s0_awready;                      // axi_bridge_0:s0_awready -> mm_interconnect_0:axi_bridge_0_s0_awready
	wire   [1:0] mm_interconnect_0_axi_bridge_0_s0_arburst;                      // mm_interconnect_0:axi_bridge_0_s0_arburst -> axi_bridge_0:s0_arburst
	wire   [2:0] mm_interconnect_0_axi_bridge_0_s0_arsize;                       // mm_interconnect_0:axi_bridge_0_s0_arsize -> axi_bridge_0:s0_arsize
	wire         mm_interconnect_0_axi_bridge_0_s0_bready;                       // mm_interconnect_0:axi_bridge_0_s0_bready -> axi_bridge_0:s0_bready
	wire         mm_interconnect_0_axi_bridge_0_s0_rlast;                        // axi_bridge_0:s0_rlast -> mm_interconnect_0:axi_bridge_0_s0_rlast
	wire         mm_interconnect_0_axi_bridge_0_s0_wlast;                        // mm_interconnect_0:axi_bridge_0_s0_wlast -> axi_bridge_0:s0_wlast
	wire   [1:0] mm_interconnect_0_axi_bridge_0_s0_rresp;                        // axi_bridge_0:s0_rresp -> mm_interconnect_0:axi_bridge_0_s0_rresp
	wire   [4:0] mm_interconnect_0_axi_bridge_0_s0_awid;                         // mm_interconnect_0:axi_bridge_0_s0_awid -> axi_bridge_0:s0_awid
	wire   [4:0] mm_interconnect_0_axi_bridge_0_s0_bid;                          // axi_bridge_0:s0_bid -> mm_interconnect_0:axi_bridge_0_s0_bid
	wire         mm_interconnect_0_axi_bridge_0_s0_bvalid;                       // axi_bridge_0:s0_bvalid -> mm_interconnect_0:axi_bridge_0_s0_bvalid
	wire   [2:0] mm_interconnect_0_axi_bridge_0_s0_awsize;                       // mm_interconnect_0:axi_bridge_0_s0_awsize -> axi_bridge_0:s0_awsize
	wire         mm_interconnect_0_axi_bridge_0_s0_awvalid;                      // mm_interconnect_0:axi_bridge_0_s0_awvalid -> axi_bridge_0:s0_awvalid
	wire         mm_interconnect_0_axi_bridge_0_s0_rvalid;                       // axi_bridge_0:s0_rvalid -> mm_interconnect_0:axi_bridge_0_s0_rvalid
	wire  [31:0] mm_interconnect_0_intel_onchip_memory_0_s1_readdata;            // intel_onchip_memory_0:readdata -> mm_interconnect_0:intel_onchip_memory_0_s1_readdata
	wire  [13:0] mm_interconnect_0_intel_onchip_memory_0_s1_address;             // mm_interconnect_0:intel_onchip_memory_0_s1_address -> intel_onchip_memory_0:address
	wire         mm_interconnect_0_intel_onchip_memory_0_s1_read;                // mm_interconnect_0:intel_onchip_memory_0_s1_read -> intel_onchip_memory_0:read
	wire   [3:0] mm_interconnect_0_intel_onchip_memory_0_s1_byteenable;          // mm_interconnect_0:intel_onchip_memory_0_s1_byteenable -> intel_onchip_memory_0:byteenable
	wire         mm_interconnect_0_intel_onchip_memory_0_s1_write;               // mm_interconnect_0:intel_onchip_memory_0_s1_write -> intel_onchip_memory_0:write
	wire  [31:0] mm_interconnect_0_intel_onchip_memory_0_s1_writedata;           // mm_interconnect_0:intel_onchip_memory_0_s1_writedata -> intel_onchip_memory_0:writedata
	wire         mm_interconnect_0_rgb_led0_s1_chipselect;                       // mm_interconnect_0:rgb_led0_s1_chipselect -> rgb_led0:chipselect
	wire  [31:0] mm_interconnect_0_rgb_led0_s1_readdata;                         // rgb_led0:readdata -> mm_interconnect_0:rgb_led0_s1_readdata
	wire   [1:0] mm_interconnect_0_rgb_led0_s1_address;                          // mm_interconnect_0:rgb_led0_s1_address -> rgb_led0:address
	wire         mm_interconnect_0_rgb_led0_s1_write;                            // mm_interconnect_0:rgb_led0_s1_write -> rgb_led0:write_n
	wire  [31:0] mm_interconnect_0_rgb_led0_s1_writedata;                        // mm_interconnect_0:rgb_led0_s1_writedata -> rgb_led0:writedata
	wire         mm_interconnect_0_rgb_led1_s1_chipselect;                       // mm_interconnect_0:rgb_led1_s1_chipselect -> rgb_led1:chipselect
	wire  [31:0] mm_interconnect_0_rgb_led1_s1_readdata;                         // rgb_led1:readdata -> mm_interconnect_0:rgb_led1_s1_readdata
	wire   [1:0] mm_interconnect_0_rgb_led1_s1_address;                          // mm_interconnect_0:rgb_led1_s1_address -> rgb_led1:address
	wire         mm_interconnect_0_rgb_led1_s1_write;                            // mm_interconnect_0:rgb_led1_s1_write -> rgb_led1:write_n
	wire  [31:0] mm_interconnect_0_rgb_led1_s1_writedata;                        // mm_interconnect_0:rgb_led1_s1_writedata -> rgb_led1:writedata
	wire         mm_interconnect_0_rgb_led2_s1_chipselect;                       // mm_interconnect_0:rgb_led2_s1_chipselect -> rgb_led2:chipselect
	wire  [31:0] mm_interconnect_0_rgb_led2_s1_readdata;                         // rgb_led2:readdata -> mm_interconnect_0:rgb_led2_s1_readdata
	wire   [1:0] mm_interconnect_0_rgb_led2_s1_address;                          // mm_interconnect_0:rgb_led2_s1_address -> rgb_led2:address
	wire         mm_interconnect_0_rgb_led2_s1_write;                            // mm_interconnect_0:rgb_led2_s1_write -> rgb_led2:write_n
	wire  [31:0] mm_interconnect_0_rgb_led2_s1_writedata;                        // mm_interconnect_0:rgb_led2_s1_writedata -> rgb_led2:writedata
	wire         mm_interconnect_0_rgb_led3_s1_chipselect;                       // mm_interconnect_0:rgb_led3_s1_chipselect -> rgb_led3:chipselect
	wire  [31:0] mm_interconnect_0_rgb_led3_s1_readdata;                         // rgb_led3:readdata -> mm_interconnect_0:rgb_led3_s1_readdata
	wire   [1:0] mm_interconnect_0_rgb_led3_s1_address;                          // mm_interconnect_0:rgb_led3_s1_address -> rgb_led3:address
	wire         mm_interconnect_0_rgb_led3_s1_write;                            // mm_interconnect_0:rgb_led3_s1_write -> rgb_led3:write_n
	wire  [31:0] mm_interconnect_0_rgb_led3_s1_writedata;                        // mm_interconnect_0:rgb_led3_s1_writedata -> rgb_led3:writedata
	wire         mm_interconnect_0_fpga_pb_s1_chipselect;                        // mm_interconnect_0:fpga_pb_s1_chipselect -> fpga_pb:chipselect
	wire  [31:0] mm_interconnect_0_fpga_pb_s1_readdata;                          // fpga_pb:readdata -> mm_interconnect_0:fpga_pb_s1_readdata
	wire   [1:0] mm_interconnect_0_fpga_pb_s1_address;                           // mm_interconnect_0:fpga_pb_s1_address -> fpga_pb:address
	wire         mm_interconnect_0_fpga_pb_s1_write;                             // mm_interconnect_0:fpga_pb_s1_write -> fpga_pb:write_n
	wire  [31:0] mm_interconnect_0_fpga_pb_s1_writedata;                         // mm_interconnect_0:fpga_pb_s1_writedata -> fpga_pb:writedata
	wire         mm_interconnect_0_fpga_dipsw_s1_chipselect;                     // mm_interconnect_0:fpga_dipsw_s1_chipselect -> fpga_dipsw:chipselect
	wire  [31:0] mm_interconnect_0_fpga_dipsw_s1_readdata;                       // fpga_dipsw:readdata -> mm_interconnect_0:fpga_dipsw_s1_readdata
	wire   [1:0] mm_interconnect_0_fpga_dipsw_s1_address;                        // mm_interconnect_0:fpga_dipsw_s1_address -> fpga_dipsw:address
	wire         mm_interconnect_0_fpga_dipsw_s1_write;                          // mm_interconnect_0:fpga_dipsw_s1_write -> fpga_dipsw:write_n
	wire  [31:0] mm_interconnect_0_fpga_dipsw_s1_writedata;                      // mm_interconnect_0:fpga_dipsw_s1_writedata -> fpga_dipsw:writedata
	wire         mm_interconnect_0_cruvi_ls_0_s1_chipselect;                     // mm_interconnect_0:cruvi_ls_0_s1_chipselect -> cruvi_ls_0:chipselect
	wire  [31:0] mm_interconnect_0_cruvi_ls_0_s1_readdata;                       // cruvi_ls_0:readdata -> mm_interconnect_0:cruvi_ls_0_s1_readdata
	wire   [1:0] mm_interconnect_0_cruvi_ls_0_s1_address;                        // mm_interconnect_0:cruvi_ls_0_s1_address -> cruvi_ls_0:address
	wire         mm_interconnect_0_cruvi_ls_0_s1_write;                          // mm_interconnect_0:cruvi_ls_0_s1_write -> cruvi_ls_0:write_n
	wire  [31:0] mm_interconnect_0_cruvi_ls_0_s1_writedata;                      // mm_interconnect_0:cruvi_ls_0_s1_writedata -> cruvi_ls_0:writedata
	wire         mm_interconnect_0_cruvi_ls_1_s1_chipselect;                     // mm_interconnect_0:cruvi_ls_1_s1_chipselect -> cruvi_ls_1:chipselect
	wire  [31:0] mm_interconnect_0_cruvi_ls_1_s1_readdata;                       // cruvi_ls_1:readdata -> mm_interconnect_0:cruvi_ls_1_s1_readdata
	wire   [1:0] mm_interconnect_0_cruvi_ls_1_s1_address;                        // mm_interconnect_0:cruvi_ls_1_s1_address -> cruvi_ls_1:address
	wire         mm_interconnect_0_cruvi_ls_1_s1_write;                          // mm_interconnect_0:cruvi_ls_1_s1_write -> cruvi_ls_1:write_n
	wire  [31:0] mm_interconnect_0_cruvi_ls_1_s1_writedata;                      // mm_interconnect_0:cruvi_ls_1_s1_writedata -> cruvi_ls_1:writedata
	wire  [31:0] mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_readdata;      // intel_niosv_g_0:timer_sw_agent_readdata -> mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_readdata
	wire         mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_waitrequest;   // intel_niosv_g_0:timer_sw_agent_waitrequest -> mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_waitrequest
	wire   [5:0] mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_address;       // mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_address -> intel_niosv_g_0:timer_sw_agent_address
	wire         mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_read;          // mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_read -> intel_niosv_g_0:timer_sw_agent_read
	wire   [3:0] mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_byteenable;    // mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_byteenable -> intel_niosv_g_0:timer_sw_agent_byteenable
	wire         mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_readdatavalid; // intel_niosv_g_0:timer_sw_agent_readdatavalid -> mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_readdatavalid
	wire         mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_write;         // mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_write -> intel_niosv_g_0:timer_sw_agent_write
	wire  [31:0] mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_writedata;     // mm_interconnect_0:intel_niosv_g_0_timer_sw_agent_writedata -> intel_niosv_g_0:timer_sw_agent_writedata
	wire         irq_mapper_receiver0_irq;                                       // fpga_pb:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                       // fpga_dipsw:irq -> irq_mapper:receiver1_irq
	wire  [15:0] intel_niosv_g_0_platform_irq_rx_irq;                            // irq_mapper:sender_irq -> intel_niosv_g_0:platform_irq_rx_irq
	wire         rst_controller_reset_out_reset;                                 // rst_controller:reset_out -> [axi_bridge_0:aresetn, cruvi_ls_0:reset_n, cruvi_ls_1:reset_n, fpga_dipsw:reset_n, fpga_pb:reset_n, hdmi_i2c:rst_n, intel_niosv_g_0:reset_reset, intel_onchip_memory_0:reset, irq_mapper:reset, rgb_led0:reset_n, rgb_led1:reset_n, rgb_led2:reset_n, rgb_led3:reset_n, rst_translator:in_reset]
	wire         rst_controller_reset_out_reset_req;                             // rst_controller:reset_req -> [intel_onchip_memory_0:reset_req, rst_translator:reset_req_in]
	wire         niosv_jtag_master_master_reset_reset;                           // niosv_jtag_master:master_reset_reset -> [rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_002:reset_in0]
	wire         rst_controller_001_reset_out_reset;                             // rst_controller_001:reset_out -> niosv_jtag_master:clk_reset_reset
	wire         rst_controller_002_reset_out_reset;                             // rst_controller_002:reset_out -> [mm_interconnect_0:intel_niosv_g_0_data_manager_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:intel_niosv_g_0_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_003_reset_out_reset;                             // rst_controller_003:reset_out -> [mm_interconnect_0:niosv_dbg_uart_avalon_rs232_slave_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_0:niosv_dbg_uart_reset_reset_bridge_in_reset_reset]

	niosv_sys_axi_bridge_0 axi_bridge_0 (
		.aclk       (clock_in_out_clk_clk),                      //   input,   width = 1,       clk.clk
		.aresetn    (~rst_controller_reset_out_reset),           //   input,   width = 1, clk_reset.reset_n
		.s0_awid    (mm_interconnect_0_axi_bridge_0_s0_awid),    //   input,   width = 5,        s0.awid
		.s0_awaddr  (mm_interconnect_0_axi_bridge_0_s0_awaddr),  //   input,  width = 31,          .awaddr
		.s0_awlen   (mm_interconnect_0_axi_bridge_0_s0_awlen),   //   input,   width = 8,          .awlen
		.s0_awsize  (mm_interconnect_0_axi_bridge_0_s0_awsize),  //   input,   width = 3,          .awsize
		.s0_awburst (mm_interconnect_0_axi_bridge_0_s0_awburst), //   input,   width = 2,          .awburst
		.s0_awlock  (mm_interconnect_0_axi_bridge_0_s0_awlock),  //   input,   width = 1,          .awlock
		.s0_awcache (mm_interconnect_0_axi_bridge_0_s0_awcache), //   input,   width = 4,          .awcache
		.s0_awprot  (mm_interconnect_0_axi_bridge_0_s0_awprot),  //   input,   width = 3,          .awprot
		.s0_awvalid (mm_interconnect_0_axi_bridge_0_s0_awvalid), //   input,   width = 1,          .awvalid
		.s0_awready (mm_interconnect_0_axi_bridge_0_s0_awready), //  output,   width = 1,          .awready
		.s0_wdata   (mm_interconnect_0_axi_bridge_0_s0_wdata),   //   input,  width = 32,          .wdata
		.s0_wstrb   (mm_interconnect_0_axi_bridge_0_s0_wstrb),   //   input,   width = 4,          .wstrb
		.s0_wlast   (mm_interconnect_0_axi_bridge_0_s0_wlast),   //   input,   width = 1,          .wlast
		.s0_wvalid  (mm_interconnect_0_axi_bridge_0_s0_wvalid),  //   input,   width = 1,          .wvalid
		.s0_wready  (mm_interconnect_0_axi_bridge_0_s0_wready),  //  output,   width = 1,          .wready
		.s0_bid     (mm_interconnect_0_axi_bridge_0_s0_bid),     //  output,   width = 5,          .bid
		.s0_bresp   (mm_interconnect_0_axi_bridge_0_s0_bresp),   //  output,   width = 2,          .bresp
		.s0_bvalid  (mm_interconnect_0_axi_bridge_0_s0_bvalid),  //  output,   width = 1,          .bvalid
		.s0_bready  (mm_interconnect_0_axi_bridge_0_s0_bready),  //   input,   width = 1,          .bready
		.s0_arid    (mm_interconnect_0_axi_bridge_0_s0_arid),    //   input,   width = 5,          .arid
		.s0_araddr  (mm_interconnect_0_axi_bridge_0_s0_araddr),  //   input,  width = 31,          .araddr
		.s0_arlen   (mm_interconnect_0_axi_bridge_0_s0_arlen),   //   input,   width = 8,          .arlen
		.s0_arsize  (mm_interconnect_0_axi_bridge_0_s0_arsize),  //   input,   width = 3,          .arsize
		.s0_arburst (mm_interconnect_0_axi_bridge_0_s0_arburst), //   input,   width = 2,          .arburst
		.s0_arlock  (mm_interconnect_0_axi_bridge_0_s0_arlock),  //   input,   width = 1,          .arlock
		.s0_arcache (mm_interconnect_0_axi_bridge_0_s0_arcache), //   input,   width = 4,          .arcache
		.s0_arprot  (mm_interconnect_0_axi_bridge_0_s0_arprot),  //   input,   width = 3,          .arprot
		.s0_arvalid (mm_interconnect_0_axi_bridge_0_s0_arvalid), //   input,   width = 1,          .arvalid
		.s0_arready (mm_interconnect_0_axi_bridge_0_s0_arready), //  output,   width = 1,          .arready
		.s0_rid     (mm_interconnect_0_axi_bridge_0_s0_rid),     //  output,   width = 5,          .rid
		.s0_rdata   (mm_interconnect_0_axi_bridge_0_s0_rdata),   //  output,  width = 32,          .rdata
		.s0_rresp   (mm_interconnect_0_axi_bridge_0_s0_rresp),   //  output,   width = 2,          .rresp
		.s0_rlast   (mm_interconnect_0_axi_bridge_0_s0_rlast),   //  output,   width = 1,          .rlast
		.s0_rvalid  (mm_interconnect_0_axi_bridge_0_s0_rvalid),  //  output,   width = 1,          .rvalid
		.s0_rready  (mm_interconnect_0_axi_bridge_0_s0_rready),  //   input,   width = 1,          .rready
		.m0_awid    (axi_bridge_m0_awid),                        //  output,   width = 5,        m0.awid
		.m0_awaddr  (axi_bridge_m0_awaddr),                      //  output,  width = 31,          .awaddr
		.m0_awlen   (axi_bridge_m0_awlen),                       //  output,   width = 8,          .awlen
		.m0_awsize  (axi_bridge_m0_awsize),                      //  output,   width = 3,          .awsize
		.m0_awburst (axi_bridge_m0_awburst),                     //  output,   width = 2,          .awburst
		.m0_awlock  (axi_bridge_m0_awlock),                      //  output,   width = 1,          .awlock
		.m0_awcache (axi_bridge_m0_awcache),                     //  output,   width = 4,          .awcache
		.m0_awprot  (axi_bridge_m0_awprot),                      //  output,   width = 3,          .awprot
		.m0_awvalid (axi_bridge_m0_awvalid),                     //  output,   width = 1,          .awvalid
		.m0_awready (axi_bridge_m0_awready),                     //   input,   width = 1,          .awready
		.m0_wdata   (axi_bridge_m0_wdata),                       //  output,  width = 32,          .wdata
		.m0_wstrb   (axi_bridge_m0_wstrb),                       //  output,   width = 4,          .wstrb
		.m0_wlast   (axi_bridge_m0_wlast),                       //  output,   width = 1,          .wlast
		.m0_wvalid  (axi_bridge_m0_wvalid),                      //  output,   width = 1,          .wvalid
		.m0_wready  (axi_bridge_m0_wready),                      //   input,   width = 1,          .wready
		.m0_bid     (axi_bridge_m0_bid),                         //   input,   width = 5,          .bid
		.m0_bresp   (axi_bridge_m0_bresp),                       //   input,   width = 2,          .bresp
		.m0_bvalid  (axi_bridge_m0_bvalid),                      //   input,   width = 1,          .bvalid
		.m0_bready  (axi_bridge_m0_bready),                      //  output,   width = 1,          .bready
		.m0_arid    (axi_bridge_m0_arid),                        //  output,   width = 5,          .arid
		.m0_araddr  (axi_bridge_m0_araddr),                      //  output,  width = 31,          .araddr
		.m0_arlen   (axi_bridge_m0_arlen),                       //  output,   width = 8,          .arlen
		.m0_arsize  (axi_bridge_m0_arsize),                      //  output,   width = 3,          .arsize
		.m0_arburst (axi_bridge_m0_arburst),                     //  output,   width = 2,          .arburst
		.m0_arlock  (axi_bridge_m0_arlock),                      //  output,   width = 1,          .arlock
		.m0_arcache (axi_bridge_m0_arcache),                     //  output,   width = 4,          .arcache
		.m0_arprot  (axi_bridge_m0_arprot),                      //  output,   width = 3,          .arprot
		.m0_arvalid (axi_bridge_m0_arvalid),                     //  output,   width = 1,          .arvalid
		.m0_arready (axi_bridge_m0_arready),                     //   input,   width = 1,          .arready
		.m0_rid     (axi_bridge_m0_rid),                         //   input,   width = 5,          .rid
		.m0_rdata   (axi_bridge_m0_rdata),                       //   input,  width = 32,          .rdata
		.m0_rresp   (axi_bridge_m0_rresp),                       //   input,   width = 2,          .rresp
		.m0_rlast   (axi_bridge_m0_rlast),                       //   input,   width = 1,          .rlast
		.m0_rvalid  (axi_bridge_m0_rvalid),                      //   input,   width = 1,          .rvalid
		.m0_rready  (axi_bridge_m0_rready)                       //  output,   width = 1,          .rready
	);

	niosv_sys_clock_in clock_in (
		.in_clk  (clk_100m_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	niosv_sys_pio_3 cruvi_ls_0 (
		.clk        (clock_in_out_clk_clk),                       //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_cruvi_ls_0_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_cruvi_ls_0_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_cruvi_ls_0_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_cruvi_ls_0_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_cruvi_ls_0_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (cruvi_ls_0_in_port),                         //   input,   width = 8, external_connection.in_port
		.out_port   (cruvi_ls_0_out_port)                         //  output,   width = 8,                    .out_port
	);

	niosv_sys_pio_4 cruvi_ls_1 (
		.clk        (clock_in_out_clk_clk),                       //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_cruvi_ls_1_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_cruvi_ls_1_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_cruvi_ls_1_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_cruvi_ls_1_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_cruvi_ls_1_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (cruvi_ls_1_in_port),                         //   input,   width = 8, external_connection.in_port
		.out_port   (cruvi_ls_1_out_port)                         //  output,   width = 8,                    .out_port
	);

	niosv_sys_pio_2 fpga_dipsw (
		.clk        (clock_in_out_clk_clk),                       //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_fpga_dipsw_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_fpga_dipsw_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_fpga_dipsw_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_fpga_dipsw_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_fpga_dipsw_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (fpga_dipsw_export),                          //   input,   width = 2, external_connection.export
		.irq        (irq_mapper_receiver1_irq)                    //  output,   width = 1,                 irq.irq
	);

	niosv_sys_pio_1 fpga_pb (
		.clk        (clock_in_out_clk_clk),                    //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_fpga_pb_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_fpga_pb_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_fpga_pb_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_fpga_pb_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_fpga_pb_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (fpga_pb_export),                          //   input,   width = 2, external_connection.export
		.irq        (irq_mapper_receiver0_irq)                 //  output,   width = 1,                 irq.irq
	);

	niosv_sys_i2c_0 hdmi_i2c (
		.clk       (clock_in_out_clk_clk),                     //   input,   width = 1,            clock.clk
		.rst_n     (~rst_controller_reset_out_reset),          //   input,   width = 1,       reset_sink.reset_n
		.intr      (),                                         //  output,   width = 1, interrupt_sender.irq
		.addr      (mm_interconnect_0_hdmi_i2c_csr_address),   //   input,   width = 4,              csr.address
		.read      (mm_interconnect_0_hdmi_i2c_csr_read),      //   input,   width = 1,                 .read
		.write     (mm_interconnect_0_hdmi_i2c_csr_write),     //   input,   width = 1,                 .write
		.writedata (mm_interconnect_0_hdmi_i2c_csr_writedata), //   input,  width = 32,                 .writedata
		.readdata  (mm_interconnect_0_hdmi_i2c_csr_readdata),  //  output,  width = 32,                 .readdata
		.sda_in    (hdmi_i2c_sda_in),                          //   input,   width = 1,       i2c_serial.sda_in
		.scl_in    (hdmi_i2c_scl_in),                          //   input,   width = 1,                 .scl_in
		.sda_oe    (hdmi_i2c_sda_oe),                          //  output,   width = 1,                 .sda_oe
		.scl_oe    (hdmi_i2c_scl_oe)                           //  output,   width = 1,                 .scl_oe
	);

	niosv_sys_intel_niosv_g_0 intel_niosv_g_0 (
		.clk                          (clock_in_out_clk_clk),                                           //   input,   width = 1,                 clk.clk
		.reset_reset                  (rst_controller_reset_out_reset),                                 //   input,   width = 1,               reset.reset
		.platform_irq_rx_irq          (intel_niosv_g_0_platform_irq_rx_irq),                            //   input,  width = 16,     platform_irq_rx.irq
		.instruction_manager_awaddr   (intel_niosv_g_0_instruction_manager_awaddr),                     //  output,  width = 32, instruction_manager.awaddr
		.instruction_manager_awsize   (intel_niosv_g_0_instruction_manager_awsize),                     //  output,   width = 3,                    .awsize
		.instruction_manager_awlen    (intel_niosv_g_0_instruction_manager_awlen),                      //  output,   width = 8,                    .awlen
		.instruction_manager_awprot   (intel_niosv_g_0_instruction_manager_awprot),                     //  output,   width = 3,                    .awprot
		.instruction_manager_awvalid  (intel_niosv_g_0_instruction_manager_awvalid),                    //  output,   width = 1,                    .awvalid
		.instruction_manager_awburst  (intel_niosv_g_0_instruction_manager_awburst),                    //  output,   width = 2,                    .awburst
		.instruction_manager_awready  (intel_niosv_g_0_instruction_manager_awready),                    //   input,   width = 1,                    .awready
		.instruction_manager_wdata    (intel_niosv_g_0_instruction_manager_wdata),                      //  output,  width = 32,                    .wdata
		.instruction_manager_wstrb    (intel_niosv_g_0_instruction_manager_wstrb),                      //  output,   width = 4,                    .wstrb
		.instruction_manager_wlast    (intel_niosv_g_0_instruction_manager_wlast),                      //  output,   width = 1,                    .wlast
		.instruction_manager_wvalid   (intel_niosv_g_0_instruction_manager_wvalid),                     //  output,   width = 1,                    .wvalid
		.instruction_manager_wready   (intel_niosv_g_0_instruction_manager_wready),                     //   input,   width = 1,                    .wready
		.instruction_manager_bresp    (intel_niosv_g_0_instruction_manager_bresp),                      //   input,   width = 2,                    .bresp
		.instruction_manager_bvalid   (intel_niosv_g_0_instruction_manager_bvalid),                     //   input,   width = 1,                    .bvalid
		.instruction_manager_bready   (intel_niosv_g_0_instruction_manager_bready),                     //  output,   width = 1,                    .bready
		.instruction_manager_araddr   (intel_niosv_g_0_instruction_manager_araddr),                     //  output,  width = 32,                    .araddr
		.instruction_manager_arsize   (intel_niosv_g_0_instruction_manager_arsize),                     //  output,   width = 3,                    .arsize
		.instruction_manager_arlen    (intel_niosv_g_0_instruction_manager_arlen),                      //  output,   width = 8,                    .arlen
		.instruction_manager_arprot   (intel_niosv_g_0_instruction_manager_arprot),                     //  output,   width = 3,                    .arprot
		.instruction_manager_arvalid  (intel_niosv_g_0_instruction_manager_arvalid),                    //  output,   width = 1,                    .arvalid
		.instruction_manager_arburst  (intel_niosv_g_0_instruction_manager_arburst),                    //  output,   width = 2,                    .arburst
		.instruction_manager_arready  (intel_niosv_g_0_instruction_manager_arready),                    //   input,   width = 1,                    .arready
		.instruction_manager_rdata    (intel_niosv_g_0_instruction_manager_rdata),                      //   input,  width = 32,                    .rdata
		.instruction_manager_rresp    (intel_niosv_g_0_instruction_manager_rresp),                      //   input,   width = 2,                    .rresp
		.instruction_manager_rvalid   (intel_niosv_g_0_instruction_manager_rvalid),                     //   input,   width = 1,                    .rvalid
		.instruction_manager_rready   (intel_niosv_g_0_instruction_manager_rready),                     //  output,   width = 1,                    .rready
		.data_manager_awaddr          (intel_niosv_g_0_data_manager_awaddr),                            //  output,  width = 32,        data_manager.awaddr
		.data_manager_awsize          (intel_niosv_g_0_data_manager_awsize),                            //  output,   width = 3,                    .awsize
		.data_manager_awlen           (intel_niosv_g_0_data_manager_awlen),                             //  output,   width = 8,                    .awlen
		.data_manager_awprot          (intel_niosv_g_0_data_manager_awprot),                            //  output,   width = 3,                    .awprot
		.data_manager_awvalid         (intel_niosv_g_0_data_manager_awvalid),                           //  output,   width = 1,                    .awvalid
		.data_manager_awready         (intel_niosv_g_0_data_manager_awready),                           //   input,   width = 1,                    .awready
		.data_manager_wdata           (intel_niosv_g_0_data_manager_wdata),                             //  output,  width = 32,                    .wdata
		.data_manager_wstrb           (intel_niosv_g_0_data_manager_wstrb),                             //  output,   width = 4,                    .wstrb
		.data_manager_wlast           (intel_niosv_g_0_data_manager_wlast),                             //  output,   width = 1,                    .wlast
		.data_manager_wvalid          (intel_niosv_g_0_data_manager_wvalid),                            //  output,   width = 1,                    .wvalid
		.data_manager_wready          (intel_niosv_g_0_data_manager_wready),                            //   input,   width = 1,                    .wready
		.data_manager_bresp           (intel_niosv_g_0_data_manager_bresp),                             //   input,   width = 2,                    .bresp
		.data_manager_bvalid          (intel_niosv_g_0_data_manager_bvalid),                            //   input,   width = 1,                    .bvalid
		.data_manager_bready          (intel_niosv_g_0_data_manager_bready),                            //  output,   width = 1,                    .bready
		.data_manager_araddr          (intel_niosv_g_0_data_manager_araddr),                            //  output,  width = 32,                    .araddr
		.data_manager_arsize          (intel_niosv_g_0_data_manager_arsize),                            //  output,   width = 3,                    .arsize
		.data_manager_arlen           (intel_niosv_g_0_data_manager_arlen),                             //  output,   width = 8,                    .arlen
		.data_manager_arprot          (intel_niosv_g_0_data_manager_arprot),                            //  output,   width = 3,                    .arprot
		.data_manager_arvalid         (intel_niosv_g_0_data_manager_arvalid),                           //  output,   width = 1,                    .arvalid
		.data_manager_arready         (intel_niosv_g_0_data_manager_arready),                           //   input,   width = 1,                    .arready
		.data_manager_rdata           (intel_niosv_g_0_data_manager_rdata),                             //   input,  width = 32,                    .rdata
		.data_manager_rresp           (intel_niosv_g_0_data_manager_rresp),                             //   input,   width = 2,                    .rresp
		.data_manager_rvalid          (intel_niosv_g_0_data_manager_rvalid),                            //   input,   width = 1,                    .rvalid
		.data_manager_rlast           (intel_niosv_g_0_data_manager_rlast),                             //   input,   width = 1,                    .rlast
		.data_manager_rready          (intel_niosv_g_0_data_manager_rready),                            //  output,   width = 1,                    .rready
		.timer_sw_agent_write         (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_write),         //   input,   width = 1,      timer_sw_agent.write
		.timer_sw_agent_writedata     (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_writedata),     //   input,  width = 32,                    .writedata
		.timer_sw_agent_byteenable    (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_byteenable),    //   input,   width = 4,                    .byteenable
		.timer_sw_agent_address       (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_address),       //   input,   width = 6,                    .address
		.timer_sw_agent_read          (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_read),          //   input,   width = 1,                    .read
		.timer_sw_agent_readdata      (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_readdata),      //  output,  width = 32,                    .readdata
		.timer_sw_agent_readdatavalid (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_readdatavalid), //  output,   width = 1,                    .readdatavalid
		.timer_sw_agent_waitrequest   (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_waitrequest)    //  output,   width = 1,                    .waitrequest
	);

	niosv_sys_intel_onchip_memory_0 intel_onchip_memory_0 (
		.clk        (clock_in_out_clk_clk),                                  //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_0_intel_onchip_memory_0_s1_address),    //   input,  width = 14,     s1.address
		.read       (mm_interconnect_0_intel_onchip_memory_0_s1_read),       //   input,   width = 1,       .read
		.readdata   (mm_interconnect_0_intel_onchip_memory_0_s1_readdata),   //  output,  width = 32,       .readdata
		.byteenable (mm_interconnect_0_intel_onchip_memory_0_s1_byteenable), //   input,   width = 4,       .byteenable
		.write      (mm_interconnect_0_intel_onchip_memory_0_s1_write),      //   input,   width = 1,       .write
		.writedata  (mm_interconnect_0_intel_onchip_memory_0_s1_writedata),  //   input,  width = 32,       .writedata
		.reset      (rst_controller_reset_out_reset),                        //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)                     //   input,   width = 1,       .reset_req
	);

	niosv_sys_rs232_0 niosv_dbg_uart (
		.clk        (clock_in_out_clk_clk),                                           //   input,   width = 1,                clk.clk
		.reset      (reset_in_out_reset_reset),                                       //   input,   width = 1,              reset.reset
		.address    (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_address),    //   input,   width = 1, avalon_rs232_slave.address
		.chipselect (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_chipselect), //   input,   width = 1,                   .chipselect
		.byteenable (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_byteenable), //   input,   width = 4,                   .byteenable
		.read       (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_read),       //   input,   width = 1,                   .read
		.write      (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_write),      //   input,   width = 1,                   .write
		.writedata  (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_writedata),  //   input,  width = 32,                   .writedata
		.readdata   (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_readdata),   //  output,  width = 32,                   .readdata
		.irq        (),                                                               //  output,   width = 1,          interrupt.irq
		.UART_RXD   (dbg_uart_RXD),                                                   //   input,   width = 1, external_interface.RXD
		.UART_TXD   (dbg_uart_TXD)                                                    //  output,   width = 1,                   .TXD
	);

	niosv_sys_master_0 niosv_jtag_master (
		.clk_clk              (clock_in_out_clk_clk),                   //   input,   width = 1,          clk.clk
		.clk_reset_reset      (rst_controller_001_reset_out_reset),     //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (niosv_jtag_master_master_reset_reset),   //  output,   width = 1, master_reset.reset
		.master_address       (niosv_jtag_master_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (niosv_jtag_master_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (niosv_jtag_master_master_read),          //  output,   width = 1,             .read
		.master_write         (niosv_jtag_master_master_write),         //  output,   width = 1,             .write
		.master_writedata     (niosv_jtag_master_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (niosv_jtag_master_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (niosv_jtag_master_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (niosv_jtag_master_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	niosv_sys_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_in_reset),           //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	niosv_sys_pio_0 rgb_led0 (
		.clk        (clock_in_out_clk_clk),                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_rgb_led0_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_rgb_led0_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_rgb_led0_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_rgb_led0_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_rgb_led0_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led0_export)                           //  output,   width = 3, external_connection.export
	);

	rgb_led0_0 rgb_led1 (
		.clk        (clock_in_out_clk_clk),                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_rgb_led1_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_rgb_led1_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_rgb_led1_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_rgb_led1_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_rgb_led1_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led1_export)                           //  output,   width = 3, external_connection.export
	);

	rgb_led1_0 rgb_led2 (
		.clk        (clock_in_out_clk_clk),                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_rgb_led2_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_rgb_led2_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_rgb_led2_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_rgb_led2_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_rgb_led2_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led2_export)                           //  output,   width = 3, external_connection.export
	);

	rgb_led12_0 rgb_led3 (
		.clk        (clock_in_out_clk_clk),                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_rgb_led3_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_rgb_led3_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_rgb_led3_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_rgb_led3_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_rgb_led3_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (rgb_led3_export)                           //  output,   width = 3, external_connection.export
	);

	niosv_sys_altera_mm_interconnect_1920_wuwmocy mm_interconnect_0 (
		.intel_niosv_g_0_data_manager_awaddr                                            (intel_niosv_g_0_data_manager_awaddr),                            //   input,  width = 32,                                             intel_niosv_g_0_data_manager.awaddr
		.intel_niosv_g_0_data_manager_awlen                                             (intel_niosv_g_0_data_manager_awlen),                             //   input,   width = 8,                                                                         .awlen
		.intel_niosv_g_0_data_manager_awsize                                            (intel_niosv_g_0_data_manager_awsize),                            //   input,   width = 3,                                                                         .awsize
		.intel_niosv_g_0_data_manager_awprot                                            (intel_niosv_g_0_data_manager_awprot),                            //   input,   width = 3,                                                                         .awprot
		.intel_niosv_g_0_data_manager_awvalid                                           (intel_niosv_g_0_data_manager_awvalid),                           //   input,   width = 1,                                                                         .awvalid
		.intel_niosv_g_0_data_manager_awready                                           (intel_niosv_g_0_data_manager_awready),                           //  output,   width = 1,                                                                         .awready
		.intel_niosv_g_0_data_manager_wdata                                             (intel_niosv_g_0_data_manager_wdata),                             //   input,  width = 32,                                                                         .wdata
		.intel_niosv_g_0_data_manager_wstrb                                             (intel_niosv_g_0_data_manager_wstrb),                             //   input,   width = 4,                                                                         .wstrb
		.intel_niosv_g_0_data_manager_wlast                                             (intel_niosv_g_0_data_manager_wlast),                             //   input,   width = 1,                                                                         .wlast
		.intel_niosv_g_0_data_manager_wvalid                                            (intel_niosv_g_0_data_manager_wvalid),                            //   input,   width = 1,                                                                         .wvalid
		.intel_niosv_g_0_data_manager_wready                                            (intel_niosv_g_0_data_manager_wready),                            //  output,   width = 1,                                                                         .wready
		.intel_niosv_g_0_data_manager_bresp                                             (intel_niosv_g_0_data_manager_bresp),                             //  output,   width = 2,                                                                         .bresp
		.intel_niosv_g_0_data_manager_bvalid                                            (intel_niosv_g_0_data_manager_bvalid),                            //  output,   width = 1,                                                                         .bvalid
		.intel_niosv_g_0_data_manager_bready                                            (intel_niosv_g_0_data_manager_bready),                            //   input,   width = 1,                                                                         .bready
		.intel_niosv_g_0_data_manager_araddr                                            (intel_niosv_g_0_data_manager_araddr),                            //   input,  width = 32,                                                                         .araddr
		.intel_niosv_g_0_data_manager_arlen                                             (intel_niosv_g_0_data_manager_arlen),                             //   input,   width = 8,                                                                         .arlen
		.intel_niosv_g_0_data_manager_arsize                                            (intel_niosv_g_0_data_manager_arsize),                            //   input,   width = 3,                                                                         .arsize
		.intel_niosv_g_0_data_manager_arprot                                            (intel_niosv_g_0_data_manager_arprot),                            //   input,   width = 3,                                                                         .arprot
		.intel_niosv_g_0_data_manager_arvalid                                           (intel_niosv_g_0_data_manager_arvalid),                           //   input,   width = 1,                                                                         .arvalid
		.intel_niosv_g_0_data_manager_arready                                           (intel_niosv_g_0_data_manager_arready),                           //  output,   width = 1,                                                                         .arready
		.intel_niosv_g_0_data_manager_rdata                                             (intel_niosv_g_0_data_manager_rdata),                             //  output,  width = 32,                                                                         .rdata
		.intel_niosv_g_0_data_manager_rresp                                             (intel_niosv_g_0_data_manager_rresp),                             //  output,   width = 2,                                                                         .rresp
		.intel_niosv_g_0_data_manager_rlast                                             (intel_niosv_g_0_data_manager_rlast),                             //  output,   width = 1,                                                                         .rlast
		.intel_niosv_g_0_data_manager_rvalid                                            (intel_niosv_g_0_data_manager_rvalid),                            //  output,   width = 1,                                                                         .rvalid
		.intel_niosv_g_0_data_manager_rready                                            (intel_niosv_g_0_data_manager_rready),                            //   input,   width = 1,                                                                         .rready
		.niosv_jtag_master_master_address                                               (niosv_jtag_master_master_address),                               //   input,  width = 32,                                                 niosv_jtag_master_master.address
		.niosv_jtag_master_master_waitrequest                                           (niosv_jtag_master_master_waitrequest),                           //  output,   width = 1,                                                                         .waitrequest
		.niosv_jtag_master_master_byteenable                                            (niosv_jtag_master_master_byteenable),                            //   input,   width = 4,                                                                         .byteenable
		.niosv_jtag_master_master_read                                                  (niosv_jtag_master_master_read),                                  //   input,   width = 1,                                                                         .read
		.niosv_jtag_master_master_readdata                                              (niosv_jtag_master_master_readdata),                              //  output,  width = 32,                                                                         .readdata
		.niosv_jtag_master_master_readdatavalid                                         (niosv_jtag_master_master_readdatavalid),                         //  output,   width = 1,                                                                         .readdatavalid
		.niosv_jtag_master_master_write                                                 (niosv_jtag_master_master_write),                                 //   input,   width = 1,                                                                         .write
		.niosv_jtag_master_master_writedata                                             (niosv_jtag_master_master_writedata),                             //   input,  width = 32,                                                                         .writedata
		.intel_niosv_g_0_instruction_manager_awaddr                                     (intel_niosv_g_0_instruction_manager_awaddr),                     //   input,  width = 32,                                      intel_niosv_g_0_instruction_manager.awaddr
		.intel_niosv_g_0_instruction_manager_awlen                                      (intel_niosv_g_0_instruction_manager_awlen),                      //   input,   width = 8,                                                                         .awlen
		.intel_niosv_g_0_instruction_manager_awsize                                     (intel_niosv_g_0_instruction_manager_awsize),                     //   input,   width = 3,                                                                         .awsize
		.intel_niosv_g_0_instruction_manager_awburst                                    (intel_niosv_g_0_instruction_manager_awburst),                    //   input,   width = 2,                                                                         .awburst
		.intel_niosv_g_0_instruction_manager_awprot                                     (intel_niosv_g_0_instruction_manager_awprot),                     //   input,   width = 3,                                                                         .awprot
		.intel_niosv_g_0_instruction_manager_awvalid                                    (intel_niosv_g_0_instruction_manager_awvalid),                    //   input,   width = 1,                                                                         .awvalid
		.intel_niosv_g_0_instruction_manager_awready                                    (intel_niosv_g_0_instruction_manager_awready),                    //  output,   width = 1,                                                                         .awready
		.intel_niosv_g_0_instruction_manager_wdata                                      (intel_niosv_g_0_instruction_manager_wdata),                      //   input,  width = 32,                                                                         .wdata
		.intel_niosv_g_0_instruction_manager_wstrb                                      (intel_niosv_g_0_instruction_manager_wstrb),                      //   input,   width = 4,                                                                         .wstrb
		.intel_niosv_g_0_instruction_manager_wlast                                      (intel_niosv_g_0_instruction_manager_wlast),                      //   input,   width = 1,                                                                         .wlast
		.intel_niosv_g_0_instruction_manager_wvalid                                     (intel_niosv_g_0_instruction_manager_wvalid),                     //   input,   width = 1,                                                                         .wvalid
		.intel_niosv_g_0_instruction_manager_wready                                     (intel_niosv_g_0_instruction_manager_wready),                     //  output,   width = 1,                                                                         .wready
		.intel_niosv_g_0_instruction_manager_bresp                                      (intel_niosv_g_0_instruction_manager_bresp),                      //  output,   width = 2,                                                                         .bresp
		.intel_niosv_g_0_instruction_manager_bvalid                                     (intel_niosv_g_0_instruction_manager_bvalid),                     //  output,   width = 1,                                                                         .bvalid
		.intel_niosv_g_0_instruction_manager_bready                                     (intel_niosv_g_0_instruction_manager_bready),                     //   input,   width = 1,                                                                         .bready
		.intel_niosv_g_0_instruction_manager_araddr                                     (intel_niosv_g_0_instruction_manager_araddr),                     //   input,  width = 32,                                                                         .araddr
		.intel_niosv_g_0_instruction_manager_arlen                                      (intel_niosv_g_0_instruction_manager_arlen),                      //   input,   width = 8,                                                                         .arlen
		.intel_niosv_g_0_instruction_manager_arsize                                     (intel_niosv_g_0_instruction_manager_arsize),                     //   input,   width = 3,                                                                         .arsize
		.intel_niosv_g_0_instruction_manager_arburst                                    (intel_niosv_g_0_instruction_manager_arburst),                    //   input,   width = 2,                                                                         .arburst
		.intel_niosv_g_0_instruction_manager_arprot                                     (intel_niosv_g_0_instruction_manager_arprot),                     //   input,   width = 3,                                                                         .arprot
		.intel_niosv_g_0_instruction_manager_arvalid                                    (intel_niosv_g_0_instruction_manager_arvalid),                    //   input,   width = 1,                                                                         .arvalid
		.intel_niosv_g_0_instruction_manager_arready                                    (intel_niosv_g_0_instruction_manager_arready),                    //  output,   width = 1,                                                                         .arready
		.intel_niosv_g_0_instruction_manager_rdata                                      (intel_niosv_g_0_instruction_manager_rdata),                      //  output,  width = 32,                                                                         .rdata
		.intel_niosv_g_0_instruction_manager_rresp                                      (intel_niosv_g_0_instruction_manager_rresp),                      //  output,   width = 2,                                                                         .rresp
		.intel_niosv_g_0_instruction_manager_rvalid                                     (intel_niosv_g_0_instruction_manager_rvalid),                     //  output,   width = 1,                                                                         .rvalid
		.intel_niosv_g_0_instruction_manager_rready                                     (intel_niosv_g_0_instruction_manager_rready),                     //   input,   width = 1,                                                                         .rready
		.niosv_dbg_uart_avalon_rs232_slave_address                                      (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_address),    //  output,   width = 1,                                        niosv_dbg_uart_avalon_rs232_slave.address
		.niosv_dbg_uart_avalon_rs232_slave_write                                        (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_write),      //  output,   width = 1,                                                                         .write
		.niosv_dbg_uart_avalon_rs232_slave_read                                         (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_read),       //  output,   width = 1,                                                                         .read
		.niosv_dbg_uart_avalon_rs232_slave_readdata                                     (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_readdata),   //   input,  width = 32,                                                                         .readdata
		.niosv_dbg_uart_avalon_rs232_slave_writedata                                    (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_writedata),  //  output,  width = 32,                                                                         .writedata
		.niosv_dbg_uart_avalon_rs232_slave_byteenable                                   (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_byteenable), //  output,   width = 4,                                                                         .byteenable
		.niosv_dbg_uart_avalon_rs232_slave_chipselect                                   (mm_interconnect_0_niosv_dbg_uart_avalon_rs232_slave_chipselect), //  output,   width = 1,                                                                         .chipselect
		.hdmi_i2c_csr_address                                                           (mm_interconnect_0_hdmi_i2c_csr_address),                         //  output,   width = 4,                                                             hdmi_i2c_csr.address
		.hdmi_i2c_csr_write                                                             (mm_interconnect_0_hdmi_i2c_csr_write),                           //  output,   width = 1,                                                                         .write
		.hdmi_i2c_csr_read                                                              (mm_interconnect_0_hdmi_i2c_csr_read),                            //  output,   width = 1,                                                                         .read
		.hdmi_i2c_csr_readdata                                                          (mm_interconnect_0_hdmi_i2c_csr_readdata),                        //   input,  width = 32,                                                                         .readdata
		.hdmi_i2c_csr_writedata                                                         (mm_interconnect_0_hdmi_i2c_csr_writedata),                       //  output,  width = 32,                                                                         .writedata
		.axi_bridge_0_s0_awid                                                           (mm_interconnect_0_axi_bridge_0_s0_awid),                         //  output,   width = 5,                                                          axi_bridge_0_s0.awid
		.axi_bridge_0_s0_awaddr                                                         (mm_interconnect_0_axi_bridge_0_s0_awaddr),                       //  output,  width = 31,                                                                         .awaddr
		.axi_bridge_0_s0_awlen                                                          (mm_interconnect_0_axi_bridge_0_s0_awlen),                        //  output,   width = 8,                                                                         .awlen
		.axi_bridge_0_s0_awsize                                                         (mm_interconnect_0_axi_bridge_0_s0_awsize),                       //  output,   width = 3,                                                                         .awsize
		.axi_bridge_0_s0_awburst                                                        (mm_interconnect_0_axi_bridge_0_s0_awburst),                      //  output,   width = 2,                                                                         .awburst
		.axi_bridge_0_s0_awlock                                                         (mm_interconnect_0_axi_bridge_0_s0_awlock),                       //  output,   width = 1,                                                                         .awlock
		.axi_bridge_0_s0_awcache                                                        (mm_interconnect_0_axi_bridge_0_s0_awcache),                      //  output,   width = 4,                                                                         .awcache
		.axi_bridge_0_s0_awprot                                                         (mm_interconnect_0_axi_bridge_0_s0_awprot),                       //  output,   width = 3,                                                                         .awprot
		.axi_bridge_0_s0_awvalid                                                        (mm_interconnect_0_axi_bridge_0_s0_awvalid),                      //  output,   width = 1,                                                                         .awvalid
		.axi_bridge_0_s0_awready                                                        (mm_interconnect_0_axi_bridge_0_s0_awready),                      //   input,   width = 1,                                                                         .awready
		.axi_bridge_0_s0_wdata                                                          (mm_interconnect_0_axi_bridge_0_s0_wdata),                        //  output,  width = 32,                                                                         .wdata
		.axi_bridge_0_s0_wstrb                                                          (mm_interconnect_0_axi_bridge_0_s0_wstrb),                        //  output,   width = 4,                                                                         .wstrb
		.axi_bridge_0_s0_wlast                                                          (mm_interconnect_0_axi_bridge_0_s0_wlast),                        //  output,   width = 1,                                                                         .wlast
		.axi_bridge_0_s0_wvalid                                                         (mm_interconnect_0_axi_bridge_0_s0_wvalid),                       //  output,   width = 1,                                                                         .wvalid
		.axi_bridge_0_s0_wready                                                         (mm_interconnect_0_axi_bridge_0_s0_wready),                       //   input,   width = 1,                                                                         .wready
		.axi_bridge_0_s0_bid                                                            (mm_interconnect_0_axi_bridge_0_s0_bid),                          //   input,   width = 5,                                                                         .bid
		.axi_bridge_0_s0_bresp                                                          (mm_interconnect_0_axi_bridge_0_s0_bresp),                        //   input,   width = 2,                                                                         .bresp
		.axi_bridge_0_s0_bvalid                                                         (mm_interconnect_0_axi_bridge_0_s0_bvalid),                       //   input,   width = 1,                                                                         .bvalid
		.axi_bridge_0_s0_bready                                                         (mm_interconnect_0_axi_bridge_0_s0_bready),                       //  output,   width = 1,                                                                         .bready
		.axi_bridge_0_s0_arid                                                           (mm_interconnect_0_axi_bridge_0_s0_arid),                         //  output,   width = 5,                                                                         .arid
		.axi_bridge_0_s0_araddr                                                         (mm_interconnect_0_axi_bridge_0_s0_araddr),                       //  output,  width = 31,                                                                         .araddr
		.axi_bridge_0_s0_arlen                                                          (mm_interconnect_0_axi_bridge_0_s0_arlen),                        //  output,   width = 8,                                                                         .arlen
		.axi_bridge_0_s0_arsize                                                         (mm_interconnect_0_axi_bridge_0_s0_arsize),                       //  output,   width = 3,                                                                         .arsize
		.axi_bridge_0_s0_arburst                                                        (mm_interconnect_0_axi_bridge_0_s0_arburst),                      //  output,   width = 2,                                                                         .arburst
		.axi_bridge_0_s0_arlock                                                         (mm_interconnect_0_axi_bridge_0_s0_arlock),                       //  output,   width = 1,                                                                         .arlock
		.axi_bridge_0_s0_arcache                                                        (mm_interconnect_0_axi_bridge_0_s0_arcache),                      //  output,   width = 4,                                                                         .arcache
		.axi_bridge_0_s0_arprot                                                         (mm_interconnect_0_axi_bridge_0_s0_arprot),                       //  output,   width = 3,                                                                         .arprot
		.axi_bridge_0_s0_arvalid                                                        (mm_interconnect_0_axi_bridge_0_s0_arvalid),                      //  output,   width = 1,                                                                         .arvalid
		.axi_bridge_0_s0_arready                                                        (mm_interconnect_0_axi_bridge_0_s0_arready),                      //   input,   width = 1,                                                                         .arready
		.axi_bridge_0_s0_rid                                                            (mm_interconnect_0_axi_bridge_0_s0_rid),                          //   input,   width = 5,                                                                         .rid
		.axi_bridge_0_s0_rdata                                                          (mm_interconnect_0_axi_bridge_0_s0_rdata),                        //   input,  width = 32,                                                                         .rdata
		.axi_bridge_0_s0_rresp                                                          (mm_interconnect_0_axi_bridge_0_s0_rresp),                        //   input,   width = 2,                                                                         .rresp
		.axi_bridge_0_s0_rlast                                                          (mm_interconnect_0_axi_bridge_0_s0_rlast),                        //   input,   width = 1,                                                                         .rlast
		.axi_bridge_0_s0_rvalid                                                         (mm_interconnect_0_axi_bridge_0_s0_rvalid),                       //   input,   width = 1,                                                                         .rvalid
		.axi_bridge_0_s0_rready                                                         (mm_interconnect_0_axi_bridge_0_s0_rready),                       //  output,   width = 1,                                                                         .rready
		.intel_onchip_memory_0_s1_address                                               (mm_interconnect_0_intel_onchip_memory_0_s1_address),             //  output,  width = 14,                                                 intel_onchip_memory_0_s1.address
		.intel_onchip_memory_0_s1_write                                                 (mm_interconnect_0_intel_onchip_memory_0_s1_write),               //  output,   width = 1,                                                                         .write
		.intel_onchip_memory_0_s1_read                                                  (mm_interconnect_0_intel_onchip_memory_0_s1_read),                //  output,   width = 1,                                                                         .read
		.intel_onchip_memory_0_s1_readdata                                              (mm_interconnect_0_intel_onchip_memory_0_s1_readdata),            //   input,  width = 32,                                                                         .readdata
		.intel_onchip_memory_0_s1_writedata                                             (mm_interconnect_0_intel_onchip_memory_0_s1_writedata),           //  output,  width = 32,                                                                         .writedata
		.intel_onchip_memory_0_s1_byteenable                                            (mm_interconnect_0_intel_onchip_memory_0_s1_byteenable),          //  output,   width = 4,                                                                         .byteenable
		.rgb_led0_s1_address                                                            (mm_interconnect_0_rgb_led0_s1_address),                          //  output,   width = 2,                                                              rgb_led0_s1.address
		.rgb_led0_s1_write                                                              (mm_interconnect_0_rgb_led0_s1_write),                            //  output,   width = 1,                                                                         .write
		.rgb_led0_s1_readdata                                                           (mm_interconnect_0_rgb_led0_s1_readdata),                         //   input,  width = 32,                                                                         .readdata
		.rgb_led0_s1_writedata                                                          (mm_interconnect_0_rgb_led0_s1_writedata),                        //  output,  width = 32,                                                                         .writedata
		.rgb_led0_s1_chipselect                                                         (mm_interconnect_0_rgb_led0_s1_chipselect),                       //  output,   width = 1,                                                                         .chipselect
		.rgb_led1_s1_address                                                            (mm_interconnect_0_rgb_led1_s1_address),                          //  output,   width = 2,                                                              rgb_led1_s1.address
		.rgb_led1_s1_write                                                              (mm_interconnect_0_rgb_led1_s1_write),                            //  output,   width = 1,                                                                         .write
		.rgb_led1_s1_readdata                                                           (mm_interconnect_0_rgb_led1_s1_readdata),                         //   input,  width = 32,                                                                         .readdata
		.rgb_led1_s1_writedata                                                          (mm_interconnect_0_rgb_led1_s1_writedata),                        //  output,  width = 32,                                                                         .writedata
		.rgb_led1_s1_chipselect                                                         (mm_interconnect_0_rgb_led1_s1_chipselect),                       //  output,   width = 1,                                                                         .chipselect
		.rgb_led2_s1_address                                                            (mm_interconnect_0_rgb_led2_s1_address),                          //  output,   width = 2,                                                              rgb_led2_s1.address
		.rgb_led2_s1_write                                                              (mm_interconnect_0_rgb_led2_s1_write),                            //  output,   width = 1,                                                                         .write
		.rgb_led2_s1_readdata                                                           (mm_interconnect_0_rgb_led2_s1_readdata),                         //   input,  width = 32,                                                                         .readdata
		.rgb_led2_s1_writedata                                                          (mm_interconnect_0_rgb_led2_s1_writedata),                        //  output,  width = 32,                                                                         .writedata
		.rgb_led2_s1_chipselect                                                         (mm_interconnect_0_rgb_led2_s1_chipselect),                       //  output,   width = 1,                                                                         .chipselect
		.rgb_led3_s1_address                                                            (mm_interconnect_0_rgb_led3_s1_address),                          //  output,   width = 2,                                                              rgb_led3_s1.address
		.rgb_led3_s1_write                                                              (mm_interconnect_0_rgb_led3_s1_write),                            //  output,   width = 1,                                                                         .write
		.rgb_led3_s1_readdata                                                           (mm_interconnect_0_rgb_led3_s1_readdata),                         //   input,  width = 32,                                                                         .readdata
		.rgb_led3_s1_writedata                                                          (mm_interconnect_0_rgb_led3_s1_writedata),                        //  output,  width = 32,                                                                         .writedata
		.rgb_led3_s1_chipselect                                                         (mm_interconnect_0_rgb_led3_s1_chipselect),                       //  output,   width = 1,                                                                         .chipselect
		.fpga_pb_s1_address                                                             (mm_interconnect_0_fpga_pb_s1_address),                           //  output,   width = 2,                                                               fpga_pb_s1.address
		.fpga_pb_s1_write                                                               (mm_interconnect_0_fpga_pb_s1_write),                             //  output,   width = 1,                                                                         .write
		.fpga_pb_s1_readdata                                                            (mm_interconnect_0_fpga_pb_s1_readdata),                          //   input,  width = 32,                                                                         .readdata
		.fpga_pb_s1_writedata                                                           (mm_interconnect_0_fpga_pb_s1_writedata),                         //  output,  width = 32,                                                                         .writedata
		.fpga_pb_s1_chipselect                                                          (mm_interconnect_0_fpga_pb_s1_chipselect),                        //  output,   width = 1,                                                                         .chipselect
		.fpga_dipsw_s1_address                                                          (mm_interconnect_0_fpga_dipsw_s1_address),                        //  output,   width = 2,                                                            fpga_dipsw_s1.address
		.fpga_dipsw_s1_write                                                            (mm_interconnect_0_fpga_dipsw_s1_write),                          //  output,   width = 1,                                                                         .write
		.fpga_dipsw_s1_readdata                                                         (mm_interconnect_0_fpga_dipsw_s1_readdata),                       //   input,  width = 32,                                                                         .readdata
		.fpga_dipsw_s1_writedata                                                        (mm_interconnect_0_fpga_dipsw_s1_writedata),                      //  output,  width = 32,                                                                         .writedata
		.fpga_dipsw_s1_chipselect                                                       (mm_interconnect_0_fpga_dipsw_s1_chipselect),                     //  output,   width = 1,                                                                         .chipselect
		.cruvi_ls_0_s1_address                                                          (mm_interconnect_0_cruvi_ls_0_s1_address),                        //  output,   width = 2,                                                            cruvi_ls_0_s1.address
		.cruvi_ls_0_s1_write                                                            (mm_interconnect_0_cruvi_ls_0_s1_write),                          //  output,   width = 1,                                                                         .write
		.cruvi_ls_0_s1_readdata                                                         (mm_interconnect_0_cruvi_ls_0_s1_readdata),                       //   input,  width = 32,                                                                         .readdata
		.cruvi_ls_0_s1_writedata                                                        (mm_interconnect_0_cruvi_ls_0_s1_writedata),                      //  output,  width = 32,                                                                         .writedata
		.cruvi_ls_0_s1_chipselect                                                       (mm_interconnect_0_cruvi_ls_0_s1_chipselect),                     //  output,   width = 1,                                                                         .chipselect
		.cruvi_ls_1_s1_address                                                          (mm_interconnect_0_cruvi_ls_1_s1_address),                        //  output,   width = 2,                                                            cruvi_ls_1_s1.address
		.cruvi_ls_1_s1_write                                                            (mm_interconnect_0_cruvi_ls_1_s1_write),                          //  output,   width = 1,                                                                         .write
		.cruvi_ls_1_s1_readdata                                                         (mm_interconnect_0_cruvi_ls_1_s1_readdata),                       //   input,  width = 32,                                                                         .readdata
		.cruvi_ls_1_s1_writedata                                                        (mm_interconnect_0_cruvi_ls_1_s1_writedata),                      //  output,  width = 32,                                                                         .writedata
		.cruvi_ls_1_s1_chipselect                                                       (mm_interconnect_0_cruvi_ls_1_s1_chipselect),                     //  output,   width = 1,                                                                         .chipselect
		.intel_niosv_g_0_timer_sw_agent_address                                         (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_address),       //  output,   width = 6,                                           intel_niosv_g_0_timer_sw_agent.address
		.intel_niosv_g_0_timer_sw_agent_write                                           (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_write),         //  output,   width = 1,                                                                         .write
		.intel_niosv_g_0_timer_sw_agent_read                                            (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_read),          //  output,   width = 1,                                                                         .read
		.intel_niosv_g_0_timer_sw_agent_readdata                                        (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_readdata),      //   input,  width = 32,                                                                         .readdata
		.intel_niosv_g_0_timer_sw_agent_writedata                                       (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_writedata),     //  output,  width = 32,                                                                         .writedata
		.intel_niosv_g_0_timer_sw_agent_byteenable                                      (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_byteenable),    //  output,   width = 4,                                                                         .byteenable
		.intel_niosv_g_0_timer_sw_agent_readdatavalid                                   (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_readdatavalid), //   input,   width = 1,                                                                         .readdatavalid
		.intel_niosv_g_0_timer_sw_agent_waitrequest                                     (mm_interconnect_0_intel_niosv_g_0_timer_sw_agent_waitrequest),   //   input,   width = 1,                                                                         .waitrequest
		.intel_niosv_g_0_reset_reset_bridge_in_reset_reset                              (rst_controller_002_reset_out_reset),                             //   input,   width = 1,                              intel_niosv_g_0_reset_reset_bridge_in_reset.reset
		.niosv_dbg_uart_reset_reset_bridge_in_reset_reset                               (rst_controller_003_reset_out_reset),                             //   input,   width = 1,                               niosv_dbg_uart_reset_reset_bridge_in_reset.reset
		.intel_niosv_g_0_data_manager_translator_clk_reset_reset_bridge_in_reset_reset  (rst_controller_002_reset_out_reset),                             //   input,   width = 1,  intel_niosv_g_0_data_manager_translator_clk_reset_reset_bridge_in_reset.reset
		.niosv_dbg_uart_avalon_rs232_slave_translator_reset_reset_bridge_in_reset_reset (rst_controller_003_reset_out_reset),                             //   input,   width = 1, niosv_dbg_uart_avalon_rs232_slave_translator_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                                           (clock_in_out_clk_clk)                                            //   input,   width = 1,                                                         clock_in_out_clk.clk
	);

	niosv_sys_altera_irq_mapper_2000_hohysji irq_mapper (
		.clk           (clock_in_out_clk_clk),                //   input,   width = 1,       clk.clk
		.reset         (rst_controller_reset_out_reset),      //   input,   width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),            //   input,   width = 1, receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),            //   input,   width = 1, receiver1.irq
		.sender_irq    (intel_niosv_g_0_platform_irq_rx_irq)  //  output,  width = 16,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (niosv_jtag_master_master_reset_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (reset_in_out_reset_reset),             //   input,  width = 1, reset_in1.reset
		.clk            (clock_in_out_clk_clk),                 //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),       //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),   //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                                 // (terminated),                       
		.reset_req_in1  (1'b0),                                 // (terminated),                       
		.reset_in2      (1'b0),                                 // (terminated),                       
		.reset_req_in2  (1'b0),                                 // (terminated),                       
		.reset_in3      (1'b0),                                 // (terminated),                       
		.reset_req_in3  (1'b0),                                 // (terminated),                       
		.reset_in4      (1'b0),                                 // (terminated),                       
		.reset_req_in4  (1'b0),                                 // (terminated),                       
		.reset_in5      (1'b0),                                 // (terminated),                       
		.reset_req_in5  (1'b0),                                 // (terminated),                       
		.reset_in6      (1'b0),                                 // (terminated),                       
		.reset_req_in6  (1'b0),                                 // (terminated),                       
		.reset_in7      (1'b0),                                 // (terminated),                       
		.reset_req_in7  (1'b0),                                 // (terminated),                       
		.reset_in8      (1'b0),                                 // (terminated),                       
		.reset_req_in8  (1'b0),                                 // (terminated),                       
		.reset_in9      (1'b0),                                 // (terminated),                       
		.reset_req_in9  (1'b0),                                 // (terminated),                       
		.reset_in10     (1'b0),                                 // (terminated),                       
		.reset_req_in10 (1'b0),                                 // (terminated),                       
		.reset_in11     (1'b0),                                 // (terminated),                       
		.reset_req_in11 (1'b0),                                 // (terminated),                       
		.reset_in12     (1'b0),                                 // (terminated),                       
		.reset_req_in12 (1'b0),                                 // (terminated),                       
		.reset_in13     (1'b0),                                 // (terminated),                       
		.reset_req_in13 (1'b0),                                 // (terminated),                       
		.reset_in14     (1'b0),                                 // (terminated),                       
		.reset_req_in14 (1'b0),                                 // (terminated),                       
		.reset_in15     (1'b0),                                 // (terminated),                       
		.reset_req_in15 (1'b0)                                  // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (niosv_jtag_master_master_reset_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (reset_in_out_reset_reset),             //   input,  width = 1, reset_in1.reset
		.clk            (),                                     //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),   //  output,  width = 1, reset_out.reset
		.reset_req      (),                                     // (terminated),                       
		.reset_req_in0  (1'b0),                                 // (terminated),                       
		.reset_req_in1  (1'b0),                                 // (terminated),                       
		.reset_in2      (1'b0),                                 // (terminated),                       
		.reset_req_in2  (1'b0),                                 // (terminated),                       
		.reset_in3      (1'b0),                                 // (terminated),                       
		.reset_req_in3  (1'b0),                                 // (terminated),                       
		.reset_in4      (1'b0),                                 // (terminated),                       
		.reset_req_in4  (1'b0),                                 // (terminated),                       
		.reset_in5      (1'b0),                                 // (terminated),                       
		.reset_req_in5  (1'b0),                                 // (terminated),                       
		.reset_in6      (1'b0),                                 // (terminated),                       
		.reset_req_in6  (1'b0),                                 // (terminated),                       
		.reset_in7      (1'b0),                                 // (terminated),                       
		.reset_req_in7  (1'b0),                                 // (terminated),                       
		.reset_in8      (1'b0),                                 // (terminated),                       
		.reset_req_in8  (1'b0),                                 // (terminated),                       
		.reset_in9      (1'b0),                                 // (terminated),                       
		.reset_req_in9  (1'b0),                                 // (terminated),                       
		.reset_in10     (1'b0),                                 // (terminated),                       
		.reset_req_in10 (1'b0),                                 // (terminated),                       
		.reset_in11     (1'b0),                                 // (terminated),                       
		.reset_req_in11 (1'b0),                                 // (terminated),                       
		.reset_in12     (1'b0),                                 // (terminated),                       
		.reset_req_in12 (1'b0),                                 // (terminated),                       
		.reset_in13     (1'b0),                                 // (terminated),                       
		.reset_req_in13 (1'b0),                                 // (terminated),                       
		.reset_in14     (1'b0),                                 // (terminated),                       
		.reset_req_in14 (1'b0),                                 // (terminated),                       
		.reset_in15     (1'b0),                                 // (terminated),                       
		.reset_req_in15 (1'b0)                                  // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (niosv_jtag_master_master_reset_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (reset_in_out_reset_reset),             //   input,  width = 1, reset_in1.reset
		.clk            (clock_in_out_clk_clk),                 //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),   //  output,  width = 1, reset_out.reset
		.reset_req      (),                                     // (terminated),                       
		.reset_req_in0  (1'b0),                                 // (terminated),                       
		.reset_req_in1  (1'b0),                                 // (terminated),                       
		.reset_in2      (1'b0),                                 // (terminated),                       
		.reset_req_in2  (1'b0),                                 // (terminated),                       
		.reset_in3      (1'b0),                                 // (terminated),                       
		.reset_req_in3  (1'b0),                                 // (terminated),                       
		.reset_in4      (1'b0),                                 // (terminated),                       
		.reset_req_in4  (1'b0),                                 // (terminated),                       
		.reset_in5      (1'b0),                                 // (terminated),                       
		.reset_req_in5  (1'b0),                                 // (terminated),                       
		.reset_in6      (1'b0),                                 // (terminated),                       
		.reset_req_in6  (1'b0),                                 // (terminated),                       
		.reset_in7      (1'b0),                                 // (terminated),                       
		.reset_req_in7  (1'b0),                                 // (terminated),                       
		.reset_in8      (1'b0),                                 // (terminated),                       
		.reset_req_in8  (1'b0),                                 // (terminated),                       
		.reset_in9      (1'b0),                                 // (terminated),                       
		.reset_req_in9  (1'b0),                                 // (terminated),                       
		.reset_in10     (1'b0),                                 // (terminated),                       
		.reset_req_in10 (1'b0),                                 // (terminated),                       
		.reset_in11     (1'b0),                                 // (terminated),                       
		.reset_req_in11 (1'b0),                                 // (terminated),                       
		.reset_in12     (1'b0),                                 // (terminated),                       
		.reset_req_in12 (1'b0),                                 // (terminated),                       
		.reset_in13     (1'b0),                                 // (terminated),                       
		.reset_req_in13 (1'b0),                                 // (terminated),                       
		.reset_in14     (1'b0),                                 // (terminated),                       
		.reset_req_in14 (1'b0),                                 // (terminated),                       
		.reset_in15     (1'b0),                                 // (terminated),                       
		.reset_req_in15 (1'b0)                                  // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (reset_in_out_reset_reset),           //   input,  width = 1, reset_in0.reset
		.clk            (clock_in_out_clk_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
