// video_sys_altera_mm_interconnect_1920_p4iwrbq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module video_sys_altera_mm_interconnect_1920_p4iwrbq (
		input  wire [23:0] mm_video_bridge_m0_address,                                      //                                        mm_video_bridge_m0.address
		output wire        mm_video_bridge_m0_waitrequest,                                  //                                                          .waitrequest
		input  wire [0:0]  mm_video_bridge_m0_burstcount,                                   //                                                          .burstcount
		input  wire [3:0]  mm_video_bridge_m0_byteenable,                                   //                                                          .byteenable
		input  wire        mm_video_bridge_m0_read,                                         //                                                          .read
		output wire [31:0] mm_video_bridge_m0_readdata,                                     //                                                          .readdata
		output wire        mm_video_bridge_m0_readdatavalid,                                //                                                          .readdatavalid
		input  wire        mm_video_bridge_m0_write,                                        //                                                          .write
		input  wire [31:0] mm_video_bridge_m0_writedata,                                    //                                                          .writedata
		input  wire        mm_video_bridge_m0_debugaccess,                                  //                                                          .debugaccess
		output wire [10:0] hdmi_dmac_0_s_axi_awaddr,                                        //                                         hdmi_dmac_0_s_axi.awaddr
		output wire [2:0]  hdmi_dmac_0_s_axi_awprot,                                        //                                                          .awprot
		output wire        hdmi_dmac_0_s_axi_awvalid,                                       //                                                          .awvalid
		input  wire        hdmi_dmac_0_s_axi_awready,                                       //                                                          .awready
		output wire [31:0] hdmi_dmac_0_s_axi_wdata,                                         //                                                          .wdata
		output wire [3:0]  hdmi_dmac_0_s_axi_wstrb,                                         //                                                          .wstrb
		output wire        hdmi_dmac_0_s_axi_wvalid,                                        //                                                          .wvalid
		input  wire        hdmi_dmac_0_s_axi_wready,                                        //                                                          .wready
		input  wire [1:0]  hdmi_dmac_0_s_axi_bresp,                                         //                                                          .bresp
		input  wire        hdmi_dmac_0_s_axi_bvalid,                                        //                                                          .bvalid
		output wire        hdmi_dmac_0_s_axi_bready,                                        //                                                          .bready
		output wire [10:0] hdmi_dmac_0_s_axi_araddr,                                        //                                                          .araddr
		output wire [2:0]  hdmi_dmac_0_s_axi_arprot,                                        //                                                          .arprot
		output wire        hdmi_dmac_0_s_axi_arvalid,                                       //                                                          .arvalid
		input  wire        hdmi_dmac_0_s_axi_arready,                                       //                                                          .arready
		input  wire [31:0] hdmi_dmac_0_s_axi_rdata,                                         //                                                          .rdata
		input  wire [1:0]  hdmi_dmac_0_s_axi_rresp,                                         //                                                          .rresp
		input  wire        hdmi_dmac_0_s_axi_rvalid,                                        //                                                          .rvalid
		output wire        hdmi_dmac_0_s_axi_rready,                                        //                                                          .rready
		input  wire        mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset, // mm_video_bridge_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk                                             //                                          clock_in_out_clk.clk
	);

	wire          mm_video_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // mm_video_bridge_m0_agent:av_waitrequest -> mm_video_bridge_m0_translator:uav_waitrequest
	wire   [31:0] mm_video_bridge_m0_translator_avalon_universal_master_0_readdata;      // mm_video_bridge_m0_agent:av_readdata -> mm_video_bridge_m0_translator:uav_readdata
	wire          mm_video_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // mm_video_bridge_m0_translator:uav_debugaccess -> mm_video_bridge_m0_agent:av_debugaccess
	wire   [23:0] mm_video_bridge_m0_translator_avalon_universal_master_0_address;       // mm_video_bridge_m0_translator:uav_address -> mm_video_bridge_m0_agent:av_address
	wire          mm_video_bridge_m0_translator_avalon_universal_master_0_read;          // mm_video_bridge_m0_translator:uav_read -> mm_video_bridge_m0_agent:av_read
	wire    [3:0] mm_video_bridge_m0_translator_avalon_universal_master_0_byteenable;    // mm_video_bridge_m0_translator:uav_byteenable -> mm_video_bridge_m0_agent:av_byteenable
	wire          mm_video_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // mm_video_bridge_m0_agent:av_readdatavalid -> mm_video_bridge_m0_translator:uav_readdatavalid
	wire          mm_video_bridge_m0_translator_avalon_universal_master_0_lock;          // mm_video_bridge_m0_translator:uav_lock -> mm_video_bridge_m0_agent:av_lock
	wire          mm_video_bridge_m0_translator_avalon_universal_master_0_write;         // mm_video_bridge_m0_translator:uav_write -> mm_video_bridge_m0_agent:av_write
	wire   [31:0] mm_video_bridge_m0_translator_avalon_universal_master_0_writedata;     // mm_video_bridge_m0_translator:uav_writedata -> mm_video_bridge_m0_agent:av_writedata
	wire    [2:0] mm_video_bridge_m0_translator_avalon_universal_master_0_burstcount;    // mm_video_bridge_m0_translator:uav_burstcount -> mm_video_bridge_m0_agent:av_burstcount
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> hdmi_dmac_0_s_axi_agent:write_cp_valid
	wire  [102:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> hdmi_dmac_0_s_axi_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                     // hdmi_dmac_0_s_axi_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> hdmi_dmac_0_s_axi_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> hdmi_dmac_0_s_axi_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> hdmi_dmac_0_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                 // cmd_mux_001:src_valid -> hdmi_dmac_0_s_axi_agent:read_cp_valid
	wire  [102:0] cmd_mux_001_src_data;                                                  // cmd_mux_001:src_data -> hdmi_dmac_0_s_axi_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                 // hdmi_dmac_0_s_axi_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                               // cmd_mux_001:src_channel -> hdmi_dmac_0_s_axi_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                         // cmd_mux_001:src_startofpacket -> hdmi_dmac_0_s_axi_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                           // cmd_mux_001:src_endofpacket -> hdmi_dmac_0_s_axi_agent:read_cp_endofpacket
	wire          mm_video_bridge_m0_agent_cp_valid;                                     // mm_video_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [102:0] mm_video_bridge_m0_agent_cp_data;                                      // mm_video_bridge_m0_agent:cp_data -> router:sink_data
	wire          mm_video_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> mm_video_bridge_m0_agent:cp_ready
	wire          mm_video_bridge_m0_agent_cp_startofpacket;                             // mm_video_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_video_bridge_m0_agent_cp_endofpacket;                               // mm_video_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          hdmi_dmac_0_s_axi_agent_write_rp_valid;                                // hdmi_dmac_0_s_axi_agent:write_rp_valid -> router_001:sink_valid
	wire  [102:0] hdmi_dmac_0_s_axi_agent_write_rp_data;                                 // hdmi_dmac_0_s_axi_agent:write_rp_data -> router_001:sink_data
	wire          hdmi_dmac_0_s_axi_agent_write_rp_ready;                                // router_001:sink_ready -> hdmi_dmac_0_s_axi_agent:write_rp_ready
	wire          hdmi_dmac_0_s_axi_agent_write_rp_startofpacket;                        // hdmi_dmac_0_s_axi_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          hdmi_dmac_0_s_axi_agent_write_rp_endofpacket;                          // hdmi_dmac_0_s_axi_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> rsp_demux:sink_valid
	wire  [102:0] router_001_src_data;                                                   // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                  // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          hdmi_dmac_0_s_axi_agent_read_rp_valid;                                 // hdmi_dmac_0_s_axi_agent:read_rp_valid -> router_002:sink_valid
	wire  [102:0] hdmi_dmac_0_s_axi_agent_read_rp_data;                                  // hdmi_dmac_0_s_axi_agent:read_rp_data -> router_002:sink_data
	wire          hdmi_dmac_0_s_axi_agent_read_rp_ready;                                 // router_002:sink_ready -> hdmi_dmac_0_s_axi_agent:read_rp_ready
	wire          hdmi_dmac_0_s_axi_agent_read_rp_startofpacket;                         // hdmi_dmac_0_s_axi_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          hdmi_dmac_0_s_axi_agent_read_rp_endofpacket;                           // hdmi_dmac_0_s_axi_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [102:0] router_002_src_data;                                                   // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                  // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> mm_video_bridge_m0_limiter:cmd_sink_valid
	wire  [102:0] router_src_data;                                                       // router:src_data -> mm_video_bridge_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                      // mm_video_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                    // router:src_channel -> mm_video_bridge_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> mm_video_bridge_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> mm_video_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [102:0] mm_video_bridge_m0_limiter_cmd_src_data;                               // mm_video_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_video_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_video_bridge_m0_limiter:cmd_src_ready
	wire    [1:0] mm_video_bridge_m0_limiter_cmd_src_channel;                            // mm_video_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_video_bridge_m0_limiter_cmd_src_startofpacket;                      // mm_video_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_video_bridge_m0_limiter_cmd_src_endofpacket;                        // mm_video_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> mm_video_bridge_m0_limiter:rsp_sink_valid
	wire  [102:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> mm_video_bridge_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                     // mm_video_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> mm_video_bridge_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> mm_video_bridge_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> mm_video_bridge_m0_limiter:rsp_sink_endofpacket
	wire          mm_video_bridge_m0_limiter_rsp_src_valid;                              // mm_video_bridge_m0_limiter:rsp_src_valid -> mm_video_bridge_m0_agent:rp_valid
	wire  [102:0] mm_video_bridge_m0_limiter_rsp_src_data;                               // mm_video_bridge_m0_limiter:rsp_src_data -> mm_video_bridge_m0_agent:rp_data
	wire          mm_video_bridge_m0_limiter_rsp_src_ready;                              // mm_video_bridge_m0_agent:rp_ready -> mm_video_bridge_m0_limiter:rsp_src_ready
	wire    [1:0] mm_video_bridge_m0_limiter_rsp_src_channel;                            // mm_video_bridge_m0_limiter:rsp_src_channel -> mm_video_bridge_m0_agent:rp_channel
	wire          mm_video_bridge_m0_limiter_rsp_src_startofpacket;                      // mm_video_bridge_m0_limiter:rsp_src_startofpacket -> mm_video_bridge_m0_agent:rp_startofpacket
	wire          mm_video_bridge_m0_limiter_rsp_src_endofpacket;                        // mm_video_bridge_m0_limiter:rsp_src_endofpacket -> mm_video_bridge_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [102:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [102:0] cmd_demux_src1_data;                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [102:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [102:0] rsp_demux_001_src0_data;                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [1:0] mm_video_bridge_m0_limiter_cmd_valid_data;                             // mm_video_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	video_sys_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (24),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) mm_video_bridge_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                                  //   input,   width = 1,                       clk.clk
		.reset                  (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (mm_video_bridge_m0_translator_avalon_universal_master_0_address),       //  output,  width = 24, avalon_universal_master_0.address
		.uav_burstcount         (mm_video_bridge_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (mm_video_bridge_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mm_video_bridge_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mm_video_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mm_video_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mm_video_bridge_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mm_video_bridge_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mm_video_bridge_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mm_video_bridge_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mm_video_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mm_video_bridge_m0_address),                                            //   input,  width = 24,      avalon_anti_master_0.address
		.av_waitrequest         (mm_video_bridge_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mm_video_bridge_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (mm_video_bridge_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mm_video_bridge_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mm_video_bridge_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mm_video_bridge_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mm_video_bridge_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mm_video_bridge_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (mm_video_bridge_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	video_sys_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (102),
		.PKT_DOMAIN_H              (101),
		.PKT_DOMAIN_L              (100),
		.PKT_SNOOP_H               (99),
		.PKT_SNOOP_L               (96),
		.PKT_BARRIER_H             (95),
		.PKT_BARRIER_L             (94),
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (78),
		.PKT_QOS_L                 (78),
		.PKT_DATA_SIDEBAND_H       (76),
		.PKT_DATA_SIDEBAND_L       (76),
		.PKT_ADDR_SIDEBAND_H       (75),
		.PKT_ADDR_SIDEBAND_L       (75),
		.PKT_BURST_TYPE_H          (74),
		.PKT_BURST_TYPE_L          (73),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_TRANS_EXCLUSIVE       (65),
		.PKT_TRANS_LOCK            (64),
		.PKT_BEGIN_BURST           (77),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (69),
		.PKT_BYTE_CNT_H            (68),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (79),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (80),
		.ST_DATA_W                 (103),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) mm_video_bridge_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (mm_video_bridge_m0_translator_avalon_universal_master_0_address),       //   input,   width = 24,        av.address
		.av_write              (mm_video_bridge_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mm_video_bridge_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mm_video_bridge_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (mm_video_bridge_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (mm_video_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mm_video_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mm_video_bridge_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (mm_video_bridge_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (mm_video_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mm_video_bridge_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mm_video_bridge_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mm_video_bridge_m0_agent_cp_data),                                      //  output,  width = 103,          .data
		.cp_startofpacket      (mm_video_bridge_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mm_video_bridge_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mm_video_bridge_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (mm_video_bridge_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (mm_video_bridge_m0_limiter_rsp_src_data),                               //   input,  width = 103,          .data
		.rp_channel            (mm_video_bridge_m0_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (mm_video_bridge_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (mm_video_bridge_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (mm_video_bridge_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	video_sys_altera_merlin_axi_slave_ni_1950_wiooaza #(
		.PKT_QOS_H                   (78),
		.PKT_QOS_L                   (78),
		.PKT_THREAD_ID_H             (81),
		.PKT_THREAD_ID_L             (81),
		.PKT_RESPONSE_STATUS_H       (90),
		.PKT_RESPONSE_STATUS_L       (89),
		.PKT_BEGIN_BURST             (77),
		.PKT_CACHE_H                 (88),
		.PKT_CACHE_L                 (85),
		.PKT_DATA_SIDEBAND_H         (76),
		.PKT_DATA_SIDEBAND_L         (76),
		.PKT_ADDR_SIDEBAND_H         (75),
		.PKT_ADDR_SIDEBAND_L         (75),
		.PKT_BURST_TYPE_H            (74),
		.PKT_BURST_TYPE_L            (73),
		.PKT_PROTECTION_H            (84),
		.PKT_PROTECTION_L            (82),
		.PKT_BURST_SIZE_H            (72),
		.PKT_BURST_SIZE_L            (70),
		.PKT_BURSTWRAP_H             (69),
		.PKT_BURSTWRAP_L             (69),
		.PKT_BYTE_CNT_H              (68),
		.PKT_BYTE_CNT_L              (66),
		.PKT_ADDR_H                  (59),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (65),
		.PKT_TRANS_LOCK              (64),
		.PKT_TRANS_COMPRESSED_READ   (60),
		.PKT_TRANS_POSTED            (61),
		.PKT_TRANS_WRITE             (62),
		.PKT_TRANS_READ              (63),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (79),
		.PKT_SRC_ID_L                (79),
		.PKT_DEST_ID_H               (80),
		.PKT_DEST_ID_L               (80),
		.PKT_ORI_BURST_SIZE_L        (91),
		.PKT_ORI_BURST_SIZE_H        (93),
		.PKT_DOMAIN_L                (100),
		.PKT_DOMAIN_H                (101),
		.PKT_SNOOP_L                 (96),
		.PKT_SNOOP_H                 (99),
		.PKT_BARRIER_L               (94),
		.PKT_BARRIER_H               (95),
		.PKT_WUNIQUE                 (102),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (103),
		.ADDR_WIDTH                  (11),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) hdmi_dmac_0_s_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                             //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                            //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                            //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                             //   input,  width = 103,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                          //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                    //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                      //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                 //   input,  width = 103,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                              //   input,    width = 2,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                        //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                          //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (hdmi_dmac_0_s_axi_agent_read_rp_ready),                            //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (hdmi_dmac_0_s_axi_agent_read_rp_valid),                            //  output,    width = 1,                  .valid
		.read_rp_data           (hdmi_dmac_0_s_axi_agent_read_rp_data),                             //  output,  width = 103,                  .data
		.read_rp_startofpacket  (hdmi_dmac_0_s_axi_agent_read_rp_startofpacket),                    //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (hdmi_dmac_0_s_axi_agent_read_rp_endofpacket),                      //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (hdmi_dmac_0_s_axi_agent_write_rp_ready),                           //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (hdmi_dmac_0_s_axi_agent_write_rp_valid),                           //  output,    width = 1,                  .valid
		.write_rp_data          (hdmi_dmac_0_s_axi_agent_write_rp_data),                            //  output,  width = 103,                  .data
		.write_rp_startofpacket (hdmi_dmac_0_s_axi_agent_write_rp_startofpacket),                   //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (hdmi_dmac_0_s_axi_agent_write_rp_endofpacket),                     //  output,    width = 1,                  .endofpacket
		.awaddr                 (hdmi_dmac_0_s_axi_awaddr),                                         //  output,   width = 11, altera_axi_master.awaddr
		.awprot                 (hdmi_dmac_0_s_axi_awprot),                                         //  output,    width = 3,                  .awprot
		.awvalid                (hdmi_dmac_0_s_axi_awvalid),                                        //  output,    width = 1,                  .awvalid
		.awready                (hdmi_dmac_0_s_axi_awready),                                        //   input,    width = 1,                  .awready
		.wdata                  (hdmi_dmac_0_s_axi_wdata),                                          //  output,   width = 32,                  .wdata
		.wstrb                  (hdmi_dmac_0_s_axi_wstrb),                                          //  output,    width = 4,                  .wstrb
		.wvalid                 (hdmi_dmac_0_s_axi_wvalid),                                         //  output,    width = 1,                  .wvalid
		.wready                 (hdmi_dmac_0_s_axi_wready),                                         //   input,    width = 1,                  .wready
		.bresp                  (hdmi_dmac_0_s_axi_bresp),                                          //   input,    width = 2,                  .bresp
		.bvalid                 (hdmi_dmac_0_s_axi_bvalid),                                         //   input,    width = 1,                  .bvalid
		.bready                 (hdmi_dmac_0_s_axi_bready),                                         //  output,    width = 1,                  .bready
		.araddr                 (hdmi_dmac_0_s_axi_araddr),                                         //  output,   width = 11,                  .araddr
		.arprot                 (hdmi_dmac_0_s_axi_arprot),                                         //  output,    width = 3,                  .arprot
		.arvalid                (hdmi_dmac_0_s_axi_arvalid),                                        //  output,    width = 1,                  .arvalid
		.arready                (hdmi_dmac_0_s_axi_arready),                                        //   input,    width = 1,                  .arready
		.rdata                  (hdmi_dmac_0_s_axi_rdata),                                          //   input,   width = 32,                  .rdata
		.rresp                  (hdmi_dmac_0_s_axi_rresp),                                          //   input,    width = 2,                  .rresp
		.rvalid                 (hdmi_dmac_0_s_axi_rvalid),                                         //   input,    width = 1,                  .rvalid
		.rready                 (hdmi_dmac_0_s_axi_rready),                                         //  output,    width = 1,                  .rready
		.bid                    (1'b0),                                                             // (terminated),                                 
		.buser                  (1'b0),                                                             // (terminated),                                 
		.rid                    (1'b0),                                                             // (terminated),                                 
		.ruser                  (1'b0),                                                             // (terminated),                                 
		.rlast                  (1'b0),                                                             // (terminated),                                 
		.arid                   (),                                                                 // (terminated),                                 
		.arlen                  (),                                                                 // (terminated),                                 
		.arsize                 (),                                                                 // (terminated),                                 
		.arburst                (),                                                                 // (terminated),                                 
		.arlock                 (),                                                                 // (terminated),                                 
		.arcache                (),                                                                 // (terminated),                                 
		.aruser                 (),                                                                 // (terminated),                                 
		.wid                    (),                                                                 // (terminated),                                 
		.wuser                  (),                                                                 // (terminated),                                 
		.wlast                  (),                                                                 // (terminated),                                 
		.awid                   (),                                                                 // (terminated),                                 
		.awlen                  (),                                                                 // (terminated),                                 
		.awsize                 (),                                                                 // (terminated),                                 
		.awburst                (),                                                                 // (terminated),                                 
		.awlock                 (),                                                                 // (terminated),                                 
		.awcache                (),                                                                 // (terminated),                                 
		.awuser                 (),                                                                 // (terminated),                                 
		.awqos                  (),                                                                 // (terminated),                                 
		.awregion               (),                                                                 // (terminated),                                 
		.arqos                  (),                                                                 // (terminated),                                 
		.arregion               (),                                                                 // (terminated),                                 
		.arsnoop                (),                                                                 // (terminated),                                 
		.ardomain               (),                                                                 // (terminated),                                 
		.arbar                  (),                                                                 // (terminated),                                 
		.awsnoop                (),                                                                 // (terminated),                                 
		.awdomain               (),                                                                 // (terminated),                                 
		.awbar                  (),                                                                 // (terminated),                                 
		.awunique               ()                                                                  // (terminated),                                 
	);

	video_sys_altera_merlin_router_1921_3lo72qy router (
		.sink_ready         (mm_video_bridge_m0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (mm_video_bridge_m0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (mm_video_bridge_m0_agent_cp_data),                                //   input,  width = 103,          .data
		.sink_startofpacket (mm_video_bridge_m0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_video_bridge_m0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                 //  output,  width = 103,          .data
		.src_channel        (router_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_router_1921_vm344ay router_001 (
		.sink_ready         (hdmi_dmac_0_s_axi_agent_write_rp_ready),                          //  output,    width = 1,      sink.ready
		.sink_valid         (hdmi_dmac_0_s_axi_agent_write_rp_valid),                          //   input,    width = 1,          .valid
		.sink_data          (hdmi_dmac_0_s_axi_agent_write_rp_data),                           //   input,  width = 103,          .data
		.sink_startofpacket (hdmi_dmac_0_s_axi_agent_write_rp_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (hdmi_dmac_0_s_axi_agent_write_rp_endofpacket),                    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                             //  output,  width = 103,          .data
		.src_channel        (router_001_src_channel),                                          //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_router_1921_vm344ay router_002 (
		.sink_ready         (hdmi_dmac_0_s_axi_agent_read_rp_ready),                           //  output,    width = 1,      sink.ready
		.sink_valid         (hdmi_dmac_0_s_axi_agent_read_rp_valid),                           //   input,    width = 1,          .valid
		.sink_data          (hdmi_dmac_0_s_axi_agent_read_rp_data),                            //   input,  width = 103,          .data
		.sink_startofpacket (hdmi_dmac_0_s_axi_agent_read_rp_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (hdmi_dmac_0_s_axi_agent_read_rp_endofpacket),                     //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                             //  output,  width = 103,          .data
		.src_channel        (router_002_src_channel),                                          //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (80),
		.PKT_DEST_ID_L                        (80),
		.PKT_SRC_ID_H                         (79),
		.PKT_SRC_ID_L                         (79),
		.PKT_BYTE_CNT_H                       (68),
		.PKT_BYTE_CNT_L                       (66),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (61),
		.PKT_TRANS_WRITE                      (62),
		.MAX_OUTSTANDING_RESPONSES            (2),
		.PIPELINED                            (0),
		.ST_DATA_W                            (103),
		.ST_CHANNEL_W                         (2),
		.VALID_WIDTH                          (2),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) mm_video_bridge_m0_limiter (
		.clk                    (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                  (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                 //   input,  width = 103,          .data
		.cmd_sink_channel       (router_src_channel),                                              //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (mm_video_bridge_m0_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (mm_video_bridge_m0_limiter_cmd_src_data),                         //  output,  width = 103,          .data
		.cmd_src_channel        (mm_video_bridge_m0_limiter_cmd_src_channel),                      //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (mm_video_bridge_m0_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (mm_video_bridge_m0_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                               //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                               //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                             //   input,    width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                //   input,  width = 103,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (mm_video_bridge_m0_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (mm_video_bridge_m0_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (mm_video_bridge_m0_limiter_rsp_src_data),                         //  output,  width = 103,          .data
		.rsp_src_channel        (mm_video_bridge_m0_limiter_rsp_src_channel),                      //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (mm_video_bridge_m0_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (mm_video_bridge_m0_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (mm_video_bridge_m0_limiter_cmd_valid_data)                        //  output,    width = 2, cmd_valid.data
	);

	video_sys_altera_merlin_demultiplexer_1921_bntvwua cmd_demux (
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,        clk.clk
		.reset              (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (mm_video_bridge_m0_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (mm_video_bridge_m0_limiter_cmd_src_channel),                      //   input,    width = 2,           .channel
		.sink_data          (mm_video_bridge_m0_limiter_cmd_src_data),                         //   input,  width = 103,           .data
		.sink_startofpacket (mm_video_bridge_m0_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (mm_video_bridge_m0_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (mm_video_bridge_m0_limiter_cmd_valid_data),                       //   input,    width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                            //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                             //  output,  width = 103,           .data
		.src0_channel       (cmd_demux_src0_channel),                                          //  output,    width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                      //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                            //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                            //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                             //  output,  width = 103,           .data
		.src1_channel       (cmd_demux_src1_channel),                                          //  output,    width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                    //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                       //  output,    width = 1,           .endofpacket
	);

	video_sys_altera_merlin_multiplexer_1921_mjybh6i cmd_mux (
		.clk                 (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                //  output,  width = 103,          .data
		.src_channel         (cmd_mux_src_channel),                                             //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                          //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                             //   input,  width = 103,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                       //   input,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_multiplexer_1921_mjybh6i cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                            //  output,  width = 103,          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                          //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                                             //   input,  width = 103,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                       //   input,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_demultiplexer_1921_jmq6taq rsp_demux (
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                          //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                             //   input,  width = 103,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                             //  output,  width = 103,          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_demultiplexer_1921_jmq6taq rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                          //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                             //   input,  width = 103,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //  output,  width = 103,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	video_sys_altera_merlin_multiplexer_1921_bl46jnq rsp_mux (
		.clk                 (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (mm_video_bridge_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                //  output,  width = 103,          .data
		.src_channel         (rsp_mux_src_channel),                                             //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                          //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                             //   input,  width = 103,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                        //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                        //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                      //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                         //   input,  width = 103,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

endmodule
