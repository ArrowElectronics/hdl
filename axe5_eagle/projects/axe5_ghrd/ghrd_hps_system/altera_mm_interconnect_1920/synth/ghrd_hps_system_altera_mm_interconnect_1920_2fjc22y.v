// ghrd_hps_system_altera_mm_interconnect_1920_2fjc22y.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.4 79

`timescale 1 ps / 1 ps
module ghrd_hps_system_altera_mm_interconnect_1920_2fjc22y (
		input  wire [31:0] f2sdram_only_master_master_address,                                      //                                        f2sdram_only_master_master.address
		output wire        f2sdram_only_master_master_waitrequest,                                  //                                                                  .waitrequest
		input  wire [3:0]  f2sdram_only_master_master_byteenable,                                   //                                                                  .byteenable
		input  wire        f2sdram_only_master_master_read,                                         //                                                                  .read
		output wire [31:0] f2sdram_only_master_master_readdata,                                     //                                                                  .readdata
		output wire        f2sdram_only_master_master_readdatavalid,                                //                                                                  .readdatavalid
		input  wire        f2sdram_only_master_master_write,                                        //                                                                  .write
		input  wire [31:0] f2sdram_only_master_master_writedata,                                    //                                                                  .writedata
		output wire [4:0]  agilex_5_soc_f2sdram_awid,                                               //                                              agilex_5_soc_f2sdram.awid
		output wire [31:0] agilex_5_soc_f2sdram_awaddr,                                             //                                                                  .awaddr
		output wire [7:0]  agilex_5_soc_f2sdram_awlen,                                              //                                                                  .awlen
		output wire [2:0]  agilex_5_soc_f2sdram_awsize,                                             //                                                                  .awsize
		output wire [1:0]  agilex_5_soc_f2sdram_awburst,                                            //                                                                  .awburst
		output wire [0:0]  agilex_5_soc_f2sdram_awlock,                                             //                                                                  .awlock
		output wire [3:0]  agilex_5_soc_f2sdram_awcache,                                            //                                                                  .awcache
		output wire [2:0]  agilex_5_soc_f2sdram_awprot,                                             //                                                                  .awprot
		output wire [7:0]  agilex_5_soc_f2sdram_awuser,                                             //                                                                  .awuser
		output wire [3:0]  agilex_5_soc_f2sdram_awqos,                                              //                                                                  .awqos
		output wire [3:0]  agilex_5_soc_f2sdram_awregion,                                           //                                                                  .awregion
		output wire        agilex_5_soc_f2sdram_awvalid,                                            //                                                                  .awvalid
		input  wire        agilex_5_soc_f2sdram_awready,                                            //                                                                  .awready
		output wire [63:0] agilex_5_soc_f2sdram_wdata,                                              //                                                                  .wdata
		output wire [7:0]  agilex_5_soc_f2sdram_wstrb,                                              //                                                                  .wstrb
		output wire        agilex_5_soc_f2sdram_wlast,                                              //                                                                  .wlast
		output wire        agilex_5_soc_f2sdram_wvalid,                                             //                                                                  .wvalid
		output wire [7:0]  agilex_5_soc_f2sdram_wuser,                                              //                                                                  .wuser
		input  wire        agilex_5_soc_f2sdram_wready,                                             //                                                                  .wready
		input  wire [4:0]  agilex_5_soc_f2sdram_bid,                                                //                                                                  .bid
		input  wire [1:0]  agilex_5_soc_f2sdram_bresp,                                              //                                                                  .bresp
		input  wire [7:0]  agilex_5_soc_f2sdram_buser,                                              //                                                                  .buser
		input  wire        agilex_5_soc_f2sdram_bvalid,                                             //                                                                  .bvalid
		output wire        agilex_5_soc_f2sdram_bready,                                             //                                                                  .bready
		output wire [4:0]  agilex_5_soc_f2sdram_arid,                                               //                                                                  .arid
		output wire [31:0] agilex_5_soc_f2sdram_araddr,                                             //                                                                  .araddr
		output wire [7:0]  agilex_5_soc_f2sdram_arlen,                                              //                                                                  .arlen
		output wire [2:0]  agilex_5_soc_f2sdram_arsize,                                             //                                                                  .arsize
		output wire [1:0]  agilex_5_soc_f2sdram_arburst,                                            //                                                                  .arburst
		output wire [0:0]  agilex_5_soc_f2sdram_arlock,                                             //                                                                  .arlock
		output wire [3:0]  agilex_5_soc_f2sdram_arcache,                                            //                                                                  .arcache
		output wire [2:0]  agilex_5_soc_f2sdram_arprot,                                             //                                                                  .arprot
		output wire [7:0]  agilex_5_soc_f2sdram_aruser,                                             //                                                                  .aruser
		output wire [3:0]  agilex_5_soc_f2sdram_arqos,                                              //                                                                  .arqos
		output wire [3:0]  agilex_5_soc_f2sdram_arregion,                                           //                                                                  .arregion
		output wire        agilex_5_soc_f2sdram_arvalid,                                            //                                                                  .arvalid
		input  wire        agilex_5_soc_f2sdram_arready,                                            //                                                                  .arready
		input  wire [4:0]  agilex_5_soc_f2sdram_rid,                                                //                                                                  .rid
		input  wire [63:0] agilex_5_soc_f2sdram_rdata,                                              //                                                                  .rdata
		input  wire [1:0]  agilex_5_soc_f2sdram_rresp,                                              //                                                                  .rresp
		input  wire        agilex_5_soc_f2sdram_rlast,                                              //                                                                  .rlast
		input  wire        agilex_5_soc_f2sdram_rvalid,                                             //                                                                  .rvalid
		output wire        agilex_5_soc_f2sdram_rready,                                             //                                                                  .rready
		input  wire [7:0]  agilex_5_soc_f2sdram_ruser,                                              //                                                                  .ruser
		input  wire [0:0]  video_sys_0_hdmi_dmac_master_awid,                                       //                                      video_sys_0_hdmi_dmac_master.awid
		input  wire [31:0] video_sys_0_hdmi_dmac_master_awaddr,                                     //                                                                  .awaddr
		input  wire [3:0]  video_sys_0_hdmi_dmac_master_awlen,                                      //                                                                  .awlen
		input  wire [2:0]  video_sys_0_hdmi_dmac_master_awsize,                                     //                                                                  .awsize
		input  wire [1:0]  video_sys_0_hdmi_dmac_master_awburst,                                    //                                                                  .awburst
		input  wire [1:0]  video_sys_0_hdmi_dmac_master_awlock,                                     //                                                                  .awlock
		input  wire [3:0]  video_sys_0_hdmi_dmac_master_awcache,                                    //                                                                  .awcache
		input  wire [2:0]  video_sys_0_hdmi_dmac_master_awprot,                                     //                                                                  .awprot
		input  wire        video_sys_0_hdmi_dmac_master_awvalid,                                    //                                                                  .awvalid
		output wire        video_sys_0_hdmi_dmac_master_awready,                                    //                                                                  .awready
		input  wire [0:0]  video_sys_0_hdmi_dmac_master_wid,                                        //                                                                  .wid
		input  wire [63:0] video_sys_0_hdmi_dmac_master_wdata,                                      //                                                                  .wdata
		input  wire [7:0]  video_sys_0_hdmi_dmac_master_wstrb,                                      //                                                                  .wstrb
		input  wire        video_sys_0_hdmi_dmac_master_wlast,                                      //                                                                  .wlast
		input  wire        video_sys_0_hdmi_dmac_master_wvalid,                                     //                                                                  .wvalid
		output wire        video_sys_0_hdmi_dmac_master_wready,                                     //                                                                  .wready
		output wire [0:0]  video_sys_0_hdmi_dmac_master_bid,                                        //                                                                  .bid
		output wire [1:0]  video_sys_0_hdmi_dmac_master_bresp,                                      //                                                                  .bresp
		output wire        video_sys_0_hdmi_dmac_master_bvalid,                                     //                                                                  .bvalid
		input  wire        video_sys_0_hdmi_dmac_master_bready,                                     //                                                                  .bready
		input  wire [0:0]  video_sys_0_hdmi_dmac_master_arid,                                       //                                                                  .arid
		input  wire [31:0] video_sys_0_hdmi_dmac_master_araddr,                                     //                                                                  .araddr
		input  wire [3:0]  video_sys_0_hdmi_dmac_master_arlen,                                      //                                                                  .arlen
		input  wire [2:0]  video_sys_0_hdmi_dmac_master_arsize,                                     //                                                                  .arsize
		input  wire [1:0]  video_sys_0_hdmi_dmac_master_arburst,                                    //                                                                  .arburst
		input  wire [1:0]  video_sys_0_hdmi_dmac_master_arlock,                                     //                                                                  .arlock
		input  wire [3:0]  video_sys_0_hdmi_dmac_master_arcache,                                    //                                                                  .arcache
		input  wire [2:0]  video_sys_0_hdmi_dmac_master_arprot,                                     //                                                                  .arprot
		input  wire        video_sys_0_hdmi_dmac_master_arvalid,                                    //                                                                  .arvalid
		output wire        video_sys_0_hdmi_dmac_master_arready,                                    //                                                                  .arready
		output wire [0:0]  video_sys_0_hdmi_dmac_master_rid,                                        //                                                                  .rid
		output wire [63:0] video_sys_0_hdmi_dmac_master_rdata,                                      //                                                                  .rdata
		output wire [1:0]  video_sys_0_hdmi_dmac_master_rresp,                                      //                                                                  .rresp
		output wire        video_sys_0_hdmi_dmac_master_rlast,                                      //                                                                  .rlast
		output wire        video_sys_0_hdmi_dmac_master_rvalid,                                     //                                                                  .rvalid
		input  wire        video_sys_0_hdmi_dmac_master_rready,                                     //                                                                  .rready
		input  wire        f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset, // f2sdram_only_master_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        agilex_5_soc_h2f_user1_clk_clk                                           //                                        agilex_5_soc_h2f_user1_clk.clk
	);

	wire          rsp_mux_src_valid;                                                             // rsp_mux:src_valid -> video_sys_0_hdmi_dmac_master_agent:write_rp_valid
	wire  [192:0] rsp_mux_src_data;                                                              // rsp_mux:src_data -> video_sys_0_hdmi_dmac_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                             // video_sys_0_hdmi_dmac_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                           // rsp_mux:src_channel -> video_sys_0_hdmi_dmac_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                                     // rsp_mux:src_startofpacket -> video_sys_0_hdmi_dmac_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                       // rsp_mux:src_endofpacket -> video_sys_0_hdmi_dmac_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                         // rsp_mux_001:src_valid -> video_sys_0_hdmi_dmac_master_agent:read_rp_valid
	wire  [192:0] rsp_mux_001_src_data;                                                          // rsp_mux_001:src_data -> video_sys_0_hdmi_dmac_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                         // video_sys_0_hdmi_dmac_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                       // rsp_mux_001:src_channel -> video_sys_0_hdmi_dmac_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                 // rsp_mux_001:src_startofpacket -> video_sys_0_hdmi_dmac_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                   // rsp_mux_001:src_endofpacket -> video_sys_0_hdmi_dmac_master_agent:read_rp_endofpacket
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_waitrequest;   // f2sdram_only_master_master_agent:av_waitrequest -> f2sdram_only_master_master_translator:uav_waitrequest
	wire   [31:0] f2sdram_only_master_master_translator_avalon_universal_master_0_readdata;      // f2sdram_only_master_master_agent:av_readdata -> f2sdram_only_master_master_translator:uav_readdata
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_debugaccess;   // f2sdram_only_master_master_translator:uav_debugaccess -> f2sdram_only_master_master_agent:av_debugaccess
	wire   [31:0] f2sdram_only_master_master_translator_avalon_universal_master_0_address;       // f2sdram_only_master_master_translator:uav_address -> f2sdram_only_master_master_agent:av_address
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_read;          // f2sdram_only_master_master_translator:uav_read -> f2sdram_only_master_master_agent:av_read
	wire    [3:0] f2sdram_only_master_master_translator_avalon_universal_master_0_byteenable;    // f2sdram_only_master_master_translator:uav_byteenable -> f2sdram_only_master_master_agent:av_byteenable
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_readdatavalid; // f2sdram_only_master_master_agent:av_readdatavalid -> f2sdram_only_master_master_translator:uav_readdatavalid
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_lock;          // f2sdram_only_master_master_translator:uav_lock -> f2sdram_only_master_master_agent:av_lock
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_write;         // f2sdram_only_master_master_translator:uav_write -> f2sdram_only_master_master_agent:av_write
	wire   [31:0] f2sdram_only_master_master_translator_avalon_universal_master_0_writedata;     // f2sdram_only_master_master_translator:uav_writedata -> f2sdram_only_master_master_agent:av_writedata
	wire    [2:0] f2sdram_only_master_master_translator_avalon_universal_master_0_burstcount;    // f2sdram_only_master_master_translator:uav_burstcount -> f2sdram_only_master_master_agent:av_burstcount
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_ruser;                            // agilex_5_soc_f2sdram_translator:s0_ruser -> agilex_5_soc_f2sdram_agent:ruser
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_wuser;                            // agilex_5_soc_f2sdram_agent:wuser -> agilex_5_soc_f2sdram_translator:s0_wuser
	wire    [1:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awburst;                          // agilex_5_soc_f2sdram_agent:awburst -> agilex_5_soc_f2sdram_translator:s0_awburst
	wire    [3:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arregion;                         // agilex_5_soc_f2sdram_agent:arregion -> agilex_5_soc_f2sdram_translator:s0_arregion
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awuser;                           // agilex_5_soc_f2sdram_agent:awuser -> agilex_5_soc_f2sdram_translator:s0_awuser
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arlen;                            // agilex_5_soc_f2sdram_agent:arlen -> agilex_5_soc_f2sdram_translator:s0_arlen
	wire    [3:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arqos;                            // agilex_5_soc_f2sdram_agent:arqos -> agilex_5_soc_f2sdram_translator:s0_arqos
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_wstrb;                            // agilex_5_soc_f2sdram_agent:wstrb -> agilex_5_soc_f2sdram_translator:s0_wstrb
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_wready;                           // agilex_5_soc_f2sdram_translator:s0_wready -> agilex_5_soc_f2sdram_agent:wready
	wire    [4:0] agilex_5_soc_f2sdram_agent_altera_axi_master_rid;                              // agilex_5_soc_f2sdram_translator:s0_rid -> agilex_5_soc_f2sdram_agent:rid
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_rready;                           // agilex_5_soc_f2sdram_agent:rready -> agilex_5_soc_f2sdram_translator:s0_rready
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awlen;                            // agilex_5_soc_f2sdram_agent:awlen -> agilex_5_soc_f2sdram_translator:s0_awlen
	wire    [3:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awqos;                            // agilex_5_soc_f2sdram_agent:awqos -> agilex_5_soc_f2sdram_translator:s0_awqos
	wire    [3:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arcache;                          // agilex_5_soc_f2sdram_agent:arcache -> agilex_5_soc_f2sdram_translator:s0_arcache
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_wvalid;                           // agilex_5_soc_f2sdram_agent:wvalid -> agilex_5_soc_f2sdram_translator:s0_wvalid
	wire   [31:0] agilex_5_soc_f2sdram_agent_altera_axi_master_araddr;                           // agilex_5_soc_f2sdram_agent:araddr -> agilex_5_soc_f2sdram_translator:s0_araddr
	wire    [2:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arprot;                           // agilex_5_soc_f2sdram_agent:arprot -> agilex_5_soc_f2sdram_translator:s0_arprot
	wire    [2:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awprot;                           // agilex_5_soc_f2sdram_agent:awprot -> agilex_5_soc_f2sdram_translator:s0_awprot
	wire   [63:0] agilex_5_soc_f2sdram_agent_altera_axi_master_wdata;                            // agilex_5_soc_f2sdram_agent:wdata -> agilex_5_soc_f2sdram_translator:s0_wdata
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_arvalid;                          // agilex_5_soc_f2sdram_agent:arvalid -> agilex_5_soc_f2sdram_translator:s0_arvalid
	wire    [3:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awcache;                          // agilex_5_soc_f2sdram_agent:awcache -> agilex_5_soc_f2sdram_translator:s0_awcache
	wire    [4:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arid;                             // agilex_5_soc_f2sdram_agent:arid -> agilex_5_soc_f2sdram_translator:s0_arid
	wire    [0:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arlock;                           // agilex_5_soc_f2sdram_agent:arlock -> agilex_5_soc_f2sdram_translator:s0_arlock
	wire    [0:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awlock;                           // agilex_5_soc_f2sdram_agent:awlock -> agilex_5_soc_f2sdram_translator:s0_awlock
	wire   [31:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awaddr;                           // agilex_5_soc_f2sdram_agent:awaddr -> agilex_5_soc_f2sdram_translator:s0_awaddr
	wire    [1:0] agilex_5_soc_f2sdram_agent_altera_axi_master_bresp;                            // agilex_5_soc_f2sdram_translator:s0_bresp -> agilex_5_soc_f2sdram_agent:bresp
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_arready;                          // agilex_5_soc_f2sdram_translator:s0_arready -> agilex_5_soc_f2sdram_agent:arready
	wire   [63:0] agilex_5_soc_f2sdram_agent_altera_axi_master_rdata;                            // agilex_5_soc_f2sdram_translator:s0_rdata -> agilex_5_soc_f2sdram_agent:rdata
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_awready;                          // agilex_5_soc_f2sdram_translator:s0_awready -> agilex_5_soc_f2sdram_agent:awready
	wire    [1:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arburst;                          // agilex_5_soc_f2sdram_agent:arburst -> agilex_5_soc_f2sdram_translator:s0_arburst
	wire    [2:0] agilex_5_soc_f2sdram_agent_altera_axi_master_arsize;                           // agilex_5_soc_f2sdram_agent:arsize -> agilex_5_soc_f2sdram_translator:s0_arsize
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_bready;                           // agilex_5_soc_f2sdram_agent:bready -> agilex_5_soc_f2sdram_translator:s0_bready
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_rlast;                            // agilex_5_soc_f2sdram_translator:s0_rlast -> agilex_5_soc_f2sdram_agent:rlast
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_wlast;                            // agilex_5_soc_f2sdram_agent:wlast -> agilex_5_soc_f2sdram_translator:s0_wlast
	wire    [3:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awregion;                         // agilex_5_soc_f2sdram_agent:awregion -> agilex_5_soc_f2sdram_translator:s0_awregion
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_buser;                            // agilex_5_soc_f2sdram_translator:s0_buser -> agilex_5_soc_f2sdram_agent:buser
	wire    [1:0] agilex_5_soc_f2sdram_agent_altera_axi_master_rresp;                            // agilex_5_soc_f2sdram_translator:s0_rresp -> agilex_5_soc_f2sdram_agent:rresp
	wire    [4:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awid;                             // agilex_5_soc_f2sdram_agent:awid -> agilex_5_soc_f2sdram_translator:s0_awid
	wire    [4:0] agilex_5_soc_f2sdram_agent_altera_axi_master_bid;                              // agilex_5_soc_f2sdram_translator:s0_bid -> agilex_5_soc_f2sdram_agent:bid
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_bvalid;                           // agilex_5_soc_f2sdram_translator:s0_bvalid -> agilex_5_soc_f2sdram_agent:bvalid
	wire    [2:0] agilex_5_soc_f2sdram_agent_altera_axi_master_awsize;                           // agilex_5_soc_f2sdram_agent:awsize -> agilex_5_soc_f2sdram_translator:s0_awsize
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_awvalid;                          // agilex_5_soc_f2sdram_agent:awvalid -> agilex_5_soc_f2sdram_translator:s0_awvalid
	wire    [7:0] agilex_5_soc_f2sdram_agent_altera_axi_master_aruser;                           // agilex_5_soc_f2sdram_agent:aruser -> agilex_5_soc_f2sdram_translator:s0_aruser
	wire          agilex_5_soc_f2sdram_agent_altera_axi_master_rvalid;                           // agilex_5_soc_f2sdram_translator:s0_rvalid -> agilex_5_soc_f2sdram_agent:rvalid
	wire          cmd_mux_src_valid;                                                             // cmd_mux:src_valid -> agilex_5_soc_f2sdram_agent:write_cp_valid
	wire  [192:0] cmd_mux_src_data;                                                              // cmd_mux:src_data -> agilex_5_soc_f2sdram_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                             // agilex_5_soc_f2sdram_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                           // cmd_mux:src_channel -> agilex_5_soc_f2sdram_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                     // cmd_mux:src_startofpacket -> agilex_5_soc_f2sdram_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                       // cmd_mux:src_endofpacket -> agilex_5_soc_f2sdram_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                         // cmd_mux_001:src_valid -> agilex_5_soc_f2sdram_agent:read_cp_valid
	wire  [192:0] cmd_mux_001_src_data;                                                          // cmd_mux_001:src_data -> agilex_5_soc_f2sdram_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                         // agilex_5_soc_f2sdram_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                       // cmd_mux_001:src_channel -> agilex_5_soc_f2sdram_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                 // cmd_mux_001:src_startofpacket -> agilex_5_soc_f2sdram_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                   // cmd_mux_001:src_endofpacket -> agilex_5_soc_f2sdram_agent:read_cp_endofpacket
	wire          video_sys_0_hdmi_dmac_master_agent_write_cp_valid;                             // video_sys_0_hdmi_dmac_master_agent:write_cp_valid -> router:sink_valid
	wire  [192:0] video_sys_0_hdmi_dmac_master_agent_write_cp_data;                              // video_sys_0_hdmi_dmac_master_agent:write_cp_data -> router:sink_data
	wire          video_sys_0_hdmi_dmac_master_agent_write_cp_ready;                             // router:sink_ready -> video_sys_0_hdmi_dmac_master_agent:write_cp_ready
	wire          video_sys_0_hdmi_dmac_master_agent_write_cp_startofpacket;                     // video_sys_0_hdmi_dmac_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          video_sys_0_hdmi_dmac_master_agent_write_cp_endofpacket;                       // video_sys_0_hdmi_dmac_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                              // router:src_valid -> cmd_demux:sink_valid
	wire  [192:0] router_src_data;                                                               // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                              // cmd_demux:sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                            // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                      // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                        // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          video_sys_0_hdmi_dmac_master_agent_read_cp_valid;                              // video_sys_0_hdmi_dmac_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [192:0] video_sys_0_hdmi_dmac_master_agent_read_cp_data;                               // video_sys_0_hdmi_dmac_master_agent:read_cp_data -> router_001:sink_data
	wire          video_sys_0_hdmi_dmac_master_agent_read_cp_ready;                              // router_001:sink_ready -> video_sys_0_hdmi_dmac_master_agent:read_cp_ready
	wire          video_sys_0_hdmi_dmac_master_agent_read_cp_startofpacket;                      // video_sys_0_hdmi_dmac_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          video_sys_0_hdmi_dmac_master_agent_read_cp_endofpacket;                        // video_sys_0_hdmi_dmac_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                          // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [192:0] router_001_src_data;                                                           // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                          // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                        // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                  // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                    // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          f2sdram_only_master_master_agent_cp_valid;                                     // f2sdram_only_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [156:0] f2sdram_only_master_master_agent_cp_data;                                      // f2sdram_only_master_master_agent:cp_data -> router_002:sink_data
	wire          f2sdram_only_master_master_agent_cp_ready;                                     // router_002:sink_ready -> f2sdram_only_master_master_agent:cp_ready
	wire          f2sdram_only_master_master_agent_cp_startofpacket;                             // f2sdram_only_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          f2sdram_only_master_master_agent_cp_endofpacket;                               // f2sdram_only_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          agilex_5_soc_f2sdram_agent_write_rp_valid;                                     // agilex_5_soc_f2sdram_agent:write_rp_valid -> router_003:sink_valid
	wire  [192:0] agilex_5_soc_f2sdram_agent_write_rp_data;                                      // agilex_5_soc_f2sdram_agent:write_rp_data -> router_003:sink_data
	wire          agilex_5_soc_f2sdram_agent_write_rp_ready;                                     // router_003:sink_ready -> agilex_5_soc_f2sdram_agent:write_rp_ready
	wire          agilex_5_soc_f2sdram_agent_write_rp_startofpacket;                             // agilex_5_soc_f2sdram_agent:write_rp_startofpacket -> router_003:sink_startofpacket
	wire          agilex_5_soc_f2sdram_agent_write_rp_endofpacket;                               // agilex_5_soc_f2sdram_agent:write_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                          // router_003:src_valid -> rsp_demux:sink_valid
	wire  [192:0] router_003_src_data;                                                           // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                          // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                        // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                  // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                    // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          agilex_5_soc_f2sdram_agent_read_rp_valid;                                      // agilex_5_soc_f2sdram_agent:read_rp_valid -> router_004:sink_valid
	wire  [192:0] agilex_5_soc_f2sdram_agent_read_rp_data;                                       // agilex_5_soc_f2sdram_agent:read_rp_data -> router_004:sink_data
	wire          agilex_5_soc_f2sdram_agent_read_rp_ready;                                      // router_004:sink_ready -> agilex_5_soc_f2sdram_agent:read_rp_ready
	wire          agilex_5_soc_f2sdram_agent_read_rp_startofpacket;                              // agilex_5_soc_f2sdram_agent:read_rp_startofpacket -> router_004:sink_startofpacket
	wire          agilex_5_soc_f2sdram_agent_read_rp_endofpacket;                                // agilex_5_soc_f2sdram_agent:read_rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                          // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [192:0] router_004_src_data;                                                           // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                          // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                                        // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                  // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                    // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                          // router_002:src_valid -> f2sdram_only_master_master_limiter:cmd_sink_valid
	wire  [156:0] router_002_src_data;                                                           // router_002:src_data -> f2sdram_only_master_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                          // f2sdram_only_master_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                        // router_002:src_channel -> f2sdram_only_master_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                  // router_002:src_startofpacket -> f2sdram_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                    // router_002:src_endofpacket -> f2sdram_only_master_master_limiter:cmd_sink_endofpacket
	wire          f2sdram_only_master_master_limiter_rsp_src_valid;                              // f2sdram_only_master_master_limiter:rsp_src_valid -> f2sdram_only_master_master_agent:rp_valid
	wire  [156:0] f2sdram_only_master_master_limiter_rsp_src_data;                               // f2sdram_only_master_master_limiter:rsp_src_data -> f2sdram_only_master_master_agent:rp_data
	wire          f2sdram_only_master_master_limiter_rsp_src_ready;                              // f2sdram_only_master_master_agent:rp_ready -> f2sdram_only_master_master_limiter:rsp_src_ready
	wire    [2:0] f2sdram_only_master_master_limiter_rsp_src_channel;                            // f2sdram_only_master_master_limiter:rsp_src_channel -> f2sdram_only_master_master_agent:rp_channel
	wire          f2sdram_only_master_master_limiter_rsp_src_startofpacket;                      // f2sdram_only_master_master_limiter:rsp_src_startofpacket -> f2sdram_only_master_master_agent:rp_startofpacket
	wire          f2sdram_only_master_master_limiter_rsp_src_endofpacket;                        // f2sdram_only_master_master_limiter:rsp_src_endofpacket -> f2sdram_only_master_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [192:0] cmd_demux_src0_data;                                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                      // cmd_demux_001:src0_valid -> cmd_mux_001:sink0_valid
	wire  [192:0] cmd_demux_001_src0_data;                                                       // cmd_demux_001:src0_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src0_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                    // cmd_demux_001:src0_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_startofpacket;                                              // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                      // cmd_demux_002:src0_valid -> cmd_mux:sink1_valid
	wire  [192:0] cmd_demux_002_src0_data;                                                       // cmd_demux_002:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_002_src0_ready;                                                      // cmd_mux:sink1_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                    // cmd_demux_002:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                              // cmd_demux_002:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                // cmd_demux_002:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                      // cmd_demux_002:src1_valid -> cmd_mux_001:sink1_valid
	wire  [192:0] cmd_demux_002_src1_data;                                                       // cmd_demux_002:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_002_src1_ready;                                                      // cmd_mux_001:sink1_ready -> cmd_demux_002:src1_ready
	wire    [2:0] cmd_demux_002_src1_channel;                                                    // cmd_demux_002:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                              // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [192:0] rsp_demux_src0_data;                                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                          // rsp_demux:src1_valid -> rsp_mux_002:sink0_valid
	wire  [192:0] rsp_demux_src1_data;                                                           // rsp_demux:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src1_ready;                                                          // rsp_mux_002:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                        // rsp_demux:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                  // rsp_demux:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                    // rsp_demux:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                      // rsp_demux_001:src0_valid -> rsp_mux_001:sink0_valid
	wire  [192:0] rsp_demux_001_src0_data;                                                       // rsp_demux_001:src0_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src0_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                    // rsp_demux_001:src0_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_startofpacket;                                              // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                      // rsp_demux_001:src1_valid -> rsp_mux_002:sink1_valid
	wire  [192:0] rsp_demux_001_src1_data;                                                       // rsp_demux_001:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src1_ready;                                                      // rsp_mux_002:sink1_ready -> rsp_demux_001:src1_ready
	wire    [2:0] rsp_demux_001_src1_channel;                                                    // rsp_demux_001:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                              // rsp_demux_001:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                // rsp_demux_001:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire    [0:0] f2sdram_only_master_master_limiter_cmd_src_valid;                              // f2sdram_only_master_master_limiter:cmd_src_valid -> f2sdram_only_master_master_cmd_width_adapter:in_valid
	wire  [156:0] f2sdram_only_master_master_limiter_cmd_src_data;                               // f2sdram_only_master_master_limiter:cmd_src_data -> f2sdram_only_master_master_cmd_width_adapter:in_data
	wire          f2sdram_only_master_master_limiter_cmd_src_ready;                              // f2sdram_only_master_master_cmd_width_adapter:in_ready -> f2sdram_only_master_master_limiter:cmd_src_ready
	wire    [2:0] f2sdram_only_master_master_limiter_cmd_src_channel;                            // f2sdram_only_master_master_limiter:cmd_src_channel -> f2sdram_only_master_master_cmd_width_adapter:in_channel
	wire          f2sdram_only_master_master_limiter_cmd_src_startofpacket;                      // f2sdram_only_master_master_limiter:cmd_src_startofpacket -> f2sdram_only_master_master_cmd_width_adapter:in_startofpacket
	wire          f2sdram_only_master_master_limiter_cmd_src_endofpacket;                        // f2sdram_only_master_master_limiter:cmd_src_endofpacket -> f2sdram_only_master_master_cmd_width_adapter:in_endofpacket
	wire          f2sdram_only_master_master_cmd_width_adapter_src_valid;                        // f2sdram_only_master_master_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [192:0] f2sdram_only_master_master_cmd_width_adapter_src_data;                         // f2sdram_only_master_master_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          f2sdram_only_master_master_cmd_width_adapter_src_ready;                        // cmd_demux_002:sink_ready -> f2sdram_only_master_master_cmd_width_adapter:out_ready
	wire    [2:0] f2sdram_only_master_master_cmd_width_adapter_src_channel;                      // f2sdram_only_master_master_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          f2sdram_only_master_master_cmd_width_adapter_src_startofpacket;                // f2sdram_only_master_master_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          f2sdram_only_master_master_cmd_width_adapter_src_endofpacket;                  // f2sdram_only_master_master_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                         // rsp_mux_002:src_valid -> f2sdram_only_master_master_rsp_width_adapter:in_valid
	wire  [192:0] rsp_mux_002_src_data;                                                          // rsp_mux_002:src_data -> f2sdram_only_master_master_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                         // f2sdram_only_master_master_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                       // rsp_mux_002:src_channel -> f2sdram_only_master_master_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                 // rsp_mux_002:src_startofpacket -> f2sdram_only_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                   // rsp_mux_002:src_endofpacket -> f2sdram_only_master_master_rsp_width_adapter:in_endofpacket
	wire          f2sdram_only_master_master_rsp_width_adapter_src_valid;                        // f2sdram_only_master_master_rsp_width_adapter:out_valid -> f2sdram_only_master_master_limiter:rsp_sink_valid
	wire  [156:0] f2sdram_only_master_master_rsp_width_adapter_src_data;                         // f2sdram_only_master_master_rsp_width_adapter:out_data -> f2sdram_only_master_master_limiter:rsp_sink_data
	wire          f2sdram_only_master_master_rsp_width_adapter_src_ready;                        // f2sdram_only_master_master_limiter:rsp_sink_ready -> f2sdram_only_master_master_rsp_width_adapter:out_ready
	wire    [2:0] f2sdram_only_master_master_rsp_width_adapter_src_channel;                      // f2sdram_only_master_master_rsp_width_adapter:out_channel -> f2sdram_only_master_master_limiter:rsp_sink_channel
	wire          f2sdram_only_master_master_rsp_width_adapter_src_startofpacket;                // f2sdram_only_master_master_rsp_width_adapter:out_startofpacket -> f2sdram_only_master_master_limiter:rsp_sink_startofpacket
	wire          f2sdram_only_master_master_rsp_width_adapter_src_endofpacket;                  // f2sdram_only_master_master_rsp_width_adapter:out_endofpacket -> f2sdram_only_master_master_limiter:rsp_sink_endofpacket

	ghrd_hps_system_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) f2sdram_only_master_master_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                                //   input,   width = 1,                       clk.clk
		.reset                  (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (f2sdram_only_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (f2sdram_only_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (f2sdram_only_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (f2sdram_only_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (f2sdram_only_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (f2sdram_only_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (f2sdram_only_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (f2sdram_only_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (f2sdram_only_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (f2sdram_only_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (f2sdram_only_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (f2sdram_only_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (f2sdram_only_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (f2sdram_only_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (f2sdram_only_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (f2sdram_only_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (f2sdram_only_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (f2sdram_only_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (f2sdram_only_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                          // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                          // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                          // (terminated),                                        
		.av_chipselect          (1'b0),                                                                          // (terminated),                                        
		.av_lock                (1'b0),                                                                          // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                          // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                          // (terminated),                                        
		.uav_clken              (),                                                                              // (terminated),                                        
		.av_clken               (1'b1),                                                                          // (terminated),                                        
		.uav_response           (2'b00),                                                                         // (terminated),                                        
		.av_response            (),                                                                              // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                          // (terminated),                                        
		.av_writeresponsevalid  ()                                                                               // (terminated),                                        
	);

	ghrd_hps_system_altera_merlin_axi_translator_1931_d46vvwa #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (5),
		.DATA_WIDTH                        (64),
		.M0_SAI_WIDTH                      (4),
		.S0_SAI_WIDTH                      (4),
		.M0_USER_ADDRCHK_WIDTH             (4),
		.S0_USER_ADDRCHK_WIDTH             (4),
		.S0_ID_WIDTH                       (5),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (8),
		.S0_READ_ADDR_USER_WIDTH           (8),
		.M0_WRITE_ADDR_USER_WIDTH          (8),
		.M0_READ_ADDR_USER_WIDTH           (8),
		.S0_WRITE_DATA_USER_WIDTH          (8),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (8),
		.S0_READ_DATA_USER_WIDTH           (8),
		.M0_WRITE_DATA_USER_WIDTH          (8),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (8),
		.M0_READ_DATA_USER_WIDTH           (8),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0),
		.USE_M0_AWUSER_ADDRCHK             (0),
		.USE_M0_AWUSER_SAI                 (0),
		.USE_M0_ARUSER_ADDRCHK             (0),
		.USE_M0_ARUSER_SAI                 (0),
		.USE_M0_WUSER_DATACHK              (0),
		.USE_M0_WUSER_POISON               (0),
		.USE_M0_RUSER_DATACHK              (0),
		.USE_M0_RUSER_POISON               (0),
		.USE_S0_AWUSER_ADDRCHK             (0),
		.USE_S0_AWUSER_SAI                 (0),
		.USE_S0_ARUSER_ADDRCHK             (0),
		.USE_S0_ARUSER_SAI                 (0),
		.USE_S0_WUSER_DATACHK              (0),
		.USE_S0_WUSER_POISON               (0),
		.USE_S0_RUSER_DATACHK              (0),
		.USE_S0_RUSER_POISON               (0),
		.ROLE_BASED_USER                   (0)
	) agilex_5_soc_f2sdram_translator (
		.aclk              (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,       clk.clk
		.aresetn           (~f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid           (agilex_5_soc_f2sdram_awid),                                                //  output,   width = 5,        m0.awid
		.m0_awaddr         (agilex_5_soc_f2sdram_awaddr),                                              //  output,  width = 32,          .awaddr
		.m0_awlen          (agilex_5_soc_f2sdram_awlen),                                               //  output,   width = 8,          .awlen
		.m0_awsize         (agilex_5_soc_f2sdram_awsize),                                              //  output,   width = 3,          .awsize
		.m0_awburst        (agilex_5_soc_f2sdram_awburst),                                             //  output,   width = 2,          .awburst
		.m0_awlock         (agilex_5_soc_f2sdram_awlock),                                              //  output,   width = 1,          .awlock
		.m0_awcache        (agilex_5_soc_f2sdram_awcache),                                             //  output,   width = 4,          .awcache
		.m0_awprot         (agilex_5_soc_f2sdram_awprot),                                              //  output,   width = 3,          .awprot
		.m0_awuser         (agilex_5_soc_f2sdram_awuser),                                              //  output,   width = 8,          .awuser
		.m0_awqos          (agilex_5_soc_f2sdram_awqos),                                               //  output,   width = 4,          .awqos
		.m0_awregion       (agilex_5_soc_f2sdram_awregion),                                            //  output,   width = 4,          .awregion
		.m0_awvalid        (agilex_5_soc_f2sdram_awvalid),                                             //  output,   width = 1,          .awvalid
		.m0_awready        (agilex_5_soc_f2sdram_awready),                                             //   input,   width = 1,          .awready
		.m0_wdata          (agilex_5_soc_f2sdram_wdata),                                               //  output,  width = 64,          .wdata
		.m0_wstrb          (agilex_5_soc_f2sdram_wstrb),                                               //  output,   width = 8,          .wstrb
		.m0_wlast          (agilex_5_soc_f2sdram_wlast),                                               //  output,   width = 1,          .wlast
		.m0_wvalid         (agilex_5_soc_f2sdram_wvalid),                                              //  output,   width = 1,          .wvalid
		.m0_wuser          (agilex_5_soc_f2sdram_wuser),                                               //  output,   width = 8,          .wuser
		.m0_wready         (agilex_5_soc_f2sdram_wready),                                              //   input,   width = 1,          .wready
		.m0_bid            (agilex_5_soc_f2sdram_bid),                                                 //   input,   width = 5,          .bid
		.m0_bresp          (agilex_5_soc_f2sdram_bresp),                                               //   input,   width = 2,          .bresp
		.m0_buser          (agilex_5_soc_f2sdram_buser),                                               //   input,   width = 8,          .buser
		.m0_bvalid         (agilex_5_soc_f2sdram_bvalid),                                              //   input,   width = 1,          .bvalid
		.m0_bready         (agilex_5_soc_f2sdram_bready),                                              //  output,   width = 1,          .bready
		.m0_arid           (agilex_5_soc_f2sdram_arid),                                                //  output,   width = 5,          .arid
		.m0_araddr         (agilex_5_soc_f2sdram_araddr),                                              //  output,  width = 32,          .araddr
		.m0_arlen          (agilex_5_soc_f2sdram_arlen),                                               //  output,   width = 8,          .arlen
		.m0_arsize         (agilex_5_soc_f2sdram_arsize),                                              //  output,   width = 3,          .arsize
		.m0_arburst        (agilex_5_soc_f2sdram_arburst),                                             //  output,   width = 2,          .arburst
		.m0_arlock         (agilex_5_soc_f2sdram_arlock),                                              //  output,   width = 1,          .arlock
		.m0_arcache        (agilex_5_soc_f2sdram_arcache),                                             //  output,   width = 4,          .arcache
		.m0_arprot         (agilex_5_soc_f2sdram_arprot),                                              //  output,   width = 3,          .arprot
		.m0_aruser         (agilex_5_soc_f2sdram_aruser),                                              //  output,   width = 8,          .aruser
		.m0_arqos          (agilex_5_soc_f2sdram_arqos),                                               //  output,   width = 4,          .arqos
		.m0_arregion       (agilex_5_soc_f2sdram_arregion),                                            //  output,   width = 4,          .arregion
		.m0_arvalid        (agilex_5_soc_f2sdram_arvalid),                                             //  output,   width = 1,          .arvalid
		.m0_arready        (agilex_5_soc_f2sdram_arready),                                             //   input,   width = 1,          .arready
		.m0_rid            (agilex_5_soc_f2sdram_rid),                                                 //   input,   width = 5,          .rid
		.m0_rdata          (agilex_5_soc_f2sdram_rdata),                                               //   input,  width = 64,          .rdata
		.m0_rresp          (agilex_5_soc_f2sdram_rresp),                                               //   input,   width = 2,          .rresp
		.m0_rlast          (agilex_5_soc_f2sdram_rlast),                                               //   input,   width = 1,          .rlast
		.m0_rvalid         (agilex_5_soc_f2sdram_rvalid),                                              //   input,   width = 1,          .rvalid
		.m0_rready         (agilex_5_soc_f2sdram_rready),                                              //  output,   width = 1,          .rready
		.m0_ruser          (agilex_5_soc_f2sdram_ruser),                                               //   input,   width = 8,          .ruser
		.s0_awid           (agilex_5_soc_f2sdram_agent_altera_axi_master_awid),                        //   input,   width = 5,        s0.awid
		.s0_awaddr         (agilex_5_soc_f2sdram_agent_altera_axi_master_awaddr),                      //   input,  width = 32,          .awaddr
		.s0_awlen          (agilex_5_soc_f2sdram_agent_altera_axi_master_awlen),                       //   input,   width = 8,          .awlen
		.s0_awsize         (agilex_5_soc_f2sdram_agent_altera_axi_master_awsize),                      //   input,   width = 3,          .awsize
		.s0_awburst        (agilex_5_soc_f2sdram_agent_altera_axi_master_awburst),                     //   input,   width = 2,          .awburst
		.s0_awlock         (agilex_5_soc_f2sdram_agent_altera_axi_master_awlock),                      //   input,   width = 1,          .awlock
		.s0_awcache        (agilex_5_soc_f2sdram_agent_altera_axi_master_awcache),                     //   input,   width = 4,          .awcache
		.s0_awprot         (agilex_5_soc_f2sdram_agent_altera_axi_master_awprot),                      //   input,   width = 3,          .awprot
		.s0_awuser         (agilex_5_soc_f2sdram_agent_altera_axi_master_awuser),                      //   input,   width = 8,          .awuser
		.s0_awqos          (agilex_5_soc_f2sdram_agent_altera_axi_master_awqos),                       //   input,   width = 4,          .awqos
		.s0_awregion       (agilex_5_soc_f2sdram_agent_altera_axi_master_awregion),                    //   input,   width = 4,          .awregion
		.s0_awvalid        (agilex_5_soc_f2sdram_agent_altera_axi_master_awvalid),                     //   input,   width = 1,          .awvalid
		.s0_awready        (agilex_5_soc_f2sdram_agent_altera_axi_master_awready),                     //  output,   width = 1,          .awready
		.s0_wdata          (agilex_5_soc_f2sdram_agent_altera_axi_master_wdata),                       //   input,  width = 64,          .wdata
		.s0_wstrb          (agilex_5_soc_f2sdram_agent_altera_axi_master_wstrb),                       //   input,   width = 8,          .wstrb
		.s0_wlast          (agilex_5_soc_f2sdram_agent_altera_axi_master_wlast),                       //   input,   width = 1,          .wlast
		.s0_wvalid         (agilex_5_soc_f2sdram_agent_altera_axi_master_wvalid),                      //   input,   width = 1,          .wvalid
		.s0_wuser          (agilex_5_soc_f2sdram_agent_altera_axi_master_wuser),                       //   input,   width = 8,          .wuser
		.s0_wready         (agilex_5_soc_f2sdram_agent_altera_axi_master_wready),                      //  output,   width = 1,          .wready
		.s0_bid            (agilex_5_soc_f2sdram_agent_altera_axi_master_bid),                         //  output,   width = 5,          .bid
		.s0_bresp          (agilex_5_soc_f2sdram_agent_altera_axi_master_bresp),                       //  output,   width = 2,          .bresp
		.s0_buser          (agilex_5_soc_f2sdram_agent_altera_axi_master_buser),                       //  output,   width = 8,          .buser
		.s0_bvalid         (agilex_5_soc_f2sdram_agent_altera_axi_master_bvalid),                      //  output,   width = 1,          .bvalid
		.s0_bready         (agilex_5_soc_f2sdram_agent_altera_axi_master_bready),                      //   input,   width = 1,          .bready
		.s0_arid           (agilex_5_soc_f2sdram_agent_altera_axi_master_arid),                        //   input,   width = 5,          .arid
		.s0_araddr         (agilex_5_soc_f2sdram_agent_altera_axi_master_araddr),                      //   input,  width = 32,          .araddr
		.s0_arlen          (agilex_5_soc_f2sdram_agent_altera_axi_master_arlen),                       //   input,   width = 8,          .arlen
		.s0_arsize         (agilex_5_soc_f2sdram_agent_altera_axi_master_arsize),                      //   input,   width = 3,          .arsize
		.s0_arburst        (agilex_5_soc_f2sdram_agent_altera_axi_master_arburst),                     //   input,   width = 2,          .arburst
		.s0_arlock         (agilex_5_soc_f2sdram_agent_altera_axi_master_arlock),                      //   input,   width = 1,          .arlock
		.s0_arcache        (agilex_5_soc_f2sdram_agent_altera_axi_master_arcache),                     //   input,   width = 4,          .arcache
		.s0_arprot         (agilex_5_soc_f2sdram_agent_altera_axi_master_arprot),                      //   input,   width = 3,          .arprot
		.s0_aruser         (agilex_5_soc_f2sdram_agent_altera_axi_master_aruser),                      //   input,   width = 8,          .aruser
		.s0_arqos          (agilex_5_soc_f2sdram_agent_altera_axi_master_arqos),                       //   input,   width = 4,          .arqos
		.s0_arregion       (agilex_5_soc_f2sdram_agent_altera_axi_master_arregion),                    //   input,   width = 4,          .arregion
		.s0_arvalid        (agilex_5_soc_f2sdram_agent_altera_axi_master_arvalid),                     //   input,   width = 1,          .arvalid
		.s0_arready        (agilex_5_soc_f2sdram_agent_altera_axi_master_arready),                     //  output,   width = 1,          .arready
		.s0_rid            (agilex_5_soc_f2sdram_agent_altera_axi_master_rid),                         //  output,   width = 5,          .rid
		.s0_rdata          (agilex_5_soc_f2sdram_agent_altera_axi_master_rdata),                       //  output,  width = 64,          .rdata
		.s0_rresp          (agilex_5_soc_f2sdram_agent_altera_axi_master_rresp),                       //  output,   width = 2,          .rresp
		.s0_rlast          (agilex_5_soc_f2sdram_agent_altera_axi_master_rlast),                       //  output,   width = 1,          .rlast
		.s0_rvalid         (agilex_5_soc_f2sdram_agent_altera_axi_master_rvalid),                      //  output,   width = 1,          .rvalid
		.s0_rready         (agilex_5_soc_f2sdram_agent_altera_axi_master_rready),                      //   input,   width = 1,          .rready
		.s0_ruser          (agilex_5_soc_f2sdram_agent_altera_axi_master_ruser),                       //  output,   width = 8,          .ruser
		.m0_awuser_addrchk (),                                                                         // (terminated),                        
		.m0_awuser_sai     (),                                                                         // (terminated),                        
		.m0_wuser_datachk  (),                                                                         // (terminated),                        
		.m0_wuser_poison   (),                                                                         // (terminated),                        
		.m0_aruser_addrchk (),                                                                         // (terminated),                        
		.m0_aruser_sai     (),                                                                         // (terminated),                        
		.m0_ruser_datachk  (8'b00000000),                                                              // (terminated),                        
		.m0_ruser_poison   (1'b0),                                                                     // (terminated),                        
		.s0_awuser_addrchk (4'b0000),                                                                  // (terminated),                        
		.s0_awuser_sai     (4'b0000),                                                                  // (terminated),                        
		.s0_wuser_datachk  (8'b00000000),                                                              // (terminated),                        
		.s0_wuser_poison   (1'b0),                                                                     // (terminated),                        
		.s0_aruser_addrchk (4'b0000),                                                                  // (terminated),                        
		.s0_aruser_sai     (4'b0000),                                                                  // (terminated),                        
		.s0_ruser_datachk  (),                                                                         // (terminated),                        
		.s0_ruser_poison   (),                                                                         // (terminated),                        
		.s0_wid            (5'b00000),                                                                 // (terminated),                        
		.s0_ardomain       (2'b00),                                                                    // (terminated),                        
		.s0_arsnoop        (4'b0000),                                                                  // (terminated),                        
		.s0_arbar          (2'b00),                                                                    // (terminated),                        
		.s0_awdomain       (2'b00),                                                                    // (terminated),                        
		.s0_awsnoop        (3'b000),                                                                   // (terminated),                        
		.s0_awbar          (2'b00),                                                                    // (terminated),                        
		.s0_awunique       (1'b0),                                                                     // (terminated),                        
		.m0_wid            (),                                                                         // (terminated),                        
		.m0_ardomain       (),                                                                         // (terminated),                        
		.m0_arsnoop        (),                                                                         // (terminated),                        
		.m0_arbar          (),                                                                         // (terminated),                        
		.m0_awdomain       (),                                                                         // (terminated),                        
		.m0_awsnoop        (),                                                                         // (terminated),                        
		.m0_awbar          (),                                                                         // (terminated),                        
		.m0_awunique       ()                                                                          // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_axi_master_ni_1962_2kryw2a #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.SAI_WIDTH                 (1),
		.ADDRCHK_WIDTH             (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.AXI_VERSION               ("AXI3"),
		.ACE_LITE_SUPPORT          (0),
		.ROLE_BASED_USER           (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (151),
		.PKT_CACHE_H               (165),
		.PKT_CACHE_L               (162),
		.PKT_ADDR_SIDEBAND_H       (142),
		.PKT_ADDR_SIDEBAND_L       (135),
		.PKT_PROTECTION_H          (161),
		.PKT_PROTECTION_L          (159),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_RESPONSE_STATUS_L     (166),
		.PKT_RESPONSE_STATUS_H     (167),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (156),
		.PKT_SRC_ID_L              (156),
		.PKT_DEST_ID_H             (157),
		.PKT_DEST_ID_L             (157),
		.PKT_THREAD_ID_H           (158),
		.PKT_THREAD_ID_L           (158),
		.PKT_QOS_L                 (152),
		.PKT_QOS_H                 (155),
		.PKT_ORI_BURST_SIZE_L      (168),
		.PKT_ORI_BURST_SIZE_H      (170),
		.PKT_DATA_SIDEBAND_H       (150),
		.PKT_DATA_SIDEBAND_L       (143),
		.PKT_DOMAIN_H              (178),
		.PKT_DOMAIN_L              (177),
		.PKT_SNOOP_H               (176),
		.PKT_SNOOP_L               (173),
		.PKT_BARRIER_H             (172),
		.PKT_BARRIER_L             (171),
		.PKT_WUNIQUE               (179),
		.PKT_EOP_OOO               (184),
		.PKT_SOP_OOO               (185),
		.PKT_POISON_H              (180),
		.PKT_POISON_L              (180),
		.PKT_DATACHK_H             (181),
		.PKT_DATACHK_L             (181),
		.PKT_ADDRCHK_H             (182),
		.PKT_ADDRCHK_L             (182),
		.PKT_SAI_H                 (183),
		.PKT_SAI_L                 (183),
		.ST_DATA_W                 (193),
		.ST_CHANNEL_W              (3),
		.ID                        (1),
		.SYNC_RESET                (1)
	) video_sys_0_hdmi_dmac_master_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,              clk.clk
		.aresetn                (~f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (video_sys_0_hdmi_dmac_master_agent_write_cp_valid),                        //  output,    width = 1,         write_cp.valid
		.write_cp_data          (video_sys_0_hdmi_dmac_master_agent_write_cp_data),                         //  output,  width = 193,                 .data
		.write_cp_startofpacket (video_sys_0_hdmi_dmac_master_agent_write_cp_startofpacket),                //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (video_sys_0_hdmi_dmac_master_agent_write_cp_endofpacket),                  //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (video_sys_0_hdmi_dmac_master_agent_write_cp_ready),                        //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                        //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                         //   input,  width = 193,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                      //   input,    width = 3,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                  //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                        //  output,    width = 1,                 .ready
		.read_cp_valid          (video_sys_0_hdmi_dmac_master_agent_read_cp_valid),                         //  output,    width = 1,          read_cp.valid
		.read_cp_data           (video_sys_0_hdmi_dmac_master_agent_read_cp_data),                          //  output,  width = 193,                 .data
		.read_cp_startofpacket  (video_sys_0_hdmi_dmac_master_agent_read_cp_startofpacket),                 //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (video_sys_0_hdmi_dmac_master_agent_read_cp_endofpacket),                   //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (video_sys_0_hdmi_dmac_master_agent_read_cp_ready),                         //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                    //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                     //   input,  width = 193,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                  //   input,    width = 3,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                            //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                              //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                    //  output,    width = 1,                 .ready
		.awid                   (video_sys_0_hdmi_dmac_master_awid),                                        //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (video_sys_0_hdmi_dmac_master_awaddr),                                      //   input,   width = 32,                 .awaddr
		.awlen                  (video_sys_0_hdmi_dmac_master_awlen),                                       //   input,    width = 4,                 .awlen
		.awsize                 (video_sys_0_hdmi_dmac_master_awsize),                                      //   input,    width = 3,                 .awsize
		.awburst                (video_sys_0_hdmi_dmac_master_awburst),                                     //   input,    width = 2,                 .awburst
		.awlock                 (video_sys_0_hdmi_dmac_master_awlock),                                      //   input,    width = 2,                 .awlock
		.awcache                (video_sys_0_hdmi_dmac_master_awcache),                                     //   input,    width = 4,                 .awcache
		.awprot                 (video_sys_0_hdmi_dmac_master_awprot),                                      //   input,    width = 3,                 .awprot
		.awvalid                (video_sys_0_hdmi_dmac_master_awvalid),                                     //   input,    width = 1,                 .awvalid
		.awready                (video_sys_0_hdmi_dmac_master_awready),                                     //  output,    width = 1,                 .awready
		.wid                    (video_sys_0_hdmi_dmac_master_wid),                                         //   input,    width = 1,                 .wid
		.wdata                  (video_sys_0_hdmi_dmac_master_wdata),                                       //   input,   width = 64,                 .wdata
		.wstrb                  (video_sys_0_hdmi_dmac_master_wstrb),                                       //   input,    width = 8,                 .wstrb
		.wlast                  (video_sys_0_hdmi_dmac_master_wlast),                                       //   input,    width = 1,                 .wlast
		.wvalid                 (video_sys_0_hdmi_dmac_master_wvalid),                                      //   input,    width = 1,                 .wvalid
		.wready                 (video_sys_0_hdmi_dmac_master_wready),                                      //  output,    width = 1,                 .wready
		.bid                    (video_sys_0_hdmi_dmac_master_bid),                                         //  output,    width = 1,                 .bid
		.bresp                  (video_sys_0_hdmi_dmac_master_bresp),                                       //  output,    width = 2,                 .bresp
		.bvalid                 (video_sys_0_hdmi_dmac_master_bvalid),                                      //  output,    width = 1,                 .bvalid
		.bready                 (video_sys_0_hdmi_dmac_master_bready),                                      //   input,    width = 1,                 .bready
		.arid                   (video_sys_0_hdmi_dmac_master_arid),                                        //   input,    width = 1,                 .arid
		.araddr                 (video_sys_0_hdmi_dmac_master_araddr),                                      //   input,   width = 32,                 .araddr
		.arlen                  (video_sys_0_hdmi_dmac_master_arlen),                                       //   input,    width = 4,                 .arlen
		.arsize                 (video_sys_0_hdmi_dmac_master_arsize),                                      //   input,    width = 3,                 .arsize
		.arburst                (video_sys_0_hdmi_dmac_master_arburst),                                     //   input,    width = 2,                 .arburst
		.arlock                 (video_sys_0_hdmi_dmac_master_arlock),                                      //   input,    width = 2,                 .arlock
		.arcache                (video_sys_0_hdmi_dmac_master_arcache),                                     //   input,    width = 4,                 .arcache
		.arprot                 (video_sys_0_hdmi_dmac_master_arprot),                                      //   input,    width = 3,                 .arprot
		.arvalid                (video_sys_0_hdmi_dmac_master_arvalid),                                     //   input,    width = 1,                 .arvalid
		.arready                (video_sys_0_hdmi_dmac_master_arready),                                     //  output,    width = 1,                 .arready
		.rid                    (video_sys_0_hdmi_dmac_master_rid),                                         //  output,    width = 1,                 .rid
		.rdata                  (video_sys_0_hdmi_dmac_master_rdata),                                       //  output,   width = 64,                 .rdata
		.rresp                  (video_sys_0_hdmi_dmac_master_rresp),                                       //  output,    width = 2,                 .rresp
		.rlast                  (video_sys_0_hdmi_dmac_master_rlast),                                       //  output,    width = 1,                 .rlast
		.rvalid                 (video_sys_0_hdmi_dmac_master_rvalid),                                      //  output,    width = 1,                 .rvalid
		.rready                 (video_sys_0_hdmi_dmac_master_rready),                                      //   input,    width = 1,                 .rready
		.awuser                 (1'b0),                                                                     // (terminated),                                
		.awuser_addrchk         (1'b0),                                                                     // (terminated),                                
		.awuser_sai             (1'b0),                                                                     // (terminated),                                
		.wuser_datachk          (8'b00000000),                                                              // (terminated),                                
		.wuser_poison           (1'b0),                                                                     // (terminated),                                
		.aruser                 (1'b0),                                                                     // (terminated),                                
		.aruser_addrchk         (1'b0),                                                                     // (terminated),                                
		.aruser_sai             (1'b0),                                                                     // (terminated),                                
		.ruser_datachk          (),                                                                         // (terminated),                                
		.ruser_poison           (),                                                                         // (terminated),                                
		.awqos                  (4'b0000),                                                                  // (terminated),                                
		.arqos                  (4'b0000),                                                                  // (terminated),                                
		.awregion               (4'b0000),                                                                  // (terminated),                                
		.arregion               (4'b0000),                                                                  // (terminated),                                
		.wuser                  (1'b0),                                                                     // (terminated),                                
		.ruser                  (),                                                                         // (terminated),                                
		.buser                  (),                                                                         // (terminated),                                
		.arsnoop                (4'b0000),                                                                  // (terminated),                                
		.ardomain               (2'b00),                                                                    // (terminated),                                
		.arbar                  (2'b00),                                                                    // (terminated),                                
		.awsnoop                (3'b000),                                                                   // (terminated),                                
		.awdomain               (2'b00),                                                                    // (terminated),                                
		.awbar                  (2'b00),                                                                    // (terminated),                                
		.awunique               (1'b0)                                                                      // (terminated),                                
	);

	ghrd_hps_system_altera_merlin_master_agent_1921_2inlndi #(
		.PKT_WUNIQUE               (143),
		.PKT_DOMAIN_H              (142),
		.PKT_DOMAIN_L              (141),
		.PKT_SNOOP_H               (140),
		.PKT_SNOOP_L               (137),
		.PKT_BARRIER_H             (136),
		.PKT_BARRIER_L             (135),
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_QOS_H                 (119),
		.PKT_QOS_L                 (116),
		.PKT_DATA_SIDEBAND_H       (114),
		.PKT_DATA_SIDEBAND_L       (107),
		.PKT_ADDR_SIDEBAND_H       (106),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_CACHE_H               (129),
		.PKT_CACHE_L               (126),
		.PKT_THREAD_ID_H           (122),
		.PKT_THREAD_ID_L           (122),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (115),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (120),
		.PKT_SRC_ID_L              (120),
		.PKT_DEST_ID_H             (121),
		.PKT_DEST_ID_L             (121),
		.PKT_POISON_H              (144),
		.PKT_POISON_L              (144),
		.PKT_DATACHK_H             (145),
		.PKT_DATACHK_L             (145),
		.PKT_ADDRCHK_H             (146),
		.PKT_ADDRCHK_L             (146),
		.PKT_SAI_H                 (147),
		.PKT_SAI_L                 (147),
		.ST_DATA_W                 (157),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) f2sdram_only_master_master_agent (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset                 (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (f2sdram_only_master_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (f2sdram_only_master_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (f2sdram_only_master_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (f2sdram_only_master_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (f2sdram_only_master_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (f2sdram_only_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (f2sdram_only_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (f2sdram_only_master_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (f2sdram_only_master_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (f2sdram_only_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (f2sdram_only_master_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (f2sdram_only_master_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (f2sdram_only_master_master_agent_cp_data),                                      //  output,  width = 157,          .data
		.cp_startofpacket      (f2sdram_only_master_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (f2sdram_only_master_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (f2sdram_only_master_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (f2sdram_only_master_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (f2sdram_only_master_master_limiter_rsp_src_data),                               //   input,  width = 157,          .data
		.rp_channel            (f2sdram_only_master_master_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (f2sdram_only_master_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (f2sdram_only_master_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (f2sdram_only_master_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                              // (terminated),                         
		.av_writeresponsevalid ()                                                                               // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1971_gtdsiga #(
		.PKT_QOS_H                   (155),
		.PKT_QOS_L                   (152),
		.PKT_THREAD_ID_H             (158),
		.PKT_THREAD_ID_L             (158),
		.PKT_RESPONSE_STATUS_H       (167),
		.PKT_RESPONSE_STATUS_L       (166),
		.PKT_BEGIN_BURST             (151),
		.PKT_CACHE_H                 (165),
		.PKT_CACHE_L                 (162),
		.PKT_DATA_SIDEBAND_H         (150),
		.PKT_DATA_SIDEBAND_L         (143),
		.PKT_ADDR_SIDEBAND_H         (142),
		.PKT_ADDR_SIDEBAND_L         (135),
		.PKT_BURST_TYPE_H            (134),
		.PKT_BURST_TYPE_L            (133),
		.PKT_PROTECTION_H            (161),
		.PKT_PROTECTION_L            (159),
		.PKT_BURST_SIZE_H            (132),
		.PKT_BURST_SIZE_L            (130),
		.PKT_BURSTWRAP_H             (129),
		.PKT_BURSTWRAP_L             (122),
		.PKT_BYTE_CNT_H              (121),
		.PKT_BYTE_CNT_L              (110),
		.PKT_ADDR_H                  (103),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (109),
		.PKT_TRANS_LOCK              (108),
		.PKT_TRANS_COMPRESSED_READ   (104),
		.PKT_TRANS_POSTED            (105),
		.PKT_TRANS_WRITE             (106),
		.PKT_TRANS_READ              (107),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (156),
		.PKT_SRC_ID_L                (156),
		.PKT_DEST_ID_H               (157),
		.PKT_DEST_ID_L               (157),
		.PKT_ORI_BURST_SIZE_L        (168),
		.PKT_ORI_BURST_SIZE_H        (170),
		.PKT_DOMAIN_L                (177),
		.PKT_DOMAIN_H                (178),
		.PKT_SNOOP_L                 (173),
		.PKT_SNOOP_H                 (176),
		.PKT_BARRIER_L               (171),
		.PKT_BARRIER_H               (172),
		.PKT_WUNIQUE                 (179),
		.PKT_EOP_OOO                 (184),
		.PKT_SOP_OOO                 (185),
		.PKT_POISON_H                (180),
		.PKT_POISON_L                (180),
		.PKT_DATACHK_H               (181),
		.PKT_DATACHK_L               (181),
		.PKT_ADDRCHK_H               (182),
		.PKT_ADDRCHK_L               (182),
		.PKT_SAI_H                   (183),
		.PKT_SAI_L                   (183),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.ADDR_USER_WIDTH             (8),
		.DATA_USER_WIDTH             (8),
		.ST_DATA_W                   (193),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (3),
		.AXI_SLAVE_ID_W              (5),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) agilex_5_soc_f2sdram_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,        clock_sink.clk
		.aresetn                (~f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                                    //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                                    //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                                     //   input,  width = 193,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                                  //   input,    width = 3,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                            //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                              //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                        //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                        //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                         //   input,  width = 193,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                                      //   input,    width = 3,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                                //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                                  //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (agilex_5_soc_f2sdram_agent_read_rp_ready),                                 //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (agilex_5_soc_f2sdram_agent_read_rp_valid),                                 //  output,    width = 1,                  .valid
		.read_rp_data           (agilex_5_soc_f2sdram_agent_read_rp_data),                                  //  output,  width = 193,                  .data
		.read_rp_startofpacket  (agilex_5_soc_f2sdram_agent_read_rp_startofpacket),                         //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (agilex_5_soc_f2sdram_agent_read_rp_endofpacket),                           //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (agilex_5_soc_f2sdram_agent_write_rp_ready),                                //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (agilex_5_soc_f2sdram_agent_write_rp_valid),                                //  output,    width = 1,                  .valid
		.write_rp_data          (agilex_5_soc_f2sdram_agent_write_rp_data),                                 //  output,  width = 193,                  .data
		.write_rp_startofpacket (agilex_5_soc_f2sdram_agent_write_rp_startofpacket),                        //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (agilex_5_soc_f2sdram_agent_write_rp_endofpacket),                          //  output,    width = 1,                  .endofpacket
		.awid                   (agilex_5_soc_f2sdram_agent_altera_axi_master_awid),                        //  output,    width = 5, altera_axi_master.awid
		.awaddr                 (agilex_5_soc_f2sdram_agent_altera_axi_master_awaddr),                      //  output,   width = 32,                  .awaddr
		.awlen                  (agilex_5_soc_f2sdram_agent_altera_axi_master_awlen),                       //  output,    width = 8,                  .awlen
		.awsize                 (agilex_5_soc_f2sdram_agent_altera_axi_master_awsize),                      //  output,    width = 3,                  .awsize
		.awburst                (agilex_5_soc_f2sdram_agent_altera_axi_master_awburst),                     //  output,    width = 2,                  .awburst
		.awlock                 (agilex_5_soc_f2sdram_agent_altera_axi_master_awlock),                      //  output,    width = 1,                  .awlock
		.awcache                (agilex_5_soc_f2sdram_agent_altera_axi_master_awcache),                     //  output,    width = 4,                  .awcache
		.awprot                 (agilex_5_soc_f2sdram_agent_altera_axi_master_awprot),                      //  output,    width = 3,                  .awprot
		.awuser                 (agilex_5_soc_f2sdram_agent_altera_axi_master_awuser),                      //  output,    width = 8,                  .awuser
		.awvalid                (agilex_5_soc_f2sdram_agent_altera_axi_master_awvalid),                     //  output,    width = 1,                  .awvalid
		.awready                (agilex_5_soc_f2sdram_agent_altera_axi_master_awready),                     //   input,    width = 1,                  .awready
		.wdata                  (agilex_5_soc_f2sdram_agent_altera_axi_master_wdata),                       //  output,   width = 64,                  .wdata
		.wstrb                  (agilex_5_soc_f2sdram_agent_altera_axi_master_wstrb),                       //  output,    width = 8,                  .wstrb
		.wlast                  (agilex_5_soc_f2sdram_agent_altera_axi_master_wlast),                       //  output,    width = 1,                  .wlast
		.wvalid                 (agilex_5_soc_f2sdram_agent_altera_axi_master_wvalid),                      //  output,    width = 1,                  .wvalid
		.wready                 (agilex_5_soc_f2sdram_agent_altera_axi_master_wready),                      //   input,    width = 1,                  .wready
		.bid                    (agilex_5_soc_f2sdram_agent_altera_axi_master_bid),                         //   input,    width = 5,                  .bid
		.bresp                  (agilex_5_soc_f2sdram_agent_altera_axi_master_bresp),                       //   input,    width = 2,                  .bresp
		.bvalid                 (agilex_5_soc_f2sdram_agent_altera_axi_master_bvalid),                      //   input,    width = 1,                  .bvalid
		.bready                 (agilex_5_soc_f2sdram_agent_altera_axi_master_bready),                      //  output,    width = 1,                  .bready
		.arid                   (agilex_5_soc_f2sdram_agent_altera_axi_master_arid),                        //  output,    width = 5,                  .arid
		.araddr                 (agilex_5_soc_f2sdram_agent_altera_axi_master_araddr),                      //  output,   width = 32,                  .araddr
		.arlen                  (agilex_5_soc_f2sdram_agent_altera_axi_master_arlen),                       //  output,    width = 8,                  .arlen
		.arsize                 (agilex_5_soc_f2sdram_agent_altera_axi_master_arsize),                      //  output,    width = 3,                  .arsize
		.arburst                (agilex_5_soc_f2sdram_agent_altera_axi_master_arburst),                     //  output,    width = 2,                  .arburst
		.arlock                 (agilex_5_soc_f2sdram_agent_altera_axi_master_arlock),                      //  output,    width = 1,                  .arlock
		.arcache                (agilex_5_soc_f2sdram_agent_altera_axi_master_arcache),                     //  output,    width = 4,                  .arcache
		.arprot                 (agilex_5_soc_f2sdram_agent_altera_axi_master_arprot),                      //  output,    width = 3,                  .arprot
		.aruser                 (agilex_5_soc_f2sdram_agent_altera_axi_master_aruser),                      //  output,    width = 8,                  .aruser
		.arvalid                (agilex_5_soc_f2sdram_agent_altera_axi_master_arvalid),                     //  output,    width = 1,                  .arvalid
		.arready                (agilex_5_soc_f2sdram_agent_altera_axi_master_arready),                     //   input,    width = 1,                  .arready
		.rid                    (agilex_5_soc_f2sdram_agent_altera_axi_master_rid),                         //   input,    width = 5,                  .rid
		.rdata                  (agilex_5_soc_f2sdram_agent_altera_axi_master_rdata),                       //   input,   width = 64,                  .rdata
		.rresp                  (agilex_5_soc_f2sdram_agent_altera_axi_master_rresp),                       //   input,    width = 2,                  .rresp
		.rlast                  (agilex_5_soc_f2sdram_agent_altera_axi_master_rlast),                       //   input,    width = 1,                  .rlast
		.rvalid                 (agilex_5_soc_f2sdram_agent_altera_axi_master_rvalid),                      //   input,    width = 1,                  .rvalid
		.rready                 (agilex_5_soc_f2sdram_agent_altera_axi_master_rready),                      //  output,    width = 1,                  .rready
		.wuser                  (agilex_5_soc_f2sdram_agent_altera_axi_master_wuser),                       //  output,    width = 8,                  .wuser
		.awqos                  (agilex_5_soc_f2sdram_agent_altera_axi_master_awqos),                       //  output,    width = 4,                  .awqos
		.awregion               (agilex_5_soc_f2sdram_agent_altera_axi_master_awregion),                    //  output,    width = 4,                  .awregion
		.ruser                  (agilex_5_soc_f2sdram_agent_altera_axi_master_ruser),                       //   input,    width = 8,                  .ruser
		.buser                  (agilex_5_soc_f2sdram_agent_altera_axi_master_buser),                       //   input,    width = 8,                  .buser
		.arqos                  (agilex_5_soc_f2sdram_agent_altera_axi_master_arqos),                       //  output,    width = 4,                  .arqos
		.arregion               (agilex_5_soc_f2sdram_agent_altera_axi_master_arregion),                    //  output,    width = 4,                  .arregion
		.awuser_addrchk         (),                                                                         // (terminated),                                 
		.awuser_sai             (),                                                                         // (terminated),                                 
		.wuser_datachk          (),                                                                         // (terminated),                                 
		.wuser_poison           (),                                                                         // (terminated),                                 
		.aruser_addrchk         (),                                                                         // (terminated),                                 
		.aruser_sai             (),                                                                         // (terminated),                                 
		.ruser_datachk          (8'b00000000),                                                              // (terminated),                                 
		.ruser_poison           (1'b0),                                                                     // (terminated),                                 
		.wid                    (),                                                                         // (terminated),                                 
		.arsnoop                (),                                                                         // (terminated),                                 
		.ardomain               (),                                                                         // (terminated),                                 
		.arbar                  (),                                                                         // (terminated),                                 
		.awsnoop                (),                                                                         // (terminated),                                 
		.awdomain               (),                                                                         // (terminated),                                 
		.awbar                  (),                                                                         // (terminated),                                 
		.awunique               ()                                                                          // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_router_1921_e7i6tkq router (
		.sink_ready         (video_sys_0_hdmi_dmac_master_agent_write_cp_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (video_sys_0_hdmi_dmac_master_agent_write_cp_valid),                       //   input,    width = 1,          .valid
		.sink_data          (video_sys_0_hdmi_dmac_master_agent_write_cp_data),                        //   input,  width = 193,          .data
		.sink_startofpacket (video_sys_0_hdmi_dmac_master_agent_write_cp_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (video_sys_0_hdmi_dmac_master_agent_write_cp_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                         //  output,  width = 193,          .data
		.src_channel        (router_src_channel),                                                      //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_msmlmqi router_001 (
		.sink_ready         (video_sys_0_hdmi_dmac_master_agent_read_cp_ready),                        //  output,    width = 1,      sink.ready
		.sink_valid         (video_sys_0_hdmi_dmac_master_agent_read_cp_valid),                        //   input,    width = 1,          .valid
		.sink_data          (video_sys_0_hdmi_dmac_master_agent_read_cp_data),                         //   input,  width = 193,          .data
		.sink_startofpacket (video_sys_0_hdmi_dmac_master_agent_read_cp_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (video_sys_0_hdmi_dmac_master_agent_read_cp_endofpacket),                  //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                     //  output,  width = 193,          .data
		.src_channel        (router_001_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_wdoq7gy router_002 (
		.sink_ready         (f2sdram_only_master_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (f2sdram_only_master_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (f2sdram_only_master_master_agent_cp_data),                                //   input,  width = 157,          .data
		.sink_startofpacket (f2sdram_only_master_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (f2sdram_only_master_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                     //  output,  width = 157,          .data
		.src_channel        (router_002_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_ikisgjy router_003 (
		.sink_ready         (agilex_5_soc_f2sdram_agent_write_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_f2sdram_agent_write_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_f2sdram_agent_write_rp_data),                                //   input,  width = 193,          .data
		.sink_startofpacket (agilex_5_soc_f2sdram_agent_write_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_f2sdram_agent_write_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                     //  output,  width = 193,          .data
		.src_channel        (router_003_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_ec5snpq router_004 (
		.sink_ready         (agilex_5_soc_f2sdram_agent_read_rp_ready),                                //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_f2sdram_agent_read_rp_valid),                                //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_f2sdram_agent_read_rp_data),                                 //   input,  width = 193,          .data
		.sink_startofpacket (agilex_5_soc_f2sdram_agent_read_rp_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_f2sdram_agent_read_rp_endofpacket),                          //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                     //  output,  width = 193,          .data
		.src_channel        (router_004_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_traffic_limiter_1921_js7yfey #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (121),
		.PKT_DEST_ID_L                        (121),
		.PKT_SRC_ID_H                         (120),
		.PKT_SRC_ID_L                         (120),
		.PKT_BYTE_CNT_H                       (85),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (156),
		.PKT_TRANS_SEQ_L                      (150),
		.MAX_OUTSTANDING_RESPONSES            (2),
		.PIPELINED                            (0),
		.ST_DATA_W                            (157),
		.ST_CHANNEL_W                         (3),
		.VALID_WIDTH                          (1),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) f2sdram_only_master_master_limiter (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset                  (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                    //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                    //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                                     //   input,  width = 157,          .data
		.cmd_sink_channel       (router_002_src_channel),                                                  //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (f2sdram_only_master_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (f2sdram_only_master_master_limiter_cmd_src_data),                         //  output,  width = 157,          .data
		.cmd_src_channel        (f2sdram_only_master_master_limiter_cmd_src_channel),                      //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (f2sdram_only_master_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (f2sdram_only_master_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (f2sdram_only_master_master_limiter_cmd_src_valid),                        //  output,    width = 1,          .valid
		.rsp_sink_ready         (f2sdram_only_master_master_rsp_width_adapter_src_ready),                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (f2sdram_only_master_master_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (f2sdram_only_master_master_rsp_width_adapter_src_channel),                //   input,    width = 3,          .channel
		.rsp_sink_data          (f2sdram_only_master_master_rsp_width_adapter_src_data),                   //   input,  width = 157,          .data
		.rsp_sink_startofpacket (f2sdram_only_master_master_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (f2sdram_only_master_master_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (f2sdram_only_master_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (f2sdram_only_master_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (f2sdram_only_master_master_limiter_rsp_src_data),                         //  output,  width = 157,          .data
		.rsp_src_channel        (f2sdram_only_master_master_limiter_rsp_src_channel),                      //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (f2sdram_only_master_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (f2sdram_only_master_master_limiter_rsp_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_u4xtjba cmd_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                      //   input,    width = 3,          .channel
		.sink_data          (router_src_data),                                                         //   input,  width = 193,          .data
		.sink_startofpacket (router_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                        //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                     //  output,  width = 193,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                  //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_u4xtjba cmd_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                  //   input,    width = 3,          .channel
		.sink_data          (router_001_src_data),                                                     //   input,  width = 193,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                    //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                 //  output,  width = 193,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                              //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_lxhsfeq cmd_demux_002 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (f2sdram_only_master_master_cmd_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (f2sdram_only_master_master_cmd_width_adapter_src_channel),                //   input,    width = 3,          .channel
		.sink_data          (f2sdram_only_master_master_cmd_width_adapter_src_data),                   //   input,  width = 193,          .data
		.sink_startofpacket (f2sdram_only_master_master_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (f2sdram_only_master_master_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (f2sdram_only_master_master_cmd_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                                                 //  output,  width = 193,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                              //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                                //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                                //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_002_src1_data),                                                 //  output,  width = 193,          .data
		.src1_channel       (cmd_demux_002_src1_channel),                                              //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_mghpxzq cmd_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                        //  output,  width = 193,          .data
		.src_channel         (cmd_mux_src_channel),                                                     //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                  //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                     //   input,  width = 193,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                                                //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                                                //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                                              //   input,    width = 3,          .channel
		.sink1_data          (cmd_demux_002_src0_data),                                                 //   input,  width = 193,          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                                           //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_mghpxzq cmd_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                    //  output,  width = 193,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                 //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_001_src0_ready),                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_001_src0_valid),                                                //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_001_src0_channel),                                              //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_001_src0_data),                                                 //   input,  width = 193,          .data
		.sink0_startofpacket (cmd_demux_001_src0_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src0_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                                                //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                                                //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                                              //   input,    width = 3,          .channel
		.sink1_data          (cmd_demux_002_src1_data),                                                 //   input,  width = 193,          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                                           //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_lxhsfeq rsp_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                                  //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                                                     //   input,  width = 193,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                     //  output,  width = 193,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                  //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                    //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                    //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                                     //  output,  width = 193,          .data
		.src1_channel       (rsp_demux_src1_channel),                                                  //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_lxhsfeq rsp_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                                  //   input,    width = 3,          .channel
		.sink_data          (router_004_src_data),                                                     //   input,  width = 193,          .data
		.sink_startofpacket (router_004_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                                    //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                 //  output,  width = 193,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                              //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                                //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                                //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                                                 //  output,  width = 193,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                              //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_zz52una rsp_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                        //  output,  width = 193,          .data
		.src_channel         (rsp_mux_src_channel),                                                     //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                  //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                     //   input,  width = 193,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_zz52una rsp_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                    //  output,  width = 193,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                 //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_001_src0_ready),                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_001_src0_valid),                                                //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_001_src0_channel),                                              //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_001_src0_data),                                                 //   input,  width = 193,          .data
		.sink0_startofpacket (rsp_demux_001_src0_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src0_endofpacket)                                           //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_xreaiqq rsp_mux_002 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                                    //  output,  width = 193,          .data
		.src_channel         (rsp_mux_002_src_channel),                                                 //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                    //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                                  //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_src1_data),                                                     //   input,  width = 193,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                                //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                                //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                              //   input,    width = 3,          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                                 //   input,  width = 193,          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                                           //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_width_adapter_1933_m2te7my #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (131),
		.IN_PKT_RESPONSE_STATUS_L      (130),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (132),
		.IN_PKT_ORI_BURST_SIZE_H       (134),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_ST_DATA_W                  (157),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (167),
		.OUT_PKT_RESPONSE_STATUS_L     (166),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (168),
		.OUT_PKT_ORI_BURST_SIZE_H      (170),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (184),
		.OUT_PKT_SOP_OOO               (185),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (193),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.SYNC_RESET                    (1)
	) f2sdram_only_master_master_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset                (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (f2sdram_only_master_master_limiter_cmd_src_valid),                        //   input,    width = 1,      sink.valid
		.in_channel           (f2sdram_only_master_master_limiter_cmd_src_channel),                      //   input,    width = 3,          .channel
		.in_startofpacket     (f2sdram_only_master_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (f2sdram_only_master_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_ready             (f2sdram_only_master_master_limiter_cmd_src_ready),                        //  output,    width = 1,          .ready
		.in_data              (f2sdram_only_master_master_limiter_cmd_src_data),                         //   input,  width = 157,          .data
		.out_endofpacket      (f2sdram_only_master_master_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (f2sdram_only_master_master_cmd_width_adapter_src_data),                   //  output,  width = 193,          .data
		.out_channel          (f2sdram_only_master_master_cmd_width_adapter_src_channel),                //  output,    width = 3,          .channel
		.out_valid            (f2sdram_only_master_master_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (f2sdram_only_master_master_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (f2sdram_only_master_master_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1933_723v7vi #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (167),
		.IN_PKT_RESPONSE_STATUS_L      (166),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (168),
		.IN_PKT_ORI_BURST_SIZE_H       (170),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_ST_DATA_W                  (193),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (131),
		.OUT_PKT_RESPONSE_STATUS_L     (130),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (132),
		.OUT_PKT_ORI_BURST_SIZE_H      (134),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (148),
		.OUT_PKT_SOP_OOO               (149),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (157),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.SYNC_RESET                    (1)
	) f2sdram_only_master_master_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset                (f2sdram_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                                 //   input,    width = 3,          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (rsp_mux_002_src_data),                                                    //   input,  width = 193,          .data
		.out_endofpacket      (f2sdram_only_master_master_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (f2sdram_only_master_master_rsp_width_adapter_src_data),                   //  output,  width = 157,          .data
		.out_channel          (f2sdram_only_master_master_rsp_width_adapter_src_channel),                //  output,    width = 3,          .channel
		.out_valid            (f2sdram_only_master_master_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (f2sdram_only_master_master_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (f2sdram_only_master_master_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

endmodule
