// ghrd_hps_system_altera_mm_interconnect_1920_f53lvyy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.4 79

`timescale 1 ps / 1 ps
module ghrd_hps_system_altera_mm_interconnect_1920_f53lvyy (
		input  wire [31:0] fpga_only_master_master_address,                                                       //                                                         fpga_only_master_master.address
		output wire        fpga_only_master_master_waitrequest,                                                   //                                                                                .waitrequest
		input  wire [3:0]  fpga_only_master_master_byteenable,                                                    //                                                                                .byteenable
		input  wire        fpga_only_master_master_read,                                                          //                                                                                .read
		output wire [31:0] fpga_only_master_master_readdata,                                                      //                                                                                .readdata
		output wire        fpga_only_master_master_readdatavalid,                                                 //                                                                                .readdatavalid
		input  wire        fpga_only_master_master_write,                                                         //                                                                                .write
		input  wire [31:0] fpga_only_master_master_writedata,                                                     //                                                                                .writedata
		output wire [6:0]  onchip_sram_axi_s1_awid,                                                               //                                                              onchip_sram_axi_s1.awid
		output wire [14:0] onchip_sram_axi_s1_awaddr,                                                             //                                                                                .awaddr
		output wire [7:0]  onchip_sram_axi_s1_awlen,                                                              //                                                                                .awlen
		output wire [2:0]  onchip_sram_axi_s1_awsize,                                                             //                                                                                .awsize
		output wire [1:0]  onchip_sram_axi_s1_awburst,                                                            //                                                                                .awburst
		output wire        onchip_sram_axi_s1_awvalid,                                                            //                                                                                .awvalid
		input  wire        onchip_sram_axi_s1_awready,                                                            //                                                                                .awready
		output wire [63:0] onchip_sram_axi_s1_wdata,                                                              //                                                                                .wdata
		output wire [7:0]  onchip_sram_axi_s1_wstrb,                                                              //                                                                                .wstrb
		output wire        onchip_sram_axi_s1_wlast,                                                              //                                                                                .wlast
		output wire        onchip_sram_axi_s1_wvalid,                                                             //                                                                                .wvalid
		input  wire        onchip_sram_axi_s1_wready,                                                             //                                                                                .wready
		input  wire [6:0]  onchip_sram_axi_s1_bid,                                                                //                                                                                .bid
		input  wire [1:0]  onchip_sram_axi_s1_bresp,                                                              //                                                                                .bresp
		input  wire        onchip_sram_axi_s1_bvalid,                                                             //                                                                                .bvalid
		output wire        onchip_sram_axi_s1_bready,                                                             //                                                                                .bready
		output wire [6:0]  onchip_sram_axi_s1_arid,                                                               //                                                                                .arid
		output wire [14:0] onchip_sram_axi_s1_araddr,                                                             //                                                                                .araddr
		output wire [7:0]  onchip_sram_axi_s1_arlen,                                                              //                                                                                .arlen
		output wire [2:0]  onchip_sram_axi_s1_arsize,                                                             //                                                                                .arsize
		output wire [1:0]  onchip_sram_axi_s1_arburst,                                                            //                                                                                .arburst
		output wire        onchip_sram_axi_s1_arvalid,                                                            //                                                                                .arvalid
		input  wire        onchip_sram_axi_s1_arready,                                                            //                                                                                .arready
		input  wire [6:0]  onchip_sram_axi_s1_rid,                                                                //                                                                                .rid
		input  wire [63:0] onchip_sram_axi_s1_rdata,                                                              //                                                                                .rdata
		input  wire [1:0]  onchip_sram_axi_s1_rresp,                                                              //                                                                                .rresp
		input  wire        onchip_sram_axi_s1_rlast,                                                              //                                                                                .rlast
		input  wire        onchip_sram_axi_s1_rvalid,                                                             //                                                                                .rvalid
		output wire        onchip_sram_axi_s1_rready,                                                             //                                                                                .rready
		output wire [23:0] peripheral_sys_0_mm_peripheral_bridge_s0_address,                                      //                                        peripheral_sys_0_mm_peripheral_bridge_s0.address
		output wire        peripheral_sys_0_mm_peripheral_bridge_s0_write,                                        //                                                                                .write
		output wire        peripheral_sys_0_mm_peripheral_bridge_s0_read,                                         //                                                                                .read
		input  wire [31:0] peripheral_sys_0_mm_peripheral_bridge_s0_readdata,                                     //                                                                                .readdata
		output wire [31:0] peripheral_sys_0_mm_peripheral_bridge_s0_writedata,                                    //                                                                                .writedata
		output wire [0:0]  peripheral_sys_0_mm_peripheral_bridge_s0_burstcount,                                   //                                                                                .burstcount
		output wire [3:0]  peripheral_sys_0_mm_peripheral_bridge_s0_byteenable,                                   //                                                                                .byteenable
		input  wire        peripheral_sys_0_mm_peripheral_bridge_s0_readdatavalid,                                //                                                                                .readdatavalid
		input  wire        peripheral_sys_0_mm_peripheral_bridge_s0_waitrequest,                                  //                                                                                .waitrequest
		output wire        peripheral_sys_0_mm_peripheral_bridge_s0_debugaccess,                                  //                                                                                .debugaccess
		input  wire        onchip_sram_reset1_reset_bridge_in_reset_reset,                                        //                                        onchip_sram_reset1_reset_bridge_in_reset.reset
		input  wire        peripheral_sys_0_reset_reset_bridge_in_reset_reset,                                    //                                    peripheral_sys_0_reset_reset_bridge_in_reset.reset
		input  wire        fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset,                  //                  fpga_only_master_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset,                   //                   onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire        peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset_reset, // peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset.reset
		input  wire        crosser_in_clk_reset_reset_bridge_in_reset_reset,                                      //                                      crosser_in_clk_reset_reset_bridge_in_reset.reset
		input  wire        agilex_5_soc_h2f_user1_clk_clk,                                                        //                                                      agilex_5_soc_h2f_user1_clk.clk
		input  wire        agilex_5_soc_h2f_user0_clk_clk                                                         //                                                      agilex_5_soc_h2f_user0_clk.clk
	);

	wire          fpga_only_master_master_translator_avalon_universal_master_0_waitrequest;   // fpga_only_master_master_agent:av_waitrequest -> fpga_only_master_master_translator:uav_waitrequest
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_readdata;      // fpga_only_master_master_agent:av_readdata -> fpga_only_master_master_translator:uav_readdata
	wire          fpga_only_master_master_translator_avalon_universal_master_0_debugaccess;   // fpga_only_master_master_translator:uav_debugaccess -> fpga_only_master_master_agent:av_debugaccess
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_address;       // fpga_only_master_master_translator:uav_address -> fpga_only_master_master_agent:av_address
	wire          fpga_only_master_master_translator_avalon_universal_master_0_read;          // fpga_only_master_master_translator:uav_read -> fpga_only_master_master_agent:av_read
	wire    [3:0] fpga_only_master_master_translator_avalon_universal_master_0_byteenable;    // fpga_only_master_master_translator:uav_byteenable -> fpga_only_master_master_agent:av_byteenable
	wire          fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid; // fpga_only_master_master_agent:av_readdatavalid -> fpga_only_master_master_translator:uav_readdatavalid
	wire          fpga_only_master_master_translator_avalon_universal_master_0_lock;          // fpga_only_master_master_translator:uav_lock -> fpga_only_master_master_agent:av_lock
	wire          fpga_only_master_master_translator_avalon_universal_master_0_write;         // fpga_only_master_master_translator:uav_write -> fpga_only_master_master_agent:av_write
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_writedata;     // fpga_only_master_master_translator:uav_writedata -> fpga_only_master_master_agent:av_writedata
	wire    [2:0] fpga_only_master_master_translator_avalon_universal_master_0_burstcount;    // fpga_only_master_master_translator:uav_burstcount -> fpga_only_master_master_agent:av_burstcount
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_ruser;                           // onchip_sram_axi_s1_translator:s0_ruser -> onchip_sram_axi_s1_agent:ruser
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_wuser;                           // onchip_sram_axi_s1_agent:wuser -> onchip_sram_axi_s1_translator:s0_wuser
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_awburst;                         // onchip_sram_axi_s1_agent:awburst -> onchip_sram_axi_s1_translator:s0_awburst
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_arregion;                        // onchip_sram_axi_s1_agent:arregion -> onchip_sram_axi_s1_translator:s0_arregion
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_awuser;                          // onchip_sram_axi_s1_agent:awuser -> onchip_sram_axi_s1_translator:s0_awuser
	wire    [7:0] onchip_sram_axi_s1_agent_altera_axi_master_arlen;                           // onchip_sram_axi_s1_agent:arlen -> onchip_sram_axi_s1_translator:s0_arlen
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_arqos;                           // onchip_sram_axi_s1_agent:arqos -> onchip_sram_axi_s1_translator:s0_arqos
	wire    [7:0] onchip_sram_axi_s1_agent_altera_axi_master_wstrb;                           // onchip_sram_axi_s1_agent:wstrb -> onchip_sram_axi_s1_translator:s0_wstrb
	wire          onchip_sram_axi_s1_agent_altera_axi_master_wready;                          // onchip_sram_axi_s1_translator:s0_wready -> onchip_sram_axi_s1_agent:wready
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_rid;                             // onchip_sram_axi_s1_translator:s0_rid -> onchip_sram_axi_s1_agent:rid
	wire          onchip_sram_axi_s1_agent_altera_axi_master_rready;                          // onchip_sram_axi_s1_agent:rready -> onchip_sram_axi_s1_translator:s0_rready
	wire    [7:0] onchip_sram_axi_s1_agent_altera_axi_master_awlen;                           // onchip_sram_axi_s1_agent:awlen -> onchip_sram_axi_s1_translator:s0_awlen
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_awqos;                           // onchip_sram_axi_s1_agent:awqos -> onchip_sram_axi_s1_translator:s0_awqos
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_arcache;                         // onchip_sram_axi_s1_agent:arcache -> onchip_sram_axi_s1_translator:s0_arcache
	wire          onchip_sram_axi_s1_agent_altera_axi_master_wvalid;                          // onchip_sram_axi_s1_agent:wvalid -> onchip_sram_axi_s1_translator:s0_wvalid
	wire   [14:0] onchip_sram_axi_s1_agent_altera_axi_master_araddr;                          // onchip_sram_axi_s1_agent:araddr -> onchip_sram_axi_s1_translator:s0_araddr
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_arprot;                          // onchip_sram_axi_s1_agent:arprot -> onchip_sram_axi_s1_translator:s0_arprot
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_awprot;                          // onchip_sram_axi_s1_agent:awprot -> onchip_sram_axi_s1_translator:s0_awprot
	wire   [63:0] onchip_sram_axi_s1_agent_altera_axi_master_wdata;                           // onchip_sram_axi_s1_agent:wdata -> onchip_sram_axi_s1_translator:s0_wdata
	wire          onchip_sram_axi_s1_agent_altera_axi_master_arvalid;                         // onchip_sram_axi_s1_agent:arvalid -> onchip_sram_axi_s1_translator:s0_arvalid
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_awcache;                         // onchip_sram_axi_s1_agent:awcache -> onchip_sram_axi_s1_translator:s0_awcache
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_arid;                            // onchip_sram_axi_s1_agent:arid -> onchip_sram_axi_s1_translator:s0_arid
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_arlock;                          // onchip_sram_axi_s1_agent:arlock -> onchip_sram_axi_s1_translator:s0_arlock
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_awlock;                          // onchip_sram_axi_s1_agent:awlock -> onchip_sram_axi_s1_translator:s0_awlock
	wire   [14:0] onchip_sram_axi_s1_agent_altera_axi_master_awaddr;                          // onchip_sram_axi_s1_agent:awaddr -> onchip_sram_axi_s1_translator:s0_awaddr
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_bresp;                           // onchip_sram_axi_s1_translator:s0_bresp -> onchip_sram_axi_s1_agent:bresp
	wire          onchip_sram_axi_s1_agent_altera_axi_master_arready;                         // onchip_sram_axi_s1_translator:s0_arready -> onchip_sram_axi_s1_agent:arready
	wire   [63:0] onchip_sram_axi_s1_agent_altera_axi_master_rdata;                           // onchip_sram_axi_s1_translator:s0_rdata -> onchip_sram_axi_s1_agent:rdata
	wire          onchip_sram_axi_s1_agent_altera_axi_master_awready;                         // onchip_sram_axi_s1_translator:s0_awready -> onchip_sram_axi_s1_agent:awready
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_arburst;                         // onchip_sram_axi_s1_agent:arburst -> onchip_sram_axi_s1_translator:s0_arburst
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_arsize;                          // onchip_sram_axi_s1_agent:arsize -> onchip_sram_axi_s1_translator:s0_arsize
	wire          onchip_sram_axi_s1_agent_altera_axi_master_bready;                          // onchip_sram_axi_s1_agent:bready -> onchip_sram_axi_s1_translator:s0_bready
	wire          onchip_sram_axi_s1_agent_altera_axi_master_rlast;                           // onchip_sram_axi_s1_translator:s0_rlast -> onchip_sram_axi_s1_agent:rlast
	wire          onchip_sram_axi_s1_agent_altera_axi_master_wlast;                           // onchip_sram_axi_s1_agent:wlast -> onchip_sram_axi_s1_translator:s0_wlast
	wire    [3:0] onchip_sram_axi_s1_agent_altera_axi_master_awregion;                        // onchip_sram_axi_s1_agent:awregion -> onchip_sram_axi_s1_translator:s0_awregion
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_buser;                           // onchip_sram_axi_s1_translator:s0_buser -> onchip_sram_axi_s1_agent:buser
	wire    [1:0] onchip_sram_axi_s1_agent_altera_axi_master_rresp;                           // onchip_sram_axi_s1_translator:s0_rresp -> onchip_sram_axi_s1_agent:rresp
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_awid;                            // onchip_sram_axi_s1_agent:awid -> onchip_sram_axi_s1_translator:s0_awid
	wire    [6:0] onchip_sram_axi_s1_agent_altera_axi_master_bid;                             // onchip_sram_axi_s1_translator:s0_bid -> onchip_sram_axi_s1_agent:bid
	wire          onchip_sram_axi_s1_agent_altera_axi_master_bvalid;                          // onchip_sram_axi_s1_translator:s0_bvalid -> onchip_sram_axi_s1_agent:bvalid
	wire    [2:0] onchip_sram_axi_s1_agent_altera_axi_master_awsize;                          // onchip_sram_axi_s1_agent:awsize -> onchip_sram_axi_s1_translator:s0_awsize
	wire          onchip_sram_axi_s1_agent_altera_axi_master_awvalid;                         // onchip_sram_axi_s1_agent:awvalid -> onchip_sram_axi_s1_translator:s0_awvalid
	wire    [0:0] onchip_sram_axi_s1_agent_altera_axi_master_aruser;                          // onchip_sram_axi_s1_agent:aruser -> onchip_sram_axi_s1_translator:s0_aruser
	wire          onchip_sram_axi_s1_agent_altera_axi_master_rvalid;                          // onchip_sram_axi_s1_translator:s0_rvalid -> onchip_sram_axi_s1_agent:rvalid
	wire   [31:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_readdata;                 // peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_readdata -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_readdata
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_waitrequest;              // peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_waitrequest -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_waitrequest
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_debugaccess;              // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_debugaccess -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_debugaccess
	wire   [31:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_address;                  // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_address -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_address
	wire    [3:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_byteenable;               // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_byteenable -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_byteenable
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_read;                     // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_read -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_read
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_readdatavalid;            // peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_readdatavalid -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_readdatavalid
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_lock;                     // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_lock -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_lock
	wire   [31:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_writedata;                // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_writedata -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_writedata
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_write;                    // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_write -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_write
	wire    [2:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_burstcount;               // peripheral_sys_0_mm_peripheral_bridge_s0_agent:m0_burstcount -> peripheral_sys_0_mm_peripheral_bridge_s0_translator:uav_burstcount
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_valid;             // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_source_valid -> peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:in_valid
	wire  [143:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_data;              // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_source_data -> peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:in_data
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_ready;             // peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:in_ready -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_source_ready
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_startofpacket;     // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_source_startofpacket -> peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_endofpacket;       // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_source_endofpacket -> peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_valid;          // peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:out_valid -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_sink_valid
	wire  [143:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_data;           // peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:out_data -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_sink_data
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_ready;          // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_sink_ready -> peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:out_ready
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_startofpacket;  // peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:out_startofpacket -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_sink_startofpacket
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_endofpacket;    // peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo:out_endofpacket -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rf_sink_endofpacket
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_valid;        // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rdata_fifo_src_valid -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_data;         // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rdata_fifo_src_data -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rdata_fifo_sink_data
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_ready;        // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rdata_fifo_sink_ready -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:cp_valid
	wire  [142:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                      // peripheral_sys_0_mm_peripheral_bridge_s0_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:cp_endofpacket
	wire          fpga_only_master_master_agent_cp_valid;                                     // fpga_only_master_master_agent:cp_valid -> router:sink_valid
	wire  [142:0] fpga_only_master_master_agent_cp_data;                                      // fpga_only_master_master_agent:cp_data -> router:sink_data
	wire          fpga_only_master_master_agent_cp_ready;                                     // router:sink_ready -> fpga_only_master_master_agent:cp_ready
	wire          fpga_only_master_master_agent_cp_startofpacket;                             // fpga_only_master_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          fpga_only_master_master_agent_cp_endofpacket;                               // fpga_only_master_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          onchip_sram_axi_s1_agent_write_rp_valid;                                    // onchip_sram_axi_s1_agent:write_rp_valid -> router_001:sink_valid
	wire  [178:0] onchip_sram_axi_s1_agent_write_rp_data;                                     // onchip_sram_axi_s1_agent:write_rp_data -> router_001:sink_data
	wire          onchip_sram_axi_s1_agent_write_rp_ready;                                    // router_001:sink_ready -> onchip_sram_axi_s1_agent:write_rp_ready
	wire          onchip_sram_axi_s1_agent_write_rp_startofpacket;                            // onchip_sram_axi_s1_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          onchip_sram_axi_s1_agent_write_rp_endofpacket;                              // onchip_sram_axi_s1_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          onchip_sram_axi_s1_agent_read_rp_valid;                                     // onchip_sram_axi_s1_agent:read_rp_valid -> router_002:sink_valid
	wire  [178:0] onchip_sram_axi_s1_agent_read_rp_data;                                      // onchip_sram_axi_s1_agent:read_rp_data -> router_002:sink_data
	wire          onchip_sram_axi_s1_agent_read_rp_ready;                                     // router_002:sink_ready -> onchip_sram_axi_s1_agent:read_rp_ready
	wire          onchip_sram_axi_s1_agent_read_rp_startofpacket;                             // onchip_sram_axi_s1_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          onchip_sram_axi_s1_agent_read_rp_endofpacket;                               // onchip_sram_axi_s1_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_valid;                    // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rp_valid -> router_003:sink_valid
	wire  [142:0] peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_data;                     // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rp_data -> router_003:sink_data
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_ready;                    // router_003:sink_ready -> peripheral_sys_0_mm_peripheral_bridge_s0_agent:rp_ready
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_startofpacket;            // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_endofpacket;              // peripheral_sys_0_mm_peripheral_bridge_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [142:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> fpga_only_master_master_limiter:cmd_sink_valid
	wire  [142:0] router_src_data;                                                            // router:src_data -> fpga_only_master_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // fpga_only_master_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                         // router:src_channel -> fpga_only_master_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> fpga_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> fpga_only_master_master_limiter:cmd_sink_endofpacket
	wire  [142:0] fpga_only_master_master_limiter_cmd_src_data;                               // fpga_only_master_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          fpga_only_master_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> fpga_only_master_master_limiter:cmd_src_ready
	wire    [2:0] fpga_only_master_master_limiter_cmd_src_channel;                            // fpga_only_master_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          fpga_only_master_master_limiter_cmd_src_startofpacket;                      // fpga_only_master_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          fpga_only_master_master_limiter_cmd_src_endofpacket;                        // fpga_only_master_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> fpga_only_master_master_limiter:rsp_sink_valid
	wire  [142:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> fpga_only_master_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                          // fpga_only_master_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> fpga_only_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> fpga_only_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> fpga_only_master_master_limiter:rsp_sink_endofpacket
	wire          fpga_only_master_master_limiter_rsp_src_valid;                              // fpga_only_master_master_limiter:rsp_src_valid -> fpga_only_master_master_agent:rp_valid
	wire  [142:0] fpga_only_master_master_limiter_rsp_src_data;                               // fpga_only_master_master_limiter:rsp_src_data -> fpga_only_master_master_agent:rp_data
	wire          fpga_only_master_master_limiter_rsp_src_ready;                              // fpga_only_master_master_agent:rp_ready -> fpga_only_master_master_limiter:rsp_src_ready
	wire    [2:0] fpga_only_master_master_limiter_rsp_src_channel;                            // fpga_only_master_master_limiter:rsp_src_channel -> fpga_only_master_master_agent:rp_channel
	wire          fpga_only_master_master_limiter_rsp_src_startofpacket;                      // fpga_only_master_master_limiter:rsp_src_startofpacket -> fpga_only_master_master_agent:rp_startofpacket
	wire          fpga_only_master_master_limiter_rsp_src_endofpacket;                        // fpga_only_master_master_limiter:rsp_src_endofpacket -> fpga_only_master_master_agent:rp_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [142:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [142:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> onchip_sram_axi_s1_wr_cmd_width_adapter:in_valid
	wire  [142:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> onchip_sram_axi_s1_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                          // onchip_sram_axi_s1_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> onchip_sram_axi_s1_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> onchip_sram_axi_s1_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> onchip_sram_axi_s1_wr_cmd_width_adapter:in_endofpacket
	wire          onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid;                          // onchip_sram_axi_s1_wr_cmd_width_adapter:out_valid -> onchip_sram_axi_s1_agent:write_cp_valid
	wire  [178:0] onchip_sram_axi_s1_wr_cmd_width_adapter_src_data;                           // onchip_sram_axi_s1_wr_cmd_width_adapter:out_data -> onchip_sram_axi_s1_agent:write_cp_data
	wire          onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready;                          // onchip_sram_axi_s1_agent:write_cp_ready -> onchip_sram_axi_s1_wr_cmd_width_adapter:out_ready
	wire    [2:0] onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel;                        // onchip_sram_axi_s1_wr_cmd_width_adapter:out_channel -> onchip_sram_axi_s1_agent:write_cp_channel
	wire          onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket;                  // onchip_sram_axi_s1_wr_cmd_width_adapter:out_startofpacket -> onchip_sram_axi_s1_agent:write_cp_startofpacket
	wire          onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket;                    // onchip_sram_axi_s1_wr_cmd_width_adapter:out_endofpacket -> onchip_sram_axi_s1_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> onchip_sram_axi_s1_rd_cmd_width_adapter:in_valid
	wire  [142:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> onchip_sram_axi_s1_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                      // onchip_sram_axi_s1_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> onchip_sram_axi_s1_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> onchip_sram_axi_s1_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> onchip_sram_axi_s1_rd_cmd_width_adapter:in_endofpacket
	wire          onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid;                          // onchip_sram_axi_s1_rd_cmd_width_adapter:out_valid -> onchip_sram_axi_s1_agent:read_cp_valid
	wire  [178:0] onchip_sram_axi_s1_rd_cmd_width_adapter_src_data;                           // onchip_sram_axi_s1_rd_cmd_width_adapter:out_data -> onchip_sram_axi_s1_agent:read_cp_data
	wire          onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready;                          // onchip_sram_axi_s1_agent:read_cp_ready -> onchip_sram_axi_s1_rd_cmd_width_adapter:out_ready
	wire    [2:0] onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel;                        // onchip_sram_axi_s1_rd_cmd_width_adapter:out_channel -> onchip_sram_axi_s1_agent:read_cp_channel
	wire          onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket;                  // onchip_sram_axi_s1_rd_cmd_width_adapter:out_startofpacket -> onchip_sram_axi_s1_agent:read_cp_startofpacket
	wire          onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket;                    // onchip_sram_axi_s1_rd_cmd_width_adapter:out_endofpacket -> onchip_sram_axi_s1_agent:read_cp_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> onchip_sram_axi_s1_wr_rsp_width_adapter:in_valid
	wire  [178:0] router_001_src_data;                                                        // router_001:src_data -> onchip_sram_axi_s1_wr_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                       // onchip_sram_axi_s1_wr_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                     // router_001:src_channel -> onchip_sram_axi_s1_wr_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> onchip_sram_axi_s1_wr_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> onchip_sram_axi_s1_wr_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_axi_s1_wr_rsp_width_adapter_src_valid;                          // onchip_sram_axi_s1_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [142:0] onchip_sram_axi_s1_wr_rsp_width_adapter_src_data;                           // onchip_sram_axi_s1_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          onchip_sram_axi_s1_wr_rsp_width_adapter_src_ready;                          // rsp_demux:sink_ready -> onchip_sram_axi_s1_wr_rsp_width_adapter:out_ready
	wire    [2:0] onchip_sram_axi_s1_wr_rsp_width_adapter_src_channel;                        // onchip_sram_axi_s1_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          onchip_sram_axi_s1_wr_rsp_width_adapter_src_startofpacket;                  // onchip_sram_axi_s1_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          onchip_sram_axi_s1_wr_rsp_width_adapter_src_endofpacket;                    // onchip_sram_axi_s1_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> onchip_sram_axi_s1_rd_rsp_width_adapter:in_valid
	wire  [178:0] router_002_src_data;                                                        // router_002:src_data -> onchip_sram_axi_s1_rd_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                       // onchip_sram_axi_s1_rd_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                     // router_002:src_channel -> onchip_sram_axi_s1_rd_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> onchip_sram_axi_s1_rd_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> onchip_sram_axi_s1_rd_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_axi_s1_rd_rsp_width_adapter_src_valid;                          // onchip_sram_axi_s1_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [142:0] onchip_sram_axi_s1_rd_rsp_width_adapter_src_data;                           // onchip_sram_axi_s1_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          onchip_sram_axi_s1_rd_rsp_width_adapter_src_ready;                          // rsp_demux_001:sink_ready -> onchip_sram_axi_s1_rd_rsp_width_adapter:out_ready
	wire    [2:0] onchip_sram_axi_s1_rd_rsp_width_adapter_src_channel;                        // onchip_sram_axi_s1_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          onchip_sram_axi_s1_rd_rsp_width_adapter_src_startofpacket;                  // onchip_sram_axi_s1_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          onchip_sram_axi_s1_rd_rsp_width_adapter_src_endofpacket;                    // onchip_sram_axi_s1_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> crosser:in_valid
	wire  [142:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                       // crosser:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                          // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [142:0] crosser_out_data;                                                           // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                          // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [2:0] crosser_out_channel;                                                        // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                  // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                    // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [142:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                       // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                      // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [142:0] crosser_001_out_data;                                                       // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                      // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [2:0] crosser_001_out_channel;                                                    // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                              // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [142:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                                       // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                      // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [142:0] crosser_002_out_data;                                                       // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                                      // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [2:0] crosser_002_out_channel;                                                    // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                              // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire  [142:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                                   // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                      // crosser_003:out_valid -> rsp_mux:sink1_valid
	wire  [142:0] crosser_003_out_data;                                                       // crosser_003:out_data -> rsp_mux:sink1_data
	wire          crosser_003_out_ready;                                                      // rsp_mux:sink1_ready -> crosser_003:out_ready
	wire    [2:0] crosser_003_out_channel;                                                    // crosser_003:out_channel -> rsp_mux:sink1_channel
	wire          crosser_003_out_startofpacket;                                              // crosser_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                                // crosser_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [2:0] fpga_only_master_master_limiter_cmd_valid_data;                             // fpga_only_master_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

	ghrd_hps_system_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) fpga_only_master_master_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,   width = 1,                       clk.clk
		.reset                  (fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (fpga_only_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (fpga_only_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (fpga_only_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (fpga_only_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (fpga_only_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (fpga_only_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (fpga_only_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (fpga_only_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                       // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                       // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                       // (terminated),                                        
		.av_chipselect          (1'b0),                                                                       // (terminated),                                        
		.av_lock                (1'b0),                                                                       // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                       // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                       // (terminated),                                        
		.uav_clken              (),                                                                           // (terminated),                                        
		.av_clken               (1'b1),                                                                       // (terminated),                                        
		.uav_response           (2'b00),                                                                      // (terminated),                                        
		.av_response            (),                                                                           // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                       // (terminated),                                        
		.av_writeresponsevalid  ()                                                                            // (terminated),                                        
	);

	ghrd_hps_system_altera_merlin_axi_translator_1931_d46vvwa #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (0),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (0),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (0),
		.USE_M0_AWPROT                     (0),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (0),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (0),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (0),
		.USE_M0_ARCACHE                    (0),
		.USE_M0_ARQOS                      (0),
		.USE_M0_ARPROT                     (0),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (7),
		.DATA_WIDTH                        (64),
		.M0_SAI_WIDTH                      (4),
		.S0_SAI_WIDTH                      (4),
		.M0_USER_ADDRCHK_WIDTH             (4),
		.S0_USER_ADDRCHK_WIDTH             (4),
		.S0_ID_WIDTH                       (7),
		.M0_ADDR_WIDTH                     (15),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (15),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (0),
		.USE_M0_ARUSER                     (0),
		.USE_M0_WUSER                      (0),
		.USE_M0_RUSER                      (0),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0),
		.USE_M0_AWUSER_ADDRCHK             (0),
		.USE_M0_AWUSER_SAI                 (0),
		.USE_M0_ARUSER_ADDRCHK             (0),
		.USE_M0_ARUSER_SAI                 (0),
		.USE_M0_WUSER_DATACHK              (0),
		.USE_M0_WUSER_POISON               (0),
		.USE_M0_RUSER_DATACHK              (0),
		.USE_M0_RUSER_POISON               (0),
		.USE_S0_AWUSER_ADDRCHK             (0),
		.USE_S0_AWUSER_SAI                 (0),
		.USE_S0_ARUSER_ADDRCHK             (0),
		.USE_S0_ARUSER_SAI                 (0),
		.USE_S0_WUSER_DATACHK              (0),
		.USE_S0_WUSER_POISON               (0),
		.USE_S0_RUSER_DATACHK              (0),
		.USE_S0_RUSER_POISON               (0),
		.ROLE_BASED_USER                   (0)
	) onchip_sram_axi_s1_translator (
		.aclk              (agilex_5_soc_h2f_user0_clk_clk),                                       //   input,   width = 1,       clk.clk
		.aresetn           (~onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid           (onchip_sram_axi_s1_awid),                                              //  output,   width = 7,        m0.awid
		.m0_awaddr         (onchip_sram_axi_s1_awaddr),                                            //  output,  width = 15,          .awaddr
		.m0_awlen          (onchip_sram_axi_s1_awlen),                                             //  output,   width = 8,          .awlen
		.m0_awsize         (onchip_sram_axi_s1_awsize),                                            //  output,   width = 3,          .awsize
		.m0_awburst        (onchip_sram_axi_s1_awburst),                                           //  output,   width = 2,          .awburst
		.m0_awvalid        (onchip_sram_axi_s1_awvalid),                                           //  output,   width = 1,          .awvalid
		.m0_awready        (onchip_sram_axi_s1_awready),                                           //   input,   width = 1,          .awready
		.m0_wdata          (onchip_sram_axi_s1_wdata),                                             //  output,  width = 64,          .wdata
		.m0_wstrb          (onchip_sram_axi_s1_wstrb),                                             //  output,   width = 8,          .wstrb
		.m0_wlast          (onchip_sram_axi_s1_wlast),                                             //  output,   width = 1,          .wlast
		.m0_wvalid         (onchip_sram_axi_s1_wvalid),                                            //  output,   width = 1,          .wvalid
		.m0_wready         (onchip_sram_axi_s1_wready),                                            //   input,   width = 1,          .wready
		.m0_bid            (onchip_sram_axi_s1_bid),                                               //   input,   width = 7,          .bid
		.m0_bresp          (onchip_sram_axi_s1_bresp),                                             //   input,   width = 2,          .bresp
		.m0_bvalid         (onchip_sram_axi_s1_bvalid),                                            //   input,   width = 1,          .bvalid
		.m0_bready         (onchip_sram_axi_s1_bready),                                            //  output,   width = 1,          .bready
		.m0_arid           (onchip_sram_axi_s1_arid),                                              //  output,   width = 7,          .arid
		.m0_araddr         (onchip_sram_axi_s1_araddr),                                            //  output,  width = 15,          .araddr
		.m0_arlen          (onchip_sram_axi_s1_arlen),                                             //  output,   width = 8,          .arlen
		.m0_arsize         (onchip_sram_axi_s1_arsize),                                            //  output,   width = 3,          .arsize
		.m0_arburst        (onchip_sram_axi_s1_arburst),                                           //  output,   width = 2,          .arburst
		.m0_arvalid        (onchip_sram_axi_s1_arvalid),                                           //  output,   width = 1,          .arvalid
		.m0_arready        (onchip_sram_axi_s1_arready),                                           //   input,   width = 1,          .arready
		.m0_rid            (onchip_sram_axi_s1_rid),                                               //   input,   width = 7,          .rid
		.m0_rdata          (onchip_sram_axi_s1_rdata),                                             //   input,  width = 64,          .rdata
		.m0_rresp          (onchip_sram_axi_s1_rresp),                                             //   input,   width = 2,          .rresp
		.m0_rlast          (onchip_sram_axi_s1_rlast),                                             //   input,   width = 1,          .rlast
		.m0_rvalid         (onchip_sram_axi_s1_rvalid),                                            //   input,   width = 1,          .rvalid
		.m0_rready         (onchip_sram_axi_s1_rready),                                            //  output,   width = 1,          .rready
		.s0_awid           (onchip_sram_axi_s1_agent_altera_axi_master_awid),                      //   input,   width = 7,        s0.awid
		.s0_awaddr         (onchip_sram_axi_s1_agent_altera_axi_master_awaddr),                    //   input,  width = 15,          .awaddr
		.s0_awlen          (onchip_sram_axi_s1_agent_altera_axi_master_awlen),                     //   input,   width = 8,          .awlen
		.s0_awsize         (onchip_sram_axi_s1_agent_altera_axi_master_awsize),                    //   input,   width = 3,          .awsize
		.s0_awburst        (onchip_sram_axi_s1_agent_altera_axi_master_awburst),                   //   input,   width = 2,          .awburst
		.s0_awlock         (onchip_sram_axi_s1_agent_altera_axi_master_awlock),                    //   input,   width = 1,          .awlock
		.s0_awcache        (onchip_sram_axi_s1_agent_altera_axi_master_awcache),                   //   input,   width = 4,          .awcache
		.s0_awprot         (onchip_sram_axi_s1_agent_altera_axi_master_awprot),                    //   input,   width = 3,          .awprot
		.s0_awuser         (onchip_sram_axi_s1_agent_altera_axi_master_awuser),                    //   input,   width = 1,          .awuser
		.s0_awqos          (onchip_sram_axi_s1_agent_altera_axi_master_awqos),                     //   input,   width = 4,          .awqos
		.s0_awregion       (onchip_sram_axi_s1_agent_altera_axi_master_awregion),                  //   input,   width = 4,          .awregion
		.s0_awvalid        (onchip_sram_axi_s1_agent_altera_axi_master_awvalid),                   //   input,   width = 1,          .awvalid
		.s0_awready        (onchip_sram_axi_s1_agent_altera_axi_master_awready),                   //  output,   width = 1,          .awready
		.s0_wdata          (onchip_sram_axi_s1_agent_altera_axi_master_wdata),                     //   input,  width = 64,          .wdata
		.s0_wstrb          (onchip_sram_axi_s1_agent_altera_axi_master_wstrb),                     //   input,   width = 8,          .wstrb
		.s0_wlast          (onchip_sram_axi_s1_agent_altera_axi_master_wlast),                     //   input,   width = 1,          .wlast
		.s0_wvalid         (onchip_sram_axi_s1_agent_altera_axi_master_wvalid),                    //   input,   width = 1,          .wvalid
		.s0_wuser          (onchip_sram_axi_s1_agent_altera_axi_master_wuser),                     //   input,   width = 1,          .wuser
		.s0_wready         (onchip_sram_axi_s1_agent_altera_axi_master_wready),                    //  output,   width = 1,          .wready
		.s0_bid            (onchip_sram_axi_s1_agent_altera_axi_master_bid),                       //  output,   width = 7,          .bid
		.s0_bresp          (onchip_sram_axi_s1_agent_altera_axi_master_bresp),                     //  output,   width = 2,          .bresp
		.s0_buser          (onchip_sram_axi_s1_agent_altera_axi_master_buser),                     //  output,   width = 1,          .buser
		.s0_bvalid         (onchip_sram_axi_s1_agent_altera_axi_master_bvalid),                    //  output,   width = 1,          .bvalid
		.s0_bready         (onchip_sram_axi_s1_agent_altera_axi_master_bready),                    //   input,   width = 1,          .bready
		.s0_arid           (onchip_sram_axi_s1_agent_altera_axi_master_arid),                      //   input,   width = 7,          .arid
		.s0_araddr         (onchip_sram_axi_s1_agent_altera_axi_master_araddr),                    //   input,  width = 15,          .araddr
		.s0_arlen          (onchip_sram_axi_s1_agent_altera_axi_master_arlen),                     //   input,   width = 8,          .arlen
		.s0_arsize         (onchip_sram_axi_s1_agent_altera_axi_master_arsize),                    //   input,   width = 3,          .arsize
		.s0_arburst        (onchip_sram_axi_s1_agent_altera_axi_master_arburst),                   //   input,   width = 2,          .arburst
		.s0_arlock         (onchip_sram_axi_s1_agent_altera_axi_master_arlock),                    //   input,   width = 1,          .arlock
		.s0_arcache        (onchip_sram_axi_s1_agent_altera_axi_master_arcache),                   //   input,   width = 4,          .arcache
		.s0_arprot         (onchip_sram_axi_s1_agent_altera_axi_master_arprot),                    //   input,   width = 3,          .arprot
		.s0_aruser         (onchip_sram_axi_s1_agent_altera_axi_master_aruser),                    //   input,   width = 1,          .aruser
		.s0_arqos          (onchip_sram_axi_s1_agent_altera_axi_master_arqos),                     //   input,   width = 4,          .arqos
		.s0_arregion       (onchip_sram_axi_s1_agent_altera_axi_master_arregion),                  //   input,   width = 4,          .arregion
		.s0_arvalid        (onchip_sram_axi_s1_agent_altera_axi_master_arvalid),                   //   input,   width = 1,          .arvalid
		.s0_arready        (onchip_sram_axi_s1_agent_altera_axi_master_arready),                   //  output,   width = 1,          .arready
		.s0_rid            (onchip_sram_axi_s1_agent_altera_axi_master_rid),                       //  output,   width = 7,          .rid
		.s0_rdata          (onchip_sram_axi_s1_agent_altera_axi_master_rdata),                     //  output,  width = 64,          .rdata
		.s0_rresp          (onchip_sram_axi_s1_agent_altera_axi_master_rresp),                     //  output,   width = 2,          .rresp
		.s0_rlast          (onchip_sram_axi_s1_agent_altera_axi_master_rlast),                     //  output,   width = 1,          .rlast
		.s0_rvalid         (onchip_sram_axi_s1_agent_altera_axi_master_rvalid),                    //  output,   width = 1,          .rvalid
		.s0_rready         (onchip_sram_axi_s1_agent_altera_axi_master_rready),                    //   input,   width = 1,          .rready
		.s0_ruser          (onchip_sram_axi_s1_agent_altera_axi_master_ruser),                     //  output,   width = 1,          .ruser
		.m0_awlock         (),                                                                     // (terminated),                        
		.m0_awcache        (),                                                                     // (terminated),                        
		.m0_awprot         (),                                                                     // (terminated),                        
		.m0_awuser         (),                                                                     // (terminated),                        
		.m0_awuser_addrchk (),                                                                     // (terminated),                        
		.m0_awuser_sai     (),                                                                     // (terminated),                        
		.m0_awqos          (),                                                                     // (terminated),                        
		.m0_awregion       (),                                                                     // (terminated),                        
		.m0_wuser          (),                                                                     // (terminated),                        
		.m0_wuser_datachk  (),                                                                     // (terminated),                        
		.m0_wuser_poison   (),                                                                     // (terminated),                        
		.m0_buser          (1'b0),                                                                 // (terminated),                        
		.m0_arlock         (),                                                                     // (terminated),                        
		.m0_arcache        (),                                                                     // (terminated),                        
		.m0_arprot         (),                                                                     // (terminated),                        
		.m0_aruser         (),                                                                     // (terminated),                        
		.m0_aruser_addrchk (),                                                                     // (terminated),                        
		.m0_aruser_sai     (),                                                                     // (terminated),                        
		.m0_arqos          (),                                                                     // (terminated),                        
		.m0_arregion       (),                                                                     // (terminated),                        
		.m0_ruser          (1'b0),                                                                 // (terminated),                        
		.m0_ruser_datachk  (8'b00000000),                                                          // (terminated),                        
		.m0_ruser_poison   (1'b0),                                                                 // (terminated),                        
		.s0_awuser_addrchk (4'b0000),                                                              // (terminated),                        
		.s0_awuser_sai     (4'b0000),                                                              // (terminated),                        
		.s0_wuser_datachk  (8'b00000000),                                                          // (terminated),                        
		.s0_wuser_poison   (1'b0),                                                                 // (terminated),                        
		.s0_aruser_addrchk (4'b0000),                                                              // (terminated),                        
		.s0_aruser_sai     (4'b0000),                                                              // (terminated),                        
		.s0_ruser_datachk  (),                                                                     // (terminated),                        
		.s0_ruser_poison   (),                                                                     // (terminated),                        
		.s0_wid            (7'b0000000),                                                           // (terminated),                        
		.s0_ardomain       (2'b00),                                                                // (terminated),                        
		.s0_arsnoop        (4'b0000),                                                              // (terminated),                        
		.s0_arbar          (2'b00),                                                                // (terminated),                        
		.s0_awdomain       (2'b00),                                                                // (terminated),                        
		.s0_awsnoop        (3'b000),                                                               // (terminated),                        
		.s0_awbar          (2'b00),                                                                // (terminated),                        
		.s0_awunique       (1'b0),                                                                 // (terminated),                        
		.m0_wid            (),                                                                     // (terminated),                        
		.m0_ardomain       (),                                                                     // (terminated),                        
		.m0_arsnoop        (),                                                                     // (terminated),                        
		.m0_arbar          (),                                                                     // (terminated),                        
		.m0_awdomain       (),                                                                     // (terminated),                        
		.m0_awsnoop        (),                                                                     // (terminated),                        
		.m0_awbar          (),                                                                     // (terminated),                        
		.m0_awunique       ()                                                                      // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) peripheral_sys_0_mm_peripheral_bridge_s0_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                                        //   input,   width = 1,                      clk.clk
		.reset                  (peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_address),                             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_burstcount),                          //   input,   width = 3,                         .burstcount
		.uav_read               (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_read),                                //   input,   width = 1,                         .read
		.uav_write              (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_write),                               //   input,   width = 1,                         .write
		.uav_waitrequest        (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_waitrequest),                         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_readdatavalid),                       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_byteenable),                          //   input,   width = 4,                         .byteenable
		.uav_readdata           (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_readdata),                            //  output,  width = 32,                         .readdata
		.uav_writedata          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_writedata),                           //   input,  width = 32,                         .writedata
		.uav_lock               (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_lock),                                //   input,   width = 1,                         .lock
		.uav_debugaccess        (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_debugaccess),                         //   input,   width = 1,                         .debugaccess
		.av_address             (peripheral_sys_0_mm_peripheral_bridge_s0_address),                                      //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (peripheral_sys_0_mm_peripheral_bridge_s0_write),                                        //  output,   width = 1,                         .write
		.av_read                (peripheral_sys_0_mm_peripheral_bridge_s0_read),                                         //  output,   width = 1,                         .read
		.av_readdata            (peripheral_sys_0_mm_peripheral_bridge_s0_readdata),                                     //   input,  width = 32,                         .readdata
		.av_writedata           (peripheral_sys_0_mm_peripheral_bridge_s0_writedata),                                    //  output,  width = 32,                         .writedata
		.av_burstcount          (peripheral_sys_0_mm_peripheral_bridge_s0_burstcount),                                   //  output,   width = 1,                         .burstcount
		.av_byteenable          (peripheral_sys_0_mm_peripheral_bridge_s0_byteenable),                                   //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (peripheral_sys_0_mm_peripheral_bridge_s0_readdatavalid),                                //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (peripheral_sys_0_mm_peripheral_bridge_s0_waitrequest),                                  //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (peripheral_sys_0_mm_peripheral_bridge_s0_debugaccess),                                  //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                                                      // (terminated),                                       
		.av_lock                (),                                                                                      // (terminated),                                       
		.av_chipselect          (),                                                                                      // (terminated),                                       
		.av_clken               (),                                                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                                                  // (terminated),                                       
		.av_outputenable        (),                                                                                      // (terminated),                                       
		.uav_response           (),                                                                                      // (terminated),                                       
		.av_response            (2'b00),                                                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                                   // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_master_agent_1921_2inlndi #(
		.PKT_WUNIQUE               (129),
		.PKT_DOMAIN_H              (128),
		.PKT_DOMAIN_L              (127),
		.PKT_SNOOP_H               (126),
		.PKT_SNOOP_L               (123),
		.PKT_BARRIER_H             (122),
		.PKT_BARRIER_L             (121),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_QOS_H                 (105),
		.PKT_QOS_L                 (102),
		.PKT_DATA_SIDEBAND_H       (100),
		.PKT_DATA_SIDEBAND_L       (100),
		.PKT_ADDR_SIDEBAND_H       (99),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (130),
		.PKT_POISON_L              (130),
		.PKT_DATACHK_H             (131),
		.PKT_DATACHK_L             (131),
		.PKT_ADDRCHK_H             (132),
		.PKT_ADDRCHK_L             (132),
		.PKT_SAI_H                 (133),
		.PKT_SAI_L                 (133),
		.ST_DATA_W                 (143),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) fpga_only_master_master_agent (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                 (fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (fpga_only_master_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (fpga_only_master_master_agent_cp_data),                                      //  output,  width = 143,          .data
		.cp_startofpacket      (fpga_only_master_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (fpga_only_master_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (fpga_only_master_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (fpga_only_master_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (fpga_only_master_master_limiter_rsp_src_data),                               //   input,  width = 143,          .data
		.rp_channel            (fpga_only_master_master_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (fpga_only_master_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (fpga_only_master_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (fpga_only_master_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                           // (terminated),                         
		.av_writeresponsevalid ()                                                                            // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1971_ft3ctwy #(
		.PKT_QOS_H                   (141),
		.PKT_QOS_L                   (138),
		.PKT_THREAD_ID_H             (144),
		.PKT_THREAD_ID_L             (144),
		.PKT_RESPONSE_STATUS_H       (153),
		.PKT_RESPONSE_STATUS_L       (152),
		.PKT_BEGIN_BURST             (137),
		.PKT_CACHE_H                 (151),
		.PKT_CACHE_L                 (148),
		.PKT_DATA_SIDEBAND_H         (136),
		.PKT_DATA_SIDEBAND_L         (136),
		.PKT_ADDR_SIDEBAND_H         (135),
		.PKT_ADDR_SIDEBAND_L         (135),
		.PKT_BURST_TYPE_H            (134),
		.PKT_BURST_TYPE_L            (133),
		.PKT_PROTECTION_H            (147),
		.PKT_PROTECTION_L            (145),
		.PKT_BURST_SIZE_H            (132),
		.PKT_BURST_SIZE_L            (130),
		.PKT_BURSTWRAP_H             (129),
		.PKT_BURSTWRAP_L             (122),
		.PKT_BYTE_CNT_H              (121),
		.PKT_BYTE_CNT_L              (110),
		.PKT_ADDR_H                  (103),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (109),
		.PKT_TRANS_LOCK              (108),
		.PKT_TRANS_COMPRESSED_READ   (104),
		.PKT_TRANS_POSTED            (105),
		.PKT_TRANS_WRITE             (106),
		.PKT_TRANS_READ              (107),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (142),
		.PKT_SRC_ID_L                (142),
		.PKT_DEST_ID_H               (143),
		.PKT_DEST_ID_L               (143),
		.PKT_ORI_BURST_SIZE_L        (154),
		.PKT_ORI_BURST_SIZE_H        (156),
		.PKT_DOMAIN_L                (163),
		.PKT_DOMAIN_H                (164),
		.PKT_SNOOP_L                 (159),
		.PKT_SNOOP_H                 (162),
		.PKT_BARRIER_L               (157),
		.PKT_BARRIER_H               (158),
		.PKT_WUNIQUE                 (165),
		.PKT_EOP_OOO                 (170),
		.PKT_SOP_OOO                 (171),
		.PKT_POISON_H                (166),
		.PKT_POISON_L                (166),
		.PKT_DATACHK_H               (167),
		.PKT_DATACHK_L               (167),
		.PKT_ADDRCHK_H               (168),
		.PKT_ADDRCHK_L               (168),
		.PKT_SAI_H                   (169),
		.PKT_SAI_L                   (169),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (179),
		.ADDR_WIDTH                  (15),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (3),
		.AXI_SLAVE_ID_W              (7),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) onchip_sram_axi_s1_agent (
		.aclk                   (agilex_5_soc_h2f_user0_clk_clk),                                       //   input,    width = 1,        clock_sink.clk
		.aresetn                (~onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid),                    //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready),                    //  output,    width = 1,                  .ready
		.read_cp_data           (onchip_sram_axi_s1_rd_cmd_width_adapter_src_data),                     //   input,  width = 179,                  .data
		.read_cp_channel        (onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel),                  //   input,    width = 3,                  .channel
		.read_cp_startofpacket  (onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket),            //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket),              //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready),                    //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid),                    //   input,    width = 1,                  .valid
		.write_cp_data          (onchip_sram_axi_s1_wr_cmd_width_adapter_src_data),                     //   input,  width = 179,                  .data
		.write_cp_channel       (onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel),                  //   input,    width = 3,                  .channel
		.write_cp_startofpacket (onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket),            //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket),              //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (onchip_sram_axi_s1_agent_read_rp_ready),                               //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (onchip_sram_axi_s1_agent_read_rp_valid),                               //  output,    width = 1,                  .valid
		.read_rp_data           (onchip_sram_axi_s1_agent_read_rp_data),                                //  output,  width = 179,                  .data
		.read_rp_startofpacket  (onchip_sram_axi_s1_agent_read_rp_startofpacket),                       //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (onchip_sram_axi_s1_agent_read_rp_endofpacket),                         //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (onchip_sram_axi_s1_agent_write_rp_ready),                              //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (onchip_sram_axi_s1_agent_write_rp_valid),                              //  output,    width = 1,                  .valid
		.write_rp_data          (onchip_sram_axi_s1_agent_write_rp_data),                               //  output,  width = 179,                  .data
		.write_rp_startofpacket (onchip_sram_axi_s1_agent_write_rp_startofpacket),                      //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (onchip_sram_axi_s1_agent_write_rp_endofpacket),                        //  output,    width = 1,                  .endofpacket
		.awid                   (onchip_sram_axi_s1_agent_altera_axi_master_awid),                      //  output,    width = 7, altera_axi_master.awid
		.awaddr                 (onchip_sram_axi_s1_agent_altera_axi_master_awaddr),                    //  output,   width = 15,                  .awaddr
		.awlen                  (onchip_sram_axi_s1_agent_altera_axi_master_awlen),                     //  output,    width = 8,                  .awlen
		.awsize                 (onchip_sram_axi_s1_agent_altera_axi_master_awsize),                    //  output,    width = 3,                  .awsize
		.awburst                (onchip_sram_axi_s1_agent_altera_axi_master_awburst),                   //  output,    width = 2,                  .awburst
		.awlock                 (onchip_sram_axi_s1_agent_altera_axi_master_awlock),                    //  output,    width = 1,                  .awlock
		.awcache                (onchip_sram_axi_s1_agent_altera_axi_master_awcache),                   //  output,    width = 4,                  .awcache
		.awprot                 (onchip_sram_axi_s1_agent_altera_axi_master_awprot),                    //  output,    width = 3,                  .awprot
		.awuser                 (onchip_sram_axi_s1_agent_altera_axi_master_awuser),                    //  output,    width = 1,                  .awuser
		.awvalid                (onchip_sram_axi_s1_agent_altera_axi_master_awvalid),                   //  output,    width = 1,                  .awvalid
		.awready                (onchip_sram_axi_s1_agent_altera_axi_master_awready),                   //   input,    width = 1,                  .awready
		.wdata                  (onchip_sram_axi_s1_agent_altera_axi_master_wdata),                     //  output,   width = 64,                  .wdata
		.wstrb                  (onchip_sram_axi_s1_agent_altera_axi_master_wstrb),                     //  output,    width = 8,                  .wstrb
		.wlast                  (onchip_sram_axi_s1_agent_altera_axi_master_wlast),                     //  output,    width = 1,                  .wlast
		.wvalid                 (onchip_sram_axi_s1_agent_altera_axi_master_wvalid),                    //  output,    width = 1,                  .wvalid
		.wready                 (onchip_sram_axi_s1_agent_altera_axi_master_wready),                    //   input,    width = 1,                  .wready
		.bid                    (onchip_sram_axi_s1_agent_altera_axi_master_bid),                       //   input,    width = 7,                  .bid
		.bresp                  (onchip_sram_axi_s1_agent_altera_axi_master_bresp),                     //   input,    width = 2,                  .bresp
		.bvalid                 (onchip_sram_axi_s1_agent_altera_axi_master_bvalid),                    //   input,    width = 1,                  .bvalid
		.bready                 (onchip_sram_axi_s1_agent_altera_axi_master_bready),                    //  output,    width = 1,                  .bready
		.arid                   (onchip_sram_axi_s1_agent_altera_axi_master_arid),                      //  output,    width = 7,                  .arid
		.araddr                 (onchip_sram_axi_s1_agent_altera_axi_master_araddr),                    //  output,   width = 15,                  .araddr
		.arlen                  (onchip_sram_axi_s1_agent_altera_axi_master_arlen),                     //  output,    width = 8,                  .arlen
		.arsize                 (onchip_sram_axi_s1_agent_altera_axi_master_arsize),                    //  output,    width = 3,                  .arsize
		.arburst                (onchip_sram_axi_s1_agent_altera_axi_master_arburst),                   //  output,    width = 2,                  .arburst
		.arlock                 (onchip_sram_axi_s1_agent_altera_axi_master_arlock),                    //  output,    width = 1,                  .arlock
		.arcache                (onchip_sram_axi_s1_agent_altera_axi_master_arcache),                   //  output,    width = 4,                  .arcache
		.arprot                 (onchip_sram_axi_s1_agent_altera_axi_master_arprot),                    //  output,    width = 3,                  .arprot
		.aruser                 (onchip_sram_axi_s1_agent_altera_axi_master_aruser),                    //  output,    width = 1,                  .aruser
		.arvalid                (onchip_sram_axi_s1_agent_altera_axi_master_arvalid),                   //  output,    width = 1,                  .arvalid
		.arready                (onchip_sram_axi_s1_agent_altera_axi_master_arready),                   //   input,    width = 1,                  .arready
		.rid                    (onchip_sram_axi_s1_agent_altera_axi_master_rid),                       //   input,    width = 7,                  .rid
		.rdata                  (onchip_sram_axi_s1_agent_altera_axi_master_rdata),                     //   input,   width = 64,                  .rdata
		.rresp                  (onchip_sram_axi_s1_agent_altera_axi_master_rresp),                     //   input,    width = 2,                  .rresp
		.rlast                  (onchip_sram_axi_s1_agent_altera_axi_master_rlast),                     //   input,    width = 1,                  .rlast
		.rvalid                 (onchip_sram_axi_s1_agent_altera_axi_master_rvalid),                    //   input,    width = 1,                  .rvalid
		.rready                 (onchip_sram_axi_s1_agent_altera_axi_master_rready),                    //  output,    width = 1,                  .rready
		.wuser                  (onchip_sram_axi_s1_agent_altera_axi_master_wuser),                     //  output,    width = 1,                  .wuser
		.awqos                  (onchip_sram_axi_s1_agent_altera_axi_master_awqos),                     //  output,    width = 4,                  .awqos
		.awregion               (onchip_sram_axi_s1_agent_altera_axi_master_awregion),                  //  output,    width = 4,                  .awregion
		.ruser                  (onchip_sram_axi_s1_agent_altera_axi_master_ruser),                     //   input,    width = 1,                  .ruser
		.buser                  (onchip_sram_axi_s1_agent_altera_axi_master_buser),                     //   input,    width = 1,                  .buser
		.arqos                  (onchip_sram_axi_s1_agent_altera_axi_master_arqos),                     //  output,    width = 4,                  .arqos
		.arregion               (onchip_sram_axi_s1_agent_altera_axi_master_arregion),                  //  output,    width = 4,                  .arregion
		.awuser_addrchk         (),                                                                     // (terminated),                                 
		.awuser_sai             (),                                                                     // (terminated),                                 
		.wuser_datachk          (),                                                                     // (terminated),                                 
		.wuser_poison           (),                                                                     // (terminated),                                 
		.aruser_addrchk         (),                                                                     // (terminated),                                 
		.aruser_sai             (),                                                                     // (terminated),                                 
		.ruser_datachk          (8'b00000000),                                                          // (terminated),                                 
		.ruser_poison           (1'b0),                                                                 // (terminated),                                 
		.wid                    (),                                                                     // (terminated),                                 
		.arsnoop                (),                                                                     // (terminated),                                 
		.ardomain               (),                                                                     // (terminated),                                 
		.arbar                  (),                                                                     // (terminated),                                 
		.awsnoop                (),                                                                     // (terminated),                                 
		.awdomain               (),                                                                     // (terminated),                                 
		.awbar                  (),                                                                     // (terminated),                                 
		.awunique               ()                                                                      // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (101),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (130),
		.PKT_POISON_L              (130),
		.PKT_DATACHK_H             (131),
		.PKT_DATACHK_L             (131),
		.PKT_SAI_H                 (133),
		.PKT_SAI_L                 (133),
		.PKT_ADDRCHK_H             (132),
		.PKT_ADDRCHK_L             (132),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (143),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) peripheral_sys_0_mm_peripheral_bridge_s0_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                                        //   input,    width = 1,             clk.clk
		.reset                   (peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_address),                             //  output,   width = 32,              m0.address
		.m0_burstcount           (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_burstcount),                          //  output,    width = 3,                .burstcount
		.m0_byteenable           (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_byteenable),                          //  output,    width = 4,                .byteenable
		.m0_debugaccess          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_readdata),                            //   input,   width = 32,                .readdata
		.m0_readdatavalid        (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_writedata),                           //  output,   width = 32,                .writedata
		.m0_write                (peripheral_sys_0_mm_peripheral_bridge_s0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_data),                                //  output,  width = 143,                .data
		.rp_startofpacket        (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                                  //   input,  width = 143,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                               //   input,    width = 3,                .channel
		.rf_sink_ready           (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_data),                      //   input,  width = 144,                .data
		.rf_source_ready         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_data),                         //  output,  width = 144,                .data
		.rdata_fifo_sink_ready   (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_data),                    //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rdata_fifo_src_data),                    //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                                   // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (144),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (peripheral_sys_0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_data           (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_data),             //   input,  width = 144,        in.data
		.in_valid          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_data),          //  output,  width = 144,       out.data
		.out_valid         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated),                         
		.csr_read          (1'b0),                                                                      // (terminated),                         
		.csr_write         (1'b0),                                                                      // (terminated),                         
		.csr_readdata      (),                                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated),                         
		.almost_full_data  (),                                                                          // (terminated),                         
		.almost_empty_data (),                                                                          // (terminated),                         
		.in_empty          (1'b0),                                                                      // (terminated),                         
		.out_empty         (),                                                                          // (terminated),                         
		.in_error          (1'b0),                                                                      // (terminated),                         
		.out_error         (),                                                                          // (terminated),                         
		.in_channel        (1'b0),                                                                      // (terminated),                         
		.out_channel       ()                                                                           // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_router_1921_ia5i7ja router (
		.sink_ready         (fpga_only_master_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (fpga_only_master_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (fpga_only_master_master_agent_cp_data),                                //   input,  width = 143,          .data
		.sink_startofpacket (fpga_only_master_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (fpga_only_master_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                      //  output,  width = 143,          .data
		.src_channel        (router_src_channel),                                                   //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_itnithy router_001 (
		.sink_ready         (onchip_sram_axi_s1_agent_write_rp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_sram_axi_s1_agent_write_rp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (onchip_sram_axi_s1_agent_write_rp_data),                              //   input,  width = 179,          .data
		.sink_startofpacket (onchip_sram_axi_s1_agent_write_rp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_sram_axi_s1_agent_write_rp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                 //  output,  width = 179,          .data
		.src_channel        (router_001_src_channel),                                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_itnithy router_002 (
		.sink_ready         (onchip_sram_axi_s1_agent_read_rp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_sram_axi_s1_agent_read_rp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (onchip_sram_axi_s1_agent_read_rp_data),                               //   input,  width = 179,          .data
		.sink_startofpacket (onchip_sram_axi_s1_agent_read_rp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_sram_axi_s1_agent_read_rp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                 //  output,  width = 179,          .data
		.src_channel        (router_002_src_channel),                                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_v2ojedq router_003 (
		.sink_ready         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_data),                                //   input,  width = 143,          .data
		.sink_startofpacket (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (peripheral_sys_0_mm_peripheral_bridge_s0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                                  //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                                  //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                                   //  output,  width = 143,          .data
		.src_channel        (router_003_src_channel),                                                                //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                             //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_traffic_limiter_1921_4fqxf7q #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (107),
		.PKT_DEST_ID_L                        (107),
		.PKT_SRC_ID_H                         (106),
		.PKT_SRC_ID_L                         (106),
		.PKT_BYTE_CNT_H                       (85),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (142),
		.PKT_TRANS_SEQ_L                      (136),
		.MAX_OUTSTANDING_RESPONSES            (6),
		.PIPELINED                            (0),
		.ST_DATA_W                            (143),
		.ST_CHANNEL_W                         (3),
		.VALID_WIDTH                          (3),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) fpga_only_master_master_limiter (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                  (fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                     //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                     //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                      //   input,  width = 143,          .data
		.cmd_sink_channel       (router_src_channel),                                                   //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (fpga_only_master_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (fpga_only_master_master_limiter_cmd_src_data),                         //  output,  width = 143,          .data
		.cmd_src_channel        (fpga_only_master_master_limiter_cmd_src_channel),                      //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (fpga_only_master_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (fpga_only_master_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                    //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                    //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                  //   input,    width = 3,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                     //   input,  width = 143,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (fpga_only_master_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (fpga_only_master_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (fpga_only_master_master_limiter_rsp_src_data),                         //  output,  width = 143,          .data
		.rsp_src_channel        (fpga_only_master_master_limiter_rsp_src_channel),                      //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (fpga_only_master_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (fpga_only_master_master_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (fpga_only_master_master_limiter_cmd_valid_data)                        //  output,    width = 3, cmd_valid.data
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_hwqq5ky cmd_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,        clk.clk
		.reset              (fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (fpga_only_master_master_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (fpga_only_master_master_limiter_cmd_src_channel),                      //   input,    width = 3,           .channel
		.sink_data          (fpga_only_master_master_limiter_cmd_src_data),                         //   input,  width = 143,           .data
		.sink_startofpacket (fpga_only_master_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (fpga_only_master_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (fpga_only_master_master_limiter_cmd_valid_data),                       //   input,    width = 3, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                 //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                 //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                                  //  output,  width = 143,           .data
		.src0_channel       (cmd_demux_src0_channel),                                               //  output,    width = 3,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                 //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                 //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                                  //  output,  width = 143,           .data
		.src1_channel       (cmd_demux_src1_channel),                                               //  output,    width = 3,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                           //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                 //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                 //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                                  //  output,  width = 143,           .data
		.src2_channel       (cmd_demux_src2_channel),                                               //  output,    width = 3,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                         //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                            //  output,    width = 1,           .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_qlw6sqy cmd_mux (
		.clk                 (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                    //  output,  width = 143,          .data
		.src_channel         (cmd_mux_src_channel),                                                 //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                                 //   input,    width = 3,          .channel
		.sink0_data          (crosser_out_data),                                                    //   input,  width = 143,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_qlw6sqy cmd_mux_001 (
		.clk                 (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                //  output,  width = 143,          .data
		.src_channel         (cmd_mux_001_src_channel),                                             //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                               //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                               //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                                             //   input,    width = 3,          .channel
		.sink0_data          (crosser_001_out_data),                                                //   input,  width = 143,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                          //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_qlw6sqy cmd_mux_002 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset               (peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                                  //  output,  width = 143,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                               //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                                                //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src2_data),                                                                   //   input,  width = 143,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                                             //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_yuk5h5a rsp_demux (
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (onchip_sram_axi_s1_wr_rsp_width_adapter_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (onchip_sram_axi_s1_wr_rsp_width_adapter_src_channel),                 //   input,    width = 3,          .channel
		.sink_data          (onchip_sram_axi_s1_wr_rsp_width_adapter_src_data),                    //   input,  width = 143,          .data
		.sink_startofpacket (onchip_sram_axi_s1_wr_rsp_width_adapter_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_sram_axi_s1_wr_rsp_width_adapter_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (onchip_sram_axi_s1_wr_rsp_width_adapter_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //  output,  width = 143,          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_yuk5h5a rsp_demux_001 (
		.clk                (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (onchip_sram_axi_s1_rd_rsp_width_adapter_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (onchip_sram_axi_s1_rd_rsp_width_adapter_src_channel),                 //   input,    width = 3,          .channel
		.sink_data          (onchip_sram_axi_s1_rd_rsp_width_adapter_src_data),                    //   input,  width = 143,          .data
		.sink_startofpacket (onchip_sram_axi_s1_rd_rsp_width_adapter_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_sram_axi_s1_rd_rsp_width_adapter_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (onchip_sram_axi_s1_rd_rsp_width_adapter_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //  output,  width = 143,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_yuk5h5a rsp_demux_002 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (peripheral_sys_0_mm_peripheral_bridge_s0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                                                //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                                                                   //   input,  width = 143,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                               //  output,  width = 143,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                                            //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                                         //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1922_53raswy rsp_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset               (fpga_only_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                     //  output,  width = 143,          .data
		.src_channel         (rsp_mux_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                                //   input,    width = 1,          .valid
		.sink0_channel       (crosser_002_out_channel),                                              //   input,    width = 3,          .channel
		.sink0_data          (crosser_002_out_data),                                                 //   input,  width = 143,          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                                //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                                //   input,    width = 1,          .valid
		.sink1_channel       (crosser_003_out_channel),                                              //   input,    width = 3,          .channel
		.sink1_data          (crosser_003_out_data),                                                 //   input,  width = 143,          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                             //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                             //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                           //   input,    width = 3,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                              //   input,  width = 143,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                                        //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_width_adapter_1933_3jn3h2i #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (117),
		.IN_PKT_RESPONSE_STATUS_L      (116),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (118),
		.IN_PKT_ORI_BURST_SIZE_H       (120),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (153),
		.OUT_PKT_RESPONSE_STATUS_L     (152),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (154),
		.OUT_PKT_ORI_BURST_SIZE_H      (156),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (170),
		.OUT_PKT_SOP_OOO               (171),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (179),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_wr_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                 //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                    //   input,  width = 143,          .data
		.out_endofpacket      (onchip_sram_axi_s1_wr_cmd_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_wr_cmd_width_adapter_src_data),                    //  output,  width = 179,          .data
		.out_channel          (onchip_sram_axi_s1_wr_cmd_width_adapter_src_channel),                 //  output,    width = 3,          .channel
		.out_valid            (onchip_sram_axi_s1_wr_cmd_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_wr_cmd_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_wr_cmd_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1933_3jn3h2i #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (117),
		.IN_PKT_RESPONSE_STATUS_L      (116),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (118),
		.IN_PKT_ORI_BURST_SIZE_H       (120),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_ST_DATA_W                  (143),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (153),
		.OUT_PKT_RESPONSE_STATUS_L     (152),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (154),
		.OUT_PKT_ORI_BURST_SIZE_H      (156),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (170),
		.OUT_PKT_SOP_OOO               (171),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (179),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_rd_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                             //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                               //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                //   input,  width = 143,          .data
		.out_endofpacket      (onchip_sram_axi_s1_rd_cmd_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_rd_cmd_width_adapter_src_data),                    //  output,  width = 179,          .data
		.out_channel          (onchip_sram_axi_s1_rd_cmd_width_adapter_src_channel),                 //  output,    width = 3,          .channel
		.out_valid            (onchip_sram_axi_s1_rd_cmd_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_rd_cmd_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_rd_cmd_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1933_x7yhdhq #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (153),
		.IN_PKT_RESPONSE_STATUS_L      (152),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (154),
		.IN_PKT_ORI_BURST_SIZE_H       (156),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_ST_DATA_W                  (179),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (117),
		.OUT_PKT_RESPONSE_STATUS_L     (116),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (118),
		.OUT_PKT_ORI_BURST_SIZE_H      (120),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (134),
		.OUT_PKT_SOP_OOO               (135),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_wr_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                              //   input,    width = 3,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                                //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                                 //   input,  width = 179,          .data
		.out_endofpacket      (onchip_sram_axi_s1_wr_rsp_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_wr_rsp_width_adapter_src_data),                    //  output,  width = 143,          .data
		.out_channel          (onchip_sram_axi_s1_wr_rsp_width_adapter_src_channel),                 //  output,    width = 3,          .channel
		.out_valid            (onchip_sram_axi_s1_wr_rsp_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_wr_rsp_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_wr_rsp_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1933_x7yhdhq #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (153),
		.IN_PKT_RESPONSE_STATUS_L      (152),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (154),
		.IN_PKT_ORI_BURST_SIZE_H       (156),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_ST_DATA_W                  (179),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (117),
		.OUT_PKT_RESPONSE_STATUS_L     (116),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (118),
		.OUT_PKT_ORI_BURST_SIZE_H      (120),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (134),
		.OUT_PKT_SOP_OOO               (135),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (143),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.SYNC_RESET                    (1)
	) onchip_sram_axi_s1_rd_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (onchip_sram_axi_s1_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                              //   input,    width = 3,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                 //   input,  width = 179,          .data
		.out_endofpacket      (onchip_sram_axi_s1_rd_rsp_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_sram_axi_s1_rd_rsp_width_adapter_src_data),                    //  output,  width = 143,          .data
		.out_channel          (onchip_sram_axi_s1_rd_rsp_width_adapter_src_channel),                 //  output,    width = 3,          .channel
		.out_valid            (onchip_sram_axi_s1_rd_rsp_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (onchip_sram_axi_s1_rd_rsp_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_sram_axi_s1_rd_rsp_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	ghrd_hps_system_hs_clk_xer_1940_ednepwy #(
		.DATA_WIDTH          (143),
		.BITS_PER_SYMBOL     (143),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                   //   input,    width = 1,        in_clk.clk
		.in_reset          (crosser_in_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user0_clk_clk),                   //   input,    width = 1,       out_clk.clk
		.out_reset         (onchip_sram_reset1_reset_bridge_in_reset_reset),   //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                             //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                             //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                     //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                       //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                           //   input,    width = 3,              .channel
		.in_data           (cmd_demux_src0_data),                              //   input,  width = 143,              .data
		.out_ready         (crosser_out_ready),                                //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                        //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                          //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                              //  output,    width = 3,              .channel
		.out_data          (crosser_out_data),                                 //  output,  width = 143,              .data
		.in_empty          (1'b0),                                             // (terminated),                             
		.in_error          (1'b0),                                             // (terminated),                             
		.out_empty         (),                                                 // (terminated),                             
		.out_error         ()                                                  // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_ednepwy #(
		.DATA_WIDTH          (143),
		.BITS_PER_SYMBOL     (143),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_001 (
		.in_clk            (agilex_5_soc_h2f_user1_clk_clk),                   //   input,    width = 1,        in_clk.clk
		.in_reset          (crosser_in_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user0_clk_clk),                   //   input,    width = 1,       out_clk.clk
		.out_reset         (onchip_sram_reset1_reset_bridge_in_reset_reset),   //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                             //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src1_valid),                             //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                     //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                       //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                           //   input,    width = 3,              .channel
		.in_data           (cmd_demux_src1_data),                              //   input,  width = 143,              .data
		.out_ready         (crosser_001_out_ready),                            //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                            //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                    //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                      //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                          //  output,    width = 3,              .channel
		.out_data          (crosser_001_out_data),                             //  output,  width = 143,              .data
		.in_empty          (1'b0),                                             // (terminated),                             
		.in_error          (1'b0),                                             // (terminated),                             
		.out_empty         (),                                                 // (terminated),                             
		.out_error         ()                                                  // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_ednepwy #(
		.DATA_WIDTH          (143),
		.BITS_PER_SYMBOL     (143),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_002 (
		.in_clk            (agilex_5_soc_h2f_user0_clk_clk),                   //   input,    width = 1,        in_clk.clk
		.in_reset          (onchip_sram_reset1_reset_bridge_in_reset_reset),   //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                   //   input,    width = 1,       out_clk.clk
		.out_reset         (crosser_in_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                             //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                             //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                     //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                       //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                           //   input,    width = 3,              .channel
		.in_data           (rsp_demux_src0_data),                              //   input,  width = 143,              .data
		.out_ready         (crosser_002_out_ready),                            //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                            //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                    //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                      //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                          //  output,    width = 3,              .channel
		.out_data          (crosser_002_out_data),                             //  output,  width = 143,              .data
		.in_empty          (1'b0),                                             // (terminated),                             
		.in_error          (1'b0),                                             // (terminated),                             
		.out_empty         (),                                                 // (terminated),                             
		.out_error         ()                                                  // (terminated),                             
	);

	ghrd_hps_system_hs_clk_xer_1940_ednepwy #(
		.DATA_WIDTH          (143),
		.BITS_PER_SYMBOL     (143),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (1)
	) crosser_003 (
		.in_clk            (agilex_5_soc_h2f_user0_clk_clk),                   //   input,    width = 1,        in_clk.clk
		.in_reset          (onchip_sram_reset1_reset_bridge_in_reset_reset),   //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (agilex_5_soc_h2f_user1_clk_clk),                   //   input,    width = 1,       out_clk.clk
		.out_reset         (crosser_in_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                         //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                         //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                   //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                       //   input,    width = 3,              .channel
		.in_data           (rsp_demux_001_src0_data),                          //   input,  width = 143,              .data
		.out_ready         (crosser_003_out_ready),                            //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                            //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                    //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                      //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                          //  output,    width = 3,              .channel
		.out_data          (crosser_003_out_data),                             //  output,  width = 143,              .data
		.in_empty          (1'b0),                                             // (terminated),                             
		.in_error          (1'b0),                                             // (terminated),                             
		.out_empty         (),                                                 // (terminated),                             
		.out_error         ()                                                  // (terminated),                             
	);

endmodule
