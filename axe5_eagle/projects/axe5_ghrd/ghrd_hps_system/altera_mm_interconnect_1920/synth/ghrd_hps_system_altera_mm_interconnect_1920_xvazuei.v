// ghrd_hps_system_altera_mm_interconnect_1920_xvazuei.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module ghrd_hps_system_altera_mm_interconnect_1920_xvazuei (
		input  wire [31:0]  bank3a_emif_master_master_address,                                      //                                        bank3a_emif_master_master.address
		output wire         bank3a_emif_master_master_waitrequest,                                  //                                                                 .waitrequest
		input  wire [3:0]   bank3a_emif_master_master_byteenable,                                   //                                                                 .byteenable
		input  wire         bank3a_emif_master_master_read,                                         //                                                                 .read
		output wire [31:0]  bank3a_emif_master_master_readdata,                                     //                                                                 .readdata
		output wire         bank3a_emif_master_master_readdatavalid,                                //                                                                 .readdatavalid
		input  wire         bank3a_emif_master_master_write,                                        //                                                                 .write
		input  wire [31:0]  bank3a_emif_master_master_writedata,                                    //                                                                 .writedata
		output wire [6:0]   emif_bank3a_s0_axi4_awid,                                               //                                              emif_bank3a_s0_axi4.awid
		output wire [31:0]  emif_bank3a_s0_axi4_awaddr,                                             //                                                                 .awaddr
		output wire [7:0]   emif_bank3a_s0_axi4_awlen,                                              //                                                                 .awlen
		output wire [2:0]   emif_bank3a_s0_axi4_awsize,                                             //                                                                 .awsize
		output wire [1:0]   emif_bank3a_s0_axi4_awburst,                                            //                                                                 .awburst
		output wire [0:0]   emif_bank3a_s0_axi4_awlock,                                             //                                                                 .awlock
		output wire [2:0]   emif_bank3a_s0_axi4_awprot,                                             //                                                                 .awprot
		output wire [13:0]  emif_bank3a_s0_axi4_awuser,                                             //                                                                 .awuser
		output wire [3:0]   emif_bank3a_s0_axi4_awqos,                                              //                                                                 .awqos
		output wire         emif_bank3a_s0_axi4_awvalid,                                            //                                                                 .awvalid
		input  wire         emif_bank3a_s0_axi4_awready,                                            //                                                                 .awready
		output wire [255:0] emif_bank3a_s0_axi4_wdata,                                              //                                                                 .wdata
		output wire [31:0]  emif_bank3a_s0_axi4_wstrb,                                              //                                                                 .wstrb
		output wire         emif_bank3a_s0_axi4_wlast,                                              //                                                                 .wlast
		output wire         emif_bank3a_s0_axi4_wvalid,                                             //                                                                 .wvalid
		output wire [63:0]  emif_bank3a_s0_axi4_wuser,                                              //                                                                 .wuser
		input  wire         emif_bank3a_s0_axi4_wready,                                             //                                                                 .wready
		input  wire [6:0]   emif_bank3a_s0_axi4_bid,                                                //                                                                 .bid
		input  wire [1:0]   emif_bank3a_s0_axi4_bresp,                                              //                                                                 .bresp
		input  wire         emif_bank3a_s0_axi4_bvalid,                                             //                                                                 .bvalid
		output wire         emif_bank3a_s0_axi4_bready,                                             //                                                                 .bready
		output wire [6:0]   emif_bank3a_s0_axi4_arid,                                               //                                                                 .arid
		output wire [31:0]  emif_bank3a_s0_axi4_araddr,                                             //                                                                 .araddr
		output wire [7:0]   emif_bank3a_s0_axi4_arlen,                                              //                                                                 .arlen
		output wire [2:0]   emif_bank3a_s0_axi4_arsize,                                             //                                                                 .arsize
		output wire [1:0]   emif_bank3a_s0_axi4_arburst,                                            //                                                                 .arburst
		output wire [0:0]   emif_bank3a_s0_axi4_arlock,                                             //                                                                 .arlock
		output wire [2:0]   emif_bank3a_s0_axi4_arprot,                                             //                                                                 .arprot
		output wire [13:0]  emif_bank3a_s0_axi4_aruser,                                             //                                                                 .aruser
		output wire [3:0]   emif_bank3a_s0_axi4_arqos,                                              //                                                                 .arqos
		output wire         emif_bank3a_s0_axi4_arvalid,                                            //                                                                 .arvalid
		input  wire         emif_bank3a_s0_axi4_arready,                                            //                                                                 .arready
		input  wire [6:0]   emif_bank3a_s0_axi4_rid,                                                //                                                                 .rid
		input  wire [255:0] emif_bank3a_s0_axi4_rdata,                                              //                                                                 .rdata
		input  wire [1:0]   emif_bank3a_s0_axi4_rresp,                                              //                                                                 .rresp
		input  wire         emif_bank3a_s0_axi4_rlast,                                              //                                                                 .rlast
		input  wire         emif_bank3a_s0_axi4_rvalid,                                             //                                                                 .rvalid
		output wire         emif_bank3a_s0_axi4_rready,                                             //                                                                 .rready
		input  wire [63:0]  emif_bank3a_s0_axi4_ruser,                                              //                                                                 .ruser
		input  wire         bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset, // bank3a_emif_master_master_translator_reset_reset_bridge_in_reset.reset
		input  wire         emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset,   //   emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire         agilex_5_soc_h2f_user1_clk_clk                                          //                                       agilex_5_soc_h2f_user1_clk.clk
	);

	wire          bank3a_emif_master_master_translator_avalon_universal_master_0_waitrequest;   // bank3a_emif_master_master_agent:av_waitrequest -> bank3a_emif_master_master_translator:uav_waitrequest
	wire   [31:0] bank3a_emif_master_master_translator_avalon_universal_master_0_readdata;      // bank3a_emif_master_master_agent:av_readdata -> bank3a_emif_master_master_translator:uav_readdata
	wire          bank3a_emif_master_master_translator_avalon_universal_master_0_debugaccess;   // bank3a_emif_master_master_translator:uav_debugaccess -> bank3a_emif_master_master_agent:av_debugaccess
	wire   [31:0] bank3a_emif_master_master_translator_avalon_universal_master_0_address;       // bank3a_emif_master_master_translator:uav_address -> bank3a_emif_master_master_agent:av_address
	wire          bank3a_emif_master_master_translator_avalon_universal_master_0_read;          // bank3a_emif_master_master_translator:uav_read -> bank3a_emif_master_master_agent:av_read
	wire    [3:0] bank3a_emif_master_master_translator_avalon_universal_master_0_byteenable;    // bank3a_emif_master_master_translator:uav_byteenable -> bank3a_emif_master_master_agent:av_byteenable
	wire          bank3a_emif_master_master_translator_avalon_universal_master_0_readdatavalid; // bank3a_emif_master_master_agent:av_readdatavalid -> bank3a_emif_master_master_translator:uav_readdatavalid
	wire          bank3a_emif_master_master_translator_avalon_universal_master_0_lock;          // bank3a_emif_master_master_translator:uav_lock -> bank3a_emif_master_master_agent:av_lock
	wire          bank3a_emif_master_master_translator_avalon_universal_master_0_write;         // bank3a_emif_master_master_translator:uav_write -> bank3a_emif_master_master_agent:av_write
	wire   [31:0] bank3a_emif_master_master_translator_avalon_universal_master_0_writedata;     // bank3a_emif_master_master_translator:uav_writedata -> bank3a_emif_master_master_agent:av_writedata
	wire    [2:0] bank3a_emif_master_master_translator_avalon_universal_master_0_burstcount;    // bank3a_emif_master_master_translator:uav_burstcount -> bank3a_emif_master_master_agent:av_burstcount
	wire   [63:0] emif_bank3a_s0_axi4_agent_altera_axi_master_ruser;                            // emif_bank3a_s0_axi4_translator:s0_ruser -> emif_bank3a_s0_axi4_agent:ruser
	wire   [63:0] emif_bank3a_s0_axi4_agent_altera_axi_master_wuser;                            // emif_bank3a_s0_axi4_agent:wuser -> emif_bank3a_s0_axi4_translator:s0_wuser
	wire    [1:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awburst;                          // emif_bank3a_s0_axi4_agent:awburst -> emif_bank3a_s0_axi4_translator:s0_awburst
	wire    [3:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arregion;                         // emif_bank3a_s0_axi4_agent:arregion -> emif_bank3a_s0_axi4_translator:s0_arregion
	wire   [13:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awuser;                           // emif_bank3a_s0_axi4_agent:awuser -> emif_bank3a_s0_axi4_translator:s0_awuser
	wire    [7:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arlen;                            // emif_bank3a_s0_axi4_agent:arlen -> emif_bank3a_s0_axi4_translator:s0_arlen
	wire    [3:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arqos;                            // emif_bank3a_s0_axi4_agent:arqos -> emif_bank3a_s0_axi4_translator:s0_arqos
	wire   [31:0] emif_bank3a_s0_axi4_agent_altera_axi_master_wstrb;                            // emif_bank3a_s0_axi4_agent:wstrb -> emif_bank3a_s0_axi4_translator:s0_wstrb
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_wready;                           // emif_bank3a_s0_axi4_translator:s0_wready -> emif_bank3a_s0_axi4_agent:wready
	wire    [0:0] emif_bank3a_s0_axi4_agent_altera_axi_master_rid;                              // emif_bank3a_s0_axi4_translator:s0_rid -> emif_bank3a_s0_axi4_agent:rid
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_rready;                           // emif_bank3a_s0_axi4_agent:rready -> emif_bank3a_s0_axi4_translator:s0_rready
	wire    [7:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awlen;                            // emif_bank3a_s0_axi4_agent:awlen -> emif_bank3a_s0_axi4_translator:s0_awlen
	wire    [3:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awqos;                            // emif_bank3a_s0_axi4_agent:awqos -> emif_bank3a_s0_axi4_translator:s0_awqos
	wire    [3:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arcache;                          // emif_bank3a_s0_axi4_agent:arcache -> emif_bank3a_s0_axi4_translator:s0_arcache
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_wvalid;                           // emif_bank3a_s0_axi4_agent:wvalid -> emif_bank3a_s0_axi4_translator:s0_wvalid
	wire   [31:0] emif_bank3a_s0_axi4_agent_altera_axi_master_araddr;                           // emif_bank3a_s0_axi4_agent:araddr -> emif_bank3a_s0_axi4_translator:s0_araddr
	wire    [2:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arprot;                           // emif_bank3a_s0_axi4_agent:arprot -> emif_bank3a_s0_axi4_translator:s0_arprot
	wire    [2:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awprot;                           // emif_bank3a_s0_axi4_agent:awprot -> emif_bank3a_s0_axi4_translator:s0_awprot
	wire  [255:0] emif_bank3a_s0_axi4_agent_altera_axi_master_wdata;                            // emif_bank3a_s0_axi4_agent:wdata -> emif_bank3a_s0_axi4_translator:s0_wdata
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_arvalid;                          // emif_bank3a_s0_axi4_agent:arvalid -> emif_bank3a_s0_axi4_translator:s0_arvalid
	wire    [3:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awcache;                          // emif_bank3a_s0_axi4_agent:awcache -> emif_bank3a_s0_axi4_translator:s0_awcache
	wire    [0:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arid;                             // emif_bank3a_s0_axi4_agent:arid -> emif_bank3a_s0_axi4_translator:s0_arid
	wire    [0:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arlock;                           // emif_bank3a_s0_axi4_agent:arlock -> emif_bank3a_s0_axi4_translator:s0_arlock
	wire    [0:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awlock;                           // emif_bank3a_s0_axi4_agent:awlock -> emif_bank3a_s0_axi4_translator:s0_awlock
	wire   [31:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awaddr;                           // emif_bank3a_s0_axi4_agent:awaddr -> emif_bank3a_s0_axi4_translator:s0_awaddr
	wire    [1:0] emif_bank3a_s0_axi4_agent_altera_axi_master_bresp;                            // emif_bank3a_s0_axi4_translator:s0_bresp -> emif_bank3a_s0_axi4_agent:bresp
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_arready;                          // emif_bank3a_s0_axi4_translator:s0_arready -> emif_bank3a_s0_axi4_agent:arready
	wire  [255:0] emif_bank3a_s0_axi4_agent_altera_axi_master_rdata;                            // emif_bank3a_s0_axi4_translator:s0_rdata -> emif_bank3a_s0_axi4_agent:rdata
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_awready;                          // emif_bank3a_s0_axi4_translator:s0_awready -> emif_bank3a_s0_axi4_agent:awready
	wire    [1:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arburst;                          // emif_bank3a_s0_axi4_agent:arburst -> emif_bank3a_s0_axi4_translator:s0_arburst
	wire    [2:0] emif_bank3a_s0_axi4_agent_altera_axi_master_arsize;                           // emif_bank3a_s0_axi4_agent:arsize -> emif_bank3a_s0_axi4_translator:s0_arsize
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_bready;                           // emif_bank3a_s0_axi4_agent:bready -> emif_bank3a_s0_axi4_translator:s0_bready
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_rlast;                            // emif_bank3a_s0_axi4_translator:s0_rlast -> emif_bank3a_s0_axi4_agent:rlast
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_wlast;                            // emif_bank3a_s0_axi4_agent:wlast -> emif_bank3a_s0_axi4_translator:s0_wlast
	wire    [3:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awregion;                         // emif_bank3a_s0_axi4_agent:awregion -> emif_bank3a_s0_axi4_translator:s0_awregion
	wire   [63:0] emif_bank3a_s0_axi4_agent_altera_axi_master_buser;                            // emif_bank3a_s0_axi4_translator:s0_buser -> emif_bank3a_s0_axi4_agent:buser
	wire    [1:0] emif_bank3a_s0_axi4_agent_altera_axi_master_rresp;                            // emif_bank3a_s0_axi4_translator:s0_rresp -> emif_bank3a_s0_axi4_agent:rresp
	wire    [0:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awid;                             // emif_bank3a_s0_axi4_agent:awid -> emif_bank3a_s0_axi4_translator:s0_awid
	wire    [0:0] emif_bank3a_s0_axi4_agent_altera_axi_master_bid;                              // emif_bank3a_s0_axi4_translator:s0_bid -> emif_bank3a_s0_axi4_agent:bid
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_bvalid;                           // emif_bank3a_s0_axi4_translator:s0_bvalid -> emif_bank3a_s0_axi4_agent:bvalid
	wire    [2:0] emif_bank3a_s0_axi4_agent_altera_axi_master_awsize;                           // emif_bank3a_s0_axi4_agent:awsize -> emif_bank3a_s0_axi4_translator:s0_awsize
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_awvalid;                          // emif_bank3a_s0_axi4_agent:awvalid -> emif_bank3a_s0_axi4_translator:s0_awvalid
	wire   [13:0] emif_bank3a_s0_axi4_agent_altera_axi_master_aruser;                           // emif_bank3a_s0_axi4_agent:aruser -> emif_bank3a_s0_axi4_translator:s0_aruser
	wire          emif_bank3a_s0_axi4_agent_altera_axi_master_rvalid;                           // emif_bank3a_s0_axi4_translator:s0_rvalid -> emif_bank3a_s0_axi4_agent:rvalid
	wire          bank3a_emif_master_master_agent_cp_valid;                                     // bank3a_emif_master_master_agent:cp_valid -> router:sink_valid
	wire  [209:0] bank3a_emif_master_master_agent_cp_data;                                      // bank3a_emif_master_master_agent:cp_data -> router:sink_data
	wire          bank3a_emif_master_master_agent_cp_ready;                                     // router:sink_ready -> bank3a_emif_master_master_agent:cp_ready
	wire          bank3a_emif_master_master_agent_cp_startofpacket;                             // bank3a_emif_master_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          bank3a_emif_master_master_agent_cp_endofpacket;                               // bank3a_emif_master_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          emif_bank3a_s0_axi4_agent_write_rp_valid;                                     // emif_bank3a_s0_axi4_agent:write_rp_valid -> router_001:sink_valid
	wire  [461:0] emif_bank3a_s0_axi4_agent_write_rp_data;                                      // emif_bank3a_s0_axi4_agent:write_rp_data -> router_001:sink_data
	wire          emif_bank3a_s0_axi4_agent_write_rp_ready;                                     // router_001:sink_ready -> emif_bank3a_s0_axi4_agent:write_rp_ready
	wire          emif_bank3a_s0_axi4_agent_write_rp_startofpacket;                             // emif_bank3a_s0_axi4_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          emif_bank3a_s0_axi4_agent_write_rp_endofpacket;                               // emif_bank3a_s0_axi4_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          emif_bank3a_s0_axi4_agent_read_rp_valid;                                      // emif_bank3a_s0_axi4_agent:read_rp_valid -> router_002:sink_valid
	wire  [461:0] emif_bank3a_s0_axi4_agent_read_rp_data;                                       // emif_bank3a_s0_axi4_agent:read_rp_data -> router_002:sink_data
	wire          emif_bank3a_s0_axi4_agent_read_rp_ready;                                      // router_002:sink_ready -> emif_bank3a_s0_axi4_agent:read_rp_ready
	wire          emif_bank3a_s0_axi4_agent_read_rp_startofpacket;                              // emif_bank3a_s0_axi4_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          emif_bank3a_s0_axi4_agent_read_rp_endofpacket;                                // emif_bank3a_s0_axi4_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> bank3a_emif_master_master_limiter:cmd_sink_valid
	wire  [209:0] router_src_data;                                                              // router:src_data -> bank3a_emif_master_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                             // bank3a_emif_master_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                           // router:src_channel -> bank3a_emif_master_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> bank3a_emif_master_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> bank3a_emif_master_master_limiter:cmd_sink_endofpacket
	wire  [209:0] bank3a_emif_master_master_limiter_cmd_src_data;                               // bank3a_emif_master_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          bank3a_emif_master_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> bank3a_emif_master_master_limiter:cmd_src_ready
	wire    [1:0] bank3a_emif_master_master_limiter_cmd_src_channel;                            // bank3a_emif_master_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          bank3a_emif_master_master_limiter_cmd_src_startofpacket;                      // bank3a_emif_master_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          bank3a_emif_master_master_limiter_cmd_src_endofpacket;                        // bank3a_emif_master_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> bank3a_emif_master_master_limiter:rsp_sink_valid
	wire  [209:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> bank3a_emif_master_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                            // bank3a_emif_master_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> bank3a_emif_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> bank3a_emif_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> bank3a_emif_master_master_limiter:rsp_sink_endofpacket
	wire          bank3a_emif_master_master_limiter_rsp_src_valid;                              // bank3a_emif_master_master_limiter:rsp_src_valid -> bank3a_emif_master_master_agent:rp_valid
	wire  [209:0] bank3a_emif_master_master_limiter_rsp_src_data;                               // bank3a_emif_master_master_limiter:rsp_src_data -> bank3a_emif_master_master_agent:rp_data
	wire          bank3a_emif_master_master_limiter_rsp_src_ready;                              // bank3a_emif_master_master_agent:rp_ready -> bank3a_emif_master_master_limiter:rsp_src_ready
	wire    [1:0] bank3a_emif_master_master_limiter_rsp_src_channel;                            // bank3a_emif_master_master_limiter:rsp_src_channel -> bank3a_emif_master_master_agent:rp_channel
	wire          bank3a_emif_master_master_limiter_rsp_src_startofpacket;                      // bank3a_emif_master_master_limiter:rsp_src_startofpacket -> bank3a_emif_master_master_agent:rp_startofpacket
	wire          bank3a_emif_master_master_limiter_rsp_src_endofpacket;                        // bank3a_emif_master_master_limiter:rsp_src_endofpacket -> bank3a_emif_master_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [209:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [209:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [209:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [209:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> emif_bank3a_s0_axi4_wr_cmd_width_adapter:in_valid
	wire  [209:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> emif_bank3a_s0_axi4_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                            // emif_bank3a_s0_axi4_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> emif_bank3a_s0_axi4_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> emif_bank3a_s0_axi4_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> emif_bank3a_s0_axi4_wr_cmd_width_adapter:in_endofpacket
	wire          emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_valid;                           // emif_bank3a_s0_axi4_wr_cmd_width_adapter:out_valid -> emif_bank3a_s0_axi4_agent:write_cp_valid
	wire  [461:0] emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_data;                            // emif_bank3a_s0_axi4_wr_cmd_width_adapter:out_data -> emif_bank3a_s0_axi4_agent:write_cp_data
	wire          emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_ready;                           // emif_bank3a_s0_axi4_agent:write_cp_ready -> emif_bank3a_s0_axi4_wr_cmd_width_adapter:out_ready
	wire    [1:0] emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_channel;                         // emif_bank3a_s0_axi4_wr_cmd_width_adapter:out_channel -> emif_bank3a_s0_axi4_agent:write_cp_channel
	wire          emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_startofpacket;                   // emif_bank3a_s0_axi4_wr_cmd_width_adapter:out_startofpacket -> emif_bank3a_s0_axi4_agent:write_cp_startofpacket
	wire          emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_endofpacket;                     // emif_bank3a_s0_axi4_wr_cmd_width_adapter:out_endofpacket -> emif_bank3a_s0_axi4_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> emif_bank3a_s0_axi4_rd_cmd_width_adapter:in_valid
	wire  [209:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> emif_bank3a_s0_axi4_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                        // emif_bank3a_s0_axi4_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> emif_bank3a_s0_axi4_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> emif_bank3a_s0_axi4_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> emif_bank3a_s0_axi4_rd_cmd_width_adapter:in_endofpacket
	wire          emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_valid;                           // emif_bank3a_s0_axi4_rd_cmd_width_adapter:out_valid -> emif_bank3a_s0_axi4_agent:read_cp_valid
	wire  [461:0] emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_data;                            // emif_bank3a_s0_axi4_rd_cmd_width_adapter:out_data -> emif_bank3a_s0_axi4_agent:read_cp_data
	wire          emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_ready;                           // emif_bank3a_s0_axi4_agent:read_cp_ready -> emif_bank3a_s0_axi4_rd_cmd_width_adapter:out_ready
	wire    [1:0] emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_channel;                         // emif_bank3a_s0_axi4_rd_cmd_width_adapter:out_channel -> emif_bank3a_s0_axi4_agent:read_cp_channel
	wire          emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_startofpacket;                   // emif_bank3a_s0_axi4_rd_cmd_width_adapter:out_startofpacket -> emif_bank3a_s0_axi4_agent:read_cp_startofpacket
	wire          emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_endofpacket;                     // emif_bank3a_s0_axi4_rd_cmd_width_adapter:out_endofpacket -> emif_bank3a_s0_axi4_agent:read_cp_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> emif_bank3a_s0_axi4_wr_rsp_width_adapter:in_valid
	wire  [461:0] router_001_src_data;                                                          // router_001:src_data -> emif_bank3a_s0_axi4_wr_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                         // emif_bank3a_s0_axi4_wr_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                       // router_001:src_channel -> emif_bank3a_s0_axi4_wr_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> emif_bank3a_s0_axi4_wr_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> emif_bank3a_s0_axi4_wr_rsp_width_adapter:in_endofpacket
	wire          emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_valid;                           // emif_bank3a_s0_axi4_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [209:0] emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_data;                            // emif_bank3a_s0_axi4_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_ready;                           // rsp_demux:sink_ready -> emif_bank3a_s0_axi4_wr_rsp_width_adapter:out_ready
	wire    [1:0] emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_channel;                         // emif_bank3a_s0_axi4_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_startofpacket;                   // emif_bank3a_s0_axi4_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_endofpacket;                     // emif_bank3a_s0_axi4_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> emif_bank3a_s0_axi4_rd_rsp_width_adapter:in_valid
	wire  [461:0] router_002_src_data;                                                          // router_002:src_data -> emif_bank3a_s0_axi4_rd_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                         // emif_bank3a_s0_axi4_rd_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                       // router_002:src_channel -> emif_bank3a_s0_axi4_rd_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> emif_bank3a_s0_axi4_rd_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> emif_bank3a_s0_axi4_rd_rsp_width_adapter:in_endofpacket
	wire          emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_valid;                           // emif_bank3a_s0_axi4_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [209:0] emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_data;                            // emif_bank3a_s0_axi4_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_ready;                           // rsp_demux_001:sink_ready -> emif_bank3a_s0_axi4_rd_rsp_width_adapter:out_ready
	wire    [1:0] emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_channel;                         // emif_bank3a_s0_axi4_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_startofpacket;                   // emif_bank3a_s0_axi4_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_endofpacket;                     // emif_bank3a_s0_axi4_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire    [1:0] bank3a_emif_master_master_limiter_cmd_valid_data;                             // bank3a_emif_master_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

	ghrd_hps_system_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) bank3a_emif_master_master_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                               //   input,   width = 1,                       clk.clk
		.reset                  (bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (bank3a_emif_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (bank3a_emif_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (bank3a_emif_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (bank3a_emif_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (bank3a_emif_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (bank3a_emif_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (bank3a_emif_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (bank3a_emif_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (bank3a_emif_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (bank3a_emif_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (bank3a_emif_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (bank3a_emif_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (bank3a_emif_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (bank3a_emif_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (bank3a_emif_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (bank3a_emif_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (bank3a_emif_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (bank3a_emif_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (bank3a_emif_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                         // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                         // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                         // (terminated),                                        
		.av_chipselect          (1'b0),                                                                         // (terminated),                                        
		.av_lock                (1'b0),                                                                         // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                         // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                         // (terminated),                                        
		.uav_clken              (),                                                                             // (terminated),                                        
		.av_clken               (1'b1),                                                                         // (terminated),                                        
		.uav_response           (2'b00),                                                                        // (terminated),                                        
		.av_response            (),                                                                             // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                         // (terminated),                                        
		.av_writeresponsevalid  ()                                                                              // (terminated),                                        
	);

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (0),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (0),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (0),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (0),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (7),
		.DATA_WIDTH                        (256),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (14),
		.S0_READ_ADDR_USER_WIDTH           (14),
		.M0_WRITE_ADDR_USER_WIDTH          (14),
		.M0_READ_ADDR_USER_WIDTH           (14),
		.S0_WRITE_DATA_USER_WIDTH          (64),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (64),
		.S0_READ_DATA_USER_WIDTH           (64),
		.M0_WRITE_DATA_USER_WIDTH          (64),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (64),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) emif_bank3a_s0_axi4_translator (
		.aclk        (agilex_5_soc_h2f_user1_clk_clk),                                        //   input,    width = 1,       clk.clk
		.aresetn     (~emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid     (emif_bank3a_s0_axi4_awid),                                              //  output,    width = 7,        m0.awid
		.m0_awaddr   (emif_bank3a_s0_axi4_awaddr),                                            //  output,   width = 32,          .awaddr
		.m0_awlen    (emif_bank3a_s0_axi4_awlen),                                             //  output,    width = 8,          .awlen
		.m0_awsize   (emif_bank3a_s0_axi4_awsize),                                            //  output,    width = 3,          .awsize
		.m0_awburst  (emif_bank3a_s0_axi4_awburst),                                           //  output,    width = 2,          .awburst
		.m0_awlock   (emif_bank3a_s0_axi4_awlock),                                            //  output,    width = 1,          .awlock
		.m0_awprot   (emif_bank3a_s0_axi4_awprot),                                            //  output,    width = 3,          .awprot
		.m0_awuser   (emif_bank3a_s0_axi4_awuser),                                            //  output,   width = 14,          .awuser
		.m0_awqos    (emif_bank3a_s0_axi4_awqos),                                             //  output,    width = 4,          .awqos
		.m0_awvalid  (emif_bank3a_s0_axi4_awvalid),                                           //  output,    width = 1,          .awvalid
		.m0_awready  (emif_bank3a_s0_axi4_awready),                                           //   input,    width = 1,          .awready
		.m0_wdata    (emif_bank3a_s0_axi4_wdata),                                             //  output,  width = 256,          .wdata
		.m0_wstrb    (emif_bank3a_s0_axi4_wstrb),                                             //  output,   width = 32,          .wstrb
		.m0_wlast    (emif_bank3a_s0_axi4_wlast),                                             //  output,    width = 1,          .wlast
		.m0_wvalid   (emif_bank3a_s0_axi4_wvalid),                                            //  output,    width = 1,          .wvalid
		.m0_wuser    (emif_bank3a_s0_axi4_wuser),                                             //  output,   width = 64,          .wuser
		.m0_wready   (emif_bank3a_s0_axi4_wready),                                            //   input,    width = 1,          .wready
		.m0_bid      (emif_bank3a_s0_axi4_bid),                                               //   input,    width = 7,          .bid
		.m0_bresp    (emif_bank3a_s0_axi4_bresp),                                             //   input,    width = 2,          .bresp
		.m0_bvalid   (emif_bank3a_s0_axi4_bvalid),                                            //   input,    width = 1,          .bvalid
		.m0_bready   (emif_bank3a_s0_axi4_bready),                                            //  output,    width = 1,          .bready
		.m0_arid     (emif_bank3a_s0_axi4_arid),                                              //  output,    width = 7,          .arid
		.m0_araddr   (emif_bank3a_s0_axi4_araddr),                                            //  output,   width = 32,          .araddr
		.m0_arlen    (emif_bank3a_s0_axi4_arlen),                                             //  output,    width = 8,          .arlen
		.m0_arsize   (emif_bank3a_s0_axi4_arsize),                                            //  output,    width = 3,          .arsize
		.m0_arburst  (emif_bank3a_s0_axi4_arburst),                                           //  output,    width = 2,          .arburst
		.m0_arlock   (emif_bank3a_s0_axi4_arlock),                                            //  output,    width = 1,          .arlock
		.m0_arprot   (emif_bank3a_s0_axi4_arprot),                                            //  output,    width = 3,          .arprot
		.m0_aruser   (emif_bank3a_s0_axi4_aruser),                                            //  output,   width = 14,          .aruser
		.m0_arqos    (emif_bank3a_s0_axi4_arqos),                                             //  output,    width = 4,          .arqos
		.m0_arvalid  (emif_bank3a_s0_axi4_arvalid),                                           //  output,    width = 1,          .arvalid
		.m0_arready  (emif_bank3a_s0_axi4_arready),                                           //   input,    width = 1,          .arready
		.m0_rid      (emif_bank3a_s0_axi4_rid),                                               //   input,    width = 7,          .rid
		.m0_rdata    (emif_bank3a_s0_axi4_rdata),                                             //   input,  width = 256,          .rdata
		.m0_rresp    (emif_bank3a_s0_axi4_rresp),                                             //   input,    width = 2,          .rresp
		.m0_rlast    (emif_bank3a_s0_axi4_rlast),                                             //   input,    width = 1,          .rlast
		.m0_rvalid   (emif_bank3a_s0_axi4_rvalid),                                            //   input,    width = 1,          .rvalid
		.m0_rready   (emif_bank3a_s0_axi4_rready),                                            //  output,    width = 1,          .rready
		.m0_ruser    (emif_bank3a_s0_axi4_ruser),                                             //   input,   width = 64,          .ruser
		.s0_awid     (emif_bank3a_s0_axi4_agent_altera_axi_master_awid),                      //   input,    width = 1,        s0.awid
		.s0_awaddr   (emif_bank3a_s0_axi4_agent_altera_axi_master_awaddr),                    //   input,   width = 32,          .awaddr
		.s0_awlen    (emif_bank3a_s0_axi4_agent_altera_axi_master_awlen),                     //   input,    width = 8,          .awlen
		.s0_awsize   (emif_bank3a_s0_axi4_agent_altera_axi_master_awsize),                    //   input,    width = 3,          .awsize
		.s0_awburst  (emif_bank3a_s0_axi4_agent_altera_axi_master_awburst),                   //   input,    width = 2,          .awburst
		.s0_awlock   (emif_bank3a_s0_axi4_agent_altera_axi_master_awlock),                    //   input,    width = 1,          .awlock
		.s0_awcache  (emif_bank3a_s0_axi4_agent_altera_axi_master_awcache),                   //   input,    width = 4,          .awcache
		.s0_awprot   (emif_bank3a_s0_axi4_agent_altera_axi_master_awprot),                    //   input,    width = 3,          .awprot
		.s0_awuser   (emif_bank3a_s0_axi4_agent_altera_axi_master_awuser),                    //   input,   width = 14,          .awuser
		.s0_awqos    (emif_bank3a_s0_axi4_agent_altera_axi_master_awqos),                     //   input,    width = 4,          .awqos
		.s0_awregion (emif_bank3a_s0_axi4_agent_altera_axi_master_awregion),                  //   input,    width = 4,          .awregion
		.s0_awvalid  (emif_bank3a_s0_axi4_agent_altera_axi_master_awvalid),                   //   input,    width = 1,          .awvalid
		.s0_awready  (emif_bank3a_s0_axi4_agent_altera_axi_master_awready),                   //  output,    width = 1,          .awready
		.s0_wdata    (emif_bank3a_s0_axi4_agent_altera_axi_master_wdata),                     //   input,  width = 256,          .wdata
		.s0_wstrb    (emif_bank3a_s0_axi4_agent_altera_axi_master_wstrb),                     //   input,   width = 32,          .wstrb
		.s0_wlast    (emif_bank3a_s0_axi4_agent_altera_axi_master_wlast),                     //   input,    width = 1,          .wlast
		.s0_wvalid   (emif_bank3a_s0_axi4_agent_altera_axi_master_wvalid),                    //   input,    width = 1,          .wvalid
		.s0_wuser    (emif_bank3a_s0_axi4_agent_altera_axi_master_wuser),                     //   input,   width = 64,          .wuser
		.s0_wready   (emif_bank3a_s0_axi4_agent_altera_axi_master_wready),                    //  output,    width = 1,          .wready
		.s0_bid      (emif_bank3a_s0_axi4_agent_altera_axi_master_bid),                       //  output,    width = 1,          .bid
		.s0_bresp    (emif_bank3a_s0_axi4_agent_altera_axi_master_bresp),                     //  output,    width = 2,          .bresp
		.s0_buser    (emif_bank3a_s0_axi4_agent_altera_axi_master_buser),                     //  output,   width = 64,          .buser
		.s0_bvalid   (emif_bank3a_s0_axi4_agent_altera_axi_master_bvalid),                    //  output,    width = 1,          .bvalid
		.s0_bready   (emif_bank3a_s0_axi4_agent_altera_axi_master_bready),                    //   input,    width = 1,          .bready
		.s0_arid     (emif_bank3a_s0_axi4_agent_altera_axi_master_arid),                      //   input,    width = 1,          .arid
		.s0_araddr   (emif_bank3a_s0_axi4_agent_altera_axi_master_araddr),                    //   input,   width = 32,          .araddr
		.s0_arlen    (emif_bank3a_s0_axi4_agent_altera_axi_master_arlen),                     //   input,    width = 8,          .arlen
		.s0_arsize   (emif_bank3a_s0_axi4_agent_altera_axi_master_arsize),                    //   input,    width = 3,          .arsize
		.s0_arburst  (emif_bank3a_s0_axi4_agent_altera_axi_master_arburst),                   //   input,    width = 2,          .arburst
		.s0_arlock   (emif_bank3a_s0_axi4_agent_altera_axi_master_arlock),                    //   input,    width = 1,          .arlock
		.s0_arcache  (emif_bank3a_s0_axi4_agent_altera_axi_master_arcache),                   //   input,    width = 4,          .arcache
		.s0_arprot   (emif_bank3a_s0_axi4_agent_altera_axi_master_arprot),                    //   input,    width = 3,          .arprot
		.s0_aruser   (emif_bank3a_s0_axi4_agent_altera_axi_master_aruser),                    //   input,   width = 14,          .aruser
		.s0_arqos    (emif_bank3a_s0_axi4_agent_altera_axi_master_arqos),                     //   input,    width = 4,          .arqos
		.s0_arregion (emif_bank3a_s0_axi4_agent_altera_axi_master_arregion),                  //   input,    width = 4,          .arregion
		.s0_arvalid  (emif_bank3a_s0_axi4_agent_altera_axi_master_arvalid),                   //   input,    width = 1,          .arvalid
		.s0_arready  (emif_bank3a_s0_axi4_agent_altera_axi_master_arready),                   //  output,    width = 1,          .arready
		.s0_rid      (emif_bank3a_s0_axi4_agent_altera_axi_master_rid),                       //  output,    width = 1,          .rid
		.s0_rdata    (emif_bank3a_s0_axi4_agent_altera_axi_master_rdata),                     //  output,  width = 256,          .rdata
		.s0_rresp    (emif_bank3a_s0_axi4_agent_altera_axi_master_rresp),                     //  output,    width = 2,          .rresp
		.s0_rlast    (emif_bank3a_s0_axi4_agent_altera_axi_master_rlast),                     //  output,    width = 1,          .rlast
		.s0_rvalid   (emif_bank3a_s0_axi4_agent_altera_axi_master_rvalid),                    //  output,    width = 1,          .rvalid
		.s0_rready   (emif_bank3a_s0_axi4_agent_altera_axi_master_rready),                    //   input,    width = 1,          .rready
		.s0_ruser    (emif_bank3a_s0_axi4_agent_altera_axi_master_ruser),                     //  output,   width = 64,          .ruser
		.m0_awcache  (),                                                                      // (terminated),                         
		.m0_awregion (),                                                                      // (terminated),                         
		.m0_buser    (1'b0),                                                                  // (terminated),                         
		.m0_arcache  (),                                                                      // (terminated),                         
		.m0_arregion (),                                                                      // (terminated),                         
		.s0_wid      (1'b0),                                                                  // (terminated),                         
		.s0_ardomain (2'b00),                                                                 // (terminated),                         
		.s0_arsnoop  (4'b0000),                                                               // (terminated),                         
		.s0_arbar    (2'b00),                                                                 // (terminated),                         
		.s0_awdomain (2'b00),                                                                 // (terminated),                         
		.s0_awsnoop  (3'b000),                                                                // (terminated),                         
		.s0_awbar    (2'b00),                                                                 // (terminated),                         
		.s0_awunique (1'b0),                                                                  // (terminated),                         
		.m0_wid      (),                                                                      // (terminated),                         
		.m0_ardomain (),                                                                      // (terminated),                         
		.m0_arsnoop  (),                                                                      // (terminated),                         
		.m0_arbar    (),                                                                      // (terminated),                         
		.m0_awdomain (),                                                                      // (terminated),                         
		.m0_awsnoop  (),                                                                      // (terminated),                         
		.m0_awbar    (),                                                                      // (terminated),                         
		.m0_awunique ()                                                                       // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (209),
		.PKT_DOMAIN_H              (208),
		.PKT_DOMAIN_L              (207),
		.PKT_SNOOP_H               (206),
		.PKT_SNOOP_L               (203),
		.PKT_BARRIER_H             (202),
		.PKT_BARRIER_L             (201),
		.PKT_ORI_BURST_SIZE_H      (200),
		.PKT_ORI_BURST_SIZE_L      (198),
		.PKT_RESPONSE_STATUS_H     (197),
		.PKT_RESPONSE_STATUS_L     (196),
		.PKT_QOS_H                 (185),
		.PKT_QOS_L                 (182),
		.PKT_DATA_SIDEBAND_H       (180),
		.PKT_DATA_SIDEBAND_L       (117),
		.PKT_ADDR_SIDEBAND_H       (116),
		.PKT_ADDR_SIDEBAND_L       (103),
		.PKT_BURST_TYPE_H          (102),
		.PKT_BURST_TYPE_L          (101),
		.PKT_CACHE_H               (195),
		.PKT_CACHE_L               (192),
		.PKT_THREAD_ID_H           (188),
		.PKT_THREAD_ID_L           (188),
		.PKT_BURST_SIZE_H          (100),
		.PKT_BURST_SIZE_L          (98),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (181),
		.PKT_PROTECTION_H          (191),
		.PKT_PROTECTION_L          (189),
		.PKT_BURSTWRAP_H           (97),
		.PKT_BURSTWRAP_L           (88),
		.PKT_BYTE_CNT_H            (87),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (186),
		.PKT_SRC_ID_L              (186),
		.PKT_DEST_ID_H             (187),
		.PKT_DEST_ID_L             (187),
		.ST_DATA_W                 (210),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1023),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) bank3a_emif_master_master_agent (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (bank3a_emif_master_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (bank3a_emif_master_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (bank3a_emif_master_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (bank3a_emif_master_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (bank3a_emif_master_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (bank3a_emif_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (bank3a_emif_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (bank3a_emif_master_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (bank3a_emif_master_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (bank3a_emif_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (bank3a_emif_master_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (bank3a_emif_master_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (bank3a_emif_master_master_agent_cp_data),                                      //  output,  width = 210,          .data
		.cp_startofpacket      (bank3a_emif_master_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (bank3a_emif_master_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (bank3a_emif_master_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (bank3a_emif_master_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (bank3a_emif_master_master_limiter_rsp_src_data),                               //   input,  width = 210,          .data
		.rp_channel            (bank3a_emif_master_master_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (bank3a_emif_master_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (bank3a_emif_master_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (bank3a_emif_master_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                             // (terminated),                         
		.av_writeresponsevalid ()                                                                              // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_k4yv2wy #(
		.PKT_QOS_H                   (437),
		.PKT_QOS_L                   (434),
		.PKT_THREAD_ID_H             (440),
		.PKT_THREAD_ID_L             (440),
		.PKT_RESPONSE_STATUS_H       (449),
		.PKT_RESPONSE_STATUS_L       (448),
		.PKT_BEGIN_BURST             (433),
		.PKT_CACHE_H                 (447),
		.PKT_CACHE_L                 (444),
		.PKT_DATA_SIDEBAND_H         (432),
		.PKT_DATA_SIDEBAND_L         (369),
		.PKT_ADDR_SIDEBAND_H         (368),
		.PKT_ADDR_SIDEBAND_L         (355),
		.PKT_BURST_TYPE_H            (354),
		.PKT_BURST_TYPE_L            (353),
		.PKT_PROTECTION_H            (443),
		.PKT_PROTECTION_L            (441),
		.PKT_BURST_SIZE_H            (352),
		.PKT_BURST_SIZE_L            (350),
		.PKT_BURSTWRAP_H             (349),
		.PKT_BURSTWRAP_L             (340),
		.PKT_BYTE_CNT_H              (339),
		.PKT_BYTE_CNT_L              (326),
		.PKT_ADDR_H                  (319),
		.PKT_ADDR_L                  (288),
		.PKT_TRANS_EXCLUSIVE         (325),
		.PKT_TRANS_LOCK              (324),
		.PKT_TRANS_COMPRESSED_READ   (320),
		.PKT_TRANS_POSTED            (321),
		.PKT_TRANS_WRITE             (322),
		.PKT_TRANS_READ              (323),
		.PKT_DATA_H                  (255),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (287),
		.PKT_BYTEEN_L                (256),
		.PKT_SRC_ID_H                (438),
		.PKT_SRC_ID_L                (438),
		.PKT_DEST_ID_H               (439),
		.PKT_DEST_ID_L               (439),
		.PKT_ORI_BURST_SIZE_L        (450),
		.PKT_ORI_BURST_SIZE_H        (452),
		.PKT_DOMAIN_L                (459),
		.PKT_DOMAIN_H                (460),
		.PKT_SNOOP_L                 (455),
		.PKT_SNOOP_H                 (458),
		.PKT_BARRIER_L               (453),
		.PKT_BARRIER_H               (454),
		.PKT_WUNIQUE                 (461),
		.ADDR_USER_WIDTH             (14),
		.DATA_USER_WIDTH             (64),
		.ST_DATA_W                   (462),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (256),
		.WDATA_WIDTH                 (256),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) emif_bank3a_s0_axi4_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                        //   input,    width = 1,        clock_sink.clk
		.aresetn                (~emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_valid),                    //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_ready),                    //  output,    width = 1,                  .ready
		.read_cp_data           (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_data),                     //   input,  width = 462,                  .data
		.read_cp_channel        (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_channel),                  //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_startofpacket),            //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_endofpacket),              //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_ready),                    //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_valid),                    //   input,    width = 1,                  .valid
		.write_cp_data          (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_data),                     //   input,  width = 462,                  .data
		.write_cp_channel       (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_channel),                  //   input,    width = 2,                  .channel
		.write_cp_startofpacket (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_startofpacket),            //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_endofpacket),              //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (emif_bank3a_s0_axi4_agent_read_rp_ready),                               //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (emif_bank3a_s0_axi4_agent_read_rp_valid),                               //  output,    width = 1,                  .valid
		.read_rp_data           (emif_bank3a_s0_axi4_agent_read_rp_data),                                //  output,  width = 462,                  .data
		.read_rp_startofpacket  (emif_bank3a_s0_axi4_agent_read_rp_startofpacket),                       //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (emif_bank3a_s0_axi4_agent_read_rp_endofpacket),                         //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (emif_bank3a_s0_axi4_agent_write_rp_ready),                              //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (emif_bank3a_s0_axi4_agent_write_rp_valid),                              //  output,    width = 1,                  .valid
		.write_rp_data          (emif_bank3a_s0_axi4_agent_write_rp_data),                               //  output,  width = 462,                  .data
		.write_rp_startofpacket (emif_bank3a_s0_axi4_agent_write_rp_startofpacket),                      //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (emif_bank3a_s0_axi4_agent_write_rp_endofpacket),                        //  output,    width = 1,                  .endofpacket
		.awid                   (emif_bank3a_s0_axi4_agent_altera_axi_master_awid),                      //  output,    width = 1, altera_axi_master.awid
		.awaddr                 (emif_bank3a_s0_axi4_agent_altera_axi_master_awaddr),                    //  output,   width = 32,                  .awaddr
		.awlen                  (emif_bank3a_s0_axi4_agent_altera_axi_master_awlen),                     //  output,    width = 8,                  .awlen
		.awsize                 (emif_bank3a_s0_axi4_agent_altera_axi_master_awsize),                    //  output,    width = 3,                  .awsize
		.awburst                (emif_bank3a_s0_axi4_agent_altera_axi_master_awburst),                   //  output,    width = 2,                  .awburst
		.awlock                 (emif_bank3a_s0_axi4_agent_altera_axi_master_awlock),                    //  output,    width = 1,                  .awlock
		.awcache                (emif_bank3a_s0_axi4_agent_altera_axi_master_awcache),                   //  output,    width = 4,                  .awcache
		.awprot                 (emif_bank3a_s0_axi4_agent_altera_axi_master_awprot),                    //  output,    width = 3,                  .awprot
		.awuser                 (emif_bank3a_s0_axi4_agent_altera_axi_master_awuser),                    //  output,   width = 14,                  .awuser
		.awvalid                (emif_bank3a_s0_axi4_agent_altera_axi_master_awvalid),                   //  output,    width = 1,                  .awvalid
		.awready                (emif_bank3a_s0_axi4_agent_altera_axi_master_awready),                   //   input,    width = 1,                  .awready
		.wdata                  (emif_bank3a_s0_axi4_agent_altera_axi_master_wdata),                     //  output,  width = 256,                  .wdata
		.wstrb                  (emif_bank3a_s0_axi4_agent_altera_axi_master_wstrb),                     //  output,   width = 32,                  .wstrb
		.wlast                  (emif_bank3a_s0_axi4_agent_altera_axi_master_wlast),                     //  output,    width = 1,                  .wlast
		.wvalid                 (emif_bank3a_s0_axi4_agent_altera_axi_master_wvalid),                    //  output,    width = 1,                  .wvalid
		.wready                 (emif_bank3a_s0_axi4_agent_altera_axi_master_wready),                    //   input,    width = 1,                  .wready
		.bid                    (emif_bank3a_s0_axi4_agent_altera_axi_master_bid),                       //   input,    width = 1,                  .bid
		.bresp                  (emif_bank3a_s0_axi4_agent_altera_axi_master_bresp),                     //   input,    width = 2,                  .bresp
		.bvalid                 (emif_bank3a_s0_axi4_agent_altera_axi_master_bvalid),                    //   input,    width = 1,                  .bvalid
		.bready                 (emif_bank3a_s0_axi4_agent_altera_axi_master_bready),                    //  output,    width = 1,                  .bready
		.arid                   (emif_bank3a_s0_axi4_agent_altera_axi_master_arid),                      //  output,    width = 1,                  .arid
		.araddr                 (emif_bank3a_s0_axi4_agent_altera_axi_master_araddr),                    //  output,   width = 32,                  .araddr
		.arlen                  (emif_bank3a_s0_axi4_agent_altera_axi_master_arlen),                     //  output,    width = 8,                  .arlen
		.arsize                 (emif_bank3a_s0_axi4_agent_altera_axi_master_arsize),                    //  output,    width = 3,                  .arsize
		.arburst                (emif_bank3a_s0_axi4_agent_altera_axi_master_arburst),                   //  output,    width = 2,                  .arburst
		.arlock                 (emif_bank3a_s0_axi4_agent_altera_axi_master_arlock),                    //  output,    width = 1,                  .arlock
		.arcache                (emif_bank3a_s0_axi4_agent_altera_axi_master_arcache),                   //  output,    width = 4,                  .arcache
		.arprot                 (emif_bank3a_s0_axi4_agent_altera_axi_master_arprot),                    //  output,    width = 3,                  .arprot
		.aruser                 (emif_bank3a_s0_axi4_agent_altera_axi_master_aruser),                    //  output,   width = 14,                  .aruser
		.arvalid                (emif_bank3a_s0_axi4_agent_altera_axi_master_arvalid),                   //  output,    width = 1,                  .arvalid
		.arready                (emif_bank3a_s0_axi4_agent_altera_axi_master_arready),                   //   input,    width = 1,                  .arready
		.rid                    (emif_bank3a_s0_axi4_agent_altera_axi_master_rid),                       //   input,    width = 1,                  .rid
		.rdata                  (emif_bank3a_s0_axi4_agent_altera_axi_master_rdata),                     //   input,  width = 256,                  .rdata
		.rresp                  (emif_bank3a_s0_axi4_agent_altera_axi_master_rresp),                     //   input,    width = 2,                  .rresp
		.rlast                  (emif_bank3a_s0_axi4_agent_altera_axi_master_rlast),                     //   input,    width = 1,                  .rlast
		.rvalid                 (emif_bank3a_s0_axi4_agent_altera_axi_master_rvalid),                    //   input,    width = 1,                  .rvalid
		.rready                 (emif_bank3a_s0_axi4_agent_altera_axi_master_rready),                    //  output,    width = 1,                  .rready
		.wuser                  (emif_bank3a_s0_axi4_agent_altera_axi_master_wuser),                     //  output,   width = 64,                  .wuser
		.awqos                  (emif_bank3a_s0_axi4_agent_altera_axi_master_awqos),                     //  output,    width = 4,                  .awqos
		.awregion               (emif_bank3a_s0_axi4_agent_altera_axi_master_awregion),                  //  output,    width = 4,                  .awregion
		.ruser                  (emif_bank3a_s0_axi4_agent_altera_axi_master_ruser),                     //   input,   width = 64,                  .ruser
		.buser                  (emif_bank3a_s0_axi4_agent_altera_axi_master_buser),                     //   input,   width = 64,                  .buser
		.arqos                  (emif_bank3a_s0_axi4_agent_altera_axi_master_arqos),                     //  output,    width = 4,                  .arqos
		.arregion               (emif_bank3a_s0_axi4_agent_altera_axi_master_arregion),                  //  output,    width = 4,                  .arregion
		.wid                    (),                                                                      // (terminated),                                 
		.arsnoop                (),                                                                      // (terminated),                                 
		.ardomain               (),                                                                      // (terminated),                                 
		.arbar                  (),                                                                      // (terminated),                                 
		.awsnoop                (),                                                                      // (terminated),                                 
		.awdomain               (),                                                                      // (terminated),                                 
		.awbar                  (),                                                                      // (terminated),                                 
		.awunique               ()                                                                       // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_router_1921_i5d5uoq router (
		.sink_ready         (bank3a_emif_master_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (bank3a_emif_master_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (bank3a_emif_master_master_agent_cp_data),                                //   input,  width = 210,          .data
		.sink_startofpacket (bank3a_emif_master_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bank3a_emif_master_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                        //  output,  width = 210,          .data
		.src_channel        (router_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_kz2ozgi router_001 (
		.sink_ready         (emif_bank3a_s0_axi4_agent_write_rp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (emif_bank3a_s0_axi4_agent_write_rp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (emif_bank3a_s0_axi4_agent_write_rp_data),                              //   input,  width = 462,          .data
		.sink_startofpacket (emif_bank3a_s0_axi4_agent_write_rp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_bank3a_s0_axi4_agent_write_rp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                  //  output,  width = 462,          .data
		.src_channel        (router_001_src_channel),                                               //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_kz2ozgi router_002 (
		.sink_ready         (emif_bank3a_s0_axi4_agent_read_rp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (emif_bank3a_s0_axi4_agent_read_rp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (emif_bank3a_s0_axi4_agent_read_rp_data),                               //   input,  width = 462,          .data
		.sink_startofpacket (emif_bank3a_s0_axi4_agent_read_rp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_bank3a_s0_axi4_agent_read_rp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                  //  output,  width = 462,          .data
		.src_channel        (router_002_src_channel),                                               //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (187),
		.PKT_DEST_ID_L                        (187),
		.PKT_SRC_ID_H                         (186),
		.PKT_SRC_ID_L                         (186),
		.PKT_BYTE_CNT_H                       (87),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.MAX_OUTSTANDING_RESPONSES            (2),
		.PIPELINED                            (0),
		.ST_DATA_W                            (210),
		.ST_CHANNEL_W                         (2),
		.VALID_WIDTH                          (2),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0)
	) bank3a_emif_master_master_limiter (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                  (bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                       //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                       //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                        //   input,  width = 210,          .data
		.cmd_sink_channel       (router_src_channel),                                                     //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (bank3a_emif_master_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (bank3a_emif_master_master_limiter_cmd_src_data),                         //  output,  width = 210,          .data
		.cmd_src_channel        (bank3a_emif_master_master_limiter_cmd_src_channel),                      //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (bank3a_emif_master_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (bank3a_emif_master_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                      //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                      //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                    //   input,    width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                       //   input,  width = 210,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (bank3a_emif_master_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (bank3a_emif_master_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (bank3a_emif_master_master_limiter_rsp_src_data),                         //  output,  width = 210,          .data
		.rsp_src_channel        (bank3a_emif_master_master_limiter_rsp_src_channel),                      //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (bank3a_emif_master_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (bank3a_emif_master_master_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (bank3a_emif_master_master_limiter_cmd_valid_data)                        //  output,    width = 2, cmd_valid.data
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_pliadaa cmd_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                         //   input,    width = 1,        clk.clk
		.reset              (bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (bank3a_emif_master_master_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (bank3a_emif_master_master_limiter_cmd_src_channel),                      //   input,    width = 2,           .channel
		.sink_data          (bank3a_emif_master_master_limiter_cmd_src_data),                         //   input,  width = 210,           .data
		.sink_startofpacket (bank3a_emif_master_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (bank3a_emif_master_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (bank3a_emif_master_master_limiter_cmd_valid_data),                       //   input,    width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                   //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                   //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                                    //  output,  width = 210,           .data
		.src0_channel       (cmd_demux_src0_channel),                                                 //  output,    width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                           //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                             //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                   //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                   //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                                    //  output,  width = 210,           .data
		.src1_channel       (cmd_demux_src1_channel),                                                 //  output,    width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                           //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                              //  output,    width = 1,           .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_ei45efq cmd_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset               (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                     //  output,  width = 210,          .data
		.src_channel         (cmd_mux_src_channel),                                                  //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                               //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                  //   input,  width = 210,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_ei45efq cmd_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset               (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                 //  output,  width = 210,          .data
		.src_channel         (cmd_mux_001_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                               //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                                                  //   input,  width = 210,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_tw22kyq rsp_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_channel),                 //   input,    width = 2,          .channel
		.sink_data          (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_data),                    //   input,  width = 210,          .data
		.sink_startofpacket (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                  //  output,  width = 210,          .data
		.src0_channel       (rsp_demux_src0_channel),                                               //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_tw22kyq rsp_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_ready),                   //  output,    width = 1,      sink.ready
		.sink_channel       (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_channel),                 //   input,    width = 2,          .channel
		.sink_data          (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_data),                    //   input,  width = 210,          .data
		.sink_startofpacket (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_endofpacket),             //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_valid),                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                             //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                             //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                              //  output,  width = 210,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                           //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_jg7u4mq rsp_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (bank3a_emif_master_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                       //  output,  width = 210,          .data
		.src_channel         (rsp_mux_src_channel),                                                    //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                 //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                    //   input,  width = 210,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                               //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                             //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                //   input,  width = 210,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                          //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_ce3jssy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (87),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (97),
		.IN_PKT_BURSTWRAP_L            (88),
		.IN_PKT_BURST_SIZE_H           (100),
		.IN_PKT_BURST_SIZE_L           (98),
		.IN_PKT_RESPONSE_STATUS_H      (197),
		.IN_PKT_RESPONSE_STATUS_L      (196),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (102),
		.IN_PKT_BURST_TYPE_L           (101),
		.IN_PKT_ORI_BURST_SIZE_L       (198),
		.IN_PKT_ORI_BURST_SIZE_H       (200),
		.IN_ST_DATA_W                  (210),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (352),
		.OUT_PKT_BURST_SIZE_L          (350),
		.OUT_PKT_RESPONSE_STATUS_H     (449),
		.OUT_PKT_RESPONSE_STATUS_L     (448),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (354),
		.OUT_PKT_BURST_TYPE_L          (353),
		.OUT_PKT_ORI_BURST_SIZE_L      (450),
		.OUT_PKT_ORI_BURST_SIZE_H      (452),
		.OUT_ST_DATA_W                 (462),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) emif_bank3a_s0_axi4_wr_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                  //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                     //   input,  width = 210,          .data
		.out_endofpacket      (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_data),                    //  output,  width = 462,          .data
		.out_channel          (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_channel),                 //  output,    width = 2,          .channel
		.out_valid            (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (emif_bank3a_s0_axi4_wr_cmd_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_ce3jssy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (87),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (97),
		.IN_PKT_BURSTWRAP_L            (88),
		.IN_PKT_BURST_SIZE_H           (100),
		.IN_PKT_BURST_SIZE_L           (98),
		.IN_PKT_RESPONSE_STATUS_H      (197),
		.IN_PKT_RESPONSE_STATUS_L      (196),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (102),
		.IN_PKT_BURST_TYPE_L           (101),
		.IN_PKT_ORI_BURST_SIZE_L       (198),
		.IN_PKT_ORI_BURST_SIZE_H       (200),
		.IN_ST_DATA_W                  (210),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (352),
		.OUT_PKT_BURST_SIZE_L          (350),
		.OUT_PKT_RESPONSE_STATUS_H     (449),
		.OUT_PKT_RESPONSE_STATUS_L     (448),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (354),
		.OUT_PKT_BURST_TYPE_L          (353),
		.OUT_PKT_ORI_BURST_SIZE_L      (450),
		.OUT_PKT_ORI_BURST_SIZE_H      (452),
		.OUT_ST_DATA_W                 (462),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) emif_bank3a_s0_axi4_rd_cmd_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                              //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                 //   input,  width = 210,          .data
		.out_endofpacket      (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_data),                    //  output,  width = 462,          .data
		.out_channel          (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_channel),                 //  output,    width = 2,          .channel
		.out_valid            (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (emif_bank3a_s0_axi4_rd_cmd_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_hyziola #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (349),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (352),
		.IN_PKT_BURST_SIZE_L           (350),
		.IN_PKT_RESPONSE_STATUS_H      (449),
		.IN_PKT_RESPONSE_STATUS_L      (448),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (354),
		.IN_PKT_BURST_TYPE_L           (353),
		.IN_PKT_ORI_BURST_SIZE_L       (450),
		.IN_PKT_ORI_BURST_SIZE_H       (452),
		.IN_ST_DATA_W                  (462),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (87),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (100),
		.OUT_PKT_BURST_SIZE_L          (98),
		.OUT_PKT_RESPONSE_STATUS_H     (197),
		.OUT_PKT_RESPONSE_STATUS_L     (196),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (102),
		.OUT_PKT_BURST_TYPE_L          (101),
		.OUT_PKT_ORI_BURST_SIZE_L      (198),
		.OUT_PKT_ORI_BURST_SIZE_H      (200),
		.OUT_ST_DATA_W                 (210),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) emif_bank3a_s0_axi4_wr_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                               //   input,    width = 2,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                                  //   input,  width = 462,          .data
		.out_endofpacket      (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_data),                    //  output,  width = 210,          .data
		.out_channel          (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_channel),                 //  output,    width = 2,          .channel
		.out_valid            (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (emif_bank3a_s0_axi4_wr_rsp_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated),                         
	);

	ghrd_hps_system_altera_merlin_width_adapter_1920_hyziola #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (349),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (352),
		.IN_PKT_BURST_SIZE_L           (350),
		.IN_PKT_RESPONSE_STATUS_H      (449),
		.IN_PKT_RESPONSE_STATUS_L      (448),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (354),
		.IN_PKT_BURST_TYPE_L           (353),
		.IN_PKT_ORI_BURST_SIZE_L       (450),
		.IN_PKT_ORI_BURST_SIZE_H       (452),
		.IN_ST_DATA_W                  (462),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (87),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (100),
		.OUT_PKT_BURST_SIZE_L          (98),
		.OUT_PKT_RESPONSE_STATUS_H     (197),
		.OUT_PKT_RESPONSE_STATUS_L     (196),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (102),
		.OUT_PKT_BURST_TYPE_L          (101),
		.OUT_PKT_ORI_BURST_SIZE_L      (198),
		.OUT_PKT_ORI_BURST_SIZE_H      (200),
		.OUT_ST_DATA_W                 (210),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) emif_bank3a_s0_axi4_rd_rsp_width_adapter (
		.clk                  (agilex_5_soc_h2f_user1_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (emif_bank3a_s0_axi4_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                               //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                  //   input,  width = 462,          .data
		.out_endofpacket      (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_endofpacket),             //  output,    width = 1,       src.endofpacket
		.out_data             (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_data),                    //  output,  width = 210,          .data
		.out_channel          (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_channel),                 //  output,    width = 2,          .channel
		.out_valid            (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_valid),                   //  output,    width = 1,          .valid
		.out_ready            (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket    (emif_bank3a_s0_axi4_rd_rsp_width_adapter_src_startofpacket),           //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated),                         
	);

endmodule
