// ghrd_hps_system_altera_mm_interconnect_1920_fivhe3y.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.2.1 194

`timescale 1 ps / 1 ps
module ghrd_hps_system_altera_mm_interconnect_1920_fivhe3y (
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_awid,                                             //                                            agilex_5_soc_lwhps2fpga.awid
		input  wire [28:0] agilex_5_soc_lwhps2fpga_awaddr,                                           //                                                                   .awaddr
		input  wire [7:0]  agilex_5_soc_lwhps2fpga_awlen,                                            //                                                                   .awlen
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_awsize,                                           //                                                                   .awsize
		input  wire [1:0]  agilex_5_soc_lwhps2fpga_awburst,                                          //                                                                   .awburst
		input  wire [0:0]  agilex_5_soc_lwhps2fpga_awlock,                                           //                                                                   .awlock
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_awcache,                                          //                                                                   .awcache
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_awprot,                                           //                                                                   .awprot
		input  wire        agilex_5_soc_lwhps2fpga_awvalid,                                          //                                                                   .awvalid
		output wire        agilex_5_soc_lwhps2fpga_awready,                                          //                                                                   .awready
		input  wire [31:0] agilex_5_soc_lwhps2fpga_wdata,                                            //                                                                   .wdata
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_wstrb,                                            //                                                                   .wstrb
		input  wire        agilex_5_soc_lwhps2fpga_wlast,                                            //                                                                   .wlast
		input  wire        agilex_5_soc_lwhps2fpga_wvalid,                                           //                                                                   .wvalid
		output wire        agilex_5_soc_lwhps2fpga_wready,                                           //                                                                   .wready
		output wire [3:0]  agilex_5_soc_lwhps2fpga_bid,                                              //                                                                   .bid
		output wire [1:0]  agilex_5_soc_lwhps2fpga_bresp,                                            //                                                                   .bresp
		output wire        agilex_5_soc_lwhps2fpga_bvalid,                                           //                                                                   .bvalid
		input  wire        agilex_5_soc_lwhps2fpga_bready,                                           //                                                                   .bready
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_arid,                                             //                                                                   .arid
		input  wire [28:0] agilex_5_soc_lwhps2fpga_araddr,                                           //                                                                   .araddr
		input  wire [7:0]  agilex_5_soc_lwhps2fpga_arlen,                                            //                                                                   .arlen
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_arsize,                                           //                                                                   .arsize
		input  wire [1:0]  agilex_5_soc_lwhps2fpga_arburst,                                          //                                                                   .arburst
		input  wire [0:0]  agilex_5_soc_lwhps2fpga_arlock,                                           //                                                                   .arlock
		input  wire [3:0]  agilex_5_soc_lwhps2fpga_arcache,                                          //                                                                   .arcache
		input  wire [2:0]  agilex_5_soc_lwhps2fpga_arprot,                                           //                                                                   .arprot
		input  wire        agilex_5_soc_lwhps2fpga_arvalid,                                          //                                                                   .arvalid
		output wire        agilex_5_soc_lwhps2fpga_arready,                                          //                                                                   .arready
		output wire [3:0]  agilex_5_soc_lwhps2fpga_rid,                                              //                                                                   .rid
		output wire [31:0] agilex_5_soc_lwhps2fpga_rdata,                                            //                                                                   .rdata
		output wire [1:0]  agilex_5_soc_lwhps2fpga_rresp,                                            //                                                                   .rresp
		output wire        agilex_5_soc_lwhps2fpga_rlast,                                            //                                                                   .rlast
		output wire        agilex_5_soc_lwhps2fpga_rvalid,                                           //                                                                   .rvalid
		input  wire        agilex_5_soc_lwhps2fpga_rready,                                           //                                                                   .rready
		output wire [23:0] video_sys_0_mm_video_bridge_s0_address,                                   //                                     video_sys_0_mm_video_bridge_s0.address
		output wire        video_sys_0_mm_video_bridge_s0_write,                                     //                                                                   .write
		output wire        video_sys_0_mm_video_bridge_s0_read,                                      //                                                                   .read
		input  wire [31:0] video_sys_0_mm_video_bridge_s0_readdata,                                  //                                                                   .readdata
		output wire [31:0] video_sys_0_mm_video_bridge_s0_writedata,                                 //                                                                   .writedata
		output wire [0:0]  video_sys_0_mm_video_bridge_s0_burstcount,                                //                                                                   .burstcount
		output wire [3:0]  video_sys_0_mm_video_bridge_s0_byteenable,                                //                                                                   .byteenable
		input  wire        video_sys_0_mm_video_bridge_s0_readdatavalid,                             //                                                                   .readdatavalid
		input  wire        video_sys_0_mm_video_bridge_s0_waitrequest,                               //                                                                   .waitrequest
		output wire        video_sys_0_mm_video_bridge_s0_debugaccess,                               //                                                                   .debugaccess
		output wire [26:0] emif_bank3a_s0_axil_awaddr,                                               //                                                emif_bank3a_s0_axil.awaddr
		output wire [2:0]  emif_bank3a_s0_axil_awprot,                                               //                                                                   .awprot
		output wire        emif_bank3a_s0_axil_awvalid,                                              //                                                                   .awvalid
		input  wire        emif_bank3a_s0_axil_awready,                                              //                                                                   .awready
		output wire [31:0] emif_bank3a_s0_axil_wdata,                                                //                                                                   .wdata
		output wire [3:0]  emif_bank3a_s0_axil_wstrb,                                                //                                                                   .wstrb
		output wire        emif_bank3a_s0_axil_wvalid,                                               //                                                                   .wvalid
		input  wire        emif_bank3a_s0_axil_wready,                                               //                                                                   .wready
		input  wire [1:0]  emif_bank3a_s0_axil_bresp,                                                //                                                                   .bresp
		input  wire        emif_bank3a_s0_axil_bvalid,                                               //                                                                   .bvalid
		output wire        emif_bank3a_s0_axil_bready,                                               //                                                                   .bready
		output wire [26:0] emif_bank3a_s0_axil_araddr,                                               //                                                                   .araddr
		output wire [2:0]  emif_bank3a_s0_axil_arprot,                                               //                                                                   .arprot
		output wire        emif_bank3a_s0_axil_arvalid,                                              //                                                                   .arvalid
		input  wire        emif_bank3a_s0_axil_arready,                                              //                                                                   .arready
		input  wire [31:0] emif_bank3a_s0_axil_rdata,                                                //                                                                   .rdata
		input  wire [1:0]  emif_bank3a_s0_axil_rresp,                                                //                                                                   .rresp
		input  wire        emif_bank3a_s0_axil_rvalid,                                               //                                                                   .rvalid
		output wire        emif_bank3a_s0_axil_rready,                                               //                                                                   .rready
		input  wire        video_sys_0_reset_reset_bridge_in_reset_reset,                            //                            video_sys_0_reset_reset_bridge_in_reset.reset
		input  wire        agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset, // agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire        emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset,         //         emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire        agilex_5_soc_h2f_user1_clk_clk                                            //                                         agilex_5_soc_h2f_user1_clk.clk
	);

	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_ruser;                        // agilex_5_soc_lwhps2fpga_agent:ruser -> agilex_5_soc_lwhps2fpga_translator:m0_ruser
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_wuser;                        // agilex_5_soc_lwhps2fpga_translator:m0_wuser -> agilex_5_soc_lwhps2fpga_agent:wuser
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_awburst;                      // agilex_5_soc_lwhps2fpga_translator:m0_awburst -> agilex_5_soc_lwhps2fpga_agent:awburst
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arregion;                     // agilex_5_soc_lwhps2fpga_translator:m0_arregion -> agilex_5_soc_lwhps2fpga_agent:arregion
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_awuser;                       // agilex_5_soc_lwhps2fpga_translator:m0_awuser -> agilex_5_soc_lwhps2fpga_agent:awuser
	wire    [7:0] agilex_5_soc_lwhps2fpga_translator_m0_arlen;                        // agilex_5_soc_lwhps2fpga_translator:m0_arlen -> agilex_5_soc_lwhps2fpga_agent:arlen
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arqos;                        // agilex_5_soc_lwhps2fpga_translator:m0_arqos -> agilex_5_soc_lwhps2fpga_agent:arqos
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_wstrb;                        // agilex_5_soc_lwhps2fpga_translator:m0_wstrb -> agilex_5_soc_lwhps2fpga_agent:wstrb
	wire          agilex_5_soc_lwhps2fpga_translator_m0_wready;                       // agilex_5_soc_lwhps2fpga_agent:wready -> agilex_5_soc_lwhps2fpga_translator:m0_wready
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_rid;                          // agilex_5_soc_lwhps2fpga_agent:rid -> agilex_5_soc_lwhps2fpga_translator:m0_rid
	wire          agilex_5_soc_lwhps2fpga_translator_m0_rready;                       // agilex_5_soc_lwhps2fpga_translator:m0_rready -> agilex_5_soc_lwhps2fpga_agent:rready
	wire    [7:0] agilex_5_soc_lwhps2fpga_translator_m0_awlen;                        // agilex_5_soc_lwhps2fpga_translator:m0_awlen -> agilex_5_soc_lwhps2fpga_agent:awlen
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awqos;                        // agilex_5_soc_lwhps2fpga_translator:m0_awqos -> agilex_5_soc_lwhps2fpga_agent:awqos
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arcache;                      // agilex_5_soc_lwhps2fpga_translator:m0_arcache -> agilex_5_soc_lwhps2fpga_agent:arcache
	wire          agilex_5_soc_lwhps2fpga_translator_m0_wvalid;                       // agilex_5_soc_lwhps2fpga_translator:m0_wvalid -> agilex_5_soc_lwhps2fpga_agent:wvalid
	wire   [28:0] agilex_5_soc_lwhps2fpga_translator_m0_araddr;                       // agilex_5_soc_lwhps2fpga_translator:m0_araddr -> agilex_5_soc_lwhps2fpga_agent:araddr
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_arprot;                       // agilex_5_soc_lwhps2fpga_translator:m0_arprot -> agilex_5_soc_lwhps2fpga_agent:arprot
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_awprot;                       // agilex_5_soc_lwhps2fpga_translator:m0_awprot -> agilex_5_soc_lwhps2fpga_agent:awprot
	wire   [31:0] agilex_5_soc_lwhps2fpga_translator_m0_wdata;                        // agilex_5_soc_lwhps2fpga_translator:m0_wdata -> agilex_5_soc_lwhps2fpga_agent:wdata
	wire          agilex_5_soc_lwhps2fpga_translator_m0_arvalid;                      // agilex_5_soc_lwhps2fpga_translator:m0_arvalid -> agilex_5_soc_lwhps2fpga_agent:arvalid
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awcache;                      // agilex_5_soc_lwhps2fpga_translator:m0_awcache -> agilex_5_soc_lwhps2fpga_agent:awcache
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_arid;                         // agilex_5_soc_lwhps2fpga_translator:m0_arid -> agilex_5_soc_lwhps2fpga_agent:arid
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_arlock;                       // agilex_5_soc_lwhps2fpga_translator:m0_arlock -> agilex_5_soc_lwhps2fpga_agent:arlock
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_awlock;                       // agilex_5_soc_lwhps2fpga_translator:m0_awlock -> agilex_5_soc_lwhps2fpga_agent:awlock
	wire   [28:0] agilex_5_soc_lwhps2fpga_translator_m0_awaddr;                       // agilex_5_soc_lwhps2fpga_translator:m0_awaddr -> agilex_5_soc_lwhps2fpga_agent:awaddr
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_bresp;                        // agilex_5_soc_lwhps2fpga_agent:bresp -> agilex_5_soc_lwhps2fpga_translator:m0_bresp
	wire          agilex_5_soc_lwhps2fpga_translator_m0_arready;                      // agilex_5_soc_lwhps2fpga_agent:arready -> agilex_5_soc_lwhps2fpga_translator:m0_arready
	wire   [31:0] agilex_5_soc_lwhps2fpga_translator_m0_rdata;                        // agilex_5_soc_lwhps2fpga_agent:rdata -> agilex_5_soc_lwhps2fpga_translator:m0_rdata
	wire          agilex_5_soc_lwhps2fpga_translator_m0_awready;                      // agilex_5_soc_lwhps2fpga_agent:awready -> agilex_5_soc_lwhps2fpga_translator:m0_awready
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_arburst;                      // agilex_5_soc_lwhps2fpga_translator:m0_arburst -> agilex_5_soc_lwhps2fpga_agent:arburst
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_arsize;                       // agilex_5_soc_lwhps2fpga_translator:m0_arsize -> agilex_5_soc_lwhps2fpga_agent:arsize
	wire          agilex_5_soc_lwhps2fpga_translator_m0_bready;                       // agilex_5_soc_lwhps2fpga_translator:m0_bready -> agilex_5_soc_lwhps2fpga_agent:bready
	wire          agilex_5_soc_lwhps2fpga_translator_m0_rlast;                        // agilex_5_soc_lwhps2fpga_agent:rlast -> agilex_5_soc_lwhps2fpga_translator:m0_rlast
	wire          agilex_5_soc_lwhps2fpga_translator_m0_wlast;                        // agilex_5_soc_lwhps2fpga_translator:m0_wlast -> agilex_5_soc_lwhps2fpga_agent:wlast
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awregion;                     // agilex_5_soc_lwhps2fpga_translator:m0_awregion -> agilex_5_soc_lwhps2fpga_agent:awregion
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_buser;                        // agilex_5_soc_lwhps2fpga_agent:buser -> agilex_5_soc_lwhps2fpga_translator:m0_buser
	wire    [1:0] agilex_5_soc_lwhps2fpga_translator_m0_rresp;                        // agilex_5_soc_lwhps2fpga_agent:rresp -> agilex_5_soc_lwhps2fpga_translator:m0_rresp
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_awid;                         // agilex_5_soc_lwhps2fpga_translator:m0_awid -> agilex_5_soc_lwhps2fpga_agent:awid
	wire    [3:0] agilex_5_soc_lwhps2fpga_translator_m0_bid;                          // agilex_5_soc_lwhps2fpga_agent:bid -> agilex_5_soc_lwhps2fpga_translator:m0_bid
	wire          agilex_5_soc_lwhps2fpga_translator_m0_bvalid;                       // agilex_5_soc_lwhps2fpga_agent:bvalid -> agilex_5_soc_lwhps2fpga_translator:m0_bvalid
	wire    [2:0] agilex_5_soc_lwhps2fpga_translator_m0_awsize;                       // agilex_5_soc_lwhps2fpga_translator:m0_awsize -> agilex_5_soc_lwhps2fpga_agent:awsize
	wire          agilex_5_soc_lwhps2fpga_translator_m0_awvalid;                      // agilex_5_soc_lwhps2fpga_translator:m0_awvalid -> agilex_5_soc_lwhps2fpga_agent:awvalid
	wire    [0:0] agilex_5_soc_lwhps2fpga_translator_m0_aruser;                       // agilex_5_soc_lwhps2fpga_translator:m0_aruser -> agilex_5_soc_lwhps2fpga_agent:aruser
	wire          agilex_5_soc_lwhps2fpga_translator_m0_rvalid;                       // agilex_5_soc_lwhps2fpga_agent:rvalid -> agilex_5_soc_lwhps2fpga_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> agilex_5_soc_lwhps2fpga_agent:write_rp_valid
	wire  [127:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> agilex_5_soc_lwhps2fpga_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                  // agilex_5_soc_lwhps2fpga_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> agilex_5_soc_lwhps2fpga_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> agilex_5_soc_lwhps2fpga_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> agilex_5_soc_lwhps2fpga_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                              // rsp_mux_001:src_valid -> agilex_5_soc_lwhps2fpga_agent:read_rp_valid
	wire  [127:0] rsp_mux_001_src_data;                                               // rsp_mux_001:src_data -> agilex_5_soc_lwhps2fpga_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                              // agilex_5_soc_lwhps2fpga_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                            // rsp_mux_001:src_channel -> agilex_5_soc_lwhps2fpga_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                      // rsp_mux_001:src_startofpacket -> agilex_5_soc_lwhps2fpga_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                        // rsp_mux_001:src_endofpacket -> agilex_5_soc_lwhps2fpga_agent:read_rp_endofpacket
	wire   [31:0] video_sys_0_mm_video_bridge_s0_agent_m0_readdata;                   // video_sys_0_mm_video_bridge_s0_translator:uav_readdata -> video_sys_0_mm_video_bridge_s0_agent:m0_readdata
	wire          video_sys_0_mm_video_bridge_s0_agent_m0_waitrequest;                // video_sys_0_mm_video_bridge_s0_translator:uav_waitrequest -> video_sys_0_mm_video_bridge_s0_agent:m0_waitrequest
	wire          video_sys_0_mm_video_bridge_s0_agent_m0_debugaccess;                // video_sys_0_mm_video_bridge_s0_agent:m0_debugaccess -> video_sys_0_mm_video_bridge_s0_translator:uav_debugaccess
	wire   [28:0] video_sys_0_mm_video_bridge_s0_agent_m0_address;                    // video_sys_0_mm_video_bridge_s0_agent:m0_address -> video_sys_0_mm_video_bridge_s0_translator:uav_address
	wire    [3:0] video_sys_0_mm_video_bridge_s0_agent_m0_byteenable;                 // video_sys_0_mm_video_bridge_s0_agent:m0_byteenable -> video_sys_0_mm_video_bridge_s0_translator:uav_byteenable
	wire          video_sys_0_mm_video_bridge_s0_agent_m0_read;                       // video_sys_0_mm_video_bridge_s0_agent:m0_read -> video_sys_0_mm_video_bridge_s0_translator:uav_read
	wire          video_sys_0_mm_video_bridge_s0_agent_m0_readdatavalid;              // video_sys_0_mm_video_bridge_s0_translator:uav_readdatavalid -> video_sys_0_mm_video_bridge_s0_agent:m0_readdatavalid
	wire          video_sys_0_mm_video_bridge_s0_agent_m0_lock;                       // video_sys_0_mm_video_bridge_s0_agent:m0_lock -> video_sys_0_mm_video_bridge_s0_translator:uav_lock
	wire   [31:0] video_sys_0_mm_video_bridge_s0_agent_m0_writedata;                  // video_sys_0_mm_video_bridge_s0_agent:m0_writedata -> video_sys_0_mm_video_bridge_s0_translator:uav_writedata
	wire          video_sys_0_mm_video_bridge_s0_agent_m0_write;                      // video_sys_0_mm_video_bridge_s0_agent:m0_write -> video_sys_0_mm_video_bridge_s0_translator:uav_write
	wire    [2:0] video_sys_0_mm_video_bridge_s0_agent_m0_burstcount;                 // video_sys_0_mm_video_bridge_s0_agent:m0_burstcount -> video_sys_0_mm_video_bridge_s0_translator:uav_burstcount
	wire          video_sys_0_mm_video_bridge_s0_agent_rf_source_valid;               // video_sys_0_mm_video_bridge_s0_agent:rf_source_valid -> video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:in_valid
	wire  [128:0] video_sys_0_mm_video_bridge_s0_agent_rf_source_data;                // video_sys_0_mm_video_bridge_s0_agent:rf_source_data -> video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:in_data
	wire          video_sys_0_mm_video_bridge_s0_agent_rf_source_ready;               // video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:in_ready -> video_sys_0_mm_video_bridge_s0_agent:rf_source_ready
	wire          video_sys_0_mm_video_bridge_s0_agent_rf_source_startofpacket;       // video_sys_0_mm_video_bridge_s0_agent:rf_source_startofpacket -> video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          video_sys_0_mm_video_bridge_s0_agent_rf_source_endofpacket;         // video_sys_0_mm_video_bridge_s0_agent:rf_source_endofpacket -> video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_valid;            // video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:out_valid -> video_sys_0_mm_video_bridge_s0_agent:rf_sink_valid
	wire  [128:0] video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_data;             // video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:out_data -> video_sys_0_mm_video_bridge_s0_agent:rf_sink_data
	wire          video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_ready;            // video_sys_0_mm_video_bridge_s0_agent:rf_sink_ready -> video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:out_ready
	wire          video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_startofpacket;    // video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:out_startofpacket -> video_sys_0_mm_video_bridge_s0_agent:rf_sink_startofpacket
	wire          video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_endofpacket;      // video_sys_0_mm_video_bridge_s0_agent_rsp_fifo:out_endofpacket -> video_sys_0_mm_video_bridge_s0_agent:rf_sink_endofpacket
	wire          video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_valid;          // video_sys_0_mm_video_bridge_s0_agent:rdata_fifo_src_valid -> video_sys_0_mm_video_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_data;           // video_sys_0_mm_video_bridge_s0_agent:rdata_fifo_src_data -> video_sys_0_mm_video_bridge_s0_agent_rdata_fifo:in_data
	wire          video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_ready;          // video_sys_0_mm_video_bridge_s0_agent_rdata_fifo:in_ready -> video_sys_0_mm_video_bridge_s0_agent:rdata_fifo_src_ready
	wire          video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_valid;          // video_sys_0_mm_video_bridge_s0_agent_rdata_fifo:out_valid -> video_sys_0_mm_video_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_data;           // video_sys_0_mm_video_bridge_s0_agent_rdata_fifo:out_data -> video_sys_0_mm_video_bridge_s0_agent:rdata_fifo_sink_data
	wire          video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_ready;          // video_sys_0_mm_video_bridge_s0_agent:rdata_fifo_sink_ready -> video_sys_0_mm_video_bridge_s0_agent_rdata_fifo:out_ready
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_valid;                       // agilex_5_soc_lwhps2fpga_agent:write_cp_valid -> router:sink_valid
	wire  [127:0] agilex_5_soc_lwhps2fpga_agent_write_cp_data;                        // agilex_5_soc_lwhps2fpga_agent:write_cp_data -> router:sink_data
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_ready;                       // router:sink_ready -> agilex_5_soc_lwhps2fpga_agent:write_cp_ready
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_startofpacket;               // agilex_5_soc_lwhps2fpga_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_write_cp_endofpacket;                 // agilex_5_soc_lwhps2fpga_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [127:0] router_src_data;                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                   // cmd_demux:sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_valid;                        // agilex_5_soc_lwhps2fpga_agent:read_cp_valid -> router_001:sink_valid
	wire  [127:0] agilex_5_soc_lwhps2fpga_agent_read_cp_data;                         // agilex_5_soc_lwhps2fpga_agent:read_cp_data -> router_001:sink_data
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_ready;                        // router_001:sink_ready -> agilex_5_soc_lwhps2fpga_agent:read_cp_ready
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_startofpacket;                // agilex_5_soc_lwhps2fpga_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          agilex_5_soc_lwhps2fpga_agent_read_cp_endofpacket;                  // agilex_5_soc_lwhps2fpga_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [127:0] router_001_src_data;                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          emif_bank3a_s0_axil_agent_write_rp_valid;                           // emif_bank3a_s0_axil_agent:write_rp_valid -> router_002:sink_valid
	wire  [127:0] emif_bank3a_s0_axil_agent_write_rp_data;                            // emif_bank3a_s0_axil_agent:write_rp_data -> router_002:sink_data
	wire          emif_bank3a_s0_axil_agent_write_rp_ready;                           // router_002:sink_ready -> emif_bank3a_s0_axil_agent:write_rp_ready
	wire          emif_bank3a_s0_axil_agent_write_rp_startofpacket;                   // emif_bank3a_s0_axil_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          emif_bank3a_s0_axil_agent_write_rp_endofpacket;                     // emif_bank3a_s0_axil_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [127:0] router_002_src_data;                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          emif_bank3a_s0_axil_agent_read_rp_valid;                            // emif_bank3a_s0_axil_agent:read_rp_valid -> router_003:sink_valid
	wire  [127:0] emif_bank3a_s0_axil_agent_read_rp_data;                             // emif_bank3a_s0_axil_agent:read_rp_data -> router_003:sink_data
	wire          emif_bank3a_s0_axil_agent_read_rp_ready;                            // router_003:sink_ready -> emif_bank3a_s0_axil_agent:read_rp_ready
	wire          emif_bank3a_s0_axil_agent_read_rp_startofpacket;                    // emif_bank3a_s0_axil_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          emif_bank3a_s0_axil_agent_read_rp_endofpacket;                      // emif_bank3a_s0_axil_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [127:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          video_sys_0_mm_video_bridge_s0_agent_rp_valid;                      // video_sys_0_mm_video_bridge_s0_agent:rp_valid -> router_004:sink_valid
	wire  [127:0] video_sys_0_mm_video_bridge_s0_agent_rp_data;                       // video_sys_0_mm_video_bridge_s0_agent:rp_data -> router_004:sink_data
	wire          video_sys_0_mm_video_bridge_s0_agent_rp_ready;                      // router_004:sink_ready -> video_sys_0_mm_video_bridge_s0_agent:rp_ready
	wire          video_sys_0_mm_video_bridge_s0_agent_rp_startofpacket;              // video_sys_0_mm_video_bridge_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          video_sys_0_mm_video_bridge_s0_agent_rp_endofpacket;                // video_sys_0_mm_video_bridge_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [127:0] router_004_src_data;                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> emif_bank3a_s0_axil_wr_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> emif_bank3a_s0_axil_wr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                  // emif_bank3a_s0_axil_wr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> emif_bank3a_s0_axil_wr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> emif_bank3a_s0_axil_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> emif_bank3a_s0_axil_wr_burst_adapter:sink0_endofpacket
	wire          emif_bank3a_s0_axil_wr_burst_adapter_source0_valid;                 // emif_bank3a_s0_axil_wr_burst_adapter:source0_valid -> emif_bank3a_s0_axil_agent:write_cp_valid
	wire  [127:0] emif_bank3a_s0_axil_wr_burst_adapter_source0_data;                  // emif_bank3a_s0_axil_wr_burst_adapter:source0_data -> emif_bank3a_s0_axil_agent:write_cp_data
	wire          emif_bank3a_s0_axil_wr_burst_adapter_source0_ready;                 // emif_bank3a_s0_axil_agent:write_cp_ready -> emif_bank3a_s0_axil_wr_burst_adapter:source0_ready
	wire    [2:0] emif_bank3a_s0_axil_wr_burst_adapter_source0_channel;               // emif_bank3a_s0_axil_wr_burst_adapter:source0_channel -> emif_bank3a_s0_axil_agent:write_cp_channel
	wire          emif_bank3a_s0_axil_wr_burst_adapter_source0_startofpacket;         // emif_bank3a_s0_axil_wr_burst_adapter:source0_startofpacket -> emif_bank3a_s0_axil_agent:write_cp_startofpacket
	wire          emif_bank3a_s0_axil_wr_burst_adapter_source0_endofpacket;           // emif_bank3a_s0_axil_wr_burst_adapter:source0_endofpacket -> emif_bank3a_s0_axil_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> emif_bank3a_s0_axil_rd_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> emif_bank3a_s0_axil_rd_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                              // emif_bank3a_s0_axil_rd_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> emif_bank3a_s0_axil_rd_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> emif_bank3a_s0_axil_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> emif_bank3a_s0_axil_rd_burst_adapter:sink0_endofpacket
	wire          emif_bank3a_s0_axil_rd_burst_adapter_source0_valid;                 // emif_bank3a_s0_axil_rd_burst_adapter:source0_valid -> emif_bank3a_s0_axil_agent:read_cp_valid
	wire  [127:0] emif_bank3a_s0_axil_rd_burst_adapter_source0_data;                  // emif_bank3a_s0_axil_rd_burst_adapter:source0_data -> emif_bank3a_s0_axil_agent:read_cp_data
	wire          emif_bank3a_s0_axil_rd_burst_adapter_source0_ready;                 // emif_bank3a_s0_axil_agent:read_cp_ready -> emif_bank3a_s0_axil_rd_burst_adapter:source0_ready
	wire    [2:0] emif_bank3a_s0_axil_rd_burst_adapter_source0_channel;               // emif_bank3a_s0_axil_rd_burst_adapter:source0_channel -> emif_bank3a_s0_axil_agent:read_cp_channel
	wire          emif_bank3a_s0_axil_rd_burst_adapter_source0_startofpacket;         // emif_bank3a_s0_axil_rd_burst_adapter:source0_startofpacket -> emif_bank3a_s0_axil_agent:read_cp_startofpacket
	wire          emif_bank3a_s0_axil_rd_burst_adapter_source0_endofpacket;           // emif_bank3a_s0_axil_rd_burst_adapter:source0_endofpacket -> emif_bank3a_s0_axil_agent:read_cp_endofpacket
	wire          cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> video_sys_0_mm_video_bridge_s0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> video_sys_0_mm_video_bridge_s0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                              // video_sys_0_mm_video_bridge_s0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> video_sys_0_mm_video_bridge_s0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> video_sys_0_mm_video_bridge_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> video_sys_0_mm_video_bridge_s0_burst_adapter:sink0_endofpacket
	wire          video_sys_0_mm_video_bridge_s0_burst_adapter_source0_valid;         // video_sys_0_mm_video_bridge_s0_burst_adapter:source0_valid -> video_sys_0_mm_video_bridge_s0_agent:cp_valid
	wire  [127:0] video_sys_0_mm_video_bridge_s0_burst_adapter_source0_data;          // video_sys_0_mm_video_bridge_s0_burst_adapter:source0_data -> video_sys_0_mm_video_bridge_s0_agent:cp_data
	wire          video_sys_0_mm_video_bridge_s0_burst_adapter_source0_ready;         // video_sys_0_mm_video_bridge_s0_agent:cp_ready -> video_sys_0_mm_video_bridge_s0_burst_adapter:source0_ready
	wire    [2:0] video_sys_0_mm_video_bridge_s0_burst_adapter_source0_channel;       // video_sys_0_mm_video_bridge_s0_burst_adapter:source0_channel -> video_sys_0_mm_video_bridge_s0_agent:cp_channel
	wire          video_sys_0_mm_video_bridge_s0_burst_adapter_source0_startofpacket; // video_sys_0_mm_video_bridge_s0_burst_adapter:source0_startofpacket -> video_sys_0_mm_video_bridge_s0_agent:cp_startofpacket
	wire          video_sys_0_mm_video_bridge_s0_burst_adapter_source0_endofpacket;   // video_sys_0_mm_video_bridge_s0_burst_adapter:source0_endofpacket -> video_sys_0_mm_video_bridge_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [127:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_002:sink0_valid
	wire  [127:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src1_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                           // cmd_demux_001:src0_valid -> cmd_mux_001:sink0_valid
	wire  [127:0] cmd_demux_001_src0_data;                                            // cmd_demux_001:src0_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src0_ready;                                           // cmd_mux_001:sink0_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                         // cmd_demux_001:src0_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_startofpacket;                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                           // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [127:0] cmd_demux_001_src1_data;                                            // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src1_ready;                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire    [2:0] cmd_demux_001_src1_channel;                                         // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [127:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux_001:sink0_valid
	wire  [127:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src0_ready;                                           // rsp_mux_001:sink0_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink1_valid
	wire  [127:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_002_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [127:0] rsp_demux_002_src1_data;                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src1_ready;                                           // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire    [2:0] rsp_demux_002_src1_channel;                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket

	ghrd_hps_system_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (29),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (29),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) agilex_5_soc_lwhps2fpga_translator (
		.aclk        (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,   width = 1,       clk.clk
		.aresetn     (~agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (agilex_5_soc_lwhps2fpga_translator_m0_awid),                                //  output,   width = 4,        m0.awid
		.m0_awaddr   (agilex_5_soc_lwhps2fpga_translator_m0_awaddr),                              //  output,  width = 29,          .awaddr
		.m0_awlen    (agilex_5_soc_lwhps2fpga_translator_m0_awlen),                               //  output,   width = 8,          .awlen
		.m0_awsize   (agilex_5_soc_lwhps2fpga_translator_m0_awsize),                              //  output,   width = 3,          .awsize
		.m0_awburst  (agilex_5_soc_lwhps2fpga_translator_m0_awburst),                             //  output,   width = 2,          .awburst
		.m0_awlock   (agilex_5_soc_lwhps2fpga_translator_m0_awlock),                              //  output,   width = 1,          .awlock
		.m0_awcache  (agilex_5_soc_lwhps2fpga_translator_m0_awcache),                             //  output,   width = 4,          .awcache
		.m0_awprot   (agilex_5_soc_lwhps2fpga_translator_m0_awprot),                              //  output,   width = 3,          .awprot
		.m0_awuser   (agilex_5_soc_lwhps2fpga_translator_m0_awuser),                              //  output,   width = 1,          .awuser
		.m0_awqos    (agilex_5_soc_lwhps2fpga_translator_m0_awqos),                               //  output,   width = 4,          .awqos
		.m0_awregion (agilex_5_soc_lwhps2fpga_translator_m0_awregion),                            //  output,   width = 4,          .awregion
		.m0_awvalid  (agilex_5_soc_lwhps2fpga_translator_m0_awvalid),                             //  output,   width = 1,          .awvalid
		.m0_awready  (agilex_5_soc_lwhps2fpga_translator_m0_awready),                             //   input,   width = 1,          .awready
		.m0_wdata    (agilex_5_soc_lwhps2fpga_translator_m0_wdata),                               //  output,  width = 32,          .wdata
		.m0_wstrb    (agilex_5_soc_lwhps2fpga_translator_m0_wstrb),                               //  output,   width = 4,          .wstrb
		.m0_wlast    (agilex_5_soc_lwhps2fpga_translator_m0_wlast),                               //  output,   width = 1,          .wlast
		.m0_wvalid   (agilex_5_soc_lwhps2fpga_translator_m0_wvalid),                              //  output,   width = 1,          .wvalid
		.m0_wuser    (agilex_5_soc_lwhps2fpga_translator_m0_wuser),                               //  output,   width = 1,          .wuser
		.m0_wready   (agilex_5_soc_lwhps2fpga_translator_m0_wready),                              //   input,   width = 1,          .wready
		.m0_bid      (agilex_5_soc_lwhps2fpga_translator_m0_bid),                                 //   input,   width = 4,          .bid
		.m0_bresp    (agilex_5_soc_lwhps2fpga_translator_m0_bresp),                               //   input,   width = 2,          .bresp
		.m0_buser    (agilex_5_soc_lwhps2fpga_translator_m0_buser),                               //   input,   width = 1,          .buser
		.m0_bvalid   (agilex_5_soc_lwhps2fpga_translator_m0_bvalid),                              //   input,   width = 1,          .bvalid
		.m0_bready   (agilex_5_soc_lwhps2fpga_translator_m0_bready),                              //  output,   width = 1,          .bready
		.m0_arid     (agilex_5_soc_lwhps2fpga_translator_m0_arid),                                //  output,   width = 4,          .arid
		.m0_araddr   (agilex_5_soc_lwhps2fpga_translator_m0_araddr),                              //  output,  width = 29,          .araddr
		.m0_arlen    (agilex_5_soc_lwhps2fpga_translator_m0_arlen),                               //  output,   width = 8,          .arlen
		.m0_arsize   (agilex_5_soc_lwhps2fpga_translator_m0_arsize),                              //  output,   width = 3,          .arsize
		.m0_arburst  (agilex_5_soc_lwhps2fpga_translator_m0_arburst),                             //  output,   width = 2,          .arburst
		.m0_arlock   (agilex_5_soc_lwhps2fpga_translator_m0_arlock),                              //  output,   width = 1,          .arlock
		.m0_arcache  (agilex_5_soc_lwhps2fpga_translator_m0_arcache),                             //  output,   width = 4,          .arcache
		.m0_arprot   (agilex_5_soc_lwhps2fpga_translator_m0_arprot),                              //  output,   width = 3,          .arprot
		.m0_aruser   (agilex_5_soc_lwhps2fpga_translator_m0_aruser),                              //  output,   width = 1,          .aruser
		.m0_arqos    (agilex_5_soc_lwhps2fpga_translator_m0_arqos),                               //  output,   width = 4,          .arqos
		.m0_arregion (agilex_5_soc_lwhps2fpga_translator_m0_arregion),                            //  output,   width = 4,          .arregion
		.m0_arvalid  (agilex_5_soc_lwhps2fpga_translator_m0_arvalid),                             //  output,   width = 1,          .arvalid
		.m0_arready  (agilex_5_soc_lwhps2fpga_translator_m0_arready),                             //   input,   width = 1,          .arready
		.m0_rid      (agilex_5_soc_lwhps2fpga_translator_m0_rid),                                 //   input,   width = 4,          .rid
		.m0_rdata    (agilex_5_soc_lwhps2fpga_translator_m0_rdata),                               //   input,  width = 32,          .rdata
		.m0_rresp    (agilex_5_soc_lwhps2fpga_translator_m0_rresp),                               //   input,   width = 2,          .rresp
		.m0_rlast    (agilex_5_soc_lwhps2fpga_translator_m0_rlast),                               //   input,   width = 1,          .rlast
		.m0_rvalid   (agilex_5_soc_lwhps2fpga_translator_m0_rvalid),                              //   input,   width = 1,          .rvalid
		.m0_rready   (agilex_5_soc_lwhps2fpga_translator_m0_rready),                              //  output,   width = 1,          .rready
		.m0_ruser    (agilex_5_soc_lwhps2fpga_translator_m0_ruser),                               //   input,   width = 1,          .ruser
		.s0_awid     (agilex_5_soc_lwhps2fpga_awid),                                              //   input,   width = 4,        s0.awid
		.s0_awaddr   (agilex_5_soc_lwhps2fpga_awaddr),                                            //   input,  width = 29,          .awaddr
		.s0_awlen    (agilex_5_soc_lwhps2fpga_awlen),                                             //   input,   width = 8,          .awlen
		.s0_awsize   (agilex_5_soc_lwhps2fpga_awsize),                                            //   input,   width = 3,          .awsize
		.s0_awburst  (agilex_5_soc_lwhps2fpga_awburst),                                           //   input,   width = 2,          .awburst
		.s0_awlock   (agilex_5_soc_lwhps2fpga_awlock),                                            //   input,   width = 1,          .awlock
		.s0_awcache  (agilex_5_soc_lwhps2fpga_awcache),                                           //   input,   width = 4,          .awcache
		.s0_awprot   (agilex_5_soc_lwhps2fpga_awprot),                                            //   input,   width = 3,          .awprot
		.s0_awvalid  (agilex_5_soc_lwhps2fpga_awvalid),                                           //   input,   width = 1,          .awvalid
		.s0_awready  (agilex_5_soc_lwhps2fpga_awready),                                           //  output,   width = 1,          .awready
		.s0_wdata    (agilex_5_soc_lwhps2fpga_wdata),                                             //   input,  width = 32,          .wdata
		.s0_wstrb    (agilex_5_soc_lwhps2fpga_wstrb),                                             //   input,   width = 4,          .wstrb
		.s0_wlast    (agilex_5_soc_lwhps2fpga_wlast),                                             //   input,   width = 1,          .wlast
		.s0_wvalid   (agilex_5_soc_lwhps2fpga_wvalid),                                            //   input,   width = 1,          .wvalid
		.s0_wready   (agilex_5_soc_lwhps2fpga_wready),                                            //  output,   width = 1,          .wready
		.s0_bid      (agilex_5_soc_lwhps2fpga_bid),                                               //  output,   width = 4,          .bid
		.s0_bresp    (agilex_5_soc_lwhps2fpga_bresp),                                             //  output,   width = 2,          .bresp
		.s0_bvalid   (agilex_5_soc_lwhps2fpga_bvalid),                                            //  output,   width = 1,          .bvalid
		.s0_bready   (agilex_5_soc_lwhps2fpga_bready),                                            //   input,   width = 1,          .bready
		.s0_arid     (agilex_5_soc_lwhps2fpga_arid),                                              //   input,   width = 4,          .arid
		.s0_araddr   (agilex_5_soc_lwhps2fpga_araddr),                                            //   input,  width = 29,          .araddr
		.s0_arlen    (agilex_5_soc_lwhps2fpga_arlen),                                             //   input,   width = 8,          .arlen
		.s0_arsize   (agilex_5_soc_lwhps2fpga_arsize),                                            //   input,   width = 3,          .arsize
		.s0_arburst  (agilex_5_soc_lwhps2fpga_arburst),                                           //   input,   width = 2,          .arburst
		.s0_arlock   (agilex_5_soc_lwhps2fpga_arlock),                                            //   input,   width = 1,          .arlock
		.s0_arcache  (agilex_5_soc_lwhps2fpga_arcache),                                           //   input,   width = 4,          .arcache
		.s0_arprot   (agilex_5_soc_lwhps2fpga_arprot),                                            //   input,   width = 3,          .arprot
		.s0_arvalid  (agilex_5_soc_lwhps2fpga_arvalid),                                           //   input,   width = 1,          .arvalid
		.s0_arready  (agilex_5_soc_lwhps2fpga_arready),                                           //  output,   width = 1,          .arready
		.s0_rid      (agilex_5_soc_lwhps2fpga_rid),                                               //  output,   width = 4,          .rid
		.s0_rdata    (agilex_5_soc_lwhps2fpga_rdata),                                             //  output,  width = 32,          .rdata
		.s0_rresp    (agilex_5_soc_lwhps2fpga_rresp),                                             //  output,   width = 2,          .rresp
		.s0_rlast    (agilex_5_soc_lwhps2fpga_rlast),                                             //  output,   width = 1,          .rlast
		.s0_rvalid   (agilex_5_soc_lwhps2fpga_rvalid),                                            //  output,   width = 1,          .rvalid
		.s0_rready   (agilex_5_soc_lwhps2fpga_rready),                                            //   input,   width = 1,          .rready
		.s0_awuser   (1'b0),                                                                      // (terminated),                        
		.s0_awqos    (4'b0000),                                                                   // (terminated),                        
		.s0_awregion (4'b0000),                                                                   // (terminated),                        
		.s0_wuser    (1'b0),                                                                      // (terminated),                        
		.s0_buser    (),                                                                          // (terminated),                        
		.s0_aruser   (1'b0),                                                                      // (terminated),                        
		.s0_arqos    (4'b0000),                                                                   // (terminated),                        
		.s0_arregion (4'b0000),                                                                   // (terminated),                        
		.s0_ruser    (),                                                                          // (terminated),                        
		.s0_wid      (4'b0000),                                                                   // (terminated),                        
		.s0_ardomain (2'b00),                                                                     // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                                   // (terminated),                        
		.s0_arbar    (2'b00),                                                                     // (terminated),                        
		.s0_awdomain (2'b00),                                                                     // (terminated),                        
		.s0_awsnoop  (3'b000),                                                                    // (terminated),                        
		.s0_awbar    (2'b00),                                                                     // (terminated),                        
		.s0_awunique (1'b0),                                                                      // (terminated),                        
		.m0_wid      (),                                                                          // (terminated),                        
		.m0_ardomain (),                                                                          // (terminated),                        
		.m0_arsnoop  (),                                                                          // (terminated),                        
		.m0_arbar    (),                                                                          // (terminated),                        
		.m0_awdomain (),                                                                          // (terminated),                        
		.m0_awsnoop  (),                                                                          // (terminated),                        
		.m0_awbar    (),                                                                          // (terminated),                        
		.m0_awunique ()                                                                           // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) video_sys_0_mm_video_bridge_s0_translator (
		.clk                    (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (video_sys_0_mm_video_bridge_s0_agent_m0_address),                          //   input,  width = 29, avalon_universal_slave_0.address
		.uav_burstcount         (video_sys_0_mm_video_bridge_s0_agent_m0_burstcount),                       //   input,   width = 3,                         .burstcount
		.uav_read               (video_sys_0_mm_video_bridge_s0_agent_m0_read),                             //   input,   width = 1,                         .read
		.uav_write              (video_sys_0_mm_video_bridge_s0_agent_m0_write),                            //   input,   width = 1,                         .write
		.uav_waitrequest        (video_sys_0_mm_video_bridge_s0_agent_m0_waitrequest),                      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (video_sys_0_mm_video_bridge_s0_agent_m0_readdatavalid),                    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (video_sys_0_mm_video_bridge_s0_agent_m0_byteenable),                       //   input,   width = 4,                         .byteenable
		.uav_readdata           (video_sys_0_mm_video_bridge_s0_agent_m0_readdata),                         //  output,  width = 32,                         .readdata
		.uav_writedata          (video_sys_0_mm_video_bridge_s0_agent_m0_writedata),                        //   input,  width = 32,                         .writedata
		.uav_lock               (video_sys_0_mm_video_bridge_s0_agent_m0_lock),                             //   input,   width = 1,                         .lock
		.uav_debugaccess        (video_sys_0_mm_video_bridge_s0_agent_m0_debugaccess),                      //   input,   width = 1,                         .debugaccess
		.av_address             (video_sys_0_mm_video_bridge_s0_address),                                   //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (video_sys_0_mm_video_bridge_s0_write),                                     //  output,   width = 1,                         .write
		.av_read                (video_sys_0_mm_video_bridge_s0_read),                                      //  output,   width = 1,                         .read
		.av_readdata            (video_sys_0_mm_video_bridge_s0_readdata),                                  //   input,  width = 32,                         .readdata
		.av_writedata           (video_sys_0_mm_video_bridge_s0_writedata),                                 //  output,  width = 32,                         .writedata
		.av_burstcount          (video_sys_0_mm_video_bridge_s0_burstcount),                                //  output,   width = 1,                         .burstcount
		.av_byteenable          (video_sys_0_mm_video_bridge_s0_byteenable),                                //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (video_sys_0_mm_video_bridge_s0_readdatavalid),                             //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (video_sys_0_mm_video_bridge_s0_waitrequest),                               //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (video_sys_0_mm_video_bridge_s0_debugaccess),                               //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_chipselect          (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	ghrd_hps_system_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (29),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (96),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_ADDR_SIDEBAND_H       (94),
		.PKT_ADDR_SIDEBAND_L       (94),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (103),
		.PKT_QOS_L                 (97),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_DATA_SIDEBAND_H       (95),
		.PKT_DATA_SIDEBAND_L       (95),
		.PKT_DOMAIN_H              (126),
		.PKT_DOMAIN_L              (125),
		.PKT_SNOOP_H               (124),
		.PKT_SNOOP_L               (121),
		.PKT_BARRIER_H             (120),
		.PKT_BARRIER_L             (119),
		.PKT_WUNIQUE               (127),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (3),
		.ID                        (0),
		.SYNC_RESET                (1)
	) agilex_5_soc_lwhps2fpga_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                            //   input,    width = 1,              clk.clk
		.aresetn                (~agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (agilex_5_soc_lwhps2fpga_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (agilex_5_soc_lwhps2fpga_agent_write_cp_data),                               //  output,  width = 128,                 .data
		.write_cp_startofpacket (agilex_5_soc_lwhps2fpga_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (agilex_5_soc_lwhps2fpga_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (agilex_5_soc_lwhps2fpga_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                          //   input,  width = 128,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                       //   input,    width = 3,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                 //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                         //  output,    width = 1,                 .ready
		.read_cp_valid          (agilex_5_soc_lwhps2fpga_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (agilex_5_soc_lwhps2fpga_agent_read_cp_data),                                //  output,  width = 128,                 .data
		.read_cp_startofpacket  (agilex_5_soc_lwhps2fpga_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (agilex_5_soc_lwhps2fpga_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (agilex_5_soc_lwhps2fpga_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                     //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                      //   input,  width = 128,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                   //   input,    width = 3,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                             //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                               //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                     //  output,    width = 1,                 .ready
		.awid                   (agilex_5_soc_lwhps2fpga_translator_m0_awid),                                //   input,    width = 4, altera_axi_slave.awid
		.awaddr                 (agilex_5_soc_lwhps2fpga_translator_m0_awaddr),                              //   input,   width = 29,                 .awaddr
		.awlen                  (agilex_5_soc_lwhps2fpga_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (agilex_5_soc_lwhps2fpga_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (agilex_5_soc_lwhps2fpga_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (agilex_5_soc_lwhps2fpga_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (agilex_5_soc_lwhps2fpga_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (agilex_5_soc_lwhps2fpga_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (agilex_5_soc_lwhps2fpga_translator_m0_awuser),                              //   input,    width = 1,                 .awuser
		.awqos                  (agilex_5_soc_lwhps2fpga_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (agilex_5_soc_lwhps2fpga_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (agilex_5_soc_lwhps2fpga_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (agilex_5_soc_lwhps2fpga_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (agilex_5_soc_lwhps2fpga_translator_m0_wdata),                               //   input,   width = 32,                 .wdata
		.wstrb                  (agilex_5_soc_lwhps2fpga_translator_m0_wstrb),                               //   input,    width = 4,                 .wstrb
		.wlast                  (agilex_5_soc_lwhps2fpga_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (agilex_5_soc_lwhps2fpga_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (agilex_5_soc_lwhps2fpga_translator_m0_wuser),                               //   input,    width = 1,                 .wuser
		.wready                 (agilex_5_soc_lwhps2fpga_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (agilex_5_soc_lwhps2fpga_translator_m0_bid),                                 //  output,    width = 4,                 .bid
		.bresp                  (agilex_5_soc_lwhps2fpga_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (agilex_5_soc_lwhps2fpga_translator_m0_buser),                               //  output,    width = 1,                 .buser
		.bvalid                 (agilex_5_soc_lwhps2fpga_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (agilex_5_soc_lwhps2fpga_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (agilex_5_soc_lwhps2fpga_translator_m0_arid),                                //   input,    width = 4,                 .arid
		.araddr                 (agilex_5_soc_lwhps2fpga_translator_m0_araddr),                              //   input,   width = 29,                 .araddr
		.arlen                  (agilex_5_soc_lwhps2fpga_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (agilex_5_soc_lwhps2fpga_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (agilex_5_soc_lwhps2fpga_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (agilex_5_soc_lwhps2fpga_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (agilex_5_soc_lwhps2fpga_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (agilex_5_soc_lwhps2fpga_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (agilex_5_soc_lwhps2fpga_translator_m0_aruser),                              //   input,    width = 1,                 .aruser
		.arqos                  (agilex_5_soc_lwhps2fpga_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (agilex_5_soc_lwhps2fpga_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (agilex_5_soc_lwhps2fpga_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (agilex_5_soc_lwhps2fpga_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (agilex_5_soc_lwhps2fpga_translator_m0_rid),                                 //  output,    width = 4,                 .rid
		.rdata                  (agilex_5_soc_lwhps2fpga_translator_m0_rdata),                               //  output,   width = 32,                 .rdata
		.rresp                  (agilex_5_soc_lwhps2fpga_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (agilex_5_soc_lwhps2fpga_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (agilex_5_soc_lwhps2fpga_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (agilex_5_soc_lwhps2fpga_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (agilex_5_soc_lwhps2fpga_translator_m0_ruser),                               //  output,    width = 1,                 .ruser
		.wid                    (4'b0000),                                                                   // (terminated),                                
		.arsnoop                (4'b0000),                                                                   // (terminated),                                
		.ardomain               (2'b00),                                                                     // (terminated),                                
		.arbar                  (2'b00),                                                                     // (terminated),                                
		.awsnoop                (3'b000),                                                                    // (terminated),                                
		.awdomain               (2'b00),                                                                     // (terminated),                                
		.awbar                  (2'b00),                                                                     // (terminated),                                
		.awunique               (1'b0)                                                                       // (terminated),                                
	);

	ghrd_hps_system_altera_merlin_axi_slave_ni_1950_ur2l4ai #(
		.PKT_QOS_H                   (100),
		.PKT_QOS_L                   (97),
		.PKT_THREAD_ID_H             (106),
		.PKT_THREAD_ID_L             (103),
		.PKT_RESPONSE_STATUS_H       (115),
		.PKT_RESPONSE_STATUS_L       (114),
		.PKT_BEGIN_BURST             (96),
		.PKT_CACHE_H                 (113),
		.PKT_CACHE_L                 (110),
		.PKT_DATA_SIDEBAND_H         (95),
		.PKT_DATA_SIDEBAND_L         (95),
		.PKT_ADDR_SIDEBAND_H         (94),
		.PKT_ADDR_SIDEBAND_L         (94),
		.PKT_BURST_TYPE_H            (93),
		.PKT_BURST_TYPE_L            (92),
		.PKT_PROTECTION_H            (109),
		.PKT_PROTECTION_L            (107),
		.PKT_BURST_SIZE_H            (91),
		.PKT_BURST_SIZE_L            (89),
		.PKT_BURSTWRAP_H             (88),
		.PKT_BURSTWRAP_L             (82),
		.PKT_BYTE_CNT_H              (81),
		.PKT_BYTE_CNT_L              (71),
		.PKT_ADDR_H                  (64),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (70),
		.PKT_TRANS_LOCK              (69),
		.PKT_TRANS_COMPRESSED_READ   (65),
		.PKT_TRANS_POSTED            (66),
		.PKT_TRANS_WRITE             (67),
		.PKT_TRANS_READ              (68),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (101),
		.PKT_SRC_ID_L                (101),
		.PKT_DEST_ID_H               (102),
		.PKT_DEST_ID_L               (102),
		.PKT_ORI_BURST_SIZE_L        (116),
		.PKT_ORI_BURST_SIZE_H        (118),
		.PKT_DOMAIN_L                (125),
		.PKT_DOMAIN_H                (126),
		.PKT_SNOOP_L                 (121),
		.PKT_SNOOP_H                 (124),
		.PKT_BARRIER_L               (119),
		.PKT_BARRIER_H               (120),
		.PKT_WUNIQUE                 (127),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (128),
		.ADDR_WIDTH                  (27),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (3),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ENABLE_OOO                  (0)
	) emif_bank3a_s0_axil_agent (
		.aclk                   (agilex_5_soc_h2f_user1_clk_clk),                                    //   input,    width = 1,        clock_sink.clk
		.aresetn                (~emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (emif_bank3a_s0_axil_rd_burst_adapter_source0_valid),                //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (emif_bank3a_s0_axil_rd_burst_adapter_source0_ready),                //  output,    width = 1,                  .ready
		.read_cp_data           (emif_bank3a_s0_axil_rd_burst_adapter_source0_data),                 //   input,  width = 128,                  .data
		.read_cp_channel        (emif_bank3a_s0_axil_rd_burst_adapter_source0_channel),              //   input,    width = 3,                  .channel
		.read_cp_startofpacket  (emif_bank3a_s0_axil_rd_burst_adapter_source0_startofpacket),        //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (emif_bank3a_s0_axil_rd_burst_adapter_source0_endofpacket),          //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (emif_bank3a_s0_axil_wr_burst_adapter_source0_ready),                //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (emif_bank3a_s0_axil_wr_burst_adapter_source0_valid),                //   input,    width = 1,                  .valid
		.write_cp_data          (emif_bank3a_s0_axil_wr_burst_adapter_source0_data),                 //   input,  width = 128,                  .data
		.write_cp_channel       (emif_bank3a_s0_axil_wr_burst_adapter_source0_channel),              //   input,    width = 3,                  .channel
		.write_cp_startofpacket (emif_bank3a_s0_axil_wr_burst_adapter_source0_startofpacket),        //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (emif_bank3a_s0_axil_wr_burst_adapter_source0_endofpacket),          //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (emif_bank3a_s0_axil_agent_read_rp_ready),                           //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (emif_bank3a_s0_axil_agent_read_rp_valid),                           //  output,    width = 1,                  .valid
		.read_rp_data           (emif_bank3a_s0_axil_agent_read_rp_data),                            //  output,  width = 128,                  .data
		.read_rp_startofpacket  (emif_bank3a_s0_axil_agent_read_rp_startofpacket),                   //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (emif_bank3a_s0_axil_agent_read_rp_endofpacket),                     //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (emif_bank3a_s0_axil_agent_write_rp_ready),                          //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (emif_bank3a_s0_axil_agent_write_rp_valid),                          //  output,    width = 1,                  .valid
		.write_rp_data          (emif_bank3a_s0_axil_agent_write_rp_data),                           //  output,  width = 128,                  .data
		.write_rp_startofpacket (emif_bank3a_s0_axil_agent_write_rp_startofpacket),                  //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (emif_bank3a_s0_axil_agent_write_rp_endofpacket),                    //  output,    width = 1,                  .endofpacket
		.awaddr                 (emif_bank3a_s0_axil_awaddr),                                        //  output,   width = 27, altera_axi_master.awaddr
		.awprot                 (emif_bank3a_s0_axil_awprot),                                        //  output,    width = 3,                  .awprot
		.awvalid                (emif_bank3a_s0_axil_awvalid),                                       //  output,    width = 1,                  .awvalid
		.awready                (emif_bank3a_s0_axil_awready),                                       //   input,    width = 1,                  .awready
		.wdata                  (emif_bank3a_s0_axil_wdata),                                         //  output,   width = 32,                  .wdata
		.wstrb                  (emif_bank3a_s0_axil_wstrb),                                         //  output,    width = 4,                  .wstrb
		.wvalid                 (emif_bank3a_s0_axil_wvalid),                                        //  output,    width = 1,                  .wvalid
		.wready                 (emif_bank3a_s0_axil_wready),                                        //   input,    width = 1,                  .wready
		.bresp                  (emif_bank3a_s0_axil_bresp),                                         //   input,    width = 2,                  .bresp
		.bvalid                 (emif_bank3a_s0_axil_bvalid),                                        //   input,    width = 1,                  .bvalid
		.bready                 (emif_bank3a_s0_axil_bready),                                        //  output,    width = 1,                  .bready
		.araddr                 (emif_bank3a_s0_axil_araddr),                                        //  output,   width = 27,                  .araddr
		.arprot                 (emif_bank3a_s0_axil_arprot),                                        //  output,    width = 3,                  .arprot
		.arvalid                (emif_bank3a_s0_axil_arvalid),                                       //  output,    width = 1,                  .arvalid
		.arready                (emif_bank3a_s0_axil_arready),                                       //   input,    width = 1,                  .arready
		.rdata                  (emif_bank3a_s0_axil_rdata),                                         //   input,   width = 32,                  .rdata
		.rresp                  (emif_bank3a_s0_axil_rresp),                                         //   input,    width = 2,                  .rresp
		.rvalid                 (emif_bank3a_s0_axil_rvalid),                                        //   input,    width = 1,                  .rvalid
		.rready                 (emif_bank3a_s0_axil_rready),                                        //  output,    width = 1,                  .rready
		.bid                    (1'b0),                                                              // (terminated),                                 
		.buser                  (1'b0),                                                              // (terminated),                                 
		.rid                    (1'b0),                                                              // (terminated),                                 
		.ruser                  (1'b0),                                                              // (terminated),                                 
		.rlast                  (1'b0),                                                              // (terminated),                                 
		.arid                   (),                                                                  // (terminated),                                 
		.arlen                  (),                                                                  // (terminated),                                 
		.arsize                 (),                                                                  // (terminated),                                 
		.arburst                (),                                                                  // (terminated),                                 
		.arlock                 (),                                                                  // (terminated),                                 
		.arcache                (),                                                                  // (terminated),                                 
		.aruser                 (),                                                                  // (terminated),                                 
		.wid                    (),                                                                  // (terminated),                                 
		.wuser                  (),                                                                  // (terminated),                                 
		.wlast                  (),                                                                  // (terminated),                                 
		.awid                   (),                                                                  // (terminated),                                 
		.awlen                  (),                                                                  // (terminated),                                 
		.awsize                 (),                                                                  // (terminated),                                 
		.awburst                (),                                                                  // (terminated),                                 
		.awlock                 (),                                                                  // (terminated),                                 
		.awcache                (),                                                                  // (terminated),                                 
		.awuser                 (),                                                                  // (terminated),                                 
		.awqos                  (),                                                                  // (terminated),                                 
		.awregion               (),                                                                  // (terminated),                                 
		.arqos                  (),                                                                  // (terminated),                                 
		.arregion               (),                                                                  // (terminated),                                 
		.arsnoop                (),                                                                  // (terminated),                                 
		.ardomain               (),                                                                  // (terminated),                                 
		.arbar                  (),                                                                  // (terminated),                                 
		.awsnoop                (),                                                                  // (terminated),                                 
		.awdomain               (),                                                                  // (terminated),                                 
		.awbar                  (),                                                                  // (terminated),                                 
		.awunique               ()                                                                   // (terminated),                                 
	);

	ghrd_hps_system_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (96),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) video_sys_0_mm_video_bridge_s0_agent (
		.clk                     (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (video_sys_0_mm_video_bridge_s0_agent_m0_address),                          //  output,   width = 29,              m0.address
		.m0_burstcount           (video_sys_0_mm_video_bridge_s0_agent_m0_burstcount),                       //  output,    width = 3,                .burstcount
		.m0_byteenable           (video_sys_0_mm_video_bridge_s0_agent_m0_byteenable),                       //  output,    width = 4,                .byteenable
		.m0_debugaccess          (video_sys_0_mm_video_bridge_s0_agent_m0_debugaccess),                      //  output,    width = 1,                .debugaccess
		.m0_lock                 (video_sys_0_mm_video_bridge_s0_agent_m0_lock),                             //  output,    width = 1,                .lock
		.m0_readdata             (video_sys_0_mm_video_bridge_s0_agent_m0_readdata),                         //   input,   width = 32,                .readdata
		.m0_readdatavalid        (video_sys_0_mm_video_bridge_s0_agent_m0_readdatavalid),                    //   input,    width = 1,                .readdatavalid
		.m0_read                 (video_sys_0_mm_video_bridge_s0_agent_m0_read),                             //  output,    width = 1,                .read
		.m0_waitrequest          (video_sys_0_mm_video_bridge_s0_agent_m0_waitrequest),                      //   input,    width = 1,                .waitrequest
		.m0_writedata            (video_sys_0_mm_video_bridge_s0_agent_m0_writedata),                        //  output,   width = 32,                .writedata
		.m0_write                (video_sys_0_mm_video_bridge_s0_agent_m0_write),                            //  output,    width = 1,                .write
		.rp_endofpacket          (video_sys_0_mm_video_bridge_s0_agent_rp_endofpacket),                      //  output,    width = 1,              rp.endofpacket
		.rp_ready                (video_sys_0_mm_video_bridge_s0_agent_rp_ready),                            //   input,    width = 1,                .ready
		.rp_valid                (video_sys_0_mm_video_bridge_s0_agent_rp_valid),                            //  output,    width = 1,                .valid
		.rp_data                 (video_sys_0_mm_video_bridge_s0_agent_rp_data),                             //  output,  width = 128,                .data
		.rp_startofpacket        (video_sys_0_mm_video_bridge_s0_agent_rp_startofpacket),                    //  output,    width = 1,                .startofpacket
		.cp_ready                (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_ready),               //  output,    width = 1,              cp.ready
		.cp_valid                (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_valid),               //   input,    width = 1,                .valid
		.cp_data                 (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_data),                //   input,  width = 128,                .data
		.cp_startofpacket        (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_startofpacket),       //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_endofpacket),         //   input,    width = 1,                .endofpacket
		.cp_channel              (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_channel),             //   input,    width = 3,                .channel
		.rf_sink_ready           (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_ready),                  //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_valid),                  //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_startofpacket),          //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_endofpacket),            //   input,    width = 1,                .endofpacket
		.rf_sink_data            (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_data),                   //   input,  width = 129,                .data
		.rf_source_ready         (video_sys_0_mm_video_bridge_s0_agent_rf_source_ready),                     //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (video_sys_0_mm_video_bridge_s0_agent_rf_source_valid),                     //  output,    width = 1,                .valid
		.rf_source_startofpacket (video_sys_0_mm_video_bridge_s0_agent_rf_source_startofpacket),             //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (video_sys_0_mm_video_bridge_s0_agent_rf_source_endofpacket),               //  output,    width = 1,                .endofpacket
		.rf_source_data          (video_sys_0_mm_video_bridge_s0_agent_rf_source_data),                      //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_ready),                //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_valid),                //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_data),                 //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_ready),                //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_valid),                //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_data),                 //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) video_sys_0_mm_video_bridge_s0_agent_rsp_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (video_sys_0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_data           (video_sys_0_mm_video_bridge_s0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (video_sys_0_mm_video_bridge_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (video_sys_0_mm_video_bridge_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (video_sys_0_mm_video_bridge_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (video_sys_0_mm_video_bridge_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (video_sys_0_mm_video_bridge_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated),                         
		.csr_read          (1'b0),                                                            // (terminated),                         
		.csr_write         (1'b0),                                                            // (terminated),                         
		.csr_readdata      (),                                                                // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated),                         
		.almost_full_data  (),                                                                // (terminated),                         
		.almost_empty_data (),                                                                // (terminated),                         
		.in_empty          (1'b0),                                                            // (terminated),                         
		.out_empty         (),                                                                // (terminated),                         
		.in_error          (1'b0),                                                            // (terminated),                         
		.out_error         (),                                                                // (terminated),                         
		.in_channel        (1'b0),                                                            // (terminated),                         
		.out_channel       ()                                                                 // (terminated),                         
	);

	ghrd_hps_system_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) video_sys_0_mm_video_bridge_s0_agent_rdata_fifo (
		.clk               (agilex_5_soc_h2f_user1_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset             (video_sys_0_reset_reset_bridge_in_reset_reset),             //   input,   width = 1, clk_reset.reset
		.in_data           (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (video_sys_0_mm_video_bridge_s0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                     // (terminated),                        
		.csr_read          (1'b0),                                                      // (terminated),                        
		.csr_write         (1'b0),                                                      // (terminated),                        
		.csr_readdata      (),                                                          // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                        
		.almost_full_data  (),                                                          // (terminated),                        
		.almost_empty_data (),                                                          // (terminated),                        
		.in_startofpacket  (1'b0),                                                      // (terminated),                        
		.in_endofpacket    (1'b0),                                                      // (terminated),                        
		.out_startofpacket (),                                                          // (terminated),                        
		.out_endofpacket   (),                                                          // (terminated),                        
		.in_empty          (1'b0),                                                      // (terminated),                        
		.out_empty         (),                                                          // (terminated),                        
		.in_error          (1'b0),                                                      // (terminated),                        
		.out_error         (),                                                          // (terminated),                        
		.in_channel        (1'b0),                                                      // (terminated),                        
		.out_channel       ()                                                           // (terminated),                        
	);

	ghrd_hps_system_altera_merlin_router_1921_2wabv2a router (
		.sink_ready         (agilex_5_soc_lwhps2fpga_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_lwhps2fpga_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_lwhps2fpga_agent_write_cp_data),                              //   input,  width = 128,          .data
		.sink_startofpacket (agilex_5_soc_lwhps2fpga_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_lwhps2fpga_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                         //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                         //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                          //  output,  width = 128,          .data
		.src_channel        (router_src_channel),                                                       //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_44czy3i router_001 (
		.sink_ready         (agilex_5_soc_lwhps2fpga_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_5_soc_lwhps2fpga_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (agilex_5_soc_lwhps2fpga_agent_read_cp_data),                               //   input,  width = 128,          .data
		.sink_startofpacket (agilex_5_soc_lwhps2fpga_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_5_soc_lwhps2fpga_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                      //  output,  width = 128,          .data
		.src_channel        (router_001_src_channel),                                                   //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_6qt3ktq router_002 (
		.sink_ready         (emif_bank3a_s0_axil_agent_write_rp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (emif_bank3a_s0_axil_agent_write_rp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (emif_bank3a_s0_axil_agent_write_rp_data),                          //   input,  width = 128,          .data
		.sink_startofpacket (emif_bank3a_s0_axil_agent_write_rp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_bank3a_s0_axil_agent_write_rp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                              //  output,  width = 128,          .data
		.src_channel        (router_002_src_channel),                                           //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_qnva33a router_003 (
		.sink_ready         (emif_bank3a_s0_axil_agent_read_rp_ready),                          //  output,    width = 1,      sink.ready
		.sink_valid         (emif_bank3a_s0_axil_agent_read_rp_valid),                          //   input,    width = 1,          .valid
		.sink_data          (emif_bank3a_s0_axil_agent_read_rp_data),                           //   input,  width = 128,          .data
		.sink_startofpacket (emif_bank3a_s0_axil_agent_read_rp_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_bank3a_s0_axil_agent_read_rp_endofpacket),                    //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                              //  output,  width = 128,          .data
		.src_channel        (router_003_src_channel),                                           //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_router_1921_vuqzmiq router_004 (
		.sink_ready         (video_sys_0_mm_video_bridge_s0_agent_rp_ready),                            //  output,    width = 1,      sink.ready
		.sink_valid         (video_sys_0_mm_video_bridge_s0_agent_rp_valid),                            //   input,    width = 1,          .valid
		.sink_data          (video_sys_0_mm_video_bridge_s0_agent_rp_data),                             //   input,  width = 128,          .data
		.sink_startofpacket (video_sys_0_mm_video_bridge_s0_agent_rp_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (video_sys_0_mm_video_bridge_s0_agent_rp_endofpacket),                      //   input,    width = 1,          .endofpacket
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                      //  output,  width = 128,          .data
		.src_channel        (router_004_src_channel),                                                   //  output,    width = 3,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_2i7u5ry #(
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (96),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (73),
		.OUT_BURSTWRAP_H           (88),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) emif_bank3a_s0_axil_wr_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       cr0.clk
		.reset                 (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                 //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_src_channel),                                              //   input,    width = 3,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                //  output,    width = 1,          .ready
		.source0_valid         (emif_bank3a_s0_axil_wr_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (emif_bank3a_s0_axil_wr_burst_adapter_source0_data),                //  output,  width = 128,          .data
		.source0_channel       (emif_bank3a_s0_axil_wr_burst_adapter_source0_channel),             //  output,    width = 3,          .channel
		.source0_startofpacket (emif_bank3a_s0_axil_wr_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_bank3a_s0_axil_wr_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_bank3a_s0_axil_wr_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_2i7u5ry #(
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (96),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (73),
		.OUT_BURSTWRAP_H           (88),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) emif_bank3a_s0_axil_rd_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       cr0.clk
		.reset                 (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                            //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                             //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                          //   input,    width = 3,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                            //  output,    width = 1,          .ready
		.source0_valid         (emif_bank3a_s0_axil_rd_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (emif_bank3a_s0_axil_rd_burst_adapter_source0_data),                //  output,  width = 128,          .data
		.source0_channel       (emif_bank3a_s0_axil_rd_burst_adapter_source0_channel),             //  output,    width = 3,          .channel
		.source0_startofpacket (emif_bank3a_s0_axil_rd_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_bank3a_s0_axil_rd_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_bank3a_s0_axil_rd_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_burst_adapter_1923_2i7u5ry #(
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (96),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (91),
		.PKT_BURST_SIZE_L          (89),
		.PKT_BURST_TYPE_H          (93),
		.PKT_BURST_TYPE_L          (92),
		.PKT_BURSTWRAP_H           (88),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (73),
		.OUT_BURSTWRAP_H           (88),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) video_sys_0_mm_video_bridge_s0_burst_adapter (
		.clk                   (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                  //   input,    width = 3,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_data),                //  output,  width = 128,          .data
		.source0_channel       (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_channel),             //  output,    width = 3,          .channel
		.source0_startofpacket (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (video_sys_0_mm_video_bridge_s0_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_jgl37ja cmd_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                       //   input,    width = 3,          .channel
		.sink_data          (router_src_data),                                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_src_startofpacket),                                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                      //  output,  width = 128,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                   //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                               //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                     //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                     //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                                      //  output,  width = 128,          .data
		.src1_channel       (cmd_demux_src1_channel),                                                   //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_jgl37ja cmd_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                   //   input,    width = 3,          .channel
		.sink_data          (router_001_src_data),                                                      //   input,  width = 128,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                  //  output,  width = 128,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                               //  output,    width = 3,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                                                  //  output,  width = 128,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                                               //  output,    width = 3,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_u23ciky cmd_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                 //  output,  width = 128,          .data
		.src_channel         (cmd_mux_src_channel),                                              //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                             //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                           //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                                              //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                        //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_u23ciky cmd_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                            //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                             //  output,  width = 128,          .data
		.src_channel         (cmd_mux_001_src_channel),                                          //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_001_src0_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_001_src0_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_001_src0_channel),                                       //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_001_src0_data),                                          //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_bkipwci cmd_mux_002 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                     //  output,  width = 128,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                   //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src1_data),                                                      //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                               //   input,    width = 3,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                                  //   input,  width = 128,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_xoz2pay rsp_demux (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                           //   input,    width = 3,          .channel
		.sink_data          (router_002_src_data),                                              //   input,  width = 128,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                              //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_xoz2pay rsp_demux_001 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (emif_bank3a_s0_axil_agent_reset_sink_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                           //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                                              //   input,  width = 128,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_demultiplexer_1921_jgl37ja rsp_demux_002 (
		.clk                (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                                   //   input,    width = 3,          .channel
		.sink_data          (router_004_src_data),                                                      //   input,  width = 128,          .data
		.sink_startofpacket (router_004_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                  //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                               //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                                                  //  output,  width = 128,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                               //  output,    width = 3,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_5d2i5jy rsp_mux (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                         //  output,  width = 128,          .data
		.src_channel         (rsp_mux_src_channel),                                                      //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                   //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                      //   input,  width = 128,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_002_src0_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_002_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_002_src0_channel),                                               //   input,    width = 3,          .channel
		.sink1_data          (rsp_demux_002_src0_data),                                                  //   input,  width = 128,          .data
		.sink1_startofpacket (rsp_demux_002_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src0_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	ghrd_hps_system_altera_merlin_multiplexer_1921_5d2i5jy rsp_mux_001 (
		.clk                 (agilex_5_soc_h2f_user1_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (agilex_5_soc_lwhps2fpga_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                     //  output,  width = 128,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                  //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_001_src0_ready),                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_001_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_001_src0_channel),                                               //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_001_src0_data),                                                  //   input,  width = 128,          .data
		.sink0_startofpacket (rsp_demux_001_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                                               //   input,    width = 3,          .channel
		.sink1_data          (rsp_demux_002_src1_data),                                                  //   input,  width = 128,          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

endmodule
